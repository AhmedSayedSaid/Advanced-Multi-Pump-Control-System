
NPC20_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001380  08014ef8  08014ef8  00024ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016278  08016278  00026278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016280  08016280  00026280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016284  08016284  00026284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000023c  24000000  08016288  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000451fc  24000240  080164c4  00030240  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2404543c  080164c4  0003543c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003026a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00052aa1  00000000  00000000  000302ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000093d0  00000000  00000000  00082d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00019cea  00000000  00000000  0008c11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002350  00000000  00000000  000a5e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002bc1  00000000  00000000  000a8158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043a5c  00000000  00000000  000aad19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004a9d2  00000000  00000000  000ee775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001962dc  00000000  00000000  00139147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00008300  00000000  00000000  002cf424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  002d7724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000240 	.word	0x24000240
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ee0 	.word	0x08014ee0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000244 	.word	0x24000244
 80002dc:	08014ee0 	.word	0x08014ee0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <CheckData_received>:
  * @retval the extracted data and id in case the coming data matched the format of crc.
  */



returned_ST_Data CheckData_received(unsigned char* Data) {
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a98:	2600      	movs	r6, #0
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	b0dd      	sub	sp, #372	; 0x174
 8000a9e:	4680      	mov	r8, r0
 8000aa0:	46b1      	mov	r9, r6
    char identifier[MAX_DATA_LENGTH];
    char DataLength[MAX_DATA_LENGTH];
    int checkLen;
    char firatChValue;
    char firatChIdentifier;
    short i = 0, j = 0, flag = 0, flag2 = 0;
 8000aa2:	4637      	mov	r7, r6
 8000aa4:	46b2      	mov	sl, r6
 8000aa6:	4631      	mov	r1, r6
 8000aa8:	4634      	mov	r4, r6
    while (Data[i] != '\n') {
 8000aaa:	5d2a      	ldrb	r2, [r5, r4]
 8000aac:	2a0a      	cmp	r2, #10
 8000aae:	d133      	bne.n	8000b18 <CheckData_received+0x84>
            }
            j = i + 1;
        }
        i++;
    }
    int LengthData = strlen(value) + strlen(identifier);
 8000ab0:	af03      	add	r7, sp, #12
 8000ab2:	ad15      	add	r5, sp, #84	; 0x54
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	f7ff fc73 	bl	80003a0 <strlen>
 8000aba:	4604      	mov	r4, r0
 8000abc:	4628      	mov	r0, r5
 8000abe:	f7ff fc6f 	bl	80003a0 <strlen>
 8000ac2:	4682      	mov	sl, r0
    checkLen = atoi(DataLength);
 8000ac4:	a827      	add	r0, sp, #156	; 0x9c
    int LengthData = strlen(value) + strlen(identifier);
 8000ac6:	4454      	add	r4, sl
    checkLen = atoi(DataLength);
 8000ac8:	f00f fb27 	bl	801011a <atoi>

    if (LengthData == checkLen) {
 8000acc:	4284      	cmp	r4, r0
 8000ace:	d16f      	bne.n	8000bb0 <CheckData_received+0x11c>
        if (value[0] == firatChValue && identifier[0] == firatChIdentifier) {
 8000ad0:	783b      	ldrb	r3, [r7, #0]
 8000ad2:	42b3      	cmp	r3, r6
 8000ad4:	d117      	bne.n	8000b06 <CheckData_received+0x72>
 8000ad6:	782b      	ldrb	r3, [r5, #0]
 8000ad8:	454b      	cmp	r3, r9
 8000ada:	d114      	bne.n	8000b06 <CheckData_received+0x72>
 8000adc:	2100      	movs	r1, #0
            for (i = 0; value[i] != '\0'; i++) {
 8000ade:	b20a      	sxth	r2, r1
 8000ae0:	3101      	adds	r1, #1
 8000ae2:	5cbb      	ldrb	r3, [r7, r2]
 8000ae4:	f502 72b8 	add.w	r2, r2, #368	; 0x170
 8000ae8:	446a      	add	r2, sp
                D.value[i] = value[i];
 8000aea:	f802 3c8c 	strb.w	r3, [r2, #-140]
            for (i = 0; value[i] != '\0'; i++) {
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1f5      	bne.n	8000ade <CheckData_received+0x4a>
            }
            D.value[i] = '\0';
            for (i = 0; identifier[i] != '\0'; i++) {
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	3301      	adds	r3, #1
 8000af6:	5ca9      	ldrb	r1, [r5, r2]
 8000af8:	f502 72b8 	add.w	r2, r2, #368	; 0x170
 8000afc:	446a      	add	r2, sp
                D.identifier[i] = identifier[i];
 8000afe:	f802 1c46 	strb.w	r1, [r2, #-70]
            for (i = 0; identifier[i] != '\0'; i++) {
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d1f5      	bne.n	8000af2 <CheckData_received+0x5e>
        D.value[1] = '\0';
        D.identifier[0] = '0';
        D.identifier[1] = '\0';
    }

    return D;
 8000b06:	228c      	movs	r2, #140	; 0x8c
 8000b08:	a939      	add	r1, sp, #228	; 0xe4
 8000b0a:	4640      	mov	r0, r8
 8000b0c:	f011 f9bd 	bl	8011e8a <memcpy>
}
 8000b10:	4640      	mov	r0, r8
 8000b12:	b05d      	add	sp, #372	; 0x174
 8000b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (Data[i] == '*' && Data[i + 1] == '?') {
 8000b18:	2a2a      	cmp	r2, #42	; 0x2a
 8000b1a:	d118      	bne.n	8000b4e <CheckData_received+0xba>
 8000b1c:	192a      	adds	r2, r5, r4
 8000b1e:	7852      	ldrb	r2, [r2, #1]
 8000b20:	2a3f      	cmp	r2, #63	; 0x3f
 8000b22:	d129      	bne.n	8000b78 <CheckData_received+0xe4>
            if (flag == 0) {
 8000b24:	f1ba 0f00 	cmp.w	sl, #0
 8000b28:	d114      	bne.n	8000b54 <CheckData_received+0xc0>
                strncpy(value, (const char *)(Data + j), i - j);
 8000b2a:	f10d 0b0c 	add.w	fp, sp, #12
 8000b2e:	1a62      	subs	r2, r4, r1
 8000b30:	4429      	add	r1, r5
 8000b32:	4658      	mov	r0, fp
 8000b34:	9201      	str	r2, [sp, #4]
 8000b36:	f011 f863 	bl	8011c00 <strncpy>
                value[i - j] = '\0';
 8000b3a:	9a01      	ldr	r2, [sp, #4]
 8000b3c:	f80b a002 	strb.w	sl, [fp, r2]
                flag++;
 8000b40:	f04f 0a01 	mov.w	sl, #1
            i++;
 8000b44:	b2a3      	uxth	r3, r4
 8000b46:	1c5c      	adds	r4, r3, #1
            j = i + 1;
 8000b48:	3302      	adds	r3, #2
            i++;
 8000b4a:	b224      	sxth	r4, r4
            j = i + 1;
 8000b4c:	b219      	sxth	r1, r3
        i++;
 8000b4e:	3401      	adds	r4, #1
 8000b50:	b224      	sxth	r4, r4
 8000b52:	e7aa      	b.n	8000aaa <CheckData_received+0x16>
            } else if (flag == 1) {
 8000b54:	f1ba 0f01 	cmp.w	sl, #1
 8000b58:	d1f4      	bne.n	8000b44 <CheckData_received+0xb0>
                strncpy(identifier, (const char *)(Data + j), i - j);
 8000b5a:	eba4 0a01 	sub.w	sl, r4, r1
 8000b5e:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
 8000b62:	4429      	add	r1, r5
 8000b64:	4652      	mov	r2, sl
 8000b66:	4658      	mov	r0, fp
 8000b68:	f011 f84a 	bl	8011c00 <strncpy>
                identifier[i - j] = '\0';
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f80b 300a 	strb.w	r3, [fp, sl]
                flag++;
 8000b72:	f04f 0a02 	mov.w	sl, #2
 8000b76:	e7e5      	b.n	8000b44 <CheckData_received+0xb0>
            if (flag2 == 0) {
 8000b78:	b97f      	cbnz	r7, 8000b9a <CheckData_received+0x106>
                strncpy(DataLength, (const char *)(Data + j), i - j);
 8000b7a:	eba4 0b01 	sub.w	fp, r4, r1
 8000b7e:	a827      	add	r0, sp, #156	; 0x9c
 8000b80:	4429      	add	r1, r5
 8000b82:	465a      	mov	r2, fp
 8000b84:	f011 f83c 	bl	8011c00 <strncpy>
                DataLength[i - j] = '\0';
 8000b88:	f50b 73b8 	add.w	r3, fp, #368	; 0x170
 8000b8c:	eb0d 0b03 	add.w	fp, sp, r3
 8000b90:	f80b 7cd4 	strb.w	r7, [fp, #-212]
                flag2++;
 8000b94:	2701      	movs	r7, #1
            j = i + 1;
 8000b96:	1c63      	adds	r3, r4, #1
 8000b98:	e7d8      	b.n	8000b4c <CheckData_received+0xb8>
            } else if (flag2 == 1) {
 8000b9a:	2f01      	cmp	r7, #1
 8000b9c:	d102      	bne.n	8000ba4 <CheckData_received+0x110>
                firatChValue = Data[j];
 8000b9e:	5c6e      	ldrb	r6, [r5, r1]
                flag2++;
 8000ba0:	2702      	movs	r7, #2
 8000ba2:	e7f8      	b.n	8000b96 <CheckData_received+0x102>
            } else if (flag2 == 2) {
 8000ba4:	2f02      	cmp	r7, #2
                firatChIdentifier = Data[j];
 8000ba6:	bf04      	itt	eq
 8000ba8:	f815 9001 	ldrbeq.w	r9, [r5, r1]
                flag2++;
 8000bac:	2703      	moveq	r7, #3
 8000bae:	e7f2      	b.n	8000b96 <CheckData_received+0x102>
        D.value[0] = '0';
 8000bb0:	2330      	movs	r3, #48	; 0x30
 8000bb2:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
        D.identifier[0] = '0';
 8000bb6:	f8ad 312a 	strh.w	r3, [sp, #298]	; 0x12a
 8000bba:	e7a4      	b.n	8000b06 <CheckData_received+0x72>

08000bbc <ReceiveData>:
  * to make it ready for new data
  *
  * @param  uartType: The type of UART to receive data from.
  * @retval The received data.
  */
returned_ST_Data ReceiveData() {
 8000bbc:	b510      	push	{r4, lr}
 8000bbe:	b0a4      	sub	sp, #144	; 0x90
 8000bc0:	4604      	mov	r4, r0
    for (i = 0; "AAAA"[i] != '\0'; i++) {
        Data.value[i] = "AAAA"[i];
    }
    Data.value[i] = '\0';

    Data = CheckData_received(getBuffer);
 8000bc2:	4907      	ldr	r1, [pc, #28]	; (8000be0 <ReceiveData+0x24>)
 8000bc4:	a801      	add	r0, sp, #4
 8000bc6:	f7ff ff65 	bl	8000a94 <CheckData_received>
    usart1HaveNewData = 0;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <ReceiveData+0x28>)
 8000bcc:	2200      	movs	r2, #0

    return Data;
 8000bce:	a901      	add	r1, sp, #4
 8000bd0:	4620      	mov	r0, r4
    usart1HaveNewData = 0;
 8000bd2:	701a      	strb	r2, [r3, #0]
    return Data;
 8000bd4:	228c      	movs	r2, #140	; 0x8c
 8000bd6:	f011 f958 	bl	8011e8a <memcpy>
}
 8000bda:	4620      	mov	r0, r4
 8000bdc:	b024      	add	sp, #144	; 0x90
 8000bde:	bd10      	pop	{r4, pc}
 8000be0:	240400ae 	.word	0x240400ae
 8000be4:	2404012e 	.word	0x2404012e

08000be8 <PrepareData>:
  * @param  identifier: The identifier to be sent.
  * @retval A pointer to a buffer containing the prepared data.
  */


char* PrepareData(char* identifier, char* value) {
 8000be8:	b570      	push	{r4, r5, r6, lr}
 8000bea:	4604      	mov	r4, r0
 8000bec:	b086      	sub	sp, #24
    static char DataSend[100];
    int DataLength = strlen(value) + strlen(identifier);
 8000bee:	4608      	mov	r0, r1
    char FirstChValue = value[0];
    char FirstChIdentifier = identifier[0];
    sprintf(DataSend, "%s*?%s*?%d*%c*%c*\n", value, identifier, DataLength, FirstChValue, FirstChIdentifier);
 8000bf0:	4e0b      	ldr	r6, [pc, #44]	; (8000c20 <PrepareData+0x38>)
    int DataLength = strlen(value) + strlen(identifier);
 8000bf2:	9105      	str	r1, [sp, #20]
 8000bf4:	f7ff fbd4 	bl	80003a0 <strlen>
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f7ff fbd0 	bl	80003a0 <strlen>
    sprintf(DataSend, "%s*?%s*?%d*%c*%c*\n", value, identifier, DataLength, FirstChValue, FirstChIdentifier);
 8000c00:	7823      	ldrb	r3, [r4, #0]
 8000c02:	9a05      	ldr	r2, [sp, #20]
    int DataLength = strlen(value) + strlen(identifier);
 8000c04:	4428      	add	r0, r5
    sprintf(DataSend, "%s*?%s*?%d*%c*%c*\n", value, identifier, DataLength, FirstChValue, FirstChIdentifier);
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	7813      	ldrb	r3, [r2, #0]
 8000c0a:	4906      	ldr	r1, [pc, #24]	; (8000c24 <PrepareData+0x3c>)
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	4623      	mov	r3, r4
 8000c10:	9000      	str	r0, [sp, #0]
 8000c12:	4630      	mov	r0, r6
 8000c14:	f010 fe92 	bl	801193c <siprintf>
   // printf("%s data string \n",DataSend);
    return DataSend;
}
 8000c18:	4630      	mov	r0, r6
 8000c1a:	b006      	add	sp, #24
 8000c1c:	bd70      	pop	{r4, r5, r6, pc}
 8000c1e:	bf00      	nop
 8000c20:	2400025c 	.word	0x2400025c
 8000c24:	08014f24 	.word	0x08014f24

08000c28 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8000c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000c2c:	2400      	movs	r4, #0
{
 8000c2e:	4606      	mov	r6, r0
 8000c30:	4d12      	ldr	r5, [pc, #72]	; (8000c7c <vTimerCallbackT35+0x54>)
	for(i = 0; i < numberHandlers; i++)
 8000c32:	4f13      	ldr	r7, [pc, #76]	; (8000c80 <vTimerCallbackT35+0x58>)
		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
			if(mHandlers[i]->uModbusType == MB_MASTER)
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8000c34:	46a0      	mov	r8, r4
	for(i = 0; i < numberHandlers; i++)
 8000c36:	783b      	ldrb	r3, [r7, #0]
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	dc02      	bgt.n	8000c42 <vTimerCallbackT35+0x1a>
		}

	}
}
 8000c3c:	b002      	add	sp, #8
 8000c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8000c42:	6828      	ldr	r0, [r5, #0]
 8000c44:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8000c48:	42b3      	cmp	r3, r6
 8000c4a:	d113      	bne.n	8000c74 <vTimerCallbackT35+0x4c>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8000c4c:	7803      	ldrb	r3, [r0, #0]
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d108      	bne.n	8000c64 <vTimerCallbackT35+0x3c>
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8cd 8000 	str.w	r8, [sp]
 8000c58:	2103      	movs	r1, #3
 8000c5a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f00e fe4e 	bl	800f900 <xTimerGenericCommand>
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8000c64:	6828      	ldr	r0, [r5, #0]
 8000c66:	2300      	movs	r3, #0
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8000c70:	f00e fc72 	bl	800f558 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000c74:	3401      	adds	r4, #1
 8000c76:	3504      	adds	r5, #4
 8000c78:	e7dd      	b.n	8000c36 <vTimerCallbackT35+0xe>
 8000c7a:	bf00      	nop
 8000c7c:	24000504 	.word	0x24000504
 8000c80:	2400050c 	.word	0x2400050c

08000c84 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	4605      	mov	r5, r0
 8000c88:	4e0b      	ldr	r6, [pc, #44]	; (8000cb8 <vTimerCallbackTimeout+0x34>)
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	4f0b      	ldr	r7, [pc, #44]	; (8000cbc <vTimerCallbackTimeout+0x38>)
 8000c8e:	783b      	ldrb	r3, [r7, #0]
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	dc00      	bgt.n	8000c96 <vTimerCallbackTimeout+0x12>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
		}

	}

}
 8000c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8000c96:	f856 0b04 	ldr.w	r0, [r6], #4
 8000c9a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8000c9e:	42ab      	cmp	r3, r5
 8000ca0:	d107      	bne.n	8000cb2 <vTimerCallbackTimeout+0x2e>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	f06f 0107 	mvn.w	r1, #7
 8000caa:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8000cae:	f00e fc53 	bl	800f558 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000cb2:	3401      	adds	r4, #1
 8000cb4:	e7eb      	b.n	8000c8e <vTimerCallbackTimeout+0xa>
 8000cb6:	bf00      	nop
 8000cb8:	24000504 	.word	0x24000504
 8000cbc:	2400050c 	.word	0x2400050c

08000cc0 <RingAdd>:
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8000cc0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8000cc4:	54c1      	strb	r1, [r0, r3]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ccc:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8000cd0:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 8000cd4:	2b80      	cmp	r3, #128	; 0x80
 8000cd6:	d10a      	bne.n	8000cee <RingAdd+0x2e>
		xRingBuffer->overflow = true;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000cde:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ce8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 8000cec:	4770      	bx	lr
		xRingBuffer->overflow = false;
 8000cee:	2200      	movs	r2, #0
		xRingBuffer->u8available++;
 8000cf0:	3301      	adds	r3, #1
		xRingBuffer->overflow = false;
 8000cf2:	f880 2083 	strb.w	r2, [r0, #131]	; 0x83
		xRingBuffer->u8available++;
 8000cf6:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8000cfa:	4770      	bx	lr

08000cfc <RingGetNBytes>:
{
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	b510      	push	{r4, lr}
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8000d00:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
 8000d04:	b310      	cbz	r0, 8000d4c <RingGetNBytes+0x50>
 8000d06:	1e50      	subs	r0, r2, #1
 8000d08:	0600      	lsls	r0, r0, #24
 8000d0a:	d420      	bmi.n	8000d4e <RingGetNBytes+0x52>
 8000d0c:	3901      	subs	r1, #1
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000d0e:	2000      	movs	r0, #0
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8000d10:	f893 4080 	ldrb.w	r4, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000d14:	3001      	adds	r0, #1
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8000d16:	5d1c      	ldrb	r4, [r3, r4]
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000d18:	b2c0      	uxtb	r0, r0
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8000d1a:	f801 4f01 	strb.w	r4, [r1, #1]!
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000d1e:	4282      	cmp	r2, r0
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000d20:	f893 4080 	ldrb.w	r4, [r3, #128]	; 0x80
 8000d24:	f104 0401 	add.w	r4, r4, #1
 8000d28:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8000d2c:	f883 4080 	strb.w	r4, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000d30:	d003      	beq.n	8000d3a <RingGetNBytes+0x3e>
 8000d32:	f893 4082 	ldrb.w	r4, [r3, #130]	; 0x82
 8000d36:	4284      	cmp	r4, r0
 8000d38:	d8ea      	bhi.n	8000d10 <RingGetNBytes+0x14>
	xRingBuffer->overflow = false;
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
xRingBuffer->u8start = 0;
 8000d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8000d44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8000d48:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8000d4c:	bd10      	pop	{r4, pc}
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8000d4e:	2000      	movs	r0, #0
 8000d50:	e7fc      	b.n	8000d4c <RingGetNBytes+0x50>

08000d52 <RingGetAllBytes>:
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8000d52:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 8000d56:	f7ff bfd1 	b.w	8000cfc <RingGetNBytes>

08000d5a <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8000d5a:	b538      	push	{r3, r4, r5, lr}

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8000d5c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
{
 8000d60:	4604      	mov	r4, r0
    if(modH->xTypeHW == USART_HW)
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d102      	bne.n	8000d6c <getRxBuffer+0x12>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8000d66:	6840      	ldr	r0, [r0, #4]
 8000d68:	f00b fce4 	bl	800c734 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8000d6c:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 8000d70:	b1ab      	cbz	r3, 8000d9e <getRxBuffer+0x44>
xRingBuffer->u8start = 0;
 8000d72:	2300      	movs	r3, #0
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
       	i16result =  ERR_BUFF_OVERFLOW;
 8000d74:	f06f 0502 	mvn.w	r5, #2
xRingBuffer->u8start = 0;
 8000d78:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
xRingBuffer->u8end = 0;
 8000d7c:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
xRingBuffer->u8available = 0;
 8000d80:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
xRingBuffer->overflow = false;
 8000d84:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
		modH->u16InCnt++;
		i16result = modH->u8BufferSize;
	}

	if(modH->xTypeHW == USART_HW)
 8000d88:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
 8000d8c:	2a01      	cmp	r2, #1
 8000d8e:	d104      	bne.n	8000d9a <getRxBuffer+0x40>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8000d90:	f104 01a6 	add.w	r1, r4, #166	; 0xa6
 8000d94:	6860      	ldr	r0, [r4, #4]
 8000d96:	f00c fdbb 	bl	800d910 <HAL_UART_Receive_IT>
	}

    return i16result;
}
 8000d9a:	4628      	mov	r0, r5
 8000d9c:	bd38      	pop	{r3, r4, r5, pc}
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8000d9e:	f104 0113 	add.w	r1, r4, #19
 8000da2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8000da6:	f7ff ffd4 	bl	8000d52 <RingGetAllBytes>
		modH->u16InCnt++;
 8000daa:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8000dae:	b205      	sxth	r5, r0
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8000db0:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
		modH->u16InCnt++;
 8000db4:	3301      	adds	r3, #1
 8000db6:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8000dba:	e7e5      	b.n	8000d88 <getRxBuffer+0x2e>

08000dbc <ModbusInit>:
{
 8000dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (numberHandlers < MAX_M_HANDLERS)
 8000dbe:	4e2e      	ldr	r6, [pc, #184]	; (8000e78 <ModbusInit+0xbc>)
{
 8000dc0:	4604      	mov	r4, r0
  if (numberHandlers < MAX_M_HANDLERS)
 8000dc2:	7833      	ldrb	r3, [r6, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d856      	bhi.n	8000e76 <ModbusInit+0xba>
	  if(modH->uModbusType == MB_SLAVE)
 8000dc8:	7803      	ldrb	r3, [r0, #0]
xRingBuffer->u8start = 0;
 8000dca:	2500      	movs	r5, #0
	  if(modH->uModbusType == MB_SLAVE)
 8000dcc:	2b03      	cmp	r3, #3
xRingBuffer->u8start = 0;
 8000dce:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
xRingBuffer->u8end = 0;
 8000dd2:	f880 513d 	strb.w	r5, [r0, #317]	; 0x13d
xRingBuffer->u8available = 0;
 8000dd6:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
xRingBuffer->overflow = false;
 8000dda:	f880 513f 	strb.w	r5, [r0, #319]	; 0x13f
	  if(modH->uModbusType == MB_SLAVE)
 8000dde:	d10a      	bne.n	8000df6 <ModbusInit+0x3a>
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8000de0:	4601      	mov	r1, r0
 8000de2:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <ModbusInit+0xc0>)
 8000de4:	4826      	ldr	r0, [pc, #152]	; (8000e80 <ModbusInit+0xc4>)
 8000de6:	f00d f877 	bl	800ded8 <osThreadNew>
 8000dea:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
	  if  (modH->myTaskModbusAHandle == NULL)
 8000dee:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8000df2:	bb13      	cbnz	r3, 8000e3a <ModbusInit+0x7e>
		  while(1); //Error creating Modbus task, check heap and stack size
 8000df4:	e7fe      	b.n	8000df4 <ModbusInit+0x38>
	  else if (modH->uModbusType == MB_MASTER)
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d11b      	bne.n	8000e32 <ModbusInit+0x76>
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <ModbusInit+0xc8>)
 8000dfe:	4822      	ldr	r0, [pc, #136]	; (8000e88 <ModbusInit+0xcc>)
 8000e00:	f00d f86a 	bl	800ded8 <osThreadNew>
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <ModbusInit+0xd0>)
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8000e06:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000e0a:	462a      	mov	r2, r5
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
 8000e12:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8000e16:	481e      	ldr	r0, [pc, #120]	; (8000e90 <ModbusInit+0xd4>)
 8000e18:	f00e fd58 	bl	800f8cc <xTimerCreate>
 8000e1c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		  if(modH->xTimerTimeout == NULL)
 8000e20:	b900      	cbnz	r0, 8000e24 <ModbusInit+0x68>
			  while(1); //error creating timer, check heap and stack size
 8000e22:	e7fe      	b.n	8000e22 <ModbusInit+0x66>
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <ModbusInit+0xd8>)
 8000e26:	2110      	movs	r1, #16
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f00d f8f4 	bl	800e016 <osMessageQueueNew>
		  if(modH->QueueTelegramHandle == NULL)
 8000e2e:	b908      	cbnz	r0, 8000e34 <ModbusInit+0x78>
			  while(1); //error creating queue for telegrams, check heap and stack size
 8000e30:	e7fe      	b.n	8000e30 <ModbusInit+0x74>
		  while(1); //Error Modbus type not supported choose a valid Type
 8000e32:	e7fe      	b.n	8000e32 <ModbusInit+0x76>
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8000e34:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8000e38:	e7d9      	b.n	8000dee <ModbusInit+0x32>
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <ModbusInit+0xdc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4816      	ldr	r0, [pc, #88]	; (8000e9c <ModbusInit+0xe0>)
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8000e48:	f00e fd40 	bl	800f8cc <xTimerCreate>
 8000e4c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	  if (modH->xTimerT35 == NULL)
 8000e50:	b900      	cbnz	r0, 8000e54 <ModbusInit+0x98>
		  while(1); //Error creating the timer, check heap and stack size
 8000e52:	e7fe      	b.n	8000e52 <ModbusInit+0x96>
	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8000e54:	2101      	movs	r1, #1
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <ModbusInit+0xe4>)
 8000e58:	4608      	mov	r0, r1
 8000e5a:	f00d f892 	bl	800df82 <osSemaphoreNew>
 8000e5e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	  if(modH->ModBusSphrHandle == NULL)
 8000e62:	b900      	cbnz	r0, 8000e66 <ModbusInit+0xaa>
		  while(1); //Error creating the semaphore, check heap and stack size
 8000e64:	e7fe      	b.n	8000e64 <ModbusInit+0xa8>
	  mHandlers[numberHandlers] = modH;
 8000e66:	7833      	ldrb	r3, [r6, #0]
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <ModbusInit+0xe8>)
 8000e6a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	  numberHandlers++;
 8000e6e:	3301      	adds	r3, #1
 8000e70:	7033      	strb	r3, [r6, #0]
}
 8000e72:	b002      	add	sp, #8
 8000e74:	bd70      	pop	{r4, r5, r6, pc}
	  while(1); //error no more Modbus handlers supported
 8000e76:	e7fe      	b.n	8000e76 <ModbusInit+0xba>
 8000e78:	2400050c 	.word	0x2400050c
 8000e7c:	08014fc0 	.word	0x08014fc0
 8000e80:	080010c1 	.word	0x080010c1
 8000e84:	08014fe4 	.word	0x08014fe4
 8000e88:	08001589 	.word	0x08001589
 8000e8c:	08000c85 	.word	0x08000c85
 8000e90:	08014f37 	.word	0x08014f37
 8000e94:	08014fa0 	.word	0x08014fa0
 8000e98:	08000c29 	.word	0x08000c29
 8000e9c:	08014f45 	.word	0x08014f45
 8000ea0:	08014f90 	.word	0x08014f90
 8000ea4:	24000504 	.word	0x24000504

08000ea8 <ModbusStart>:
{
 8000ea8:	b510      	push	{r4, lr}
	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8000eaa:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
{
 8000eae:	4604      	mov	r4, r0
	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d005      	beq.n	8000ec0 <ModbusStart+0x18>
 8000eb4:	1e9a      	subs	r2, r3, #2
 8000eb6:	2a01      	cmp	r2, #1
 8000eb8:	d96e      	bls.n	8000f98 <ModbusStart+0xf0>
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d000      	beq.n	8000ec0 <ModbusStart+0x18>
		while(1); //ERROR select the type of hardware
 8000ebe:	e7fe      	b.n	8000ebe <ModbusStart+0x16>
	      if (modH->EN_Port != NULL )
 8000ec0:	68e0      	ldr	r0, [r4, #12]
 8000ec2:	b118      	cbz	r0, 8000ecc <ModbusStart+0x24>
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	8a21      	ldrh	r1, [r4, #16]
 8000ec8:	f007 fff2 	bl	8008eb0 <HAL_GPIO_WritePin>
          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8000ecc:	7823      	ldrb	r3, [r4, #0]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d103      	bne.n	8000eda <ModbusStart+0x32>
 8000ed2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000ed6:	b903      	cbnz	r3, 8000eda <ModbusStart+0x32>
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8000ed8:	e7fe      	b.n	8000ed8 <ModbusStart+0x30>
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8000eda:	6860      	ldr	r0, [r4, #4]
 8000edc:	f00c f947 	bl	800d16e <HAL_UART_GetState>
 8000ee0:	2820      	cmp	r0, #32
 8000ee2:	d1fa      	bne.n	8000eda <ModbusStart+0x32>
          if( modH->xTypeHW == USART_HW_DMA )
 8000ee4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 8000ee8:	6860      	ldr	r0, [r4, #4]
          if( modH->xTypeHW == USART_HW_DMA )
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d149      	bne.n	8000f82 <ModbusStart+0xda>
        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 8000ef4:	f00c fe3d 	bl	800db72 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000ef8:	b100      	cbz	r0, 8000efc <ModbusStart+0x54>
        	         while(1)
 8000efa:	e7fe      	b.n	8000efa <ModbusStart+0x52>
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	4a2b      	ldr	r2, [pc, #172]	; (8000fac <ModbusStart+0x104>)
 8000f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d02d      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f0a:	3218      	adds	r2, #24
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d02a      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f10:	3218      	adds	r2, #24
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d027      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f16:	3218      	adds	r2, #24
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d024      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f1c:	3218      	adds	r2, #24
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d021      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f22:	3218      	adds	r2, #24
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d01e      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f28:	3218      	adds	r2, #24
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01b      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f2e:	3218      	adds	r2, #24
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d018      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f34:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d014      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f3c:	3218      	adds	r2, #24
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d011      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f42:	3218      	adds	r2, #24
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d00e      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f48:	3218      	adds	r2, #24
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00b      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f4e:	3218      	adds	r2, #24
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d008      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f54:	3218      	adds	r2, #24
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d005      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f5a:	3218      	adds	r2, #24
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d002      	beq.n	8000f66 <ModbusStart+0xbe>
 8000f60:	3218      	adds	r2, #24
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d109      	bne.n	8000f7a <ModbusStart+0xd2>
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	f022 0208 	bic.w	r2, r2, #8
 8000f6c:	601a      	str	r2, [r3, #0]
          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8000f6e:	7a22      	ldrb	r2, [r4, #8]
 8000f70:	7823      	ldrb	r3, [r4, #0]
 8000f72:	b172      	cbz	r2, 8000f92 <ModbusStart+0xea>
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d10f      	bne.n	8000f98 <ModbusStart+0xf0>
        	  while(1)
 8000f78:	e7fe      	b.n	8000f78 <ModbusStart+0xd0>
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	f022 0204 	bic.w	r2, r2, #4
 8000f80:	e7f4      	b.n	8000f6c <ModbusStart+0xc4>
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f104 01a6 	add.w	r1, r4, #166	; 0xa6
 8000f88:	f00c fcc2 	bl	800d910 <HAL_UART_Receive_IT>
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d0ee      	beq.n	8000f6e <ModbusStart+0xc6>
        	           while(1)
 8000f90:	e7fe      	b.n	8000f90 <ModbusStart+0xe8>
          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d100      	bne.n	8000f98 <ModbusStart+0xf0>
             	  while(1)
 8000f96:	e7fe      	b.n	8000f96 <ModbusStart+0xee>
    modH->u8lastRec = modH->u8BufferSize = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 8000f9e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8000fa2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8000fa6:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
}
 8000faa:	bd10      	pop	{r4, pc}
 8000fac:	40020010 	.word	0x40020010

08000fb0 <ModbusQuery>:
{
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	b538      	push	{r3, r4, r5, lr}
 8000fb4:	ad05      	add	r5, sp, #20
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
	if (modH->uModbusType == MB_MASTER)
 8000fbc:	7803      	ldrb	r3, [r0, #0]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d10d      	bne.n	8000fde <ModbusQuery+0x2e>
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8000fc2:	f00c ffd0 	bl	800df66 <osThreadGetId>
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8000fc6:	2300      	movs	r3, #0
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8000fc8:	9008      	str	r0, [sp, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8000fca:	4629      	mov	r1, r5
 8000fcc:	461a      	mov	r2, r3
 8000fce:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8000fd2:	f00d fa35 	bl	800e440 <xQueueGenericSend>
}
 8000fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fda:	b004      	add	sp, #16
 8000fdc:	4770      	bx	lr
		while(1);// error a slave cannot send queries as a master
 8000fde:	e7fe      	b.n	8000fde <ModbusQuery+0x2e>

08000fe0 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8000fe0:	b530      	push	{r4, r5, lr}
 8000fe2:	4401      	add	r1, r0
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8000fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
        for (unsigned char j = 1; j <= 8; j++)
        {
            flag = temp & 0x0001;
            temp >>=1;
            if (flag)
                temp ^= 0xA001;
 8000fe8:	f24a 0401 	movw	r4, #40961	; 0xa001
    for (unsigned char i = 0; i < u8length; i++)
 8000fec:	4288      	cmp	r0, r1
 8000fee:	d104      	bne.n	8000ffa <calcCRC+0x1a>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
    temp = (temp << 8) | temp2;
 8000ff0:	0218      	lsls	r0, r3, #8
 8000ff2:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
    temp &= 0xFFFF;
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;

}
 8000ff6:	b280      	uxth	r0, r0
 8000ff8:	bd30      	pop	{r4, r5, pc}
        temp = temp ^ Buffer[i];
 8000ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ffe:	4053      	eors	r3, r2
 8001000:	2208      	movs	r2, #8
            flag = temp & 0x0001;
 8001002:	f003 0501 	and.w	r5, r3, #1
            temp >>=1;
 8001006:	085b      	lsrs	r3, r3, #1
            if (flag)
 8001008:	b105      	cbz	r5, 800100c <calcCRC+0x2c>
                temp ^= 0xA001;
 800100a:	4063      	eors	r3, r4
        for (unsigned char j = 1; j <= 8; j++)
 800100c:	3a01      	subs	r2, #1
 800100e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8001012:	d1f6      	bne.n	8001002 <calcCRC+0x22>
 8001014:	e7ea      	b.n	8000fec <calcCRC+0xc>

08001016 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8001016:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8001018:	f100 0613 	add.w	r6, r0, #19
 800101c:	f890 5093 	ldrb.w	r5, [r0, #147]	; 0x93
{
 8001020:	4604      	mov	r4, r0
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8001022:	4629      	mov	r1, r5
 8001024:	4630      	mov	r0, r6
 8001026:	f7ff ffdb 	bl	8000fe0 <calcCRC>
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800102a:	1963      	adds	r3, r4, r5
 800102c:	0a02      	lsrs	r2, r0, #8
 800102e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001030:	1c6b      	adds	r3, r5, #1
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
    modH->u8BufferSize++;
 8001032:	3502      	adds	r5, #2
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8001034:	fa54 f383 	uxtab	r3, r4, r3
 8001038:	74d8      	strb	r0, [r3, #19]
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 800103a:	68e3      	ldr	r3, [r4, #12]
    modH->u8BufferSize++;
 800103c:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    	if (modH->EN_Port != NULL)
 8001040:	b13b      	cbz	r3, 8001052 <sendTxBuffer+0x3c>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8001042:	6860      	ldr	r0, [r4, #4]
 8001044:	f00c f847 	bl	800d0d6 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	8a21      	ldrh	r1, [r4, #16]
 800104c:	68e0      	ldr	r0, [r4, #12]
 800104e:	f007 ff2f 	bl	8008eb0 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 8001052:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8001056:	4631      	mov	r1, r6
 8001058:	6860      	ldr	r0, [r4, #4]
    	if(modH->xTypeHW == USART_HW)
 800105a:	2b01      	cmp	r3, #1
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800105c:	f894 2093 	ldrb.w	r2, [r4, #147]	; 0x93
    	if(modH->xTypeHW == USART_HW)
 8001060:	d12b      	bne.n	80010ba <sendTxBuffer+0xa4>
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8001062:	f00b fa27 	bl	800c4b4 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8001066:	21fa      	movs	r1, #250	; 0xfa
 8001068:	2001      	movs	r0, #1
 800106a:	f00e fa3f 	bl	800f4ec <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800106e:	6863      	ldr	r3, [r4, #4]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	69d3      	ldr	r3, [r2, #28]
 8001074:	065b      	lsls	r3, r3, #25
 8001076:	d5fc      	bpl.n	8001072 <sendTxBuffer+0x5c>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8001078:	68e0      	ldr	r0, [r4, #12]
 800107a:	b130      	cbz	r0, 800108a <sendTxBuffer+0x74>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	8a21      	ldrh	r1, [r4, #16]
 8001080:	f007 ff16 	bl	8008eb0 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8001084:	6860      	ldr	r0, [r4, #4]
 8001086:	f00c f84c 	bl	800d122 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800108a:	7823      	ldrb	r3, [r4, #0]
 800108c:	2b04      	cmp	r3, #4
 800108e:	d10a      	bne.n	80010a6 <sendTxBuffer+0x90>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8001090:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8001094:	f00d fee0 	bl	800ee58 <xTaskGetTickCount>
 8001098:	2300      	movs	r3, #0
 800109a:	4602      	mov	r2, r0
 800109c:	2102      	movs	r1, #2
 800109e:	4628      	mov	r0, r5
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	f00e fc2d 	bl	800f900 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 80010ac:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 80010b0:	3301      	adds	r3, #1
 80010b2:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e


}
 80010b6:	b002      	add	sp, #8
 80010b8:	bd70      	pop	{r4, r5, r6, pc}
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 80010ba:	f00b fa51 	bl	800c560 <HAL_UART_Transmit_DMA>
 80010be:	e7d2      	b.n	8001066 <sendTxBuffer+0x50>

080010c0 <StartTaskModbusSlave>:
{
 80010c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c4:	4604      	mov	r4, r0
 80010c6:	b093      	sub	sp, #76	; 0x4c
	modH->i8lastError = 0;
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	74a3      	strb	r3, [r4, #18]
   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 80010ce:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d001      	beq.n	80010da <StartTaskModbusSlave+0x1a>
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d10f      	bne.n	80010fa <StartTaskModbusSlave+0x3a>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 80010da:	f04f 31ff 	mov.w	r1, #4294967295
 80010de:	2001      	movs	r0, #1
 80010e0:	f00e fa04 	bl	800f4ec <ulTaskNotifyTake>
	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 80010e4:	4620      	mov	r0, r4
 80010e6:	f7ff fe38 	bl	8000d5a <getRxBuffer>
 80010ea:	3003      	adds	r0, #3
 80010ec:	d105      	bne.n	80010fa <StartTaskModbusSlave+0x3a>
      modH->u16errCnt++;
 80010ee:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80010f2:	3301      	adds	r3, #1
 80010f4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	  continue;
 80010f8:	e7e6      	b.n	80010c8 <StartTaskModbusSlave+0x8>
   if (modH->u8BufferSize < 7)
 80010fa:	f894 9093 	ldrb.w	r9, [r4, #147]	; 0x93
 80010fe:	f1b9 0f06 	cmp.w	r9, #6
 8001102:	d9f4      	bls.n	80010ee <StartTaskModbusSlave+0x2e>
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 8001104:	f894 8008 	ldrb.w	r8, [r4, #8]
 8001108:	7ce3      	ldrb	r3, [r4, #19]
 800110a:	4543      	cmp	r3, r8
 800110c:	d1dc      	bne.n	80010c8 <StartTaskModbusSlave+0x8>
	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800110e:	f1a9 0102 	sub.w	r1, r9, #2
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001112:	44a1      	add	r9, r4
	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8001114:	f104 0013 	add.w	r0, r4, #19
 8001118:	b2c9      	uxtb	r1, r1
 800111a:	f7ff ff61 	bl	8000fe0 <calcCRC>
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800111e:	f899 2011 	ldrb.w	r2, [r9, #17]
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001122:	f899 3012 	ldrb.w	r3, [r9, #18]
	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8001126:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800112a:	4283      	cmp	r3, r0
 800112c:	d012      	beq.n	8001154 <StartTaskModbusSlave+0x94>
	       		modH->u16errCnt ++;
 800112e:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8001132:	3301      	adds	r3, #1
 8001134:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8001138:	23fc      	movs	r3, #252	; 0xfc
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800113a:	7d22      	ldrb	r2, [r4, #20]
			sendTxBuffer(modH);
 800113c:	4620      	mov	r0, r4
    modH->u8Buffer[ 2 ]       = u8exception;
 800113e:	7563      	strb	r3, [r4, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8001140:	2303      	movs	r3, #3
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8001142:	3a80      	subs	r2, #128	; 0x80
    modH->u8Buffer[ ID ]      = modH->u8id;
 8001144:	f884 8013 	strb.w	r8, [r4, #19]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8001148:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800114c:	7522      	strb	r2, [r4, #20]
			sendTxBuffer(modH);
 800114e:	f7ff ff62 	bl	8001016 <sendTxBuffer>
		continue;
 8001152:	e7b9      	b.n	80010c8 <StartTaskModbusSlave+0x8>
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8001154:	7d23      	ldrb	r3, [r4, #20]
 8001156:	2208      	movs	r2, #8
 8001158:	49b8      	ldr	r1, [pc, #736]	; (800143c <StartTaskModbusSlave+0x37c>)
 800115a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800115e:	4298      	cmp	r0, r3
 8001160:	f000 81eb 	beq.w	800153a <StartTaskModbusSlave+0x47a>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001164:	3a01      	subs	r2, #1
 8001166:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800116a:	d1f6      	bne.n	800115a <StartTaskModbusSlave+0x9a>
	    	modH->u16errCnt ++;
 800116c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8001170:	3301      	adds	r3, #1
 8001172:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8001176:	2301      	movs	r3, #1
 8001178:	e7df      	b.n	800113a <StartTaskModbusSlave+0x7a>
	W.u8[0] = L;
 800117a:	7da2      	ldrb	r2, [r4, #22]
 800117c:	990e      	ldr	r1, [sp, #56]	; 0x38
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800117e:	7d63      	ldrb	r3, [r4, #21]
	W.u8[0] = L;
 8001180:	f362 0107 	bfi	r1, r2, #0, #8
 8001184:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001186:	9e10      	ldr	r6, [sp, #64]	; 0x40
	W.u8[1] = H;
 8001188:	460a      	mov	r2, r1
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800118a:	7e21      	ldrb	r1, [r4, #24]
	W.u8[1] = H;
 800118c:	f363 220f 	bfi	r2, r3, #8, #8
	W.u8[0] = L;
 8001190:	f361 0007 	bfi	r0, r1, #0, #8
 8001194:	f361 0607 	bfi	r6, r1, #0, #8
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001198:	f3c2 130b 	ubfx	r3, r2, #4, #12
	W.u8[1] = H;
 800119c:	920e      	str	r2, [sp, #56]	; 0x38
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800119e:	7de2      	ldrb	r2, [r4, #23]
	W.u8[1] = H;
 80011a0:	f362 200f 	bfi	r0, r2, #8, #8
 80011a4:	f362 260f 	bfi	r6, r2, #8, #8
 80011a8:	900f      	str	r0, [sp, #60]	; 0x3c
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 80011aa:	f3c0 100b 	ubfx	r0, r0, #4, #12
	W.u8[1] = H;
 80011ae:	9610      	str	r6, [sp, #64]	; 0x40
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 80011b0:	0736      	lsls	r6, r6, #28
 80011b2:	bf18      	it	ne
 80011b4:	3001      	addne	r0, #1
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 80011b6:	4403      	add	r3, r0
 80011b8:	f8b4 00a4 	ldrh.w	r0, [r4, #164]	; 0xa4
 80011bc:	4283      	cmp	r3, r0
 80011be:	dd01      	ble.n	80011c4 <StartTaskModbusSlave+0x104>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e7ba      	b.n	800113a <StartTaskModbusSlave+0x7a>
	W.u8[0] = L;
 80011c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80011c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80011c8:	f361 0007 	bfi	r0, r1, #0, #8
 80011cc:	f361 0307 	bfi	r3, r1, #0, #8
	W.u8[1] = H;
 80011d0:	4601      	mov	r1, r0
 80011d2:	f362 230f 	bfi	r3, r2, #8, #8
 80011d6:	f362 210f 	bfi	r1, r2, #8, #8
 80011da:	930c      	str	r3, [sp, #48]	; 0x30
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 80011dc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 80011e0:	460a      	mov	r2, r1
	W.u8[1] = H;
 80011e2:	910d      	str	r1, [sp, #52]	; 0x34
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 80011e4:	0752      	lsls	r2, r2, #29
 80011e6:	bf18      	it	ne
 80011e8:	3301      	addne	r3, #1
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 80011ea:	3305      	adds	r3, #5
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f2:	d919      	bls.n	8001228 <StartTaskModbusSlave+0x168>
 80011f4:	2303      	movs	r3, #3
 80011f6:	e7a0      	b.n	800113a <StartTaskModbusSlave+0x7a>
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 80011f8:	7da1      	ldrb	r1, [r4, #22]
	W.u8[0] = L;
 80011fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80011fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011fe:	f361 0007 	bfi	r0, r1, #0, #8
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001202:	7d62      	ldrb	r2, [r4, #21]
	W.u8[0] = L;
 8001204:	f361 0307 	bfi	r3, r1, #0, #8
	W.u8[1] = H;
 8001208:	4601      	mov	r1, r0
 800120a:	f362 230f 	bfi	r3, r2, #8, #8
 800120e:	f362 210f 	bfi	r1, r2, #8, #8
 8001212:	930a      	str	r3, [sp, #40]	; 0x28
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001214:	f3c3 130b 	ubfx	r3, r3, #4, #12
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8001218:	070e      	lsls	r6, r1, #28
	W.u8[1] = H;
 800121a:	910b      	str	r1, [sp, #44]	; 0x2c
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800121c:	d000      	beq.n	8001220 <StartTaskModbusSlave+0x160>
 800121e:	3301      	adds	r3, #1
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8001220:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
 8001224:	429a      	cmp	r2, r3
 8001226:	d3cb      	bcc.n	80011c0 <StartTaskModbusSlave+0x100>
	 modH->i8lastError = 0;
 8001228:	f04f 0300 	mov.w	r3, #0
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	 modH->i8lastError = 0;
 8001234:	74a3      	strb	r3, [r4, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8001236:	f00d fab7 	bl	800e7a8 <xQueueSemaphoreTake>
	 switch(modH->u8Buffer[ FUNC ] )
 800123a:	7d23      	ldrb	r3, [r4, #20]
 800123c:	3b01      	subs	r3, #1
 800123e:	2b0f      	cmp	r3, #15
 8001240:	d877      	bhi.n	8001332 <StartTaskModbusSlave+0x272>
 8001242:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001246:	0039      	.short	0x0039
 8001248:	00a20039 	.word	0x00a20039
 800124c:	00d400a2 	.word	0x00d400a2
 8001250:	007600fd 	.word	0x007600fd
 8001254:	00760076 	.word	0x00760076
 8001258:	00760076 	.word	0x00760076
 800125c:	00760076 	.word	0x00760076
 8001260:	01160076 	.word	0x01160076
 8001264:	0156      	.short	0x0156
	W.u8[0] = L;
 8001266:	7da2      	ldrb	r2, [r4, #22]
 8001268:	9909      	ldr	r1, [sp, #36]	; 0x24
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800126a:	7d63      	ldrb	r3, [r4, #21]
	W.u8[0] = L;
 800126c:	f362 0107 	bfi	r1, r2, #0, #8
	W.u8[1] = H;
 8001270:	460a      	mov	r2, r1
 8001272:	f363 220f 	bfi	r2, r3, #8, #8
 8001276:	9209      	str	r2, [sp, #36]	; 0x24
	return W.u16[0];
 8001278:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800127c:	e7d0      	b.n	8001220 <StartTaskModbusSlave+0x160>
	W.u8[0] = L;
 800127e:	7da2      	ldrb	r2, [r4, #22]
 8001280:	9907      	ldr	r1, [sp, #28]
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001282:	7d63      	ldrb	r3, [r4, #21]
	W.u8[0] = L;
 8001284:	f362 0107 	bfi	r1, r2, #0, #8
	W.u8[1] = H;
 8001288:	460a      	mov	r2, r1
	W.u8[0] = L;
 800128a:	9908      	ldr	r1, [sp, #32]
	W.u8[1] = H;
 800128c:	f363 220f 	bfi	r2, r3, #8, #8
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8001290:	7de3      	ldrb	r3, [r4, #23]
	W.u8[1] = H;
 8001292:	9207      	str	r2, [sp, #28]
	W.u8[0] = L;
 8001294:	7e22      	ldrb	r2, [r4, #24]
 8001296:	f362 0107 	bfi	r1, r2, #0, #8
	W.u8[1] = H;
 800129a:	460a      	mov	r2, r1
 800129c:	f363 220f 	bfi	r2, r3, #8, #8
 80012a0:	9208      	str	r2, [sp, #32]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 80012a2:	9a07      	ldr	r2, [sp, #28]
	return W.u16[0];
 80012a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 80012a8:	fa13 f182 	uxtah	r1, r3, r2
 80012ac:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
 80012b0:	4291      	cmp	r1, r2
 80012b2:	dc85      	bgt.n	80011c0 <StartTaskModbusSlave+0x100>
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	e798      	b.n	80011ea <StartTaskModbusSlave+0x12a>
	W.u8[0] = L;
 80012b8:	7da2      	ldrb	r2, [r4, #22]
 80012ba:	9906      	ldr	r1, [sp, #24]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80012bc:	7d63      	ldrb	r3, [r4, #21]
	W.u8[0] = L;
 80012be:	f362 0107 	bfi	r1, r2, #0, #8
	W.u8[1] = H;
 80012c2:	460a      	mov	r2, r1
	W.u8[0] = L;
 80012c4:	7e21      	ldrb	r1, [r4, #24]
	W.u8[1] = H;
 80012c6:	f363 220f 	bfi	r2, r3, #8, #8
	W.u8[0] = L;
 80012ca:	f361 0507 	bfi	r5, r1, #0, #8
	W.u8[1] = H;
 80012ce:	9206      	str	r2, [sp, #24]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80012d0:	7de2      	ldrb	r2, [r4, #23]
	return W.u16[0];
 80012d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	W.u8[1] = H;
 80012d6:	f362 250f 	bfi	r5, r2, #8, #8

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 80012da:	f3c5 02c7 	ubfx	r2, r5, #3, #8
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80012de:	f015 0107 	ands.w	r1, r5, #7
	return W.u16[0];
 80012e2:	fa1f fc85 	uxth.w	ip, r5
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80012e6:	bf18      	it	ne
 80012e8:	3201      	addne	r2, #1
 80012ea:	9111      	str	r1, [sp, #68]	; 0x44
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
    modH->u8BufferSize         = ADD_LO;
 80012ec:	f04f 0103 	mov.w	r1, #3
 80012f0:	449c      	add	ip, r3
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80012f2:	bf18      	it	ne
 80012f4:	b2d2      	uxtbne	r2, r2
    modH->u8BufferSize         = ADD_LO;
 80012f6:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 80012fa:	f04f 0100 	mov.w	r1, #0
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 80012fe:	7562      	strb	r2, [r4, #21]
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8001300:	4422      	add	r2, r4
 8001302:	fa1f fc8c 	uxth.w	ip, ip
 8001306:	7551      	strb	r1, [r2, #21]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8001308:	2100      	movs	r1, #0

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800130a:	459c      	cmp	ip, r3
    {
        u16coil = u16StartCoil + u16currentCoil;
        u16currentRegister =  (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);

        bitWrite(
 800130c:	f894 2093 	ldrb.w	r2, [r4, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001310:	d117      	bne.n	8001342 <StartTaskModbusSlave+0x282>
            modH->u8BufferSize++;
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8001312:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001314:	b113      	cbz	r3, 800131c <StartTaskModbusSlave+0x25c>
 8001316:	3201      	adds	r2, #1
 8001318:	f884 2093 	strb.w	r2, [r4, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800131c:	f894 8093 	ldrb.w	r8, [r4, #147]	; 0x93
 8001320:	f108 0802 	add.w	r8, r8, #2
 8001324:	fa5f f888 	uxtb.w	r8, r8
    	modH->u8BufferSize++;
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
    	modH->u8BufferSize++;
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
    sendTxBuffer(modH);
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff fe74 	bl	8001016 <sendTxBuffer>
				modH->i8state = process_FC3(modH);
 800132e:	f884 80a7 	strb.w	r8, [r4, #167]	; 0xa7
	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8001332:	2300      	movs	r3, #0
 8001334:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8001338:	461a      	mov	r2, r3
 800133a:	4619      	mov	r1, r3
 800133c:	f00d f880 	bl	800e440 <xQueueGenericSend>
	 continue;
 8001340:	e6c2      	b.n	80010c8 <StartTaskModbusSlave+0x8>
        bitWrite(
 8001342:	2001      	movs	r0, #1
 8001344:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 8001348:	eb04 0902 	add.w	r9, r4, r2
 800134c:	fa00 f801 	lsl.w	r8, r0, r1
 8001350:	0918      	lsrs	r0, r3, #4
        u8bitsno ++;
 8001352:	3101      	adds	r1, #1
        bitWrite(
 8001354:	f899 e013 	ldrb.w	lr, [r9, #19]
 8001358:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 800135c:	f003 060f 	and.w	r6, r3, #15
 8001360:	fa5f f888 	uxtb.w	r8, r8
 8001364:	3301      	adds	r3, #1
 8001366:	4130      	asrs	r0, r6
        u8bitsno ++;
 8001368:	b2c9      	uxtb	r1, r1
 800136a:	b29b      	uxth	r3, r3
        bitWrite(
 800136c:	07c0      	lsls	r0, r0, #31
 800136e:	bf4c      	ite	mi
 8001370:	ea4e 0e08 	orrmi.w	lr, lr, r8
 8001374:	ea2e 0e08 	bicpl.w	lr, lr, r8
        if (u8bitsno > 7)
 8001378:	2908      	cmp	r1, #8
        bitWrite(
 800137a:	f889 e013 	strb.w	lr, [r9, #19]
            modH->u8BufferSize++;
 800137e:	bf02      	ittt	eq
 8001380:	3201      	addeq	r2, #1
            u8bitsno = 0;
 8001382:	2100      	moveq	r1, #0
            modH->u8BufferSize++;
 8001384:	f884 2093 	strbeq.w	r2, [r4, #147]	; 0x93
 8001388:	e7bf      	b.n	800130a <StartTaskModbusSlave+0x24a>
	W.u8[0] = L;
 800138a:	7da2      	ldrb	r2, [r4, #22]
 800138c:	9905      	ldr	r1, [sp, #20]
 800138e:	f362 0707 	bfi	r7, r2, #0, #8
 8001392:	7e22      	ldrb	r2, [r4, #24]
    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001394:	7d63      	ldrb	r3, [r4, #21]
	W.u8[0] = L;
 8001396:	f362 0107 	bfi	r1, r2, #0, #8
	W.u8[1] = H;
 800139a:	f363 270f 	bfi	r7, r3, #8, #8
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800139e:	7de3      	ldrb	r3, [r4, #23]
	W.u8[1] = H;
 80013a0:	460a      	mov	r2, r1
 80013a2:	f363 220f 	bfi	r2, r3, #8, #8
 80013a6:	9205      	str	r2, [sp, #20]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80013a8:	b2ba      	uxth	r2, r7
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80013aa:	f89d 0014 	ldrb.w	r0, [sp, #20]
    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 80013ae:	0043      	lsls	r3, r0, #1
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80013b0:	fa10 f087 	uxtah	r0, r0, r7
    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 80013b4:	7563      	strb	r3, [r4, #21]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80013b6:	2303      	movs	r3, #3
    	modH->u8BufferSize++;
 80013b8:	f103 0802 	add.w	r8, r3, #2
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80013bc:	4282      	cmp	r2, r0
    	modH->u8BufferSize++;
 80013be:	fa5f f888 	uxtb.w	r8, r8
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80013c2:	db02      	blt.n	80013ca <StartTaskModbusSlave+0x30a>
 80013c4:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 80013c8:	e7ae      	b.n	8001328 <StartTaskModbusSlave+0x268>
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80013ca:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80013ce:	eb04 0c03 	add.w	ip, r4, r3
    	modH->u8BufferSize++;
 80013d2:	3301      	adds	r3, #1
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80013d4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80013d8:	3201      	adds	r2, #1
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 80013da:	fa54 f383 	uxtab	r3, r4, r3
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80013de:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80013e2:	b292      	uxth	r2, r2
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80013e4:	f88c e013 	strb.w	lr, [ip, #19]
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 80013e8:	74d9      	strb	r1, [r3, #19]
    	modH->u8BufferSize++;
 80013ea:	4643      	mov	r3, r8
 80013ec:	e7e4      	b.n	80013b8 <StartTaskModbusSlave+0x2f8>
	W.u8[0] = L;
 80013ee:	7da2      	ldrb	r2, [r4, #22]
 80013f0:	9901      	ldr	r1, [sp, #4]
int8_t process_FC5( modbusHandler_t *modH )
{
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80013f2:	7d63      	ldrb	r3, [r4, #21]
	W.u8[0] = L;
 80013f4:	f362 0107 	bfi	r1, r2, #0, #8
    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
    u8currentBit = (uint8_t) (u16coil % 16);

    // write to coil
    bitWrite(
 80013f8:	7de0      	ldrb	r0, [r4, #23]
	W.u8[1] = H;
 80013fa:	460a      	mov	r2, r1
    bitWrite(
 80013fc:	28ff      	cmp	r0, #255	; 0xff
 80013fe:	f04f 0001 	mov.w	r0, #1
	W.u8[1] = H;
 8001402:	f363 220f 	bfi	r2, r3, #8, #8
    u16currentRegister = (u16coil / 16);
 8001406:	f3c2 110b 	ubfx	r1, r2, #4, #12
    u8currentBit = (uint8_t) (u16coil % 16);
 800140a:	f002 030f 	and.w	r3, r2, #15
	W.u8[1] = H;
 800140e:	9201      	str	r2, [sp, #4]
        bitWrite(
 8001410:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    bitWrite(
 8001414:	fa00 f303 	lsl.w	r3, r0, r3
 8001418:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800141c:	bf0c      	ite	eq
 800141e:	4303      	orreq	r3, r0
 8001420:	ea20 0303 	bicne.w	r3, r0, r3
 8001424:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );

    modH->u16regs[ u16add ] = u16val;

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8001428:	2306      	movs	r3, #6
 800142a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        modH->u16regs[ u16StartAdd + i ] = temp;
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
    sendTxBuffer(modH);
 800142e:	4620      	mov	r0, r4
 8001430:	f7ff fdf1 	bl	8001016 <sendTxBuffer>
				modH->i8state = process_FC16(modH);
 8001434:	2308      	movs	r3, #8
 8001436:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
				break;
 800143a:	e77a      	b.n	8001332 <StartTaskModbusSlave+0x272>
 800143c:	08014fb8 	.word	0x08014fb8
	W.u8[0] = L;
 8001440:	7da2      	ldrb	r2, [r4, #22]
 8001442:	9903      	ldr	r1, [sp, #12]
 8001444:	9804      	ldr	r0, [sp, #16]
 8001446:	f362 0107 	bfi	r1, r2, #0, #8
    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800144a:	7d63      	ldrb	r3, [r4, #21]
	W.u8[1] = H;
 800144c:	460a      	mov	r2, r1
	W.u8[0] = L;
 800144e:	7e21      	ldrb	r1, [r4, #24]
 8001450:	f361 0007 	bfi	r0, r1, #0, #8
	W.u8[1] = H;
 8001454:	f363 220f 	bfi	r2, r3, #8, #8
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001458:	7de3      	ldrb	r3, [r4, #23]
	W.u8[1] = H;
 800145a:	4601      	mov	r1, r0
 800145c:	9203      	str	r2, [sp, #12]
	return W.u16[0];
 800145e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	W.u8[1] = H;
 8001462:	f363 210f 	bfi	r1, r3, #8, #8
    modH->u16regs[ u16add ] = u16val;
 8001466:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	W.u8[1] = H;
 800146a:	9104      	str	r1, [sp, #16]
    modH->u16regs[ u16add ] = u16val;
 800146c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001470:	e7da      	b.n	8001428 <StartTaskModbusSlave+0x368>
	W.u8[0] = L;
 8001472:	7e21      	ldrb	r1, [r4, #24]
 8001474:	9802      	ldr	r0, [sp, #8]
 8001476:	7da2      	ldrb	r2, [r4, #22]
 8001478:	f361 0007 	bfi	r0, r1, #0, #8
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800147c:	7d63      	ldrb	r3, [r4, #21]
	W.u8[0] = L;
 800147e:	f362 0b07 	bfi	fp, r2, #0, #8
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001482:	7de2      	ldrb	r2, [r4, #23]
	W.u8[1] = H;
 8001484:	4601      	mov	r1, r0
    u8frameByte = 7;
 8001486:	2007      	movs	r0, #7
	W.u8[1] = H;
 8001488:	f363 2b0f 	bfi	fp, r3, #8, #8
 800148c:	f362 210f 	bfi	r1, r2, #8, #8
	return W.u16[0];
 8001490:	fa1f f38b 	uxth.w	r3, fp
	W.u8[1] = H;
 8001494:	eb01 0e0b 	add.w	lr, r1, fp
 8001498:	9102      	str	r1, [sp, #8]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800149a:	fa1f f28e 	uxth.w	r2, lr
 800149e:	9211      	str	r2, [sp, #68]	; 0x44
    u8bitsno = 0;
 80014a0:	2200      	movs	r2, #0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80014a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80014a4:	4299      	cmp	r1, r3
 80014a6:	d0bf      	beq.n	8001428 <StartTaskModbusSlave+0x368>
        bTemp = bitRead(
 80014a8:	eb04 0800 	add.w	r8, r4, r0
        bitWrite(
 80014ac:	f003 010f 	and.w	r1, r3, #15
 80014b0:	2601      	movs	r6, #1
 80014b2:	ea4f 1e13 	mov.w	lr, r3, lsr #4
        bTemp = bitRead(
 80014b6:	f898 8013 	ldrb.w	r8, [r8, #19]
 80014ba:	3301      	adds	r3, #1
        bitWrite(
 80014bc:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
 80014c0:	fa06 f101 	lsl.w	r1, r6, r1
        bTemp = bitRead(
 80014c4:	fa48 f802 	asr.w	r8, r8, r2
        u8bitsno ++;
 80014c8:	3201      	adds	r2, #1
        bitWrite(
 80014ca:	f839 c01e 	ldrh.w	ip, [r9, lr, lsl #1]
 80014ce:	b289      	uxth	r1, r1
 80014d0:	f018 0f01 	tst.w	r8, #1
        u8bitsno ++;
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	b29b      	uxth	r3, r3
        bitWrite(
 80014d8:	bf14      	ite	ne
 80014da:	ea41 0c0c 	orrne.w	ip, r1, ip
 80014de:	ea2c 0c01 	biceq.w	ip, ip, r1
        if (u8bitsno > 7)
 80014e2:	2a08      	cmp	r2, #8
        bitWrite(
 80014e4:	f829 c01e 	strh.w	ip, [r9, lr, lsl #1]
            u8frameByte++;
 80014e8:	bf02      	ittt	eq
 80014ea:	3001      	addeq	r0, #1
            u8bitsno = 0;
 80014ec:	2200      	moveq	r2, #0
            u8frameByte++;
 80014ee:	b2c0      	uxtbeq	r0, r0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80014f0:	e7d7      	b.n	80014a2 <StartTaskModbusSlave+0x3e2>
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80014f2:	f8b4 2017 	ldrh.w	r2, [r4, #23]
    modH->u8Buffer[ NB_HI ]   = 0;
 80014f6:	f04f 0100 	mov.w	r1, #0
 80014fa:	f8b4 3015 	ldrh.w	r3, [r4, #21]
 80014fe:	ba52      	rev16	r2, r2
 8001500:	75e1      	strb	r1, [r4, #23]
 8001502:	ba5b      	rev16	r3, r3
    modH->u8BufferSize         = RESPONSE_SIZE;
 8001504:	2106      	movs	r1, #6
 8001506:	b292      	uxth	r2, r2
 8001508:	b29b      	uxth	r3, r3
 800150a:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800150e:	7622      	strb	r2, [r4, #24]
    for (i = 0; i < u16regsno; i++)
 8001510:	4621      	mov	r1, r4
 8001512:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8001516:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
 800151a:	4291      	cmp	r1, r2
 800151c:	d087      	beq.n	800142e <StartTaskModbusSlave+0x36e>
	W.u8[0] = L;
 800151e:	f891 c01b 	ldrb.w	ip, [r1, #27]
        temp = word(
 8001522:	7e88      	ldrb	r0, [r1, #26]
	W.u8[0] = L;
 8001524:	f36c 0a07 	bfi	sl, ip, #0, #8
	W.u8[1] = H;
 8001528:	f360 2a0f 	bfi	sl, r0, #8, #8
        modH->u16regs[ u16StartAdd + i ] = temp;
 800152c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8001530:	4418      	add	r0, r3
 8001532:	f820 a001 	strh.w	sl, [r0, r1]
    for (i = 0; i < u16regsno; i++)
 8001536:	3102      	adds	r1, #2
 8001538:	e7ef      	b.n	800151a <StartTaskModbusSlave+0x45a>
	    switch ( modH->u8Buffer[ FUNC ] )
 800153a:	3b01      	subs	r3, #1
 800153c:	2b0f      	cmp	r3, #15
 800153e:	f63f ae73 	bhi.w	8001228 <StartTaskModbusSlave+0x168>
 8001542:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <StartTaskModbusSlave+0x488>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	0800117b 	.word	0x0800117b
 800154c:	0800117b 	.word	0x0800117b
 8001550:	0800127f 	.word	0x0800127f
 8001554:	0800127f 	.word	0x0800127f
 8001558:	080011f9 	.word	0x080011f9
 800155c:	08001267 	.word	0x08001267
 8001560:	08001229 	.word	0x08001229
 8001564:	08001229 	.word	0x08001229
 8001568:	08001229 	.word	0x08001229
 800156c:	08001229 	.word	0x08001229
 8001570:	08001229 	.word	0x08001229
 8001574:	08001229 	.word	0x08001229
 8001578:	08001229 	.word	0x08001229
 800157c:	08001229 	.word	0x08001229
 8001580:	0800117b 	.word	0x0800117b
 8001584:	0800127f 	.word	0x0800127f

08001588 <StartTaskModbusMaster>:
{
 8001588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800158c:	4604      	mov	r4, r0
 800158e:	b089      	sub	sp, #36	; 0x24
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8001590:	2700      	movs	r7, #0
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	a904      	add	r1, sp, #16
 8001598:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800159c:	f00d f865 	bl	800e66a <xQueueReceive>
     SendQuery(modH, telegram);
 80015a0:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80015a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80015b0:	9203      	str	r2, [sp, #12]
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	f89d 8011 	ldrb.w	r8, [sp, #17]
 80015b8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 80015bc:	9d06      	ldr	r5, [sp, #24]
 80015be:	f00d f8f3 	bl	800e7a8 <xQueueSemaphoreTake>
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80015c2:	f994 00a7 	ldrsb.w	r0, [r4, #167]	; 0xa7
	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80015c6:	7a21      	ldrb	r1, [r4, #8]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80015c8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80015cc:	bb60      	cbnz	r0, 8001628 <StartTaskModbusMaster+0xa0>
	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80015ce:	3900      	subs	r1, #0
 80015d0:	bf18      	it	ne
 80015d2:	2101      	movne	r1, #1
 80015d4:	4249      	negs	r1, r1
 80015d6:	b2c9      	uxtb	r1, r1
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80015d8:	1e50      	subs	r0, r2, #1
 80015da:	b2c0      	uxtb	r0, r0
 80015dc:	28f6      	cmp	r0, #246	; 0xf6
 80015de:	d825      	bhi.n	800162c <StartTaskModbusMaster+0xa4>
	if(error)
 80015e0:	b331      	cbz	r1, 8001630 <StartTaskModbusMaster+0xa8>
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80015e2:	2300      	movs	r3, #0
		 modH->i8lastError = error;
 80015e4:	74a1      	strb	r1, [r4, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80015e6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80015ea:	461a      	mov	r2, r3
 80015ec:	4619      	mov	r1, r3
 80015ee:	f00c ff27 	bl	800e440 <xQueueGenericSend>
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80015f2:	f04f 31ff 	mov.w	r1, #4294967295
 80015f6:	2001      	movs	r0, #1
 80015f8:	f00d ff78 	bl	800f4ec <ulTaskNotifyTake>
      modH->i8lastError = 0;
 80015fc:	74a7      	strb	r7, [r4, #18]
      if(ulNotificationValue)
 80015fe:	4605      	mov	r5, r0
 8001600:	2800      	cmp	r0, #0
 8001602:	f000 8084 	beq.w	800170e <StartTaskModbusMaster+0x186>
    	  modH->i8lastError = ERR_TIME_OUT;
 8001606:	23f8      	movs	r3, #248	; 0xf8
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001608:	2203      	movs	r2, #3
 800160a:	f06f 0107 	mvn.w	r1, #7
    	  modH->i8state = COM_IDLE;
 800160e:	f884 70a7 	strb.w	r7, [r4, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8001612:	74a3      	strb	r3, [r4, #18]
    	  modH->u16errCnt++;
 8001614:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8001618:	3301      	adds	r3, #1
 800161a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800161e:	2300      	movs	r3, #0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8001620:	9807      	ldr	r0, [sp, #28]
 8001622:	f00d ff99 	bl	800f558 <xTaskGenericNotify>
 8001626:	e7b4      	b.n	8001592 <StartTaskModbusMaster+0xa>
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8001628:	21fe      	movs	r1, #254	; 0xfe
 800162a:	e7d5      	b.n	80015d8 <StartTaskModbusMaster+0x50>
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800162c:	21f7      	movs	r1, #247	; 0xf7
 800162e:	e7d8      	b.n	80015e2 <StartTaskModbusMaster+0x5a>
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8001630:	74e2      	strb	r2, [r4, #19]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8001632:	0a1a      	lsrs	r2, r3, #8
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8001634:	f884 8014 	strb.w	r8, [r4, #20]
	switch( telegram.u8fct )
 8001638:	f108 38ff 	add.w	r8, r8, #4294967295
	modH->u16regs = telegram.u16reg;
 800163c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8001640:	7562      	strb	r2, [r4, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8001642:	75a3      	strb	r3, [r4, #22]
	switch( telegram.u8fct )
 8001644:	f1b8 0f0f 	cmp.w	r8, #15
 8001648:	d80f      	bhi.n	800166a <StartTaskModbusMaster+0xe2>
 800164a:	e8df f008 	tbb	[pc, r8]
 800164e:	0808      	.short	0x0808
 8001650:	261e0808 	.word	0x261e0808
 8001654:	0e0e0e0e 	.word	0x0e0e0e0e
 8001658:	0e0e0e0e 	.word	0x0e0e0e0e
 800165c:	492b      	.short	0x492b
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800165e:	0a33      	lsrs	r3, r6, #8
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8001660:	7626      	strb	r6, [r4, #24]
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8001662:	75e3      	strb	r3, [r4, #23]
	    modH->u8BufferSize = 6;
 8001664:	2306      	movs	r3, #6
 8001666:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	sendTxBuffer(modH);
 800166a:	4620      	mov	r0, r4
 800166c:	f7ff fcd3 	bl	8001016 <sendTxBuffer>
	xSemaphoreGive(modH->ModBusSphrHandle);
 8001670:	2300      	movs	r3, #0
 8001672:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8001676:	461a      	mov	r2, r3
 8001678:	4619      	mov	r1, r3
 800167a:	f00c fee1 	bl	800e440 <xQueueGenericSend>
	modH->i8state = COM_WAITING;
 800167e:	f04f 0301 	mov.w	r3, #1
	modH->i8lastError = 0;
 8001682:	74a7      	strb	r7, [r4, #18]
	modH->i8state = COM_WAITING;
 8001684:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
	return 0;
 8001688:	e7b3      	b.n	80015f2 <StartTaskModbusMaster+0x6a>
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800168a:	882b      	ldrh	r3, [r5, #0]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800168c:	7627      	strb	r7, [r4, #24]
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800168e:	3b00      	subs	r3, #0
 8001690:	bf18      	it	ne
 8001692:	2301      	movne	r3, #1
 8001694:	425b      	negs	r3, r3
 8001696:	75e3      	strb	r3, [r4, #23]
	    modH->u8BufferSize = 6;
 8001698:	e7e4      	b.n	8001664 <StartTaskModbusMaster+0xdc>
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800169a:	882b      	ldrh	r3, [r5, #0]
 800169c:	0a1a      	lsrs	r2, r3, #8
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800169e:	7623      	strb	r3, [r4, #24]
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80016a0:	75e2      	strb	r2, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80016a2:	e7df      	b.n	8001664 <StartTaskModbusMaster+0xdc>
		 u8bytesno = (telegram.u16CoilsNo + 7) / 8;
 80016a4:	1df2      	adds	r2, r6, #7
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80016a6:	0a33      	lsrs	r3, r6, #8
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80016a8:	2000      	movs	r0, #0
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80016aa:	7626      	strb	r6, [r4, #24]
		 u8bytesno = (telegram.u16CoilsNo + 7) / 8;
 80016ac:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80016b0:	75e3      	strb	r3, [r4, #23]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80016b2:	2307      	movs	r3, #7
 80016b4:	b291      	uxth	r1, r2
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80016b6:	7662      	strb	r2, [r4, #25]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80016b8:	b282      	uxth	r2, r0
 80016ba:	4291      	cmp	r1, r2
 80016bc:	d9d3      	bls.n	8001666 <StartTaskModbusMaster+0xde>
	        	modH->u8Buffer[ modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80016be:	0856      	lsrs	r6, r2, #1
	        if(i%2)
 80016c0:	07d2      	lsls	r2, r2, #31
	        	modH->u8Buffer[ modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80016c2:	f100 0001 	add.w	r0, r0, #1
 80016c6:	bf4c      	ite	mi
 80016c8:	f835 2016 	ldrhmi.w	r2, [r5, r6, lsl #1]
	        	modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 80016cc:	f815 2016 	ldrbpl.w	r2, [r5, r6, lsl #1]
	        	modH->u8Buffer[ modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80016d0:	eb04 0603 	add.w	r6, r4, r3
 80016d4:	bf48      	it	mi
 80016d6:	0a12      	lsrmi	r2, r2, #8
	        modH->u8BufferSize++;
 80016d8:	3301      	adds	r3, #1
	        	modH->u8Buffer[ modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80016da:	74f2      	strb	r2, [r6, #19]
	        modH->u8BufferSize++;
 80016dc:	b2db      	uxtb	r3, r3
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80016de:	e7eb      	b.n	80016b8 <StartTaskModbusMaster+0x130>
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80016e0:	0a33      	lsrs	r3, r6, #8
 80016e2:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80016e4:	b2f3      	uxtb	r3, r6
 80016e6:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 80016ea:	7623      	strb	r3, [r4, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	7663      	strb	r3, [r4, #25]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80016f0:	2307      	movs	r3, #7
 80016f2:	42ae      	cmp	r6, r5
 80016f4:	d0b7      	beq.n	8001666 <StartTaskModbusMaster+0xde>
	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80016f6:	f835 1b02 	ldrh.w	r1, [r5], #2
 80016fa:	18e2      	adds	r2, r4, r3
 80016fc:	0a08      	lsrs	r0, r1, #8
 80016fe:	74d0      	strb	r0, [r2, #19]
	        modH->u8BufferSize++;
 8001700:	1c5a      	adds	r2, r3, #1
	        modH->u8BufferSize++;
 8001702:	3302      	adds	r3, #2
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8001704:	fa54 f282 	uxtab	r2, r4, r2
	        modH->u8BufferSize++;
 8001708:	b2db      	uxtb	r3, r3
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800170a:	74d1      	strb	r1, [r2, #19]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800170c:	e7f1      	b.n	80016f2 <StartTaskModbusMaster+0x16a>
      getRxBuffer(modH);
 800170e:	4620      	mov	r0, r4
 8001710:	f7ff fb23 	bl	8000d5a <getRxBuffer>
	  if ( modH->u8BufferSize < 6){
 8001714:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 8001718:	2b05      	cmp	r3, #5
 800171a:	d80d      	bhi.n	8001738 <StartTaskModbusMaster+0x1b0>
		  modH->i8lastError = ERR_BAD_SIZE;
 800171c:	23fa      	movs	r3, #250	; 0xfa
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800171e:	2203      	movs	r2, #3
 8001720:	f06f 0105 	mvn.w	r1, #5
		  modH->i8state = COM_IDLE;
 8001724:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8001728:	74a3      	strb	r3, [r4, #18]
		  modH->u16errCnt++;
 800172a:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 800172e:	3301      	adds	r3, #1
 8001730:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001734:	462b      	mov	r3, r5
 8001736:	e773      	b.n	8001620 <StartTaskModbusMaster+0x98>
	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8001738:	462b      	mov	r3, r5
 800173a:	462a      	mov	r2, r5
 800173c:	2103      	movs	r1, #3
 800173e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8001742:	9500      	str	r5, [sp, #0]
 8001744:	f00e f8dc 	bl	800f900 <xTimerGenericCommand>
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001748:	f894 6093 	ldrb.w	r6, [r4, #147]	; 0x93
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800174c:	f104 0013 	add.w	r0, r4, #19
 8001750:	1eb1      	subs	r1, r6, #2
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001752:	4426      	add	r6, r4
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8001754:	b2c9      	uxtb	r1, r1
 8001756:	f7ff fc43 	bl	8000fe0 <calcCRC>
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800175a:	7c72      	ldrb	r2, [r6, #17]
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800175c:	7cb3      	ldrb	r3, [r6, #18]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800175e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001762:	4283      	cmp	r3, r0
 8001764:	d00d      	beq.n	8001782 <StartTaskModbusMaster+0x1fa>
    	modH->u16errCnt ++;
 8001766:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 800176a:	3301      	adds	r3, #1
 800176c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
        return ERR_BAD_CRC;
 8001770:	23fc      	movs	r3, #252	; 0xfc
	  int8_t u8exception = validateAnswer(modH);
 8001772:	b259      	sxtb	r1, r3
	  if (u8exception != 0)
 8001774:	b323      	cbz	r3, 80017c0 <StartTaskModbusMaster+0x238>
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001776:	2300      	movs	r3, #0
 8001778:	2203      	movs	r2, #3
		 modH->i8state = COM_IDLE;
 800177a:	f884 70a7 	strb.w	r7, [r4, #167]	; 0xa7
         modH->i8lastError = u8exception;
 800177e:	74a1      	strb	r1, [r4, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001780:	e74e      	b.n	8001620 <StartTaskModbusMaster+0x98>
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8001782:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8001786:	7d21      	ldrb	r1, [r4, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	da06      	bge.n	800179a <StartTaskModbusMaster+0x212>
    	modH->u16errCnt ++;
 800178c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8001790:	3301      	adds	r3, #1
 8001792:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
        return ERR_EXCEPTION;
 8001796:	23fb      	movs	r3, #251	; 0xfb
 8001798:	e7eb      	b.n	8001772 <StartTaskModbusMaster+0x1ea>
 800179a:	4a36      	ldr	r2, [pc, #216]	; (8001874 <StartTaskModbusMaster+0x2ec>)
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800179c:	2308      	movs	r3, #8
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800179e:	f812 0b01 	ldrb.w	r0, [r2], #1
 80017a2:	4281      	cmp	r1, r0
 80017a4:	d00a      	beq.n	80017bc <StartTaskModbusMaster+0x234>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80017ac:	d1f7      	bne.n	800179e <StartTaskModbusMaster+0x216>
    	modH->u16errCnt ++;
 80017ae:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80017b2:	3301      	adds	r3, #1
 80017b4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
        return EXC_FUNC_CODE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e7da      	b.n	8001772 <StartTaskModbusMaster+0x1ea>
    return 0; // OK, no exception code thrown
 80017bc:	2300      	movs	r3, #0
 80017be:	e7d8      	b.n	8001772 <StartTaskModbusMaster+0x1ea>
	  modH->i8lastError = u8exception;
 80017c0:	74a1      	strb	r1, [r4, #18]
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80017c2:	f04f 31ff 	mov.w	r1, #4294967295
 80017c6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80017ca:	f00c ffed 	bl	800e7a8 <xQueueSemaphoreTake>
	  switch( modH->u8Buffer[ FUNC ] )
 80017ce:	7d23      	ldrb	r3, [r4, #20]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d822      	bhi.n	800181a <StartTaskModbusMaster+0x292>
 80017d4:	b323      	cbz	r3, 8001820 <StartTaskModbusMaster+0x298>
 80017d6:	b2eb      	uxtb	r3, r5
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80017d8:	7d62      	ldrb	r2, [r4, #21]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d920      	bls.n	8001820 <StartTaskModbusMaster+0x298>
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 80017de:	1cda      	adds	r2, r3, #3
 80017e0:	085e      	lsrs	r6, r3, #1
 80017e2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        if(i%2)
 80017e6:	f013 0f01 	tst.w	r3, #1
 80017ea:	4422      	add	r2, r4
 80017ec:	f105 0501 	add.w	r5, r5, #1
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 80017f0:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
 80017f4:	7cd3      	ldrb	r3, [r2, #19]
	W.u8[0] = L;
 80017f6:	bf13      	iteet	ne
 80017f8:	f361 0b07 	bfine	fp, r1, #0, #8
 80017fc:	f363 0a07 	bfieq	sl, r3, #0, #8
        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8001800:	0a0b      	lsreq	r3, r1, #8
	W.u8[1] = H;
 8001802:	f363 2b0f 	bfine	fp, r3, #8, #8
 8001806:	bf0a      	itet	eq
 8001808:	f363 2a0f 	bfieq	sl, r3, #8, #8
	return W.u16[0];
 800180c:	fa1f f38b 	uxthne.w	r3, fp
 8001810:	fa1f f38a 	uxtheq.w	r3, sl
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8001814:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8001818:	e7dd      	b.n	80017d6 <StartTaskModbusMaster+0x24e>
	  switch( modH->u8Buffer[ FUNC ] )
 800181a:	3b03      	subs	r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d91e      	bls.n	800185e <StartTaskModbusMaster+0x2d6>
	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 8001820:	f994 3012 	ldrsb.w	r3, [r4, #18]
	  modH->i8state = COM_IDLE;
 8001824:	f884 70a7 	strb.w	r7, [r4, #167]	; 0xa7
	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 8001828:	2b00      	cmp	r3, #0
 800182a:	f47f aeb2 	bne.w	8001592 <StartTaskModbusMaster+0xa>
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800182e:	461a      	mov	r2, r3
 8001830:	4619      	mov	r1, r3
 8001832:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	f00c fe02 	bl	800e440 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800183c:	9b02      	ldr	r3, [sp, #8]
 800183e:	2203      	movs	r2, #3
 8001840:	f06f 010a 	mvn.w	r1, #10
 8001844:	e6ec      	b.n	8001620 <StartTaskModbusMaster+0x98>
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8001846:	4423      	add	r3, r4
 8001848:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800184c:	7cd9      	ldrb	r1, [r3, #19]
	W.u8[0] = L;
 800184e:	7d1b      	ldrb	r3, [r3, #20]
 8001850:	f363 0907 	bfi	r9, r3, #0, #8
	W.u8[1] = H;
 8001854:	f361 290f 	bfi	r9, r1, #8, #8
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8001858:	f822 9015 	strh.w	r9, [r2, r5, lsl #1]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800185c:	3501      	adds	r5, #1
 800185e:	b2ea      	uxtb	r2, r5
 8001860:	7d61      	ldrb	r1, [r4, #21]
 8001862:	0053      	lsls	r3, r2, #1
 8001864:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
 8001868:	f103 0303 	add.w	r3, r3, #3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	d3ea      	bcc.n	8001846 <StartTaskModbusMaster+0x2be>
 8001870:	e7d6      	b.n	8001820 <StartTaskModbusMaster+0x298>
 8001872:	bf00      	nop
 8001874:	08014fb8 	.word	0x08014fb8

08001878 <ModbusMasterHandler2Init>:
uint16_t ModbusDATA[128];
modbusHandler_t ModbusH2;
uint16_t ModbusDATA2[128];
extern uint32_t TimeoutValue;
void ModbusMasterHandler2Init(void)
{
 8001878:	b510      	push	{r4, lr}
	/* Master initialization */
	    ModbusH2.uModbusType = MB_MASTER;
 800187a:	2304      	movs	r3, #4
 800187c:	4c0f      	ldr	r4, [pc, #60]	; (80018bc <ModbusMasterHandler2Init+0x44>)
 800187e:	7023      	strb	r3, [r4, #0]
	    ModbusH2.EN_Pin = GPIO_PIN_4;
	    ModbusH2.u16regs = ModbusDATA2;
	    ModbusH2.u16regsize= sizeof(ModbusDATA2)/sizeof(ModbusDATA2[0]);
	    ModbusH2.xTypeHW = USART_HW;
	    //Initialize Modbus library
	    ModbusInit(&ModbusH2);
 8001880:	4620      	mov	r0, r4
	    ModbusH2.port =  &huart3;
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <ModbusMasterHandler2Init+0x48>)
 8001884:	6063      	str	r3, [r4, #4]
	    ModbusH2.u8id = 0; // For master it must be 0
 8001886:	2300      	movs	r3, #0
 8001888:	7223      	strb	r3, [r4, #8]
	    ModbusH2.u16timeOut = (TimeoutValue-15);
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <ModbusMasterHandler2Init+0x4c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3b0f      	subs	r3, #15
 8001890:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	    ModbusH2.EN_Port = GPIOD;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <ModbusMasterHandler2Init+0x50>)
 8001896:	60e3      	str	r3, [r4, #12]
	    ModbusH2.EN_Pin = GPIO_PIN_4;
 8001898:	2310      	movs	r3, #16
 800189a:	8223      	strh	r3, [r4, #16]
	    ModbusH2.u16regs = ModbusDATA2;
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <ModbusMasterHandler2Init+0x54>)
 800189e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	    ModbusH2.u16regsize= sizeof(ModbusDATA2)/sizeof(ModbusDATA2[0]);
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	    ModbusH2.xTypeHW = USART_HW;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	    ModbusInit(&ModbusH2);
 80018ae:	f7ff fa85 	bl	8000dbc <ModbusInit>
	    //Start capturing traffic on serial Port
	    ModbusStart(&ModbusH2);
 80018b2:	4620      	mov	r0, r4
}
 80018b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    ModbusStart(&ModbusH2);
 80018b8:	f7ff baf6 	b.w	8000ea8 <ModbusStart>
 80018bc:	240003c0 	.word	0x240003c0
 80018c0:	24040568 	.word	0x24040568
 80018c4:	24000028 	.word	0x24000028
 80018c8:	58020c00 	.word	0x58020c00
 80018cc:	240002c0 	.word	0x240002c0

080018d0 <ModbusRequest>:

extern uint8_t connectionStatus;
void ModbusRequest(uint16_t *communcationBuffer, uint8_t ID,
                   mb_functioncode_t typeOfRequest, danfossAddress registerAddress,
                   modbus_t *specificTelegram, osThreadId_t taskToNotify, uint32_t timeout)
{
 80018d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018d2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80018d6:	9e08      	ldr	r6, [sp, #32]

    specificTelegram->u16reg = communcationBuffer;
 80018d8:	60a0      	str	r0, [r4, #8]
    specificTelegram->u8id = ID;
 80018da:	7021      	strb	r1, [r4, #0]
    specificTelegram->u8fct = typeOfRequest;
 80018dc:	7062      	strb	r2, [r4, #1]
    specificTelegram->u16RegAdd = registerAddress;
 80018de:	8063      	strh	r3, [r4, #2]
    specificTelegram->u32CurrentTask = (uint32_t *)taskToNotify; // Cast to uint32_t* if necessary
 80018e0:	60e5      	str	r5, [r4, #12]

    ModbusQuery(&ModbusH2, *specificTelegram);
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <ModbusRequest+0x2c>)
 80018e4:	9500      	str	r5, [sp, #0]
 80018e6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80018ea:	f7ff fb61 	bl	8000fb0 <ModbusQuery>

    osDelay(timeout);
 80018ee:	4630      	mov	r0, r6
//        // The call to ulTaskNotifyTake() returned because of timeout, handle timeout situation
//        printf("%d Failed \n", ID);
//
//
//    }
}
 80018f0:	b002      	add	sp, #8
 80018f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    osDelay(timeout);
 80018f6:	f00c bb38 	b.w	800df6a <osDelay>
 80018fa:	bf00      	nop
 80018fc:	240003c0 	.word	0x240003c0

08001900 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <HAL_UART_TxCpltCallback+0x50>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001902:	2300      	movs	r3, #0
{
 8001904:	b530      	push	{r4, r5, lr}
 8001906:	b085      	sub	sp, #20
	for (i = 0; i < numberHandlers; i++ )
 8001908:	7811      	ldrb	r1, [r2, #0]
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <HAL_UART_TxCpltCallback+0x54>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800190c:	9303      	str	r3, [sp, #12]
	for (i = 0; i < numberHandlers; i++ )
 800190e:	4299      	cmp	r1, r3
 8001910:	dd0f      	ble.n	8001932 <HAL_UART_TxCpltCallback+0x32>
	{
	   	if (mHandlers[i]->port == huart  )
 8001912:	f852 4b04 	ldr.w	r4, [r2], #4
 8001916:	6865      	ldr	r5, [r4, #4]
 8001918:	4285      	cmp	r5, r0
 800191a:	d10c      	bne.n	8001936 <HAL_UART_TxCpltCallback+0x36>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800191c:	ab03      	add	r3, sp, #12
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2300      	movs	r3, #0
 8001922:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8001926:	461a      	mov	r2, r3
 8001928:	4619      	mov	r1, r3
 800192a:	f00d fe91 	bl	800f650 <xTaskGenericNotifyFromISR>
	   		break;
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800192e:	9b03      	ldr	r3, [sp, #12]
 8001930:	b91b      	cbnz	r3, 800193a <HAL_UART_TxCpltCallback+0x3a>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8001932:	b005      	add	sp, #20
 8001934:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < numberHandlers; i++ )
 8001936:	3301      	adds	r3, #1
 8001938:	e7e9      	b.n	800190e <HAL_UART_TxCpltCallback+0xe>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800193a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800193e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001942:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001946:	f3bf 8f4f 	dsb	sy
 800194a:	f3bf 8f6f 	isb	sy
}
 800194e:	e7f0      	b.n	8001932 <HAL_UART_TxCpltCallback+0x32>
 8001950:	2400050c 	.word	0x2400050c
 8001954:	24000504 	.word	0x24000504

08001958 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_UART_RxCpltCallback+0x80>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800195c:	2400      	movs	r4, #0
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <HAL_UART_RxCpltCallback+0x84>)
    for (i = 0; i < numberHandlers; i++ )
 8001960:	7819      	ldrb	r1, [r3, #0]
 8001962:	4615      	mov	r5, r2
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001964:	9403      	str	r4, [sp, #12]
    for (i = 0; i < numberHandlers; i++ )
 8001966:	42a1      	cmp	r1, r4
 8001968:	dd26      	ble.n	80019b8 <HAL_UART_RxCpltCallback+0x60>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800196a:	f852 3b04 	ldr.w	r3, [r2], #4
 800196e:	685e      	ldr	r6, [r3, #4]
 8001970:	4286      	cmp	r6, r0
 8001972:	d123      	bne.n	80019bc <HAL_UART_RxCpltCallback+0x64>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8001974:	f893 6140 	ldrb.w	r6, [r3, #320]	; 0x140
 8001978:	2e01      	cmp	r6, #1
 800197a:	d11d      	bne.n	80019b8 <HAL_UART_RxCpltCallback+0x60>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800197c:	f893 10a6 	ldrb.w	r1, [r3, #166]	; 0xa6
 8001980:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
 8001984:	f7ff f99c 	bl	8000cc0 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8001988:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800198c:	4632      	mov	r2, r6
 800198e:	f103 01a6 	add.w	r1, r3, #166	; 0xa6
 8001992:	6858      	ldr	r0, [r3, #4]
 8001994:	f00b ffbc 	bl	800d910 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8001998:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800199c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 80019a0:	f00d fa60 	bl	800ee64 <xTaskGetTickCountFromISR>
 80019a4:	2300      	movs	r3, #0
 80019a6:	4602      	mov	r2, r0
 80019a8:	2107      	movs	r1, #7
 80019aa:	4620      	mov	r0, r4
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	ab03      	add	r3, sp, #12
 80019b0:	f00d ffa6 	bl	800f900 <xTimerGenericCommand>
    		}
    		break;
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80019b4:	9b03      	ldr	r3, [sp, #12]
 80019b6:	b91b      	cbnz	r3, 80019c0 <HAL_UART_RxCpltCallback+0x68>
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 80019b8:	b004      	add	sp, #16
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < numberHandlers; i++ )
 80019bc:	3401      	adds	r4, #1
 80019be:	e7d2      	b.n	8001966 <HAL_UART_RxCpltCallback+0xe>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80019c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80019cc:	f3bf 8f4f 	dsb	sy
 80019d0:	f3bf 8f6f 	isb	sy
}
 80019d4:	e7f0      	b.n	80019b8 <HAL_UART_RxCpltCallback+0x60>
 80019d6:	bf00      	nop
 80019d8:	2400050c 	.word	0x2400050c
 80019dc:	24000504 	.word	0x24000504

080019e0 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{

 int i;

 for (i = 0; i < numberHandlers; i++ )
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_UART_ErrorCallback+0xc0>)
{
 80019e2:	b570      	push	{r4, r5, r6, lr}
 for (i = 0; i < numberHandlers; i++ )
 80019e4:	7819      	ldrb	r1, [r3, #0]
 80019e6:	2400      	movs	r4, #0
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <HAL_UART_ErrorCallback+0xc4>)
 80019ea:	461d      	mov	r5, r3
 80019ec:	42a1      	cmp	r1, r4
 80019ee:	dd4c      	ble.n	8001a8a <HAL_UART_ErrorCallback+0xaa>
 {
    	if (mHandlers[i]->port == huart  )
 80019f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80019f4:	6856      	ldr	r6, [r2, #4]
 80019f6:	4286      	cmp	r6, r0
 80019f8:	d150      	bne.n	8001a9c <HAL_UART_ErrorCallback+0xbc>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 80019fa:	f892 3140 	ldrb.w	r3, [r2, #320]	; 0x140
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d143      	bne.n	8001a8a <HAL_UART_ErrorCallback+0xaa>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8001a02:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	f103 01bc 	add.w	r1, r3, #188	; 0xbc
 8001a0c:	6858      	ldr	r0, [r3, #4]
 8001a0e:	f00c f8b0 	bl	800db72 <HAL_UARTEx_ReceiveToIdle_DMA>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 8001a12:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8001a16:	bbc8      	cbnz	r0, 8001a8c <HAL_UART_ErrorCallback+0xac>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <HAL_UART_ErrorCallback+0xc8>)
 8001a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d02d      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a26:	3218      	adds	r2, #24
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d02a      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a2c:	3218      	adds	r2, #24
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d027      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a32:	3218      	adds	r2, #24
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d024      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a38:	3218      	adds	r2, #24
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d021      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a3e:	3218      	adds	r2, #24
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d01e      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a44:	3218      	adds	r2, #24
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01b      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a4a:	3218      	adds	r2, #24
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d018      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a50:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d014      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a58:	3218      	adds	r2, #24
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d011      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a5e:	3218      	adds	r2, #24
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00e      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a64:	3218      	adds	r2, #24
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00b      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a6a:	3218      	adds	r2, #24
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d008      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a70:	3218      	adds	r2, #24
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d005      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a76:	3218      	adds	r2, #24
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d002      	beq.n	8001a82 <HAL_UART_ErrorCallback+0xa2>
 8001a7c:	3218      	adds	r2, #24
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d108      	bne.n	8001a94 <HAL_UART_ErrorCallback+0xb4>
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	f022 0208 	bic.w	r2, r2, #8
 8001a88:	601a      	str	r2, [r3, #0]
    		}

    		break;
    	}
   }
}
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
    					HAL_UART_DMAStop(mHandlers[i]->port);
 8001a8c:	6858      	ldr	r0, [r3, #4]
 8001a8e:	f00a fda9 	bl	800c5e4 <HAL_UART_DMAStop>
 8001a92:	e7b6      	b.n	8001a02 <HAL_UART_ErrorCallback+0x22>
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	e7f5      	b.n	8001a88 <HAL_UART_ErrorCallback+0xa8>
 for (i = 0; i < numberHandlers; i++ )
 8001a9c:	3401      	adds	r4, #1
 8001a9e:	e7a5      	b.n	80019ec <HAL_UART_ErrorCallback+0xc>
 8001aa0:	2400050c 	.word	0x2400050c
 8001aa4:	24000504 	.word	0x24000504
 8001aa8:	40020010 	.word	0x40020010

08001aac <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 8001aac:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_UARTEx_RxEventCallback+0x108>)
 8001aae:	4a42      	ldr	r2, [pc, #264]	; (8001bb8 <HAL_UARTEx_RxEventCallback+0x10c>)
{
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001ab2:	2400      	movs	r4, #0
{
 8001ab4:	b085      	sub	sp, #20
	    for (i = 0; i < numberHandlers; i++ )
 8001ab6:	781e      	ldrb	r6, [r3, #0]
 8001ab8:	4615      	mov	r5, r2
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001aba:	9403      	str	r4, [sp, #12]
	    for (i = 0; i < numberHandlers; i++ )
 8001abc:	42a6      	cmp	r6, r4
 8001abe:	dd5f      	ble.n	8001b80 <HAL_UARTEx_RxEventCallback+0xd4>
	    {
	    	if (mHandlers[i]->port == huart  )
 8001ac0:	f852 3b04 	ldr.w	r3, [r2], #4
 8001ac4:	685f      	ldr	r7, [r3, #4]
 8001ac6:	4287      	cmp	r7, r0
 8001ac8:	d166      	bne.n	8001b98 <HAL_UARTEx_RxEventCallback+0xec>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 8001aca:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
 8001ace:	2a04      	cmp	r2, #4
 8001ad0:	d156      	bne.n	8001b80 <HAL_UARTEx_RxEventCallback+0xd4>
	    		{
	    			if(Size) //check if we have received any byte
 8001ad2:	2900      	cmp	r1, #0
 8001ad4:	d054      	beq.n	8001b80 <HAL_UARTEx_RxEventCallback+0xd4>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
		    				mHandlers[i]->xBufferRX.overflow = false;
 8001ad6:	2200      	movs	r2, #0
		    				mHandlers[i]->xBufferRX.u8available = Size;
 8001ad8:	f883 113e 	strb.w	r1, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 8001adc:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8001ae0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	f103 01bc 	add.w	r1, r3, #188	; 0xbc
 8001aea:	6858      	ldr	r0, [r3, #4]
 8001aec:	f00c f841 	bl	800db72 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d147      	bne.n	8001b84 <HAL_UARTEx_RxEventCallback+0xd8>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);

		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8001af4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001af8:	4a30      	ldr	r2, [pc, #192]	; (8001bbc <HAL_UARTEx_RxEventCallback+0x110>)
 8001afa:	6843      	ldr	r3, [r0, #4]
 8001afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d02d      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b06:	3218      	adds	r2, #24
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d02a      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b0c:	3218      	adds	r2, #24
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d027      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b12:	3218      	adds	r2, #24
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d024      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b18:	3218      	adds	r2, #24
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d021      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b1e:	3218      	adds	r2, #24
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d01e      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b24:	3218      	adds	r2, #24
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d01b      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b2a:	3218      	adds	r2, #24
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d018      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b30:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d014      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b38:	3218      	adds	r2, #24
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d011      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b3e:	3218      	adds	r2, #24
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00e      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b44:	3218      	adds	r2, #24
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00b      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b4a:	3218      	adds	r2, #24
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d008      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b50:	3218      	adds	r2, #24
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d005      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b56:	3218      	adds	r2, #24
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d002      	beq.n	8001b62 <HAL_UARTEx_RxEventCallback+0xb6>
 8001b5c:	3218      	adds	r2, #24
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d116      	bne.n	8001b90 <HAL_UARTEx_RxEventCallback+0xe4>
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f022 0208 	bic.w	r2, r2, #8
 8001b68:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8001b6a:	ab03      	add	r3, sp, #12
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8001b76:	4619      	mov	r1, r3
 8001b78:	f00d fd6a 	bl	800f650 <xTaskGenericNotifyFromISR>
	    		}

	    		break;
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001b7c:	9b03      	ldr	r3, [sp, #12]
 8001b7e:	b96b      	cbnz	r3, 8001b9c <HAL_UARTEx_RxEventCallback+0xf0>
}
 8001b80:	b005      	add	sp, #20
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 8001b84:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001b88:	6858      	ldr	r0, [r3, #4]
 8001b8a:	f00a fd2b 	bl	800c5e4 <HAL_UART_DMAStop>
 8001b8e:	e7a7      	b.n	8001ae0 <HAL_UARTEx_RxEventCallback+0x34>
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f022 0204 	bic.w	r2, r2, #4
 8001b96:	e7e7      	b.n	8001b68 <HAL_UARTEx_RxEventCallback+0xbc>
	    for (i = 0; i < numberHandlers; i++ )
 8001b98:	3401      	adds	r4, #1
 8001b9a:	e78f      	b.n	8001abc <HAL_UARTEx_RxEventCallback+0x10>
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001b9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	f3bf 8f6f 	isb	sy
}
 8001bb0:	e7e6      	b.n	8001b80 <HAL_UARTEx_RxEventCallback+0xd4>
 8001bb2:	bf00      	nop
 8001bb4:	2400050c 	.word	0x2400050c
 8001bb8:	24000504 	.word	0x24000504
 8001bbc:	40020010 	.word	0x40020010

08001bc0 <CalibrateADC>:
/* USER CODE BEGIN 0 */


void CalibrateADC()
{
	coffA =(currentOfTheSecondReading - currentOfTheFirstReading)/ (float) (secondADCCalibrationReading- firstADCCalibrationReading);
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <CalibrateADC+0x40>)
 8001bc2:	ed93 7a00 	vldr	s14, [r3]
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <CalibrateADC+0x44>)
 8001bc8:	881a      	ldrh	r2, [r3, #0]
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <CalibrateADC+0x48>)
 8001bcc:	edd3 6a00 	vldr	s13, [r3]
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <CalibrateADC+0x4c>)
 8001bd2:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <CalibrateADC+0x50>)
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	coffB = currentOfTheFirstReading - coffA * firstADCCalibrationReading;
 8001be8:	ee07 2a90 	vmov	s15, r2
 8001bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf0:	eea6 7a67 	vfms.f32	s14, s12, s15
	coffA =(currentOfTheSecondReading - currentOfTheFirstReading)/ (float) (secondADCCalibrationReading- firstADCCalibrationReading);
 8001bf4:	ed83 6a00 	vstr	s12, [r3]
	coffB = currentOfTheFirstReading - coffA * firstADCCalibrationReading;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <CalibrateADC+0x54>)
 8001bfa:	ed83 7a00 	vstr	s14, [r3]
	//printf("Calibrated A = %.8f, Calibrated B = %.8f\n", coffA, coffB);
}
 8001bfe:	4770      	bx	lr
 8001c00:	24000038 	.word	0x24000038
 8001c04:	24000048 	.word	0x24000048
 8001c08:	2400003c 	.word	0x2400003c
 8001c0c:	24000052 	.word	0x24000052
 8001c10:	24000030 	.word	0x24000030
 8001c14:	24000034 	.word	0x24000034

08001c18 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c18:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c1a:	2400      	movs	r4, #0
{
 8001c1c:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c1e:	221c      	movs	r2, #28
 8001c20:	4621      	mov	r1, r4
 8001c22:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
 8001c24:	9402      	str	r4, [sp, #8]
 8001c26:	e9cd 4400 	strd	r4, r4, [sp]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c2a:	f00f ffad 	bl	8011b88 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c2e:	481c      	ldr	r0, [pc, #112]	; (8001ca0 <MX_ADC1_Init+0x88>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001c30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c34:	491b      	ldr	r1, [pc, #108]	; (8001ca4 <MX_ADC1_Init+0x8c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c36:	8284      	strh	r4, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c38:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c3a:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c3c:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001c40:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c44:	2304      	movs	r3, #4
 8001c46:	6103      	str	r3, [r0, #16]
  hadc1.Init.NbrOfConversion = 1;
 8001c48:	2301      	movs	r3, #1
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.NbrOfConversion = 1;
 8001c4e:	6183      	str	r3, [r0, #24]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c50:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c54:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c58:	f005 fd66 	bl	8007728 <HAL_ADC_Init>
 8001c5c:	b108      	cbz	r0, 8001c62 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8001c5e:	f003 fd9d 	bl	800579c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c62:	4669      	mov	r1, sp
 8001c64:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <MX_ADC1_Init+0x88>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c66:	9400      	str	r4, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c68:	f005 fe78 	bl	800795c <HAL_ADCEx_MultiModeConfigChannel>
 8001c6c:	b108      	cbz	r0, 8001c72 <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 8001c6e:	f003 fd95 	bl	800579c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c72:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <MX_ADC1_Init+0x90>)
 8001c74:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c76:	a903      	add	r1, sp, #12
 8001c78:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <MX_ADC1_Init+0x88>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c7a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001c84:	e9cd 3205 	strd	r3, r2, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c88:	2204      	movs	r2, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c8a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfig.Offset = 0;
 8001c8e:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c92:	f005 fa0b 	bl	80070ac <HAL_ADC_ConfigChannel>
 8001c96:	b108      	cbz	r0, 8001c9c <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8001c98:	f003 fd80 	bl	800579c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c9c:	b00a      	add	sp, #40	; 0x28
 8001c9e:	bd10      	pop	{r4, pc}
 8001ca0:	24000514 	.word	0x24000514
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	43210000 	.word	0x43210000

08001cac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001cac:	b500      	push	{lr}
 8001cae:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cb0:	221c      	movs	r2, #28
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	a801      	add	r0, sp, #4
 8001cb6:	f00f ff67 	bl	8011b88 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001cba:	481a      	ldr	r0, [pc, #104]	; (8001d24 <MX_ADC2_Init+0x78>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001cbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cc0:	4919      	ldr	r1, [pc, #100]	; (8001d28 <MX_ADC2_Init+0x7c>)
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cc2:	2204      	movs	r2, #4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001cc4:	e9c0 1300 	strd	r1, r3, [r0]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001cc8:	2300      	movs	r3, #0
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cca:	6102      	str	r2, [r0, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
 8001ccc:	2201      	movs	r2, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001cce:	8283      	strh	r3, [r0, #20]
  hadc2.Init.NbrOfConversion = 1;
 8001cd0:	6182      	str	r2, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cd2:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001cd4:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001cd6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cda:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cde:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ce2:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ce6:	f005 fd1f 	bl	8007728 <HAL_ADC_Init>
 8001cea:	b108      	cbz	r0, 8001cf0 <MX_ADC2_Init+0x44>
  {
    Error_Handler();
 8001cec:	f003 fd56 	bl	800579c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cf0:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <MX_ADC2_Init+0x80>)
 8001cf2:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <MX_ADC2_Init+0x78>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cf6:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d00:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d04:	2204      	movs	r2, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 8001d06:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d0a:	eb0d 0102 	add.w	r1, sp, r2
  sConfig.Offset = 0;
 8001d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d12:	f005 f9cb 	bl	80070ac <HAL_ADC_ConfigChannel>
 8001d16:	b108      	cbz	r0, 8001d1c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001d18:	f003 fd40 	bl	800579c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d1c:	b009      	add	sp, #36	; 0x24
 8001d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d22:	bf00      	nop
 8001d24:	24000578 	.word	0x24000578
 8001d28:	40022100 	.word	0x40022100
 8001d2c:	25b00200 	.word	0x25b00200

08001d30 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	2214      	movs	r2, #20
 8001d38:	2100      	movs	r1, #0
 8001d3a:	a807      	add	r0, sp, #28
 8001d3c:	f00f ff24 	bl	8011b88 <memset>
  if(adcHandle->Instance==ADC1)
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	4a55      	ldr	r2, [pc, #340]	; (8001e98 <HAL_ADC_MspInit+0x168>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d163      	bne.n	8001e10 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d48:	4a54      	ldr	r2, [pc, #336]	; (8001e9c <HAL_ADC_MspInit+0x16c>)
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d4e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d52:	d10c      	bne.n	8001d6e <HAL_ADC_MspInit+0x3e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d54:	4b52      	ldr	r3, [pc, #328]	; (8001ea0 <HAL_ADC_MspInit+0x170>)
 8001d56:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001d5a:	f042 0220 	orr.w	r2, r2, #32
 8001d5e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8001d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	9b01      	ldr	r3, [sp, #4]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_ADC_MspInit+0x170>)
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = ADC_in2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d70:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_in2_GPIO_Port, &GPIO_InitStruct);
 8001d72:	a907      	add	r1, sp, #28
 8001d74:	484b      	ldr	r0, [pc, #300]	; (8001ea4 <HAL_ADC_MspInit+0x174>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

    GPIO_InitStruct.Pin = ADC_in1_Pin|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2600      	movs	r6, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7c:	f042 0204 	orr.w	r2, r2, #4
 8001d80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d88:	f002 0204 	and.w	r2, r2, #4
 8001d8c:	9202      	str	r2, [sp, #8]
 8001d8e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	9303      	str	r3, [sp, #12]
 8001da6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e9cd 3407 	strd	r3, r4, [sp, #28]
    HAL_GPIO_Init(ADC_in2_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f006 feef 	bl	8008b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_in1_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8001db2:	2319      	movs	r3, #25
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	a907      	add	r1, sp, #28
 8001db6:	483c      	ldr	r0, [pc, #240]	; (8001ea8 <HAL_ADC_MspInit+0x178>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dba:	e9cd 3407 	strd	r3, r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f006 fee7 	bl	8008b90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8001dc2:	4c3a      	ldr	r4, [pc, #232]	; (8001eac <HAL_ADC_MspInit+0x17c>)
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <HAL_ADC_MspInit+0x180>)
 8001dc6:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001dc8:	2309      	movs	r3, #9
    hdma_adc2.Instance = DMA1_Stream3;
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001dd2:	4620      	mov	r0, r4
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd4:	60e6      	str	r6, [r4, #12]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd6:	e9c4 3601 	strd	r3, r6, [r4, #4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dde:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001de2:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de6:	e9c4 6608 	strd	r6, r6, [r4, #32]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001dea:	e9c4 1306 	strd	r1, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001dee:	f006 f80f 	bl	8007e10 <HAL_DMA_Init>
 8001df2:	b108      	cbz	r0, 8001df8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001df4:	f003 fcd2 	bl	800579c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001df8:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001dfa:	64ec      	str	r4, [r5, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2105      	movs	r1, #5
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001e00:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001e02:	f005 fe21 	bl	8007a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e06:	2012      	movs	r0, #18
 8001e08:	f005 fe50 	bl	8007aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001e0c:	b00c      	add	sp, #48	; 0x30
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
  else if(adcHandle->Instance==ADC2)
 8001e10:	4a28      	ldr	r2, [pc, #160]	; (8001eb4 <HAL_ADC_MspInit+0x184>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d1fa      	bne.n	8001e0c <HAL_ADC_MspInit+0xdc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e16:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <HAL_ADC_MspInit+0x16c>)
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e1c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e20:	d10c      	bne.n	8001e3c <HAL_ADC_MspInit+0x10c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_ADC_MspInit+0x170>)
 8001e24:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8001e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	9304      	str	r3, [sp, #16]
 8001e3a:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_ADC_MspInit+0x170>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3e:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	a907      	add	r1, sp, #28
 8001e42:	4819      	ldr	r0, [pc, #100]	; (8001ea8 <HAL_ADC_MspInit+0x178>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001e52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001e56:	f002 0201 	and.w	r2, r2, #1
 8001e5a:	9205      	str	r2, [sp, #20]
 8001e5c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001e62:	f042 0202 	orr.w	r2, r2, #2
 8001e66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	9306      	str	r3, [sp, #24]
 8001e74:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e76:	2318      	movs	r3, #24
 8001e78:	e9cd 3407 	strd	r3, r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f006 fe88 	bl	8008b90 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	a907      	add	r1, sp, #28
 8001e82:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <HAL_ADC_MspInit+0x188>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e86:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f006 fe81 	bl	8008b90 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream3;
 8001e8e:	4c0b      	ldr	r4, [pc, #44]	; (8001ebc <HAL_ADC_MspInit+0x18c>)
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_ADC_MspInit+0x190>)
 8001e92:	6023      	str	r3, [r4, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001e94:	230a      	movs	r3, #10
 8001e96:	e798      	b.n	8001dca <HAL_ADC_MspInit+0x9a>
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	24000510 	.word	0x24000510
 8001ea0:	58024400 	.word	0x58024400
 8001ea4:	58020800 	.word	0x58020800
 8001ea8:	58020000 	.word	0x58020000
 8001eac:	240005dc 	.word	0x240005dc
 8001eb0:	40020040 	.word	0x40020040
 8001eb4:	40022100 	.word	0x40022100
 8001eb8:	58020400 	.word	0x58020400
 8001ebc:	24000654 	.word	0x24000654
 8001ec0:	40020058 	.word	0x40020058

08001ec4 <write_backup_register>:
#include "scheduler.h"
#include "backup_resgisters_operations.h"

// Write a value to a backup register
 void write_backup_register(uint32_t register_index, uint32_t value)
{
 8001ec4:	b513      	push	{r0, r1, r4, lr}
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	9101      	str	r1, [sp, #4]
	HAL_PWR_EnableBkUpAccess(); // Enable access to the backup domain
 8001eca:	f007 f855 	bl	8008f78 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, register_index, value); // Write the value to the specified backup register
 8001ece:	9a01      	ldr	r2, [sp, #4]
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <write_backup_register+0x20>)
 8001ed4:	f009 fc8c 	bl	800b7f0 <HAL_RTCEx_BKUPWrite>
	HAL_PWR_DisableBkUpAccess(); // Disable access to the backup domain
}
 8001ed8:	b002      	add	sp, #8
 8001eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_PWR_DisableBkUpAccess(); // Disable access to the backup domain
 8001ede:	f007 b853 	b.w	8008f88 <HAL_PWR_DisableBkUpAccess>
 8001ee2:	bf00      	nop
 8001ee4:	2404000c 	.word	0x2404000c

08001ee8 <read_backup_register>:

// Read a value from a backup register
 uint32_t read_backup_register(uint32_t register_index)
{
 8001ee8:	b507      	push	{r0, r1, r2, lr}
 8001eea:	9001      	str	r0, [sp, #4]
	HAL_PWR_EnableBkUpAccess(); // Enable access to the backup domain
 8001eec:	f007 f844 	bl	8008f78 <HAL_PWR_EnableBkUpAccess>
	uint32_t value = HAL_RTCEx_BKUPRead(&hrtc, register_index); // Read the value from the specified backup register
 8001ef0:	9901      	ldr	r1, [sp, #4]
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <read_backup_register+0x20>)
 8001ef4:	f009 fc81 	bl	800b7fa <HAL_RTCEx_BKUPRead>
 8001ef8:	9001      	str	r0, [sp, #4]
	HAL_PWR_DisableBkUpAccess(); // Disable access to the backup domain
 8001efa:	f007 f845 	bl	8008f88 <HAL_PWR_DisableBkUpAccess>
	return value;
}
 8001efe:	9801      	ldr	r0, [sp, #4]
 8001f00:	b003      	add	sp, #12
 8001f02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f06:	bf00      	nop
 8001f08:	2404000c 	.word	0x2404000c

08001f0c <write_pump_data_to_backup_registers>:


// Function to write the system pumps data to the backup registers
void write_pump_data_to_backup_registers(void)
{
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	4d0b      	ldr	r5, [pc, #44]	; (8001f3c <write_pump_data_to_backup_registers+0x30>)
	for (int i = 0; i < MAX_NUM_PUMPS; i++)
 8001f10:	2400      	movs	r4, #0
		// Pack the id, workingHours, and workingMinutes fields into a single 32-bit value
		uint32_t packed_value = ((uint32_t) pumpInfoArray[i].id << 24)
				| ((uint32_t) pumpInfoArray[i].workingHours << 8)
				| pumpInfoArray[i].workingMinutes;
		// Write the packed value to a backup register
		write_backup_register(i * NUM_REGISTERS_PER_PUMP, packed_value);
 8001f12:	4620      	mov	r0, r4
	for (int i = 0; i < MAX_NUM_PUMPS; i++)
 8001f14:	3401      	adds	r4, #1
		uint32_t packed_value = ((uint32_t) pumpInfoArray[i].id << 24)
 8001f16:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 8001f1a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8001f1e:	f815 3b28 	ldrb.w	r3, [r5], #40
		write_backup_register(i * NUM_REGISTERS_PER_PUMP, packed_value);
 8001f22:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8001f26:	f7ff ffcd 	bl	8001ec4 <write_backup_register>
	for (int i = 0; i < MAX_NUM_PUMPS; i++)
 8001f2a:	2c08      	cmp	r4, #8
 8001f2c:	d1f1      	bne.n	8001f12 <write_pump_data_to_backup_registers+0x6>
	}
	// Write the flag value to the flag register
	write_backup_register(PUMPS_FLAG_REGISTER_INDEX, FLAG_VALUE);
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4903      	ldr	r1, [pc, #12]	; (8001f40 <write_pump_data_to_backup_registers+0x34>)
}
 8001f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	write_backup_register(PUMPS_FLAG_REGISTER_INDEX, FLAG_VALUE);
 8001f36:	f7ff bfc5 	b.w	8001ec4 <write_backup_register>
 8001f3a:	bf00      	nop
 8001f3c:	2403f010 	.word	0x2403f010
 8001f40:	12345678 	.word	0x12345678

08001f44 <delete_pump_data_from_backup_registers>:

// Function to store the pump data to the backup registers
void delete_pump_data_from_backup_registers(void)
{
	// Write the flag value to the flag register
	write_backup_register(PUMPS_FLAG_REGISTER_INDEX, DELETED_FLAG_VALUE);
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	2008      	movs	r0, #8
 8001f4a:	f7ff bfbb 	b.w	8001ec4 <write_backup_register>
	...

08001f50 <restore_pump_data>:



// Function to restore the pumps data from the backup registers
void restore_pump_data(void)
{
 8001f50:	b538      	push	{r3, r4, r5, lr}
//	 Check if the flag value is set
    if (read_backup_register(PUMPS_FLAG_REGISTER_INDEX) == FLAG_VALUE) {
 8001f52:	2008      	movs	r0, #8
 8001f54:	4c18      	ldr	r4, [pc, #96]	; (8001fb8 <restore_pump_data+0x68>)
 8001f56:	f7ff ffc7 	bl	8001ee8 <read_backup_register>
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <restore_pump_data+0x6c>)
 8001f5c:	4298      	cmp	r0, r3
 8001f5e:	d112      	bne.n	8001f86 <restore_pump_data+0x36>
        // Read the pump data from the backup registers
        for (int i = 0; i < MAX_NUM_PUMPS; i++) {
 8001f60:	2500      	movs	r5, #0
            // Read the packed value from a backup register
            uint32_t packed_value = read_backup_register(i * NUM_REGISTERS_PER_PUMP);
 8001f62:	4628      	mov	r0, r5
        for (int i = 0; i < MAX_NUM_PUMPS; i++) {
 8001f64:	3501      	adds	r5, #1
            uint32_t packed_value = read_backup_register(i * NUM_REGISTERS_PER_PUMP);
 8001f66:	f7ff ffbf 	bl	8001ee8 <read_backup_register>
        for (int i = 0; i < MAX_NUM_PUMPS; i++) {
 8001f6a:	3428      	adds	r4, #40	; 0x28
            // Unpack the id, workingHours, and workingMinutes fields from the packed 32-bit value
            pumpInfoArray[i].id = packed_value >> 24;
 8001f6c:	0e03      	lsrs	r3, r0, #24
        for (int i = 0; i < MAX_NUM_PUMPS; i++) {
 8001f6e:	2d08      	cmp	r5, #8
            pumpInfoArray[i].id = packed_value >> 24;
 8001f70:	f804 3c28 	strb.w	r3, [r4, #-40]
            pumpInfoArray[i].workingHours = (packed_value >> 8) & 0xFFFF;
 8001f74:	f3c0 230f 	ubfx	r3, r0, #8, #16
            pumpInfoArray[i].workingMinutes = packed_value & 0xFF;
 8001f78:	b2c0      	uxtb	r0, r0
            pumpInfoArray[i].workingHours = (packed_value >> 8) & 0xFFFF;
 8001f7a:	f844 3c24 	str.w	r3, [r4, #-36]
            pumpInfoArray[i].workingMinutes = packed_value & 0xFF;
 8001f7e:	f844 0c20 	str.w	r0, [r4, #-32]
        for (int i = 0; i < MAX_NUM_PUMPS; i++) {
 8001f82:	d1ee      	bne.n	8001f62 <restore_pump_data+0x12>
	for (uint8_t i = 0; i < MAX_NUM_PUMPS; i++)
	{
		pumpInfoArray[i].id = (i + 1);
	}
    }
}
 8001f84:	bd38      	pop	{r3, r4, r5, pc}
		pumpInfoArray[i].id = (i + 1);
 8001f86:	2201      	movs	r2, #1
 8001f88:	7022      	strb	r2, [r4, #0]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 8001f90:	2203      	movs	r2, #3
 8001f92:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8001f96:	2204      	movs	r2, #4
 8001f98:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 8001fa2:	2206      	movs	r2, #6
 8001fa4:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 8001fa8:	2207      	movs	r2, #7
 8001faa:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
 8001fae:	2208      	movs	r2, #8
 8001fb0:	f884 2118 	strb.w	r2, [r4, #280]	; 0x118
}
 8001fb4:	e7e6      	b.n	8001f84 <restore_pump_data+0x34>
 8001fb6:	bf00      	nop
 8001fb8:	2403f010 	.word	0x2403f010
 8001fbc:	12345678 	.word	0x12345678

08001fc0 <store_factory_page_data>:


//function to resotre the saved data of the the application factory page which is saved by the user
void store_factory_page_data(void)
{
 8001fc0:	b508      	push	{r3, lr}

    // Pack the offset, VFD_type, and systemPumpsNumber variables into a single 32-bit value
    uint32_t packed_value = ((uint32_t) offset << 16)
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <store_factory_page_data+0xd0>)
            | ((uint32_t) VFD_type << 8)
            | systemPumpsNumber;
    // Write the packed value to the backup register
    write_backup_register(9, packed_value);
 8001fc4:	2009      	movs	r0, #9
    uint32_t packed_value = ((uint32_t) offset << 16)
 8001fc6:	881a      	ldrh	r2, [r3, #0]
            | ((uint32_t) VFD_type << 8)
 8001fc8:	4b32      	ldr	r3, [pc, #200]	; (8002094 <store_factory_page_data+0xd4>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            | systemPumpsNumber;
 8001fd2:	4a31      	ldr	r2, [pc, #196]	; (8002098 <store_factory_page_data+0xd8>)
 8001fd4:	7811      	ldrb	r1, [r2, #0]
    write_backup_register(9, packed_value);
 8001fd6:	4319      	orrs	r1, r3
 8001fd8:	f7ff ff74 	bl	8001ec4 <write_backup_register>

    // Pack the firstADCCalibrationReading and secondADCCalibrationReading variables into a single 32-bit value
    packed_value = ((uint32_t) firstADCCalibrationReading << 16)
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	; (800209c <store_factory_page_data+0xdc>)
            | secondADCCalibrationReading;
    // Write the packed value to the backup register
    write_backup_register(10, packed_value);
 8001fde:	200a      	movs	r0, #10
    packed_value = ((uint32_t) firstADCCalibrationReading << 16)
 8001fe0:	8819      	ldrh	r1, [r3, #0]
            | secondADCCalibrationReading;
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <store_factory_page_data+0xe0>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
    write_backup_register(10, packed_value);
 8001fe6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001fea:	f7ff ff6b 	bl	8001ec4 <write_backup_register>

    // Write the setPointRequired variable to the backup register
    write_backup_register(11, *((uint32_t*)&setPointRequired));
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <store_factory_page_data+0xe4>)
 8001ff0:	200b      	movs	r0, #11
 8001ff2:	6819      	ldr	r1, [r3, #0]
 8001ff4:	f7ff ff66 	bl	8001ec4 <write_backup_register>

    // Write the Kp variable to the backup register
    write_backup_register(12, *((uint32_t*)&Kp));
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <store_factory_page_data+0xe8>)
 8001ffa:	200c      	movs	r0, #12
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	f7ff ff61 	bl	8001ec4 <write_backup_register>

    // Write the Ki variable to the backup register
    write_backup_register(13, *((uint32_t*)&Ki));
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <store_factory_page_data+0xec>)
 8002004:	200d      	movs	r0, #13
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	f7ff ff5c 	bl	8001ec4 <write_backup_register>

    // Write the Kd variable to the backup register
    write_backup_register(14, *((uint32_t*)&Kd));
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <store_factory_page_data+0xf0>)
 800200e:	200e      	movs	r0, #14
 8002010:	6819      	ldr	r1, [r3, #0]
 8002012:	f7ff ff57 	bl	8001ec4 <write_backup_register>

    // Write the currentOfTheFirstReading variable to the backup register
    write_backup_register(15, *((uint32_t*)&currentOfTheFirstReading));
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <store_factory_page_data+0xf4>)
 8002018:	200f      	movs	r0, #15
 800201a:	6819      	ldr	r1, [r3, #0]
 800201c:	f7ff ff52 	bl	8001ec4 <write_backup_register>

    // Write the currentOfTheSecondReading variable to the backup register
    write_backup_register(16, *((uint32_t*)&currentOfTheSecondReading));
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <store_factory_page_data+0xf8>)
 8002022:	2010      	movs	r0, #16
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	f7ff ff4d 	bl	8001ec4 <write_backup_register>

    // Write the minimumPressure variable to the backup register
    write_backup_register(17, *((uint32_t*)&minimumPressure));
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <store_factory_page_data+0xfc>)
 800202c:	2011      	movs	r0, #17
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	f7ff ff48 	bl	8001ec4 <write_backup_register>

    // Write the MaximumPressure variable to the backup register
    write_backup_register(18, *((uint32_t*)&MaximumPressure));
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <store_factory_page_data+0x100>)
 8002036:	2012      	movs	r0, #18
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	f7ff ff43 	bl	8001ec4 <write_backup_register>

    // Pack the enableDryRun, enableScheduler, and enablePID flags into a single byte
    uint8_t packed_flags = (enableDryRun << 2) | (enableScheduler << 1) | enablePID;
 800203e:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <store_factory_page_data+0x104>)
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <store_factory_page_data+0x108>)
    // Write the packed flags to the backup register
    write_backup_register(19, packed_flags);
 8002042:	2013      	movs	r0, #19
    uint8_t packed_flags = (enableDryRun << 2) | (enableScheduler << 1) | enablePID;
 8002044:	7811      	ldrb	r1, [r2, #0]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	0049      	lsls	r1, r1, #1
 800204a:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <store_factory_page_data+0x10c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4319      	orrs	r1, r3
    write_backup_register(19, packed_flags);
 8002054:	b2c9      	uxtb	r1, r1
 8002056:	f7ff ff35 	bl	8001ec4 <write_backup_register>

    // Write the coffA variable to the backup register
    write_backup_register(20, *((uint32_t*)&coffA));
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <store_factory_page_data+0x110>)
 800205c:	2014      	movs	r0, #20
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	f7ff ff30 	bl	8001ec4 <write_backup_register>

    // Write the coffB variable to the backup register
    write_backup_register(21, *((uint32_t*)&coffB));
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <store_factory_page_data+0x114>)
 8002066:	2015      	movs	r0, #21
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	f7ff ff2b 	bl	8001ec4 <write_backup_register>

    // Write the cutIn variable to the backup register it is not in order with others
    write_backup_register(26, *((uint32_t*)&cutIn));
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <store_factory_page_data+0x118>)
 8002070:	201a      	movs	r0, #26
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	f7ff ff26 	bl	8001ec4 <write_backup_register>

    // Write the cutOff variable to the backup register it is not in order with others
    write_backup_register(27, *((uint32_t*)&cutOff));
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <store_factory_page_data+0x11c>)
 800207a:	201b      	movs	r0, #27
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	f7ff ff21 	bl	8001ec4 <write_backup_register>

    // Write the value of the flag that will indicate that the data is saved
	write_backup_register(FACTORY_FLAG_REGISTER_INDEX, FLAG_VALUE);
 8002082:	4917      	ldr	r1, [pc, #92]	; (80020e0 <store_factory_page_data+0x120>)
 8002084:	2016      	movs	r0, #22

}
 8002086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	write_backup_register(FACTORY_FLAG_REGISTER_INDEX, FLAG_VALUE);
 800208a:	f7ff bf1b 	b.w	8001ec4 <write_backup_register>
 800208e:	bf00      	nop
 8002090:	2400004c 	.word	0x2400004c
 8002094:	2403efb4 	.word	0x2403efb4
 8002098:	2400005c 	.word	0x2400005c
 800209c:	24000048 	.word	0x24000048
 80020a0:	24000052 	.word	0x24000052
 80020a4:	24000058 	.word	0x24000058
 80020a8:	24000020 	.word	0x24000020
 80020ac:	2400001c 	.word	0x2400001c
 80020b0:	2403ef7c 	.word	0x2403ef7c
 80020b4:	24000038 	.word	0x24000038
 80020b8:	2400003c 	.word	0x2400003c
 80020bc:	2403efec 	.word	0x2403efec
 80020c0:	24000024 	.word	0x24000024
 80020c4:	2403efda 	.word	0x2403efda
 80020c8:	2403efd8 	.word	0x2403efd8
 80020cc:	2403efd9 	.word	0x2403efd9
 80020d0:	24000030 	.word	0x24000030
 80020d4:	24000034 	.word	0x24000034
 80020d8:	24000040 	.word	0x24000040
 80020dc:	24000044 	.word	0x24000044
 80020e0:	12345678 	.word	0x12345678

080020e4 <restore_factory_page_data>:
}

//function to resotre the factory page data after reboting so the system will work with the
//saved data which is saved by the user
void restore_factory_page_data(void)
{
 80020e4:	b508      	push	{r3, lr}
    if (read_backup_register(FACTORY_FLAG_REGISTER_INDEX) == FLAG_VALUE) {
 80020e6:	2016      	movs	r0, #22
 80020e8:	f7ff fefe 	bl	8001ee8 <read_backup_register>
 80020ec:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <restore_factory_page_data+0xcc>)
 80020ee:	4298      	cmp	r0, r3
 80020f0:	d15d      	bne.n	80021ae <restore_factory_page_data+0xca>
    // Read the packed value from the backup register
    uint32_t packed_value = read_backup_register(9);
 80020f2:	2009      	movs	r0, #9
 80020f4:	f7ff fef8 	bl	8001ee8 <read_backup_register>
    // Unpack the offset, VFD_type, and systemPumpsNumber variables from the packed 32-bit value
    offset = packed_value >> 16;
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <restore_factory_page_data+0xd0>)
 80020fa:	0c02      	lsrs	r2, r0, #16
 80020fc:	801a      	strh	r2, [r3, #0]
    VFD_type = (packed_value >> 8) & 0xFF;
 80020fe:	0a02      	lsrs	r2, r0, #8
 8002100:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <restore_factory_page_data+0xd4>)
 8002102:	701a      	strb	r2, [r3, #0]
    systemPumpsNumber = packed_value & 0xFF;
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <restore_factory_page_data+0xd8>)
 8002106:	7018      	strb	r0, [r3, #0]

    // Read the packed value from the backup register
    packed_value = read_backup_register(10);
 8002108:	200a      	movs	r0, #10
 800210a:	f7ff feed 	bl	8001ee8 <read_backup_register>
    // Unpack the firstADCCalibrationReading and secondADCCalibrationReading variables from the packed 32-bit value
    firstADCCalibrationReading = packed_value >> 16;
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <restore_factory_page_data+0xdc>)
 8002110:	0c02      	lsrs	r2, r0, #16
 8002112:	801a      	strh	r2, [r3, #0]
    secondADCCalibrationReading = packed_value & 0xFFFF;
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <restore_factory_page_data+0xe0>)
 8002116:	8018      	strh	r0, [r3, #0]

    // Read the setPointRequired variable from the backup register
    uint32_t temp = read_backup_register(11);
 8002118:	200b      	movs	r0, #11
 800211a:	f7ff fee5 	bl	8001ee8 <read_backup_register>
    setPointRequired = *((float*)&temp);
 800211e:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <restore_factory_page_data+0xe4>)
 8002120:	6018      	str	r0, [r3, #0]

    // Repeat for other float variables...
    temp = read_backup_register(12);
 8002122:	200c      	movs	r0, #12
 8002124:	f7ff fee0 	bl	8001ee8 <read_backup_register>
    Kp = *((float*)&temp);
 8002128:	4b28      	ldr	r3, [pc, #160]	; (80021cc <restore_factory_page_data+0xe8>)
 800212a:	6018      	str	r0, [r3, #0]

    temp = read_backup_register(13);
 800212c:	200d      	movs	r0, #13
 800212e:	f7ff fedb 	bl	8001ee8 <read_backup_register>
    Ki = *((float*)&temp);
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <restore_factory_page_data+0xec>)
 8002134:	6018      	str	r0, [r3, #0]

    temp = read_backup_register(14);
 8002136:	200e      	movs	r0, #14
 8002138:	f7ff fed6 	bl	8001ee8 <read_backup_register>
    Kd = *((float*)&temp);
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <restore_factory_page_data+0xf0>)
 800213e:	6018      	str	r0, [r3, #0]

    temp = read_backup_register(15);
 8002140:	200f      	movs	r0, #15
 8002142:	f7ff fed1 	bl	8001ee8 <read_backup_register>
    currentOfTheFirstReading = *((float*)&temp);
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <restore_factory_page_data+0xf4>)
 8002148:	6018      	str	r0, [r3, #0]

    temp = read_backup_register(16);
 800214a:	2010      	movs	r0, #16
 800214c:	f7ff fecc 	bl	8001ee8 <read_backup_register>
    currentOfTheSecondReading = *((float*)&temp);
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <restore_factory_page_data+0xf8>)
 8002152:	6018      	str	r0, [r3, #0]

    temp = read_backup_register(17);
 8002154:	2011      	movs	r0, #17
 8002156:	f7ff fec7 	bl	8001ee8 <read_backup_register>
    minimumPressure = *((float*)&temp);
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <restore_factory_page_data+0xfc>)
 800215c:	6018      	str	r0, [r3, #0]

    temp = read_backup_register(18);
 800215e:	2012      	movs	r0, #18
 8002160:	f7ff fec2 	bl	8001ee8 <read_backup_register>
    MaximumPressure = *((float*)&temp);
 8002164:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <restore_factory_page_data+0x100>)
 8002166:	6018      	str	r0, [r3, #0]

    // Read the packed flags from the backup register
    uint8_t packed_flags = read_backup_register(19);
 8002168:	2013      	movs	r0, #19
 800216a:	f7ff febd 	bl	8001ee8 <read_backup_register>
    // Unpack the enableDryRun, enableScheduler, and enablePID flags from the single byte
    enableDryRun = (packed_flags >> 2) & 0x1;
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <restore_factory_page_data+0x104>)
 8002170:	f3c0 0280 	ubfx	r2, r0, #2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    enableScheduler = (packed_flags >> 1) & 0x1;
 8002176:	f3c0 0240 	ubfx	r2, r0, #1, #1
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <restore_factory_page_data+0x108>)
    enablePID = packed_flags & 0x1;
 800217c:	f000 0001 	and.w	r0, r0, #1
    enableScheduler = (packed_flags >> 1) & 0x1;
 8002180:	701a      	strb	r2, [r3, #0]
    enablePID = packed_flags & 0x1;
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <restore_factory_page_data+0x10c>)
 8002184:	7018      	strb	r0, [r3, #0]

    temp = read_backup_register(20);
 8002186:	2014      	movs	r0, #20
 8002188:	f7ff feae 	bl	8001ee8 <read_backup_register>
    coffA =*((float*)&temp);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <restore_factory_page_data+0x110>)
 800218e:	6018      	str	r0, [r3, #0]

    temp = read_backup_register(21);
 8002190:	2015      	movs	r0, #21
 8002192:	f7ff fea9 	bl	8001ee8 <read_backup_register>
    coffB =*((float*)&temp);
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <restore_factory_page_data+0x114>)
 8002198:	6018      	str	r0, [r3, #0]

    temp = read_backup_register(26);
 800219a:	201a      	movs	r0, #26
 800219c:	f7ff fea4 	bl	8001ee8 <read_backup_register>
    cutIn =*((float*)&temp);
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <restore_factory_page_data+0x118>)
 80021a2:	6018      	str	r0, [r3, #0]

    temp = read_backup_register(27);
 80021a4:	201b      	movs	r0, #27
 80021a6:	f7ff fe9f 	bl	8001ee8 <read_backup_register>
    cutOff =*((float*)&temp);
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <restore_factory_page_data+0x11c>)
 80021ac:	6018      	str	r0, [r3, #0]

    }
    else{
    	//do nothing and that will make the code with the inital values of the varibles
    }
}
 80021ae:	bd08      	pop	{r3, pc}
 80021b0:	12345678 	.word	0x12345678
 80021b4:	2400004c 	.word	0x2400004c
 80021b8:	2403efb4 	.word	0x2403efb4
 80021bc:	2400005c 	.word	0x2400005c
 80021c0:	24000048 	.word	0x24000048
 80021c4:	24000052 	.word	0x24000052
 80021c8:	24000058 	.word	0x24000058
 80021cc:	24000020 	.word	0x24000020
 80021d0:	2400001c 	.word	0x2400001c
 80021d4:	2403ef7c 	.word	0x2403ef7c
 80021d8:	24000038 	.word	0x24000038
 80021dc:	2400003c 	.word	0x2400003c
 80021e0:	2403efec 	.word	0x2403efec
 80021e4:	24000024 	.word	0x24000024
 80021e8:	2403efd8 	.word	0x2403efd8
 80021ec:	2403efda 	.word	0x2403efda
 80021f0:	2403efd9 	.word	0x2403efd9
 80021f4:	24000030 	.word	0x24000030
 80021f8:	24000034 	.word	0x24000034
 80021fc:	24000040 	.word	0x24000040
 8002200:	24000044 	.word	0x24000044

08002204 <store_internal_system_data>:

//store the current pid data is if a system reset happens it will continue from the point it stopped on
//instead of reseting all the pumps to 0 then start again
void store_internal_system_data(void)
{
 8002204:	b508      	push	{r3, lr}
    // Write the accumulated error variable to the backup register
    write_backup_register(23, *((uint32_t*)&accumulatedError));
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <store_internal_system_data+0x24>)
 8002208:	2017      	movs	r0, #23
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	f7ff fe5a 	bl	8001ec4 <write_backup_register>
    // Write the activePumps variable to the backup register
    write_backup_register(24, *((uint32_t*)&prevActivePumps));
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <store_internal_system_data+0x28>)
 8002212:	2018      	movs	r0, #24
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	f7ff fe55 	bl	8001ec4 <write_backup_register>
    // Write the value of the flag that will indicate that the data is saved
	write_backup_register(INTERNAL_SYSTEM_DATA_FALG_INDEX, FLAG_VALUE);
 800221a:	4905      	ldr	r1, [pc, #20]	; (8002230 <store_internal_system_data+0x2c>)
 800221c:	2019      	movs	r0, #25

}
 800221e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	write_backup_register(INTERNAL_SYSTEM_DATA_FALG_INDEX, FLAG_VALUE);
 8002222:	f7ff be4f 	b.w	8001ec4 <write_backup_register>
 8002226:	bf00      	nop
 8002228:	2403efb8 	.word	0x2403efb8
 800222c:	2403eff8 	.word	0x2403eff8
 8002230:	12345678 	.word	0x12345678

08002234 <restore_internal_system_data>:

//restore the current pid data is if a system reset happens it will continue from the point it stopped on
//instead of reseting all the pumps to 0 then start again
void restore_internal_system_data(void)
{
 8002234:	b508      	push	{r3, lr}
    if (read_backup_register(INTERNAL_SYSTEM_DATA_FALG_INDEX) == FLAG_VALUE) {
 8002236:	2019      	movs	r0, #25
 8002238:	f7ff fe56 	bl	8001ee8 <read_backup_register>
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <restore_internal_system_data+0x24>)
 800223e:	4298      	cmp	r0, r3
 8002240:	d109      	bne.n	8002256 <restore_internal_system_data+0x22>
    	uint32_t temp = read_backup_register(23);
 8002242:	2017      	movs	r0, #23
 8002244:	f7ff fe50 	bl	8001ee8 <read_backup_register>
        accumulatedError =*((float*)&temp);
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <restore_internal_system_data+0x28>)
 800224a:	6018      	str	r0, [r3, #0]
    	 temp = read_backup_register(24);
 800224c:	2018      	movs	r0, #24
 800224e:	f7ff fe4b 	bl	8001ee8 <read_backup_register>
        prevActivePumps =*((uint8_t*)&temp);
 8002252:	4b03      	ldr	r3, [pc, #12]	; (8002260 <restore_internal_system_data+0x2c>)
 8002254:	7018      	strb	r0, [r3, #0]
    }
    else{
    	//start pid from 0
    }
}
 8002256:	bd08      	pop	{r3, pc}
 8002258:	12345678 	.word	0x12345678
 800225c:	2403efb8 	.word	0x2403efb8
 8002260:	2403eff8 	.word	0x2403eff8

08002264 <store_alarm_data>:
//to resotre it when the system reboot
void store_alarm_data(void)
{
    // Pack the four 1-bit variables into a single 4-bit value
    uint32_t packed_value = ((uint32_t)(enableDryRun << 3)
                            | (dryRunSysStop << 2)
 8002264:	4a09      	ldr	r2, [pc, #36]	; (800228c <store_alarm_data+0x28>)
                            | (pressureAlarmEnable << 1)
                            | pressureSysStop)
                            | (1 << 31);  // Set the last bit to 1 as data stored flag

    // Write the packed value to the backup register
    write_backup_register(ALARM_SAVING_REGISTER, packed_value);
 8002266:	201c      	movs	r0, #28
    uint32_t packed_value = ((uint32_t)(enableDryRun << 3)
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <store_alarm_data+0x2c>)
                            | (dryRunSysStop << 2)
 800226a:	7811      	ldrb	r1, [r2, #0]
    uint32_t packed_value = ((uint32_t)(enableDryRun << 3)
 800226c:	781b      	ldrb	r3, [r3, #0]
                            | (dryRunSysStop << 2)
 800226e:	0089      	lsls	r1, r1, #2
                            | (pressureAlarmEnable << 1)
 8002270:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <store_alarm_data+0x30>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
                            | pressureSysStop)
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <store_alarm_data+0x34>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4319      	orrs	r1, r3
    write_backup_register(ALARM_SAVING_REGISTER, packed_value);
 8002282:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002286:	f7ff be1d 	b.w	8001ec4 <write_backup_register>
 800228a:	bf00      	nop
 800228c:	2403efd7 	.word	0x2403efd7
 8002290:	2403efd8 	.word	0x2403efd8
 8002294:	2403eff5 	.word	0x2403eff5
 8002298:	2403eff7 	.word	0x2403eff7

0800229c <restore_alarm_data>:

//function to restore the data of the alarm and warning page after restarting the board
void restore_alarm_data(void)
{
    // Read the packed value from the backup register
    uint32_t packed_value = read_backup_register(ALARM_SAVING_REGISTER);
 800229c:	201c      	movs	r0, #28
{
 800229e:	b508      	push	{r3, lr}
    uint32_t packed_value = read_backup_register(ALARM_SAVING_REGISTER);
 80022a0:	f7ff fe22 	bl	8001ee8 <read_backup_register>

    // Check if the last bit is set to 1 (data stored flag)
    if ((packed_value >> 31) & 0x1) {
 80022a4:	2800      	cmp	r0, #0
 80022a6:	da0f      	bge.n	80022c8 <restore_alarm_data+0x2c>
        // Unpack the four 1-bit variables from the single 4-bit value
        enableDryRun = (packed_value >> 3) & 0x1;
 80022a8:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <restore_alarm_data+0x30>)
 80022ae:	701a      	strb	r2, [r3, #0]
        dryRunSysStop = (packed_value >> 2) & 0x1;
 80022b0:	f3c0 0280 	ubfx	r2, r0, #2, #1
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <restore_alarm_data+0x34>)
 80022b6:	701a      	strb	r2, [r3, #0]
        pressureAlarmEnable = (packed_value >> 1) & 0x1;
 80022b8:	f3c0 0240 	ubfx	r2, r0, #1, #1
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <restore_alarm_data+0x38>)
        pressureSysStop = packed_value & 0x1;
 80022be:	f000 0001 	and.w	r0, r0, #1
        pressureAlarmEnable = (packed_value >> 1) & 0x1;
 80022c2:	701a      	strb	r2, [r3, #0]
        pressureSysStop = packed_value & 0x1;
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <restore_alarm_data+0x3c>)
 80022c6:	7018      	strb	r0, [r3, #0]
    }
    else {
        // Do nothing and that will make the code with the initial values of the variables
    }
}
 80022c8:	bd08      	pop	{r3, pc}
 80022ca:	bf00      	nop
 80022cc:	2403efd8 	.word	0x2403efd8
 80022d0:	2403efd7 	.word	0x2403efd7
 80022d4:	2403eff5 	.word	0x2403eff5
 80022d8:	2403eff7 	.word	0x2403eff7

080022dc <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <MX_DMA_Init+0x84>)
{
 80022de:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022e0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80022e4:	2105      	movs	r1, #5
 80022e6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80022f0:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80022fe:	f005 fba3 	bl	8007a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002302:	200b      	movs	r0, #11
 8002304:	f005 fbd2 	bl	8007aac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2105      	movs	r1, #5
 800230c:	200c      	movs	r0, #12
 800230e:	f005 fb9b 	bl	8007a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002312:	200c      	movs	r0, #12
 8002314:	f005 fbca 	bl	8007aac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2105      	movs	r1, #5
 800231c:	200d      	movs	r0, #13
 800231e:	f005 fb93 	bl	8007a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002322:	200d      	movs	r0, #13
 8002324:	f005 fbc2 	bl	8007aac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2105      	movs	r1, #5
 800232c:	200e      	movs	r0, #14
 800232e:	f005 fb8b 	bl	8007a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002332:	200e      	movs	r0, #14
 8002334:	f005 fbba 	bl	8007aac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2105      	movs	r1, #5
 800233c:	200f      	movs	r0, #15
 800233e:	f005 fb83 	bl	8007a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002342:	200f      	movs	r0, #15
 8002344:	f005 fbb2 	bl	8007aac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2105      	movs	r1, #5
 800234c:	2010      	movs	r0, #16
 800234e:	f005 fb7b 	bl	8007a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002352:	2010      	movs	r0, #16

}
 8002354:	b003      	add	sp, #12
 8002356:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800235a:	f005 bba7 	b.w	8007aac <HAL_NVIC_EnableIRQ>
 800235e:	bf00      	nop
 8002360:	58024400 	.word	0x58024400

08002364 <read_alarm_records>:



//this function is used to read the alarms hitstory of the system from the flash memroy
//it takes the base address to read from and the array to store the alarms on it
HAL_StatusTypeDef read_alarm_records(uint32_t baseAddress, char (*alarmsArray)[RECORD_SIZE], uint32_t *numRecords) {
 8002364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t tempNumberOfRecords=0;

    // Start the timeout timer
    uint32_t startTick = HAL_GetTick(); // Get the start tick count

    for (uint32_t recordNum = 0; recordNum <= *numRecords; recordNum++) {
 8002368:	2400      	movs	r4, #0
HAL_StatusTypeDef read_alarm_records(uint32_t baseAddress, char (*alarmsArray)[RECORD_SIZE], uint32_t *numRecords) {
 800236a:	b093      	sub	sp, #76	; 0x4c
 800236c:	4607      	mov	r7, r0
 800236e:	4688      	mov	r8, r1
 8002370:	4691      	mov	r9, r2
    uint32_t tempNumberOfRecords=0;
 8002372:	4625      	mov	r5, r4
    uint32_t startTick = HAL_GetTick(); // Get the start tick count
 8002374:	f004 fc82 	bl	8006c7c <HAL_GetTick>
            status = HAL_TIMEOUT;
            break;
        }

        // Read a block of memory from the flash
        if (S25FL256S_ReadSTR(&hqspi, S25FL256S_SPI_1I4O_MODE, readbuf, addressToRead, sizeof(readbuf)) != S25FL256S_OK) {
 8002378:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8002418 <read_alarm_records+0xb4>
    uint32_t startTick = HAL_GetTick(); // Get the start tick count
 800237c:	4606      	mov	r6, r0
        if ((HAL_GetTick() - startTick) > 2000) { // 2000 ms or 2 seconds
 800237e:	f004 fc7d 	bl	8006c7c <HAL_GetTick>
 8002382:	1b80      	subs	r0, r0, r6
 8002384:	eb07 1a44 	add.w	sl, r7, r4, lsl #5
 8002388:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800238c:	d906      	bls.n	800239c <read_alarm_records+0x38>
            printf("Timeout while reading alarm records.\n");
 800238e:	481f      	ldr	r0, [pc, #124]	; (800240c <read_alarm_records+0xa8>)
 8002390:	f00f fa98 	bl	80118c4 <puts>
            status = HAL_TIMEOUT;
 8002394:	2003      	movs	r0, #3
        // Move to the next record address
        addressToRead += RECORD_SIZE;
    }

    return status;
}
 8002396:	b013      	add	sp, #76	; 0x4c
 8002398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (S25FL256S_ReadSTR(&hqspi, S25FL256S_SPI_1I4O_MODE, readbuf, addressToRead, sizeof(readbuf)) != S25FL256S_OK) {
 800239c:	2340      	movs	r3, #64	; 0x40
 800239e:	aa02      	add	r2, sp, #8
 80023a0:	2103      	movs	r1, #3
 80023a2:	4658      	mov	r0, fp
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	4653      	mov	r3, sl
 80023a8:	f003 fc3a 	bl	8005c20 <S25FL256S_ReadSTR>
 80023ac:	b128      	cbz	r0, 80023ba <read_alarm_records+0x56>
            printf("Error reading from flash at address %lu\n", addressToRead);
 80023ae:	4651      	mov	r1, sl
 80023b0:	4817      	ldr	r0, [pc, #92]	; (8002410 <read_alarm_records+0xac>)
 80023b2:	f00f fa19 	bl	80117e8 <iprintf>
            status = HAL_ERROR;
 80023b6:	2001      	movs	r0, #1
            break;
 80023b8:	e7ed      	b.n	8002396 <read_alarm_records+0x32>
 80023ba:	aa02      	add	r2, sp, #8
            if (readbuf[i] != 0xFF) {
 80023bc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80023c0:	29ff      	cmp	r1, #255	; 0xff
 80023c2:	d107      	bne.n	80023d4 <read_alarm_records+0x70>
        for (int i = 0; i < 64; i++) {
 80023c4:	3001      	adds	r0, #1
 80023c6:	2840      	cmp	r0, #64	; 0x40
 80023c8:	d1f8      	bne.n	80023bc <read_alarm_records+0x58>
            printf("End of records reached at address %lu\n", addressToRead);
 80023ca:	4651      	mov	r1, sl
 80023cc:	4811      	ldr	r0, [pc, #68]	; (8002414 <read_alarm_records+0xb0>)
 80023ce:	f00f fa0b 	bl	80117e8 <iprintf>
 80023d2:	e019      	b.n	8002408 <read_alarm_records+0xa4>
        if (readbuf[0] != '0') {
 80023d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80023d8:	2b30      	cmp	r3, #48	; 0x30
 80023da:	d010      	beq.n	80023fe <read_alarm_records+0x9a>
            memcpy(alarmsArray[tempNumberOfRecords], readbuf, RECORD_SIZE);
 80023dc:	f10d 0c08 	add.w	ip, sp, #8
 80023e0:	eb08 1245 	add.w	r2, r8, r5, lsl #5
 80023e4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80023e8:	4663      	mov	r3, ip
 80023ea:	3208      	adds	r2, #8
 80023ec:	cb03      	ldmia	r3!, {r0, r1}
 80023ee:	4573      	cmp	r3, lr
 80023f0:	f842 0c08 	str.w	r0, [r2, #-8]
 80023f4:	f842 1c04 	str.w	r1, [r2, #-4]
 80023f8:	469c      	mov	ip, r3
 80023fa:	d1f5      	bne.n	80023e8 <read_alarm_records+0x84>
            tempNumberOfRecords++;
 80023fc:	3501      	adds	r5, #1
    for (uint32_t recordNum = 0; recordNum <= *numRecords; recordNum++) {
 80023fe:	3401      	adds	r4, #1
 8002400:	f8d9 3000 	ldr.w	r3, [r9]
 8002404:	42a3      	cmp	r3, r4
 8002406:	d2ba      	bcs.n	800237e <read_alarm_records+0x1a>
    HAL_StatusTypeDef status = HAL_OK;
 8002408:	2000      	movs	r0, #0
    return status;
 800240a:	e7c4      	b.n	8002396 <read_alarm_records+0x32>
 800240c:	08015008 	.word	0x08015008
 8002410:	0801502d 	.word	0x0801502d
 8002414:	08015056 	.word	0x08015056
 8002418:	2403ffc0 	.word	0x2403ffc0

0800241c <compare_weekly_rtc>:

// this funciton compare the current date and time with the by user stored weekly days
// that the system PID should work automattaclly on and extract the date and time that the current date and time are within it
void compare_weekly_rtc()
{
 800241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	matchedWeeklyRecordCount = 0;  // Reset matchedWeeklyRecordCount to zero
 8002420:	4e30      	ldr	r6, [pc, #192]	; (80024e4 <compare_weekly_rtc+0xc8>)
 8002422:	2400      	movs	r4, #0
{
 8002424:	b08d      	sub	sp, #52	; 0x34
 8002426:	4f30      	ldr	r7, [pc, #192]	; (80024e8 <compare_weekly_rtc+0xcc>)
	matchedWeeklyRecordCount = 0;  // Reset matchedWeeklyRecordCount to zero
 8002428:	6034      	str	r4, [r6, #0]

	Get_RTC_Values(); // gets the  current sDate and sTime.
 800242a:	f003 fad5 	bl	80059d8 <Get_RTC_Values>

	char currentTime[6];  // HH:MM format
	sprintf(currentTime, "%02d:%02d", sTime.Hours, sTime.Minutes);
 800242e:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <compare_weekly_rtc+0xd0>)
 8002430:	a804      	add	r0, sp, #16
 8002432:	492f      	ldr	r1, [pc, #188]	; (80024f0 <compare_weekly_rtc+0xd4>)
 8002434:	7853      	ldrb	r3, [r2, #1]
 8002436:	7812      	ldrb	r2, [r2, #0]
 8002438:	f00f fa80 	bl	801193c <siprintf>

	uint8_t currentDay = sDate.WeekDay; //  this gives current day, where 1 = Monday, 2 = Tuesday, and so on.
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <compare_weekly_rtc+0xd8>)

	int matchingRecordIndex = -1;

	for (int i = 0; i < valid_weekly_record_count; i++)
 800243e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8002500 <compare_weekly_rtc+0xe4>
	uint8_t currentDay = sDate.WeekDay; //  this gives current day, where 1 = Monday, 2 = Tuesday, and so on.
 8002442:	f893 b000 	ldrb.w	fp, [r3]
	int matchingRecordIndex = -1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
		char startTime[6];
		char endTime[6];
		uint8_t days[MAX_DAYS]; // assuming the length of days array

		// Extracting the values using sscanf
		if (sscanf(valid_weekly_records[i].original_record,
 800244a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002504 <compare_weekly_rtc+0xe8>
	int matchingRecordIndex = -1;
 800244e:	9303      	str	r3, [sp, #12]
	for (int i = 0; i < valid_weekly_record_count; i++)
 8002450:	f8d9 3000 	ldr.w	r3, [r9]
 8002454:	42a3      	cmp	r3, r4
 8002456:	d80b      	bhi.n	8002470 <compare_weekly_rtc+0x54>
 8002458:	4d27      	ldr	r5, [pc, #156]	; (80024f8 <compare_weekly_rtc+0xdc>)
			matchedWeeklyRecordIndices[matchedWeeklyRecordCount++] =
					matchingRecordIndex;

		}
	}
	for (int i = 0; i < matchedWeeklyRecordCount; i++)
 800245a:	2400      	movs	r4, #0
	{
		printf("Matching weekly record found with index: %d\n",
 800245c:	4f27      	ldr	r7, [pc, #156]	; (80024fc <compare_weekly_rtc+0xe0>)
	for (int i = 0; i < matchedWeeklyRecordCount; i++)
 800245e:	6833      	ldr	r3, [r6, #0]
 8002460:	42a3      	cmp	r3, r4
 8002462:	dc23      	bgt.n	80024ac <compare_weekly_rtc+0x90>
				matchedWeeklyRecordIndices[i]);
	}
	printf("\n");
 8002464:	200a      	movs	r0, #10
 8002466:	f00f f9d1 	bl	801180c <putchar>

}
 800246a:	b00d      	add	sp, #52	; 0x34
 800246c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sscanf(valid_weekly_records[i].original_record,
 8002470:	ad0a      	add	r5, sp, #40	; 0x28
 8002472:	f10d 0820 	add.w	r8, sp, #32
 8002476:	ab06      	add	r3, sp, #24
 8002478:	aa03      	add	r2, sp, #12
 800247a:	4651      	mov	r1, sl
 800247c:	4638      	mov	r0, r7
 800247e:	9501      	str	r5, [sp, #4]
 8002480:	f8cd 8000 	str.w	r8, [sp]
 8002484:	f00f fa7a 	bl	801197c <siscanf>
 8002488:	2802      	cmp	r0, #2
 800248a:	dd05      	ble.n	8002498 <compare_weekly_rtc+0x7c>
		for (int j = 0; j < strlen((char*) days); j++)
 800248c:	4628      	mov	r0, r5
 800248e:	f7fd ff87 	bl	80003a0 <strlen>
 8002492:	2300      	movs	r3, #0
 8002494:	4283      	cmp	r3, r0
 8002496:	d102      	bne.n	800249e <compare_weekly_rtc+0x82>
	for (int i = 0; i < valid_weekly_record_count; i++)
 8002498:	3401      	adds	r4, #1
 800249a:	3780      	adds	r7, #128	; 0x80
 800249c:	e7d8      	b.n	8002450 <compare_weekly_rtc+0x34>
			if (days[j] - '0' == currentDay)  // Convert char to int and check
 800249e:	f815 2b01 	ldrb.w	r2, [r5], #1
 80024a2:	3a30      	subs	r2, #48	; 0x30
 80024a4:	455a      	cmp	r2, fp
 80024a6:	d008      	beq.n	80024ba <compare_weekly_rtc+0x9e>
		for (int j = 0; j < strlen((char*) days); j++)
 80024a8:	3301      	adds	r3, #1
 80024aa:	e7f3      	b.n	8002494 <compare_weekly_rtc+0x78>
		printf("Matching weekly record found with index: %d\n",
 80024ac:	f855 1b04 	ldr.w	r1, [r5], #4
 80024b0:	4638      	mov	r0, r7
	for (int i = 0; i < matchedWeeklyRecordCount; i++)
 80024b2:	3401      	adds	r4, #1
		printf("Matching weekly record found with index: %d\n",
 80024b4:	f00f f998 	bl	80117e8 <iprintf>
	for (int i = 0; i < matchedWeeklyRecordCount; i++)
 80024b8:	e7d1      	b.n	800245e <compare_weekly_rtc+0x42>
		if (strcmp(currentTime, startTime) >= 0
 80024ba:	a906      	add	r1, sp, #24
 80024bc:	a804      	add	r0, sp, #16
 80024be:	f7fd ff0f 	bl	80002e0 <strcmp>
 80024c2:	2800      	cmp	r0, #0
 80024c4:	dbe8      	blt.n	8002498 <compare_weekly_rtc+0x7c>
				&& strcmp(currentTime, endTime) <= 0)
 80024c6:	4641      	mov	r1, r8
 80024c8:	a804      	add	r0, sp, #16
 80024ca:	f7fd ff09 	bl	80002e0 <strcmp>
 80024ce:	2800      	cmp	r0, #0
 80024d0:	dce2      	bgt.n	8002498 <compare_weekly_rtc+0x7c>
			matchedWeeklyRecordIndices[matchedWeeklyRecordCount++] =
 80024d2:	6833      	ldr	r3, [r6, #0]
 80024d4:	4908      	ldr	r1, [pc, #32]	; (80024f8 <compare_weekly_rtc+0xdc>)
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	6032      	str	r2, [r6, #0]
 80024da:	9a03      	ldr	r2, [sp, #12]
 80024dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80024e0:	e7da      	b.n	8002498 <compare_weekly_rtc+0x7c>
 80024e2:	bf00      	nop
 80024e4:	24000008 	.word	0x24000008
 80024e8:	2401fb68 	.word	0x2401fb68
 80024ec:	24040034 	.word	0x24040034
 80024f0:	080150d2 	.word	0x080150d2
 80024f4:	24040030 	.word	0x24040030
 80024f8:	240016a8 	.word	0x240016a8
 80024fc:	08015091 	.word	0x08015091
 8002500:	2401fb50 	.word	0x2401fb50
 8002504:	0801507d 	.word	0x0801507d

08002508 <compare_rtc>:
// this funciton compare the current date and time with the by user stored dated records
// that the system PID should work automatically on and extract the date and time that the current date and time are within it
void compare_rtc()
{
 8002508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	matchedRecordCount = -1; // Initialize to -1 to indicate that no records have been matched yet
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	4c2f      	ldr	r4, [pc, #188]	; (80025d0 <compare_rtc+0xc8>)
{
 8002512:	b094      	sub	sp, #80	; 0x50
 8002514:	4e2f      	ldr	r6, [pc, #188]	; (80025d4 <compare_rtc+0xcc>)
	matchedRecordCount = -1; // Initialize to -1 to indicate that no records have been matched yet
 8002516:	6023      	str	r3, [r4, #0]

	Get_RTC_Values();
 8002518:	f003 fa5e 	bl	80059d8 <Get_RTC_Values>

	char systemRTC[20];  // YYYY-MM-DDTHH:MM:SS format
	sprintf(systemRTC, "%04d-%02d-%02dT%02d:%02d:%02d", 2000 + sDate.Year,
			sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800251c:	492e      	ldr	r1, [pc, #184]	; (80025d8 <compare_rtc+0xd0>)

	for (int i = 0; i < valid_record_count; i++)
 800251e:	2500      	movs	r5, #0
			sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <compare_rtc+0xd4>)
	sprintf(systemRTC, "%04d-%02d-%02dT%02d:%02d:%02d", 2000 + sDate.Year,
 8002522:	7888      	ldrb	r0, [r1, #2]
 8002524:	78da      	ldrb	r2, [r3, #3]
 8002526:	9003      	str	r0, [sp, #12]
 8002528:	7848      	ldrb	r0, [r1, #1]
 800252a:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
	for (int i = 0; i < valid_record_count; i++)
 800252e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80025f0 <compare_rtc+0xe8>
	sprintf(systemRTC, "%04d-%02d-%02dT%02d:%02d:%02d", 2000 + sDate.Year,
 8002532:	9002      	str	r0, [sp, #8]
 8002534:	a805      	add	r0, sp, #20
 8002536:	7809      	ldrb	r1, [r1, #0]
	{
		int index;
		char startDate[20];
		char endDate[20];

		if (sscanf(valid_records[i].original_record, "%d_%19[^,],%19s", &index,
 8002538:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80025f4 <compare_rtc+0xec>
	sprintf(systemRTC, "%04d-%02d-%02dT%02d:%02d:%02d", 2000 + sDate.Year,
 800253c:	9101      	str	r1, [sp, #4]
 800253e:	7899      	ldrb	r1, [r3, #2]
		{
			if (matchedRecordCount == -1)
			{
				matchedRecordCount = 0; // Found the first record, so initialize to 0
			}
			matchedRecordIndices[matchedRecordCount++] = index;
 8002540:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 80025e4 <compare_rtc+0xdc>
	sprintf(systemRTC, "%04d-%02d-%02dT%02d:%02d:%02d", 2000 + sDate.Year,
 8002544:	9100      	str	r1, [sp, #0]
 8002546:	4926      	ldr	r1, [pc, #152]	; (80025e0 <compare_rtc+0xd8>)
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	f00f f9f7 	bl	801193c <siprintf>
	for (int i = 0; i < valid_record_count; i++)
 800254e:	f8d8 3000 	ldr.w	r3, [r8]
 8002552:	42ab      	cmp	r3, r5
 8002554:	dc0f      	bgt.n	8002576 <compare_rtc+0x6e>
		}
	}

	if (matchedRecordCount == -1)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	2500      	movs	r5, #0
 800255a:	3301      	adds	r3, #1
 800255c:	d030      	beq.n	80025c0 <compare_rtc+0xb8>
 800255e:	4e21      	ldr	r6, [pc, #132]	; (80025e4 <compare_rtc+0xdc>)
	}
	else
	{
		for (int i = 0; i < matchedRecordCount; i++)
		{
			printf("Matching record found with index: %d\n",
 8002560:	4f21      	ldr	r7, [pc, #132]	; (80025e8 <compare_rtc+0xe0>)
		for (int i = 0; i < matchedRecordCount; i++)
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	42ab      	cmp	r3, r5
 8002566:	dd2f      	ble.n	80025c8 <compare_rtc+0xc0>
			printf("Matching record found with index: %d\n",
 8002568:	f856 1b04 	ldr.w	r1, [r6], #4
 800256c:	4638      	mov	r0, r7
		for (int i = 0; i < matchedRecordCount; i++)
 800256e:	3501      	adds	r5, #1
			printf("Matching record found with index: %d\n",
 8002570:	f00f f93a 	bl	80117e8 <iprintf>
		for (int i = 0; i < matchedRecordCount; i++)
 8002574:	e7f5      	b.n	8002562 <compare_rtc+0x5a>
		if (sscanf(valid_records[i].original_record, "%d_%19[^,],%19s", &index,
 8002576:	af0f      	add	r7, sp, #60	; 0x3c
 8002578:	ab0a      	add	r3, sp, #40	; 0x28
 800257a:	aa04      	add	r2, sp, #16
 800257c:	4649      	mov	r1, r9
 800257e:	4630      	mov	r0, r6
 8002580:	9700      	str	r7, [sp, #0]
 8002582:	f00f f9fb 	bl	801197c <siscanf>
 8002586:	2803      	cmp	r0, #3
 8002588:	d002      	beq.n	8002590 <compare_rtc+0x88>
	for (int i = 0; i < valid_record_count; i++)
 800258a:	3501      	adds	r5, #1
 800258c:	3678      	adds	r6, #120	; 0x78
 800258e:	e7de      	b.n	800254e <compare_rtc+0x46>
		if (strcmp(systemRTC, startDate) >= 0
 8002590:	a90a      	add	r1, sp, #40	; 0x28
 8002592:	a805      	add	r0, sp, #20
 8002594:	f7fd fea4 	bl	80002e0 <strcmp>
 8002598:	2800      	cmp	r0, #0
 800259a:	dbf6      	blt.n	800258a <compare_rtc+0x82>
				&& strcmp(systemRTC, endDate) <= 0)
 800259c:	4639      	mov	r1, r7
 800259e:	a805      	add	r0, sp, #20
 80025a0:	f7fd fe9e 	bl	80002e0 <strcmp>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	dcf0      	bgt.n	800258a <compare_rtc+0x82>
			if (matchedRecordCount == -1)
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	3301      	adds	r3, #1
				matchedRecordCount = 0; // Found the first record, so initialize to 0
 80025ac:	bf04      	itt	eq
 80025ae:	2300      	moveq	r3, #0
 80025b0:	6023      	streq	r3, [r4, #0]
			matchedRecordIndices[matchedRecordCount++] = index;
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	6022      	str	r2, [r4, #0]
 80025b8:	9a04      	ldr	r2, [sp, #16]
 80025ba:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
 80025be:	e7e4      	b.n	800258a <compare_rtc+0x82>
		printf("No matching record found for the current system RTC.\n");
 80025c0:	480a      	ldr	r0, [pc, #40]	; (80025ec <compare_rtc+0xe4>)
		matchedRecordCount = 0;  // No records found, set count to 0
 80025c2:	6025      	str	r5, [r4, #0]
		printf("No matching record found for the current system RTC.\n");
 80025c4:	f00f f97e 	bl	80118c4 <puts>
					matchedRecordIndices[i]);
		}
	}
}
 80025c8:	b014      	add	sp, #80	; 0x50
 80025ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ce:	bf00      	nop
 80025d0:	24000004 	.word	0x24000004
 80025d4:	240026a4 	.word	0x240026a4
 80025d8:	24040034 	.word	0x24040034
 80025dc:	24040030 	.word	0x24040030
 80025e0:	080150be 	.word	0x080150be
 80025e4:	24000708 	.word	0x24000708
 80025e8:	08015121 	.word	0x08015121
 80025ec:	080150ec 	.word	0x080150ec
 80025f0:	2400268c 	.word	0x2400268c
 80025f4:	080150dc 	.word	0x080150dc

080025f8 <ExtractWeeklyRecords>:
//this function is used to extract weekly record from the external flash memroy and store them
// in array
void ExtractWeeklyRecords(QSPI_HandleTypeDef *Ctx)
{
 80025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t readbuf[WEEKLY_RECORD_SIZE];
	uint8_t readbufback[WEEKLY_RECORD_SIZE];
	uint32_t address = WEEKLY_SCHEDULAR_RECORDS_START_ADDRESS;
	valid_weekly_record_count = 0;

	if (firstTimeRequest == 0)
 80025fc:	4c59      	ldr	r4, [pc, #356]	; (8002764 <ExtractWeeklyRecords+0x16c>)
	valid_weekly_record_count = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	4e59      	ldr	r6, [pc, #356]	; (8002768 <ExtractWeeklyRecords+0x170>)
{
 8002602:	ed2d 8b02 	vpush	{d8}
	if (firstTimeRequest == 0)
 8002606:	7821      	ldrb	r1, [r4, #0]
{
 8002608:	ee08 0a10 	vmov	s16, r0
 800260c:	b09b      	sub	sp, #108	; 0x6c
	{
		//switch to QSPI
		flStatus = S25FL256S_Enter4LinesDataMode(&hqspi, S25FL256S_SPI_MODE);
 800260e:	4857      	ldr	r0, [pc, #348]	; (800276c <ExtractWeeklyRecords+0x174>)
	valid_weekly_record_count = 0;
 8002610:	6033      	str	r3, [r6, #0]
	if (firstTimeRequest == 0)
 8002612:	2900      	cmp	r1, #0
 8002614:	d134      	bne.n	8002680 <ExtractWeeklyRecords+0x88>
		flStatus = S25FL256S_Enter4LinesDataMode(&hqspi, S25FL256S_SPI_MODE);
 8002616:	f003 fa8f 	bl	8005b38 <S25FL256S_Enter4LinesDataMode>
 800261a:	4b55      	ldr	r3, [pc, #340]	; (8002770 <ExtractWeeklyRecords+0x178>)
 800261c:	4601      	mov	r1, r0
 800261e:	6018      	str	r0, [r3, #0]
		printf("Entering to QSPI, status = %ld\r\n", flStatus);
 8002620:	4854      	ldr	r0, [pc, #336]	; (8002774 <ExtractWeeklyRecords+0x17c>)
 8002622:	f00f f8e1 	bl	80117e8 <iprintf>
		printf("SysTick2: %ld\r\n", HAL_GetTick());
 8002626:	f004 fb29 	bl	8006c7c <HAL_GetTick>
 800262a:	4601      	mov	r1, r0
 800262c:	4852      	ldr	r0, [pc, #328]	; (8002778 <ExtractWeeklyRecords+0x180>)
 800262e:	f00f f8db 	bl	80117e8 <iprintf>
		firstTimeRequest = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	7023      	strb	r3, [r4, #0]
{
 8002636:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8002794 <ExtractWeeklyRecords+0x19c>
		sprintf(str_index_check, "%d", index);

		if (index != 0 && strcmp(token, str_index_check) == 0)
		{
			strncpy(
					valid_weekly_records[valid_weekly_record_count].original_record,
 800263a:	4f50      	ldr	r7, [pc, #320]	; (800277c <ExtractWeeklyRecords+0x184>)
		S25FL256S_ReadSTR(Ctx, S25FL256S_SPI_1I4O_MODE, readbuf, address,
 800263c:	2320      	movs	r3, #32
 800263e:	aa0a      	add	r2, sp, #40	; 0x28
 8002640:	2103      	movs	r1, #3
 8002642:	ee18 0a10 	vmov	r0, s16
 8002646:	9300      	str	r3, [sp, #0]
		memcpy(readbufback, readbuf, WEEKLY_RECORD_SIZE);
 8002648:	ad0a      	add	r5, sp, #40	; 0x28
		S25FL256S_ReadSTR(Ctx, S25FL256S_SPI_1I4O_MODE, readbuf, address,
 800264a:	464b      	mov	r3, r9
		memcpy(readbufback, readbuf, WEEKLY_RECORD_SIZE);
 800264c:	ac12      	add	r4, sp, #72	; 0x48
		S25FL256S_ReadSTR(Ctx, S25FL256S_SPI_1I4O_MODE, readbuf, address,
 800264e:	f003 fae7 	bl	8005c20 <S25FL256S_ReadSTR>
		osDelay(5);
 8002652:	2005      	movs	r0, #5
 8002654:	f00b fc89 	bl	800df6a <osDelay>
		memcpy(readbufback, readbuf, WEEKLY_RECORD_SIZE);
 8002658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		for (int i = 0; i < 25; i++)
 8002664:	aa0a      	add	r2, sp, #40	; 0x28
 8002666:	2300      	movs	r3, #0
			if (readbuf[i] != 0xFF)
 8002668:	f812 1b01 	ldrb.w	r1, [r2], #1
 800266c:	29ff      	cmp	r1, #255	; 0xff
 800266e:	d116      	bne.n	800269e <ExtractWeeklyRecords+0xa6>
		for (int i = 0; i < 25; i++)
 8002670:	3301      	adds	r3, #1
 8002672:	2b19      	cmp	r3, #25
 8002674:	d1f8      	bne.n	8002668 <ExtractWeeklyRecords+0x70>
				break;
		}

		address += WEEKLY_RECORD_SIZE;
	}
}
 8002676:	b01b      	add	sp, #108	; 0x6c
 8002678:	ecbd 8b02 	vpop	{d8}
 800267c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_QSPI_DeInit(&hqspi);
 8002680:	f006 fde6 	bl	8009250 <HAL_QSPI_DeInit>
		HAL_QSPI_MspDeInit(&hqspi);
 8002684:	4839      	ldr	r0, [pc, #228]	; (800276c <ExtractWeeklyRecords+0x174>)
 8002686:	f003 f93d 	bl	8005904 <HAL_QSPI_MspDeInit>
		MX_QUADSPI_Init();
 800268a:	f003 f889 	bl	80057a0 <MX_QUADSPI_Init>
 800268e:	e7d2      	b.n	8002636 <ExtractWeeklyRecords+0x3e>
						days[i] - '0';
 8002690:	f818 3004 	ldrb.w	r3, [r8, r4]
			for (int i = 0; i < strlen(days); i++)
 8002694:	3401      	adds	r4, #1
						days[i] - '0';
 8002696:	3b30      	subs	r3, #48	; 0x30
				valid_weekly_records[valid_weekly_record_count].days[i] =
 8002698:	f805 3f01 	strb.w	r3, [r5, #1]!
			for (int i = 0; i < strlen(days); i++)
 800269c:	e053      	b.n	8002746 <ExtractWeeklyRecords+0x14e>
		char *token = strtok((char*) readbuf, "_");
 800269e:	4938      	ldr	r1, [pc, #224]	; (8002780 <ExtractWeeklyRecords+0x188>)
 80026a0:	a80a      	add	r0, sp, #40	; 0x28
 80026a2:	f00f fac1 	bl	8011c28 <strtok>
 80026a6:	4604      	mov	r4, r0
		int index = atoi(token);
 80026a8:	f00d fd37 	bl	801011a <atoi>
 80026ac:	4605      	mov	r5, r0
		sprintf(str_index_check, "%d", index);
 80026ae:	4602      	mov	r2, r0
 80026b0:	4934      	ldr	r1, [pc, #208]	; (8002784 <ExtractWeeklyRecords+0x18c>)
 80026b2:	a807      	add	r0, sp, #28
 80026b4:	f00f f942 	bl	801193c <siprintf>
		if (index != 0 && strcmp(token, str_index_check) == 0)
 80026b8:	2d00      	cmp	r5, #0
 80026ba:	d04f      	beq.n	800275c <ExtractWeeklyRecords+0x164>
 80026bc:	4620      	mov	r0, r4
 80026be:	a907      	add	r1, sp, #28
 80026c0:	f7fd fe0e 	bl	80002e0 <strcmp>
 80026c4:	4604      	mov	r4, r0
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d148      	bne.n	800275c <ExtractWeeklyRecords+0x164>
					valid_weekly_records[valid_weekly_record_count].original_record,
 80026ca:	6830      	ldr	r0, [r6, #0]
			strncpy(
 80026cc:	2220      	movs	r2, #32
 80026ce:	a912      	add	r1, sp, #72	; 0x48
					valid_weekly_records[valid_weekly_record_count].original_record,
 80026d0:	eb07 10c0 	add.w	r0, r7, r0, lsl #7
			strncpy(
 80026d4:	3014      	adds	r0, #20
 80026d6:	f00f fa93 	bl	8011c00 <strncpy>
			char *start_time_str = strtok(NULL, ",");
 80026da:	492b      	ldr	r1, [pc, #172]	; (8002788 <ExtractWeeklyRecords+0x190>)
 80026dc:	4620      	mov	r0, r4
 80026de:	f00f faa3 	bl	8011c28 <strtok>
			char *stop_time_str = strtok(NULL, ",");
 80026e2:	4929      	ldr	r1, [pc, #164]	; (8002788 <ExtractWeeklyRecords+0x190>)
			char *start_time_str = strtok(NULL, ",");
 80026e4:	4683      	mov	fp, r0
			char *stop_time_str = strtok(NULL, ",");
 80026e6:	4620      	mov	r0, r4
 80026e8:	f00f fa9e 	bl	8011c28 <strtok>
			char *days = strtok(NULL, "\0");
 80026ec:	4927      	ldr	r1, [pc, #156]	; (800278c <ExtractWeeklyRecords+0x194>)
			char *stop_time_str = strtok(NULL, ",");
 80026ee:	4682      	mov	sl, r0
			char *days = strtok(NULL, "\0");
 80026f0:	4620      	mov	r0, r4
 80026f2:	f00f fa99 	bl	8011c28 <strtok>
			sscanf(start_time_str, "%2d:%2d", &start_hour, &start_minute);
 80026f6:	ab04      	add	r3, sp, #16
 80026f8:	aa03      	add	r2, sp, #12
 80026fa:	4925      	ldr	r1, [pc, #148]	; (8002790 <ExtractWeeklyRecords+0x198>)
			char *days = strtok(NULL, "\0");
 80026fc:	4680      	mov	r8, r0
			sscanf(start_time_str, "%2d:%2d", &start_hour, &start_minute);
 80026fe:	4658      	mov	r0, fp
 8002700:	f00f f93c 	bl	801197c <siscanf>
			sscanf(stop_time_str, "%2d:%2d", &stop_hour, &stop_minute);
 8002704:	ab06      	add	r3, sp, #24
 8002706:	aa05      	add	r2, sp, #20
 8002708:	4921      	ldr	r1, [pc, #132]	; (8002790 <ExtractWeeklyRecords+0x198>)
 800270a:	4650      	mov	r0, sl
 800270c:	f00f f936 	bl	801197c <siscanf>
			valid_weekly_records[valid_weekly_record_count].index = index;
 8002710:	f8d6 a000 	ldr.w	sl, [r6]
			STM32_RTC start_time =
 8002714:	f89d e00c 	ldrb.w	lr, [sp, #12]
			valid_weekly_records[valid_weekly_record_count].index = index;
 8002718:	ea4f 12ca 	mov.w	r2, sl, lsl #7
			STM32_RTC start_time =
 800271c:	f89d c010 	ldrb.w	ip, [sp, #16]
			valid_weekly_records[valid_weekly_record_count].index = index;
 8002720:	eb07 13ca 	add.w	r3, r7, sl, lsl #7
			STM32_RTC stop_time =
 8002724:	f89d 0014 	ldrb.w	r0, [sp, #20]
			valid_weekly_records[valid_weekly_record_count].index = index;
 8002728:	50bd      	str	r5, [r7, r2]
 800272a:	3277      	adds	r2, #119	; 0x77
			STM32_RTC stop_time =
 800272c:	f89d 1018 	ldrb.w	r1, [sp, #24]
			valid_weekly_records[valid_weekly_record_count].start_time =
 8002730:	19d5      	adds	r5, r2, r7
 8002732:	605c      	str	r4, [r3, #4]
 8002734:	f883 e008 	strb.w	lr, [r3, #8]
 8002738:	f883 c009 	strb.w	ip, [r3, #9]
 800273c:	729c      	strb	r4, [r3, #10]
			valid_weekly_records[valid_weekly_record_count].end_time =
 800273e:	60dc      	str	r4, [r3, #12]
 8002740:	7418      	strb	r0, [r3, #16]
 8002742:	7459      	strb	r1, [r3, #17]
 8002744:	749c      	strb	r4, [r3, #18]
			for (int i = 0; i < strlen(days); i++)
 8002746:	4640      	mov	r0, r8
 8002748:	f7fd fe2a 	bl	80003a0 <strlen>
 800274c:	42a0      	cmp	r0, r4
 800274e:	d89f      	bhi.n	8002690 <ExtractWeeklyRecords+0x98>
			valid_weekly_record_count++;
 8002750:	f10a 0301 	add.w	r3, sl, #1
			if (valid_weekly_record_count >= MAX_RECORDS)
 8002754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
			valid_weekly_record_count++;
 8002758:	6033      	str	r3, [r6, #0]
			if (valid_weekly_record_count >= MAX_RECORDS)
 800275a:	d28c      	bcs.n	8002676 <ExtractWeeklyRecords+0x7e>
		address += WEEKLY_RECORD_SIZE;
 800275c:	f109 0920 	add.w	r9, r9, #32
	{
 8002760:	e76c      	b.n	800263c <ExtractWeeklyRecords+0x44>
 8002762:	bf00      	nop
 8002764:	240006cd 	.word	0x240006cd
 8002768:	2401fb50 	.word	0x2401fb50
 800276c:	2403ffc0 	.word	0x2403ffc0
 8002770:	240006d0 	.word	0x240006d0
 8002774:	08015147 	.word	0x08015147
 8002778:	08015168 	.word	0x08015168
 800277c:	2401fb54 	.word	0x2401fb54
 8002780:	0801517a 	.word	0x0801517a
 8002784:	080159af 	.word	0x080159af
 8002788:	08015178 	.word	0x08015178
 800278c:	08014ef8 	.word	0x08014ef8
 8002790:	0801520d 	.word	0x0801520d
 8002794:	01312d00 	.word	0x01312d00

08002798 <check_specific_record>:

// this funciton compare the current rtc date and time with a specific record
// to show wether we are in the middle of this record or not
void check_specific_record(uint32_t recordIndex, const char *startTime,
		const char *stopTime)
{
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	460c      	mov	r4, r1
 800279e:	4606      	mov	r6, r0
 80027a0:	4615      	mov	r5, r2
	Get_RTC_Values();
 80027a2:	f003 f919 	bl	80059d8 <Get_RTC_Values>

	// Convert the system's RTC to a comparable string format
	char systemRTC[20];  // Assuming YYYY-MM-DDTHH:MM:SS format
	sprintf(systemRTC, "%04d-%02d-%02dT%02d:%02d:%02d", 2000 + sDate.Year,
			sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 80027a6:	4915      	ldr	r1, [pc, #84]	; (80027fc <check_specific_record+0x64>)
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <check_specific_record+0x68>)
	sprintf(systemRTC, "%04d-%02d-%02dT%02d:%02d:%02d", 2000 + sDate.Year,
 80027aa:	7888      	ldrb	r0, [r1, #2]
 80027ac:	78da      	ldrb	r2, [r3, #3]
 80027ae:	9003      	str	r0, [sp, #12]
 80027b0:	7848      	ldrb	r0, [r1, #1]
 80027b2:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80027b6:	9002      	str	r0, [sp, #8]
 80027b8:	a805      	add	r0, sp, #20
 80027ba:	7809      	ldrb	r1, [r1, #0]
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	7899      	ldrb	r1, [r3, #2]
 80027c0:	9100      	str	r1, [sp, #0]
 80027c2:	4910      	ldr	r1, [pc, #64]	; (8002804 <check_specific_record+0x6c>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	f00f f8b9 	bl	801193c <siprintf>

	// Compare systemRTC with startTime and stopTime
	if (strcmp(systemRTC, startTime) >= 0 && strcmp(systemRTC, stopTime) <= 0)
 80027ca:	4621      	mov	r1, r4
 80027cc:	a805      	add	r0, sp, #20
 80027ce:	f7fd fd87 	bl	80002e0 <strcmp>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	db0d      	blt.n	80027f2 <check_specific_record+0x5a>
 80027d6:	4629      	mov	r1, r5
 80027d8:	a805      	add	r0, sp, #20
 80027da:	f7fd fd81 	bl	80002e0 <strcmp>
 80027de:	2800      	cmp	r0, #0
 80027e0:	dc07      	bgt.n	80027f2 <check_specific_record+0x5a>
	{
		// If systemRTC is in between the start and end date-time
		printf("Current RTC matches with the given index %d range: %s to %s\n",
 80027e2:	462b      	mov	r3, r5
 80027e4:	4622      	mov	r2, r4
 80027e6:	4631      	mov	r1, r6
 80027e8:	4807      	ldr	r0, [pc, #28]	; (8002808 <check_specific_record+0x70>)
				recordIndex, startTime, stopTime);
	}
	else
	{
		printf(
 80027ea:	f00e fffd 	bl	80117e8 <iprintf>
				"Current RTC does NOT match with the given index %d range: %s to %s\n",
				recordIndex, startTime, stopTime);
	}
}
 80027ee:	b00a      	add	sp, #40	; 0x28
 80027f0:	bd70      	pop	{r4, r5, r6, pc}
		printf(
 80027f2:	462b      	mov	r3, r5
 80027f4:	4622      	mov	r2, r4
 80027f6:	4631      	mov	r1, r6
 80027f8:	4804      	ldr	r0, [pc, #16]	; (800280c <check_specific_record+0x74>)
 80027fa:	e7f6      	b.n	80027ea <check_specific_record+0x52>
 80027fc:	24040034 	.word	0x24040034
 8002800:	24040030 	.word	0x24040030
 8002804:	080150be 	.word	0x080150be
 8002808:	0801517c 	.word	0x0801517c
 800280c:	080151b9 	.word	0x080151b9

08002810 <ExtractRecords>:
// this function extract the dated records from the external flash and store them and every boot of the board
void ExtractRecords(QSPI_HandleTypeDef *Ctx)
{
 8002810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t readbuf[DATED_RECORD_SIZE];
	uint8_t readbufback[DATED_RECORD_SIZE];
	uint32_t address = DATED_SCHEDULAR_RECORDS_START_ADDRESS;
	valid_record_count = 0;
	if (firstTimeRequest == 0)
 8002814:	4c6c      	ldr	r4, [pc, #432]	; (80029c8 <ExtractRecords+0x1b8>)
	valid_record_count = 0;
 8002816:	2200      	movs	r2, #0
 8002818:	4b6c      	ldr	r3, [pc, #432]	; (80029cc <ExtractRecords+0x1bc>)
{
 800281a:	ed2d 8b02 	vpush	{d8}
	if (firstTimeRequest == 0)
 800281e:	7821      	ldrb	r1, [r4, #0]
{
 8002820:	ee08 0a90 	vmov	s17, r0
 8002824:	b0ad      	sub	sp, #180	; 0xb4
	{
		//switch to QSPI
		flStatus = S25FL256S_Enter4LinesDataMode(&hqspi, S25FL256S_SPI_MODE);
 8002826:	486a      	ldr	r0, [pc, #424]	; (80029d0 <ExtractRecords+0x1c0>)
	valid_record_count = 0;
 8002828:	601a      	str	r2, [r3, #0]
	if (firstTimeRequest == 0)
 800282a:	2900      	cmp	r1, #0
 800282c:	d137      	bne.n	800289e <ExtractRecords+0x8e>
		flStatus = S25FL256S_Enter4LinesDataMode(&hqspi, S25FL256S_SPI_MODE);
 800282e:	f003 f983 	bl	8005b38 <S25FL256S_Enter4LinesDataMode>
 8002832:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <ExtractRecords+0x1c4>)
 8002834:	4601      	mov	r1, r0
 8002836:	6018      	str	r0, [r3, #0]
		printf("Entering to QSPI, status = %ld\r\n", flStatus);
 8002838:	4867      	ldr	r0, [pc, #412]	; (80029d8 <ExtractRecords+0x1c8>)
 800283a:	f00e ffd5 	bl	80117e8 <iprintf>

		printf("SysTick2: %ld\r\n", HAL_GetTick());
 800283e:	f004 fa1d 	bl	8006c7c <HAL_GetTick>
 8002842:	4601      	mov	r1, r0
 8002844:	4865      	ldr	r0, [pc, #404]	; (80029dc <ExtractRecords+0x1cc>)
 8002846:	f00e ffcf 	bl	80117e8 <iprintf>

		firstTimeRequest = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	7023      	strb	r3, [r4, #0]
{
 800284e:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 80029f8 <ExtractRecords+0x1e8>
		sprintf(str_index_check, "%d", index);

		if (index != 0 && strcmp(token, str_index_check) == 0)
		{
			// Save the original record
			strncpy(valid_records[valid_record_count].original_record,
 8002852:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80029cc <ExtractRecords+0x1bc>
		S25FL256S_ReadSTR(Ctx, S25FL256S_SPI_1I4O_MODE, readbuf, address,
 8002856:	2330      	movs	r3, #48	; 0x30
 8002858:	aa14      	add	r2, sp, #80	; 0x50
 800285a:	2103      	movs	r1, #3
 800285c:	ee18 0a90 	vmov	r0, s17
 8002860:	9300      	str	r3, [sp, #0]
		memcpy(readbufback, readbuf, DATED_RECORD_SIZE);
 8002862:	ad14      	add	r5, sp, #80	; 0x50
		S25FL256S_ReadSTR(Ctx, S25FL256S_SPI_1I4O_MODE, readbuf, address,
 8002864:	4653      	mov	r3, sl
		memcpy(readbufback, readbuf, DATED_RECORD_SIZE);
 8002866:	ac20      	add	r4, sp, #128	; 0x80
		S25FL256S_ReadSTR(Ctx, S25FL256S_SPI_1I4O_MODE, readbuf, address,
 8002868:	f003 f9da 	bl	8005c20 <S25FL256S_ReadSTR>
		osDelay(5);
 800286c:	2005      	movs	r0, #5
 800286e:	f00b fb7c 	bl	800df6a <osDelay>
		memcpy(readbufback, readbuf, DATED_RECORD_SIZE);
 8002872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800287e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		for (int i = 0; i < 25; i++)
 8002882:	aa14      	add	r2, sp, #80	; 0x50
 8002884:	2300      	movs	r3, #0
			if (readbuf[i] != 0xFF)
 8002886:	f812 1b01 	ldrb.w	r1, [r2], #1
 800288a:	29ff      	cmp	r1, #255	; 0xff
 800288c:	d10f      	bne.n	80028ae <ExtractRecords+0x9e>
		for (int i = 0; i < 25; i++)
 800288e:	3301      	adds	r3, #1
 8002890:	2b19      	cmp	r3, #25
 8002892:	d1f8      	bne.n	8002886 <ExtractRecords+0x76>

		// Move to the next record
		address += DATED_RECORD_SIZE;
	}

}
 8002894:	b02d      	add	sp, #180	; 0xb4
 8002896:	ecbd 8b02 	vpop	{d8}
 800289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_QSPI_DeInit(&hqspi);
 800289e:	f006 fcd7 	bl	8009250 <HAL_QSPI_DeInit>
		HAL_QSPI_MspDeInit(&hqspi);
 80028a2:	484b      	ldr	r0, [pc, #300]	; (80029d0 <ExtractRecords+0x1c0>)
 80028a4:	f003 f82e 	bl	8005904 <HAL_QSPI_MspDeInit>
		MX_QUADSPI_Init();
 80028a8:	f002 ff7a 	bl	80057a0 <MX_QUADSPI_Init>
 80028ac:	e7cf      	b.n	800284e <ExtractRecords+0x3e>
		char *token = strtok((char*) readbuf, "_");
 80028ae:	494c      	ldr	r1, [pc, #304]	; (80029e0 <ExtractRecords+0x1d0>)
 80028b0:	a814      	add	r0, sp, #80	; 0x50
 80028b2:	f00f f9b9 	bl	8011c28 <strtok>
 80028b6:	4604      	mov	r4, r0
		int index = atoi(token);
 80028b8:	f00d fc2f 	bl	801011a <atoi>
 80028bc:	4680      	mov	r8, r0
		sprintf(str_index_check, "%d", index);
 80028be:	4602      	mov	r2, r0
 80028c0:	4948      	ldr	r1, [pc, #288]	; (80029e4 <ExtractRecords+0x1d4>)
 80028c2:	a811      	add	r0, sp, #68	; 0x44
 80028c4:	f00f f83a 	bl	801193c <siprintf>
		if (index != 0 && strcmp(token, str_index_check) == 0)
 80028c8:	f1b8 0f00 	cmp.w	r8, #0
 80028cc:	d078      	beq.n	80029c0 <ExtractRecords+0x1b0>
 80028ce:	4620      	mov	r0, r4
 80028d0:	a911      	add	r1, sp, #68	; 0x44
 80028d2:	f7fd fd05 	bl	80002e0 <strcmp>
 80028d6:	4604      	mov	r4, r0
 80028d8:	2800      	cmp	r0, #0
 80028da:	d171      	bne.n	80029c0 <ExtractRecords+0x1b0>
			strncpy(valid_records[valid_record_count].original_record,
 80028dc:	f8d9 0000 	ldr.w	r0, [r9]
 80028e0:	2378      	movs	r3, #120	; 0x78
 80028e2:	2230      	movs	r2, #48	; 0x30
 80028e4:	a920      	add	r1, sp, #128	; 0x80
 80028e6:	4358      	muls	r0, r3
 80028e8:	4b3f      	ldr	r3, [pc, #252]	; (80029e8 <ExtractRecords+0x1d8>)
			sscanf(start_time_str, "%4d-%2d-%2dT%2d:%2d:%2d", &year, &month,
 80028ea:	af10      	add	r7, sp, #64	; 0x40
 80028ec:	ae0f      	add	r6, sp, #60	; 0x3c
			strncpy(valid_records[valid_record_count].original_record,
 80028ee:	3014      	adds	r0, #20
			sscanf(start_time_str, "%4d-%2d-%2dT%2d:%2d:%2d", &year, &month,
 80028f0:	ad0e      	add	r5, sp, #56	; 0x38
			strncpy(valid_records[valid_record_count].original_record,
 80028f2:	4418      	add	r0, r3
 80028f4:	f00f f984 	bl	8011c00 <strncpy>
			char *start_time_str = strtok(NULL, ",");
 80028f8:	493c      	ldr	r1, [pc, #240]	; (80029ec <ExtractRecords+0x1dc>)
 80028fa:	4620      	mov	r0, r4
 80028fc:	f00f f994 	bl	8011c28 <strtok>
			char *end_time_str = strtok(NULL, "\0");
 8002900:	493b      	ldr	r1, [pc, #236]	; (80029f0 <ExtractRecords+0x1e0>)
			char *start_time_str = strtok(NULL, ",");
 8002902:	4683      	mov	fp, r0
			char *end_time_str = strtok(NULL, "\0");
 8002904:	4620      	mov	r0, r4
 8002906:	f00f f98f 	bl	8011c28 <strtok>
			sscanf(start_time_str, "%4d-%2d-%2dT%2d:%2d:%2d", &year, &month,
 800290a:	ac0d      	add	r4, sp, #52	; 0x34
 800290c:	aa0c      	add	r2, sp, #48	; 0x30
			char *end_time_str = strtok(NULL, "\0");
 800290e:	ee08 0a10 	vmov	s16, r0
			sscanf(start_time_str, "%4d-%2d-%2dT%2d:%2d:%2d", &year, &month,
 8002912:	4938      	ldr	r1, [pc, #224]	; (80029f4 <ExtractRecords+0x1e4>)
 8002914:	4658      	mov	r0, fp
 8002916:	4613      	mov	r3, r2
 8002918:	9703      	str	r7, [sp, #12]
 800291a:	aa0b      	add	r2, sp, #44	; 0x2c
 800291c:	9602      	str	r6, [sp, #8]
 800291e:	9501      	str	r5, [sp, #4]
 8002920:	9400      	str	r4, [sp, #0]
 8002922:	f00f f82b 	bl	801197c <siscanf>
			start_time.month = month;
 8002926:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			sscanf(end_time_str, "%4d-%2d-%2dT%2d:%2d:%2d", &year, &month, &day,
 800292a:	4932      	ldr	r1, [pc, #200]	; (80029f4 <ExtractRecords+0x1e4>)
 800292c:	ee18 0a10 	vmov	r0, s16
			start_time.month = month;
 8002930:	9205      	str	r2, [sp, #20]
			start_time.day = day;
 8002932:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
			start_time.year = year;
 8002936:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
			start_time.day = day;
 800293a:	9206      	str	r2, [sp, #24]
			start_time.hour = hour;
 800293c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8002940:	9207      	str	r2, [sp, #28]
			start_time.minute = minute;
 8002942:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8002946:	9208      	str	r2, [sp, #32]
			start_time.second = second;
 8002948:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800294c:	9209      	str	r2, [sp, #36]	; 0x24
			sscanf(end_time_str, "%4d-%2d-%2dT%2d:%2d:%2d", &year, &month, &day,
 800294e:	aa0c      	add	r2, sp, #48	; 0x30
 8002950:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002954:	4613      	mov	r3, r2
 8002956:	aa0b      	add	r2, sp, #44	; 0x2c
 8002958:	e9cd 4500 	strd	r4, r5, [sp]
 800295c:	f00f f80e 	bl	801197c <siscanf>
			valid_records[valid_record_count].index = index;
 8002960:	f8d9 e000 	ldr.w	lr, [r9]
 8002964:	2278      	movs	r2, #120	; 0x78
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <ExtractRecords+0x1d8>)
			end_time.year = year;
 8002968:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
			valid_records[valid_record_count].index = index;
 800296c:	fb02 fc0e 	mul.w	ip, r2, lr
 8002970:	461a      	mov	r2, r3
			end_time.month = month;
 8002972:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
			valid_records[valid_record_count].index = index;
 8002976:	4463      	add	r3, ip
 8002978:	f842 800c 	str.w	r8, [r2, ip]
			valid_records[valid_record_count].start_time = start_time;
 800297c:	9a05      	ldr	r2, [sp, #20]
			end_time.day = day;
 800297e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
			valid_records[valid_record_count].start_time = start_time;
 8002982:	719a      	strb	r2, [r3, #6]
 8002984:	9a06      	ldr	r2, [sp, #24]
			end_time.hour = hour;
 8002986:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
			valid_records[valid_record_count].start_time = start_time;
 800298a:	71da      	strb	r2, [r3, #7]
 800298c:	9a07      	ldr	r2, [sp, #28]
			end_time.minute = minute;
 800298e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
			valid_records[valid_record_count].start_time = start_time;
 8002992:	721a      	strb	r2, [r3, #8]
 8002994:	9a08      	ldr	r2, [sp, #32]
			end_time.second = second;
 8002996:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
			valid_records[valid_record_count].start_time = start_time;
 800299a:	725a      	strb	r2, [r3, #9]
 800299c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800299e:	f8a3 b004 	strh.w	fp, [r3, #4]
 80029a2:	729a      	strb	r2, [r3, #10]
			valid_record_count++;
 80029a4:	f10e 0201 	add.w	r2, lr, #1
			valid_records[valid_record_count].end_time = end_time;
 80029a8:	819f      	strh	r7, [r3, #12]
			if (valid_record_count >= MAX_RECORDS)
 80029aa:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
			valid_records[valid_record_count].end_time = end_time;
 80029ae:	739e      	strb	r6, [r3, #14]
 80029b0:	73dd      	strb	r5, [r3, #15]
 80029b2:	741c      	strb	r4, [r3, #16]
 80029b4:	7458      	strb	r0, [r3, #17]
 80029b6:	7499      	strb	r1, [r3, #18]
			valid_record_count++;
 80029b8:	f8c9 2000 	str.w	r2, [r9]
			if (valid_record_count >= MAX_RECORDS)
 80029bc:	f6bf af6a 	bge.w	8002894 <ExtractRecords+0x84>
		address += DATED_RECORD_SIZE;
 80029c0:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
	{
 80029c4:	e747      	b.n	8002856 <ExtractRecords+0x46>
 80029c6:	bf00      	nop
 80029c8:	240006cd 	.word	0x240006cd
 80029cc:	2400268c 	.word	0x2400268c
 80029d0:	2403ffc0 	.word	0x2403ffc0
 80029d4:	240006d0 	.word	0x240006d0
 80029d8:	08015147 	.word	0x08015147
 80029dc:	08015168 	.word	0x08015168
 80029e0:	0801517a 	.word	0x0801517a
 80029e4:	080159af 	.word	0x080159af
 80029e8:	24002690 	.word	0x24002690
 80029ec:	08015178 	.word	0x08015178
 80029f0:	08014ef8 	.word	0x08014ef8
 80029f4:	080151fd 	.word	0x080151fd
 80029f8:	00e4e1c0 	.word	0x00e4e1c0

080029fc <sendMatchedIndices>:
// this function is used to send the given record to the app to highlight them in green on the scheduler records
void sendMatchedIndices(int *matchedIndices, int *matchedCount, const char *id)
{
 80029fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a00:	4606      	mov	r6, r0
 8002a02:	b087      	sub	sp, #28
 8002a04:	460d      	mov	r5, r1
 8002a06:	4617      	mov	r7, r2
	char value[10];  // Buffer to hold the string representation of the index
	char *DataSend;

	for (int i = 0; i < *matchedCount; i++)
 8002a08:	2400      	movs	r4, #0
	{
		sprintf(value, "%d", matchedIndices[i]);
 8002a0a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8002a48 <sendMatchedIndices+0x4c>
		DataSend = PrepareData(id, value);
		HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend), 10);
 8002a0e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8002a4c <sendMatchedIndices+0x50>
	for (int i = 0; i < *matchedCount; i++)
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	42a3      	cmp	r3, r4
 8002a16:	dc02      	bgt.n	8002a1e <sendMatchedIndices+0x22>
	}

}
 8002a18:	b007      	add	sp, #28
 8002a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sprintf(value, "%d", matchedIndices[i]);
 8002a1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002a22:	4641      	mov	r1, r8
 8002a24:	a803      	add	r0, sp, #12
	for (int i = 0; i < *matchedCount; i++)
 8002a26:	3401      	adds	r4, #1
		sprintf(value, "%d", matchedIndices[i]);
 8002a28:	f00e ff88 	bl	801193c <siprintf>
		DataSend = PrepareData(id, value);
 8002a2c:	a903      	add	r1, sp, #12
 8002a2e:	4638      	mov	r0, r7
 8002a30:	f7fe f8da 	bl	8000be8 <PrepareData>
 8002a34:	9001      	str	r0, [sp, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend), 10);
 8002a36:	f7fd fcb3 	bl	80003a0 <strlen>
 8002a3a:	230a      	movs	r3, #10
 8002a3c:	b282      	uxth	r2, r0
 8002a3e:	9901      	ldr	r1, [sp, #4]
 8002a40:	4648      	mov	r0, r9
 8002a42:	f00a fdfa 	bl	800d63a <HAL_UART_Transmit>
	for (int i = 0; i < *matchedCount; i++)
 8002a46:	e7e4      	b.n	8002a12 <sendMatchedIndices+0x16>
 8002a48:	080159af 	.word	0x080159af
 8002a4c:	24040440 	.word	0x24040440

08002a50 <DeleteRecordByIndex>:
}

// this funciton is used to delete any reocrd in the flash memory using the index of it
void DeleteRecordByIndex(QSPI_HandleTypeDef *hqspi, int record_index,
		uint32_t base_address, uint32_t memroy_record_size)
{
 8002a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	if (firstTimeRequest == 0)
 8002a54:	4c37      	ldr	r4, [pc, #220]	; (8002b34 <DeleteRecordByIndex+0xe4>)
{
 8002a56:	b085      	sub	sp, #20
 8002a58:	4689      	mov	r9, r1
 8002a5a:	4615      	mov	r5, r2
 8002a5c:	af02      	add	r7, sp, #8
	if (firstTimeRequest == 0)
 8002a5e:	7821      	ldrb	r1, [r4, #0]
{
 8002a60:	461e      	mov	r6, r3
 8002a62:	6078      	str	r0, [r7, #4]
	if (firstTimeRequest == 0)
 8002a64:	2900      	cmp	r1, #0
 8002a66:	d152      	bne.n	8002b0e <DeleteRecordByIndex+0xbe>
	{
		flStatus = S25FL256S_Enter4LinesDataMode(&hqspi, S25FL256S_SPI_MODE);
 8002a68:	1d38      	adds	r0, r7, #4
 8002a6a:	f003 f865 	bl	8005b38 <S25FL256S_Enter4LinesDataMode>
 8002a6e:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <DeleteRecordByIndex+0xe8>)
 8002a70:	4601      	mov	r1, r0
 8002a72:	6018      	str	r0, [r3, #0]
		printf("Entering to QSPI, status = %ld\r\n", flStatus);
 8002a74:	4831      	ldr	r0, [pc, #196]	; (8002b3c <DeleteRecordByIndex+0xec>)
 8002a76:	f00e feb7 	bl	80117e8 <iprintf>

		firstTimeRequest = 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	7023      	strb	r3, [r4, #0]
		HAL_QSPI_DeInit(hqspi);
		HAL_QSPI_MspDeInit(hqspi);
		MX_QUADSPI_Init();
	}
	// Calculate the address of the desired record
	uint32_t address = base_address + (record_index - 1) * memroy_record_size;
 8002a7e:	f109 33ff 	add.w	r3, r9, #4294967295
	osDelay(5);
 8002a82:	2005      	movs	r0, #5
	osDelay(5);
	printf("the delete fucntion buffer %s \n", readBuffer);
	printf("the address of the record to delete %X \n", address);
	// Locate the '_' character to determine the number of digits in the index
	int indexSize = 0;
	for (int i = 0; i < memroy_record_size; i++)
 8002a84:	2400      	movs	r4, #0
	uint32_t address = base_address + (record_index - 1) * memroy_record_size;
 8002a86:	fb06 5503 	mla	r5, r6, r3, r5
	osDelay(5);
 8002a8a:	f00b fa6e 	bl	800df6a <osDelay>
	uint8_t readBuffer[memroy_record_size];
 8002a8e:	1df3      	adds	r3, r6, #7
	S25FL256S_ReadSTR(hqspi, S25FL256S_SPI_1I4O_MODE, readBuffer, address,
 8002a90:	2103      	movs	r1, #3
 8002a92:	6878      	ldr	r0, [r7, #4]
	uint8_t readBuffer[memroy_record_size];
 8002a94:	f023 0307 	bic.w	r3, r3, #7
 8002a98:	ebad 0d03 	sub.w	sp, sp, r3
	S25FL256S_ReadSTR(hqspi, S25FL256S_SPI_1I4O_MODE, readBuffer, address,
 8002a9c:	462b      	mov	r3, r5
	uint8_t readBuffer[memroy_record_size];
 8002a9e:	46e8      	mov	r8, sp
	S25FL256S_ReadSTR(hqspi, S25FL256S_SPI_1I4O_MODE, readBuffer, address,
 8002aa0:	f848 6b08 	str.w	r6, [r8], #8
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	f003 f8bb 	bl	8005c20 <S25FL256S_ReadSTR>
	osDelay(5);
 8002aaa:	2005      	movs	r0, #5
 8002aac:	f00b fa5d 	bl	800df6a <osDelay>
	printf("the delete fucntion buffer %s \n", readBuffer);
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	4823      	ldr	r0, [pc, #140]	; (8002b40 <DeleteRecordByIndex+0xf0>)
 8002ab4:	f00e fe98 	bl	80117e8 <iprintf>
	printf("the address of the record to delete %X \n", address);
 8002ab8:	4629      	mov	r1, r5
 8002aba:	4822      	ldr	r0, [pc, #136]	; (8002b44 <DeleteRecordByIndex+0xf4>)
 8002abc:	f00e fe94 	bl	80117e8 <iprintf>
	for (int i = 0; i < memroy_record_size; i++)
 8002ac0:	42b4      	cmp	r4, r6
 8002ac2:	d12c      	bne.n	8002b1e <DeleteRecordByIndex+0xce>
	int indexSize = 0;
 8002ac4:	2400      	movs	r4, #0
			break;
		}
	}

	// Prepare data to overwrite the index with zeros
	uint8_t dataToWrite[indexSize];
 8002ac6:	1de3      	adds	r3, r4, #7
	memset(dataToWrite, '0', indexSize);  // Setting all characters to '0'
 8002ac8:	4622      	mov	r2, r4
 8002aca:	2130      	movs	r1, #48	; 0x30
	uint8_t dataToWrite[indexSize];
 8002acc:	f023 0307 	bic.w	r3, r3, #7
 8002ad0:	ebad 0d03 	sub.w	sp, sp, r3
 8002ad4:	ae02      	add	r6, sp, #8
	memset(dataToWrite, '0', indexSize);  // Setting all characters to '0'
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	f00f f856 	bl	8011b88 <memset>

	// Enable writing to the S25FL256S
	S25FL256S_WriteEnable(hqspi, S25FL256S_SPI_MODE);
 8002adc:	2100      	movs	r1, #0
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f002 ffc4 	bl	8005a6c <S25FL256S_WriteEnable>

	// Write the data to the calculated address to overwrite the index
	flStatus = S25FL256S_PageProgram(hqspi, S25FL256S_SPI_MODE, dataToWrite,
 8002ae4:	9400      	str	r4, [sp, #0]
 8002ae6:	4c14      	ldr	r4, [pc, #80]	; (8002b38 <DeleteRecordByIndex+0xe8>)
 8002ae8:	462b      	mov	r3, r5
 8002aea:	4632      	mov	r2, r6
 8002aec:	2100      	movs	r1, #0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f002 fff2 	bl	8005ad8 <S25FL256S_PageProgram>
 8002af4:	6020      	str	r0, [r4, #0]
			address, indexSize);
	osDelay(5);
 8002af6:	2005      	movs	r0, #5
 8002af8:	f00b fa37 	bl	800df6a <osDelay>
	if (flStatus != S25FL256S_OK)
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	b1a3      	cbz	r3, 8002b2a <DeleteRecordByIndex+0xda>
	{
		printf("Error writing to the external memory!\n");
 8002b00:	4811      	ldr	r0, [pc, #68]	; (8002b48 <DeleteRecordByIndex+0xf8>)
 8002b02:	f00e fedf 	bl	80118c4 <puts>
	else
	{
		printf("deleted record with index %d \n", record_index);
	}

}
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		HAL_QSPI_DeInit(hqspi);
 8002b0e:	f006 fb9f 	bl	8009250 <HAL_QSPI_DeInit>
		HAL_QSPI_MspDeInit(hqspi);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f002 fef6 	bl	8005904 <HAL_QSPI_MspDeInit>
		MX_QUADSPI_Init();
 8002b18:	f002 fe42 	bl	80057a0 <MX_QUADSPI_Init>
 8002b1c:	e7af      	b.n	8002a7e <DeleteRecordByIndex+0x2e>
		if (readBuffer[i] == '_')
 8002b1e:	f818 3004 	ldrb.w	r3, [r8, r4]
 8002b22:	2b5f      	cmp	r3, #95	; 0x5f
 8002b24:	d0cf      	beq.n	8002ac6 <DeleteRecordByIndex+0x76>
	for (int i = 0; i < memroy_record_size; i++)
 8002b26:	3401      	adds	r4, #1
 8002b28:	e7ca      	b.n	8002ac0 <DeleteRecordByIndex+0x70>
		printf("deleted record with index %d \n", record_index);
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	4807      	ldr	r0, [pc, #28]	; (8002b4c <DeleteRecordByIndex+0xfc>)
 8002b2e:	f00e fe5b 	bl	80117e8 <iprintf>
}
 8002b32:	e7e8      	b.n	8002b06 <DeleteRecordByIndex+0xb6>
 8002b34:	240006cd 	.word	0x240006cd
 8002b38:	240006d0 	.word	0x240006d0
 8002b3c:	08015147 	.word	0x08015147
 8002b40:	08015215 	.word	0x08015215
 8002b44:	08015235 	.word	0x08015235
 8002b48:	0801525e 	.word	0x0801525e
 8002b4c:	08015284 	.word	0x08015284

08002b50 <store_alarm>:
{
 8002b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b54:	460f      	mov	r7, r1
 8002b56:	b099      	sub	sp, #100	; 0x64
    int record_index = (alarm == dryRun) ? 1 : (alarm == noPressureSensor) ? 2 : 0;
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d03d      	beq.n	8002bd8 <store_alarm+0x88>
 8002b5c:	1e43      	subs	r3, r0, #1
 8002b5e:	4258      	negs	r0, r3
 8002b60:	4158      	adcs	r0, r3
 8002b62:	0044      	lsls	r4, r0, #1
    HAL_QSPI_DeInit(&hqspi);
 8002b64:	4850      	ldr	r0, [pc, #320]	; (8002ca8 <store_alarm+0x158>)
 8002b66:	f006 fb73 	bl	8009250 <HAL_QSPI_DeInit>
    HAL_QSPI_MspDeInit(&hqspi);
 8002b6a:	484f      	ldr	r0, [pc, #316]	; (8002ca8 <store_alarm+0x158>)
 8002b6c:	f002 feca 	bl	8005904 <HAL_QSPI_MspDeInit>
    uint32_t addressToWriteInto = baseAddress + storedAlarmsNumber * ALARM_RECORD_SIZE;
 8002b70:	4e4e      	ldr	r6, [pc, #312]	; (8002cac <store_alarm+0x15c>)
    MX_QUADSPI_Init();
 8002b72:	f002 fe15 	bl	80057a0 <MX_QUADSPI_Init>
        flStatus = S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8002b76:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8002ca8 <store_alarm+0x158>
    Get_RTC_Values();
 8002b7a:	f002 ff2d 	bl	80059d8 <Get_RTC_Values>
             sTime.Hours, sTime.Minutes);
 8002b7e:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <store_alarm+0x160>)
    snprintf(dataToWrite, sizeof(dataToWrite), "%d_%04d_%02d_%02d,%02d:%02d\0",
 8002b80:	2120      	movs	r1, #32
 8002b82:	a810      	add	r0, sp, #64	; 0x40
 8002b84:	785a      	ldrb	r2, [r3, #1]
        printf("Data to write: %s\n", dataToWrite);
 8002b86:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8002cd4 <store_alarm+0x184>
    snprintf(dataToWrite, sizeof(dataToWrite), "%d_%04d_%02d_%02d,%02d:%02d\0",
 8002b8a:	9204      	str	r2, [sp, #16]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
        printf("Data read back: %s\n", readbuf);
 8002b8e:	f8df b148 	ldr.w	fp, [pc, #328]	; 8002cd8 <store_alarm+0x188>
    snprintf(dataToWrite, sizeof(dataToWrite), "%d_%04d_%02d_%02d,%02d:%02d\0",
 8002b92:	9303      	str	r3, [sp, #12]
             record_index, sDate.Year + 2000, sDate.Month, sDate.Date,
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <store_alarm+0x164>)
    snprintf(dataToWrite, sizeof(dataToWrite), "%d_%04d_%02d_%02d,%02d:%02d\0",
 8002b96:	789a      	ldrb	r2, [r3, #2]
 8002b98:	9202      	str	r2, [sp, #8]
 8002b9a:	785a      	ldrb	r2, [r3, #1]
 8002b9c:	9201      	str	r2, [sp, #4]
             record_index, sDate.Year + 2000, sDate.Month, sDate.Date,
 8002b9e:	78db      	ldrb	r3, [r3, #3]
    snprintf(dataToWrite, sizeof(dataToWrite), "%d_%04d_%02d_%02d,%02d:%02d\0",
 8002ba0:	4a45      	ldr	r2, [pc, #276]	; (8002cb8 <store_alarm+0x168>)
 8002ba2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	4623      	mov	r3, r4
 8002baa:	f00e fe93 	bl	80118d4 <sniprintf>
    uint32_t addressToWriteInto = baseAddress + storedAlarmsNumber * ALARM_RECORD_SIZE;
 8002bae:	6835      	ldr	r5, [r6, #0]
    for (int attempt = 0; attempt < 3; attempt++)
 8002bb0:	2400      	movs	r4, #0
    uint32_t addressToWriteInto = baseAddress + storedAlarmsNumber * ALARM_RECORD_SIZE;
 8002bb2:	eb07 1545 	add.w	r5, r7, r5, lsl #5
        flStatus = S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4648      	mov	r0, r9
 8002bba:	f002 ff57 	bl	8005a6c <S25FL256S_WriteEnable>
        if (flStatus != S25FL256S_OK)
 8002bbe:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
            printf("Attempt %d: Error writing to the external memory!\n", attempt + 1);
 8002bc2:	f104 0401 	add.w	r4, r4, #1
        if (flStatus != S25FL256S_OK)
 8002bc6:	d009      	beq.n	8002bdc <store_alarm+0x8c>
            printf("Error: Write Enable failed!\n");
 8002bc8:	483c      	ldr	r0, [pc, #240]	; (8002cbc <store_alarm+0x16c>)
 8002bca:	f00e fe7b 	bl	80118c4 <puts>
    for (int attempt = 0; attempt < 3; attempt++)
 8002bce:	2c03      	cmp	r4, #3
 8002bd0:	d1f1      	bne.n	8002bb6 <store_alarm+0x66>
 8002bd2:	f04f 0801 	mov.w	r8, #1
 8002bd6:	e050      	b.n	8002c7a <store_alarm+0x12a>
    int record_index = (alarm == dryRun) ? 1 : (alarm == noPressureSensor) ? 2 : 0;
 8002bd8:	2401      	movs	r4, #1
 8002bda:	e7c3      	b.n	8002b64 <store_alarm+0x14>
                                         addressToWriteInto,  strlen(dataToWrite) + 1);
 8002bdc:	a810      	add	r0, sp, #64	; 0x40
 8002bde:	9107      	str	r1, [sp, #28]
 8002be0:	f7fd fbde 	bl	80003a0 <strlen>
 8002be4:	3001      	adds	r0, #1
        flStatus = S25FL256S_PageProgram(&hqspi, S25FL256S_SPI_MODE, dataToWrite,
 8002be6:	462b      	mov	r3, r5
 8002be8:	aa10      	add	r2, sp, #64	; 0x40
 8002bea:	9907      	ldr	r1, [sp, #28]
 8002bec:	9000      	str	r0, [sp, #0]
 8002bee:	4648      	mov	r0, r9
 8002bf0:	f002 ff72 	bl	8005ad8 <S25FL256S_PageProgram>
 8002bf4:	4680      	mov	r8, r0
    	osDelay(5);
 8002bf6:	2005      	movs	r0, #5
 8002bf8:	f00b f9b7 	bl	800df6a <osDelay>
        if (flStatus != S25FL256S_OK)
 8002bfc:	fa5f f088 	uxtb.w	r0, r8
 8002c00:	b120      	cbz	r0, 8002c0c <store_alarm+0xbc>
            printf("Attempt %d: Error writing to the external memory!\n", attempt + 1);
 8002c02:	4621      	mov	r1, r4
 8002c04:	482e      	ldr	r0, [pc, #184]	; (8002cc0 <store_alarm+0x170>)
            printf("Attempt %d: Error reading back the data!\n", attempt + 1);
 8002c06:	f00e fdef 	bl	80117e8 <iprintf>
            continue; // Skip the rest of the loop if read failed
 8002c0a:	e7e0      	b.n	8002bce <store_alarm+0x7e>
				addressToWriteInto, strlen(dataToWrite) + 1);
 8002c0c:	a810      	add	r0, sp, #64	; 0x40
 8002c0e:	f7fd fbc7 	bl	80003a0 <strlen>
 8002c12:	3001      	adds	r0, #1
		flStatus = S25FL256S_ReadSTR(&hqspi, S25FL256S_SPI_1I4O_MODE, readbuf,
 8002c14:	462b      	mov	r3, r5
 8002c16:	aa08      	add	r2, sp, #32
 8002c18:	9000      	str	r0, [sp, #0]
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	4648      	mov	r0, r9
 8002c1e:	f002 ffff 	bl	8005c20 <S25FL256S_ReadSTR>
 8002c22:	fa5f f880 	uxtb.w	r8, r0
		osDelay(5);
 8002c26:	2005      	movs	r0, #5
 8002c28:	f00b f99f 	bl	800df6a <osDelay>
        if (flStatus != S25FL256S_OK)
 8002c2c:	f1b8 0f00 	cmp.w	r8, #0
 8002c30:	d002      	beq.n	8002c38 <store_alarm+0xe8>
            printf("Attempt %d: Error reading back the data!\n", attempt + 1);
 8002c32:	4621      	mov	r1, r4
 8002c34:	4823      	ldr	r0, [pc, #140]	; (8002cc4 <store_alarm+0x174>)
 8002c36:	e7e6      	b.n	8002c06 <store_alarm+0xb6>
		readbuf[strlen(dataToWrite)] = '\0'; // Set null terminator
 8002c38:	a810      	add	r0, sp, #64	; 0x40
 8002c3a:	4d23      	ldr	r5, [pc, #140]	; (8002cc8 <store_alarm+0x178>)
 8002c3c:	f7fd fbb0 	bl	80003a0 <strlen>
 8002c40:	f100 0360 	add.w	r3, r0, #96	; 0x60
        printf("Data to write: %s\n", dataToWrite);
 8002c44:	a910      	add	r1, sp, #64	; 0x40
		readbuf[strlen(dataToWrite)] = '\0'; // Set null terminator
 8002c46:	eb0d 0003 	add.w	r0, sp, r3
 8002c4a:	f800 8c40 	strb.w	r8, [r0, #-64]
        printf("Data to write: %s\n", dataToWrite);
 8002c4e:	4650      	mov	r0, sl
 8002c50:	f00e fdca 	bl	80117e8 <iprintf>
        printf("Data read back: %s\n", readbuf);
 8002c54:	a908      	add	r1, sp, #32
 8002c56:	4658      	mov	r0, fp
 8002c58:	f00e fdc6 	bl	80117e8 <iprintf>
        if (strcmp(dataToWrite, readbuf) == 0)
 8002c5c:	a908      	add	r1, sp, #32
 8002c5e:	a810      	add	r0, sp, #64	; 0x40
 8002c60:	f7fd fb3e 	bl	80002e0 <strcmp>
            printf("Verification succeeded after attempt %d.\n", attempt + 1);
 8002c64:	4621      	mov	r1, r4
        if (strcmp(dataToWrite, readbuf) == 0)
 8002c66:	b960      	cbnz	r0, 8002c82 <store_alarm+0x132>
            printf("Verification succeeded after attempt %d.\n", attempt + 1);
 8002c68:	4818      	ldr	r0, [pc, #96]	; (8002ccc <store_alarm+0x17c>)
 8002c6a:	f00e fdbd 	bl	80117e8 <iprintf>
            storedAlarmsNumber++;
 8002c6e:	6831      	ldr	r1, [r6, #0]
            write_backup_register(numberOfAlarmsRegNum, storedAlarmsNumber);
 8002c70:	7828      	ldrb	r0, [r5, #0]
            storedAlarmsNumber++;
 8002c72:	3101      	adds	r1, #1
 8002c74:	6031      	str	r1, [r6, #0]
            write_backup_register(numberOfAlarmsRegNum, storedAlarmsNumber);
 8002c76:	f7ff f925 	bl	8001ec4 <write_backup_register>
}
 8002c7a:	4640      	mov	r0, r8
 8002c7c:	b019      	add	sp, #100	; 0x64
 8002c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            printf("Attempt %d: Verification failed, deleting corrupted  record.\n", attempt + 1);
 8002c82:	4813      	ldr	r0, [pc, #76]	; (8002cd0 <store_alarm+0x180>)
 8002c84:	f00e fdb0 	bl	80117e8 <iprintf>
            DeleteRecordByIndex(&hqspi, storedAlarmsNumber, baseAddress, ALARM_RECORD_SIZE);
 8002c88:	2320      	movs	r3, #32
 8002c8a:	463a      	mov	r2, r7
 8002c8c:	6831      	ldr	r1, [r6, #0]
 8002c8e:	4648      	mov	r0, r9
 8002c90:	f7ff fede 	bl	8002a50 <DeleteRecordByIndex>
            storedAlarmsNumber++;
 8002c94:	6831      	ldr	r1, [r6, #0]
            write_backup_register(numberOfAlarmsRegNum, storedAlarmsNumber);
 8002c96:	7828      	ldrb	r0, [r5, #0]
            storedAlarmsNumber++;
 8002c98:	3101      	adds	r1, #1
 8002c9a:	6031      	str	r1, [r6, #0]
            write_backup_register(numberOfAlarmsRegNum, storedAlarmsNumber);
 8002c9c:	f7ff f912 	bl	8001ec4 <write_backup_register>
            addressToWriteInto = baseAddress + storedAlarmsNumber * ALARM_RECORD_SIZE;
 8002ca0:	6835      	ldr	r5, [r6, #0]
 8002ca2:	eb07 1545 	add.w	r5, r7, r5, lsl #5
            if (attempt == 2) status = HAL_ERROR;
 8002ca6:	e792      	b.n	8002bce <store_alarm+0x7e>
 8002ca8:	2403ffc0 	.word	0x2403ffc0
 8002cac:	24002688 	.word	0x24002688
 8002cb0:	24040034 	.word	0x24040034
 8002cb4:	24040030 	.word	0x24040030
 8002cb8:	08014efa 	.word	0x08014efa
 8002cbc:	080152a3 	.word	0x080152a3
 8002cc0:	080152bf 	.word	0x080152bf
 8002cc4:	080152f2 	.word	0x080152f2
 8002cc8:	2400000c 	.word	0x2400000c
 8002ccc:	08015343 	.word	0x08015343
 8002cd0:	0801536d 	.word	0x0801536d
 8002cd4:	0801531c 	.word	0x0801531c
 8002cd8:	0801532f 	.word	0x0801532f

08002cdc <externalFlashWrite>:

#define MAX_RETRIES 3
// this funciton is used to write a record to the flash memory
void externalFlashWrite(uint32_t Baseaddress, char *dataToWrite,
		uint32_t *index, uint8_t writeMemorySize, uint8_t saveRegisterNumber)
{
 8002cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t readbuf[DATED_RECORD_SIZE];
	uint32_t lastWrittenAddress = 0;
	char dataWithIndex[DATED_RECORD_SIZE];
	uint8_t exitFlag = 0;

	if (firstTimeRequest == 0)
 8002ce0:	4d4f      	ldr	r5, [pc, #316]	; (8002e20 <externalFlashWrite+0x144>)
{
 8002ce2:	b09d      	sub	sp, #116	; 0x74
 8002ce4:	460f      	mov	r7, r1
 8002ce6:	4614      	mov	r4, r2
	if (firstTimeRequest == 0)
 8002ce8:	7829      	ldrb	r1, [r5, #0]
{
 8002cea:	9002      	str	r0, [sp, #8]
 8002cec:	f89d 9098 	ldrb.w	r9, [sp, #152]	; 0x98
 8002cf0:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8002e50 <externalFlashWrite+0x174>
	{
		flStatus = S25FL256S_Enter4LinesDataMode(&hqspi, S25FL256S_SPI_MODE);
 8002cf4:	484b      	ldr	r0, [pc, #300]	; (8002e24 <externalFlashWrite+0x148>)
{
 8002cf6:	9303      	str	r3, [sp, #12]
	if (firstTimeRequest == 0)
 8002cf8:	2900      	cmp	r1, #0
 8002cfa:	d16b      	bne.n	8002dd4 <externalFlashWrite+0xf8>
		flStatus = S25FL256S_Enter4LinesDataMode(&hqspi, S25FL256S_SPI_MODE);
 8002cfc:	f002 ff1c 	bl	8005b38 <S25FL256S_Enter4LinesDataMode>
 8002d00:	4601      	mov	r1, r0
 8002d02:	f8c8 0000 	str.w	r0, [r8]
		printf("Entering to QSPI, status = %ld\r\n", flStatus);
 8002d06:	4848      	ldr	r0, [pc, #288]	; (8002e28 <externalFlashWrite+0x14c>)
 8002d08:	f00e fd6e 	bl	80117e8 <iprintf>
		firstTimeRequest = 1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	702b      	strb	r3, [r5, #0]
{
 8002d10:	2503      	movs	r5, #3
		MX_QUADSPI_Init();
	}

	while (exitFlag < MAX_RETRIES)
	{
		sprintf(dataWithIndex, "%d_%s", *index, dataToWrite);
 8002d12:	f8df a140 	ldr.w	sl, [pc, #320]	; 8002e54 <externalFlashWrite+0x178>

		lastWrittenAddress = ((*index - 1) * writeMemorySize) + Baseaddress;


		S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8002d16:	4e43      	ldr	r6, [pc, #268]	; (8002e24 <externalFlashWrite+0x148>)
		sprintf(dataWithIndex, "%d_%s", *index, dataToWrite);
 8002d18:	463b      	mov	r3, r7
 8002d1a:	6822      	ldr	r2, [r4, #0]
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	a810      	add	r0, sp, #64	; 0x40
 8002d20:	f00e fe0c 	bl	801193c <siprintf>
		lastWrittenAddress = ((*index - 1) * writeMemorySize) + Baseaddress;
 8002d24:	6823      	ldr	r3, [r4, #0]
		S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8002d26:	4630      	mov	r0, r6
		lastWrittenAddress = ((*index - 1) * writeMemorySize) + Baseaddress;
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8002d2e:	fb01 2b03 	mla	fp, r1, r3, r2
		S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8002d32:	2100      	movs	r1, #0
 8002d34:	f002 fe9a 	bl	8005a6c <S25FL256S_WriteEnable>
		flStatus = S25FL256S_PageProgram(&hqspi, S25FL256S_SPI_MODE,
				dataWithIndex, lastWrittenAddress, strlen(dataWithIndex) + 1);
 8002d38:	a810      	add	r0, sp, #64	; 0x40
 8002d3a:	f7fd fb31 	bl	80003a0 <strlen>
 8002d3e:	3001      	adds	r0, #1
		flStatus = S25FL256S_PageProgram(&hqspi, S25FL256S_SPI_MODE,
 8002d40:	2100      	movs	r1, #0
 8002d42:	465b      	mov	r3, fp
 8002d44:	9000      	str	r0, [sp, #0]
 8002d46:	aa10      	add	r2, sp, #64	; 0x40
 8002d48:	4630      	mov	r0, r6
 8002d4a:	f002 fec5 	bl	8005ad8 <S25FL256S_PageProgram>
 8002d4e:	4601      	mov	r1, r0
 8002d50:	f8c8 0000 	str.w	r0, [r8]


		if (flStatus != S25FL256S_OK)
 8002d54:	b110      	cbz	r0, 8002d5c <externalFlashWrite+0x80>
		{
			printf("Failed to write data. Status = %ld\r\n", flStatus);
 8002d56:	4835      	ldr	r0, [pc, #212]	; (8002e2c <externalFlashWrite+0x150>)
 8002d58:	f00e fd46 	bl	80117e8 <iprintf>

		}

		osDelay(8);
 8002d5c:	2008      	movs	r0, #8
 8002d5e:	f00b f904 	bl	800df6a <osDelay>

		flStatus = S25FL256S_ReadSTR(&hqspi, S25FL256S_SPI_1I4O_MODE, readbuf,
				lastWrittenAddress, strlen(dataWithIndex) + 1);
 8002d62:	a810      	add	r0, sp, #64	; 0x40
 8002d64:	f7fd fb1c 	bl	80003a0 <strlen>
 8002d68:	3001      	adds	r0, #1
		flStatus = S25FL256S_ReadSTR(&hqspi, S25FL256S_SPI_1I4O_MODE, readbuf,
 8002d6a:	2103      	movs	r1, #3
 8002d6c:	465b      	mov	r3, fp
 8002d6e:	9000      	str	r0, [sp, #0]
 8002d70:	aa04      	add	r2, sp, #16
 8002d72:	4630      	mov	r0, r6
 8002d74:	f002 ff54 	bl	8005c20 <S25FL256S_ReadSTR>
 8002d78:	4601      	mov	r1, r0
 8002d7a:	f8c8 0000 	str.w	r0, [r8]

		if (flStatus != S25FL256S_OK)
 8002d7e:	b110      	cbz	r0, 8002d86 <externalFlashWrite+0xaa>
		{
			printf("Failed to read data. Status = %ld\r\n", flStatus);
 8002d80:	482b      	ldr	r0, [pc, #172]	; (8002e30 <externalFlashWrite+0x154>)
 8002d82:	f00e fd31 	bl	80117e8 <iprintf>

		}

		readbuf[strlen(dataWithIndex)] = '\0'; // Set null terminator
 8002d86:	a810      	add	r0, sp, #64	; 0x40
 8002d88:	f7fd fb0a 	bl	80003a0 <strlen>
 8002d8c:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8002d90:	eb0d 0003 	add.w	r0, sp, r3
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	f800 3c60 	strb.w	r3, [r0, #-96]
		osDelay(8);
 8002d9c:	2008      	movs	r0, #8
 8002d9e:	f00b f8e4 	bl	800df6a <osDelay>

		printf("dataWithIndex: %s\n", dataWithIndex);
 8002da2:	a910      	add	r1, sp, #64	; 0x40
 8002da4:	4823      	ldr	r0, [pc, #140]	; (8002e34 <externalFlashWrite+0x158>)
 8002da6:	f00e fd1f 	bl	80117e8 <iprintf>
		printf("readbuf: %s\n", readbuf);
 8002daa:	a904      	add	r1, sp, #16
 8002dac:	4822      	ldr	r0, [pc, #136]	; (8002e38 <externalFlashWrite+0x15c>)
 8002dae:	f00e fd1b 	bl	80117e8 <iprintf>

		if (strcmp(dataWithIndex, readbuf) == 0)
 8002db2:	a904      	add	r1, sp, #16
 8002db4:	a810      	add	r0, sp, #64	; 0x40
 8002db6:	f7fd fa93 	bl	80002e0 <strcmp>
 8002dba:	b998      	cbnz	r0, 8002de4 <externalFlashWrite+0x108>
		{
			printf("the data record written successfully \n");
 8002dbc:	481f      	ldr	r0, [pc, #124]	; (8002e3c <externalFlashWrite+0x160>)
 8002dbe:	f00e fd81 	bl	80118c4 <puts>
			(*index)++;
 8002dc2:	6821      	ldr	r1, [r4, #0]
			write_backup_register(saveRegisterNumber, *index);
 8002dc4:	4648      	mov	r0, r9
			(*index)++;
 8002dc6:	3101      	adds	r1, #1
 8002dc8:	6021      	str	r1, [r4, #0]
			write_backup_register(saveRegisterNumber, *index);
 8002dca:	f7ff f87b 	bl	8001ec4 <write_backup_register>
			printf("the new index %i \n", *index);
			exitFlag++;
		}
	}

}
 8002dce:	b01d      	add	sp, #116	; 0x74
 8002dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_QSPI_DeInit(&hqspi);
 8002dd4:	f006 fa3c 	bl	8009250 <HAL_QSPI_DeInit>
		HAL_QSPI_MspDeInit(&hqspi);
 8002dd8:	4812      	ldr	r0, [pc, #72]	; (8002e24 <externalFlashWrite+0x148>)
 8002dda:	f002 fd93 	bl	8005904 <HAL_QSPI_MspDeInit>
		MX_QUADSPI_Init();
 8002dde:	f002 fcdf 	bl	80057a0 <MX_QUADSPI_Init>
 8002de2:	e795      	b.n	8002d10 <externalFlashWrite+0x34>
			printf("failed to write the data \n");
 8002de4:	4816      	ldr	r0, [pc, #88]	; (8002e40 <externalFlashWrite+0x164>)
	while (exitFlag < MAX_RETRIES)
 8002de6:	3d01      	subs	r5, #1
			printf("failed to write the data \n");
 8002de8:	f00e fd6c 	bl	80118c4 <puts>
			DeleteRecordByIndex(&hqspi, *index,
 8002dec:	2330      	movs	r3, #48	; 0x30
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <externalFlashWrite+0x168>)
 8002df0:	4630      	mov	r0, r6
 8002df2:	6821      	ldr	r1, [r4, #0]
 8002df4:	f7ff fe2c 	bl	8002a50 <DeleteRecordByIndex>
			printf("deleted FAULTY RECORD INDEX %d \n", *index);
 8002df8:	6821      	ldr	r1, [r4, #0]
 8002dfa:	4813      	ldr	r0, [pc, #76]	; (8002e48 <externalFlashWrite+0x16c>)
 8002dfc:	f00e fcf4 	bl	80117e8 <iprintf>
			(*index)++;
 8002e00:	6821      	ldr	r1, [r4, #0]
			write_backup_register(saveRegisterNumber, *index);
 8002e02:	4648      	mov	r0, r9
			(*index)++;
 8002e04:	3101      	adds	r1, #1
 8002e06:	6021      	str	r1, [r4, #0]
			write_backup_register(saveRegisterNumber, *index);
 8002e08:	f7ff f85c 	bl	8001ec4 <write_backup_register>
			printf("the new index %i \n", *index);
 8002e0c:	6821      	ldr	r1, [r4, #0]
 8002e0e:	480f      	ldr	r0, [pc, #60]	; (8002e4c <externalFlashWrite+0x170>)
 8002e10:	f00e fcea 	bl	80117e8 <iprintf>
	while (exitFlag < MAX_RETRIES)
 8002e14:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002e18:	f47f af7e 	bne.w	8002d18 <externalFlashWrite+0x3c>
 8002e1c:	e7d7      	b.n	8002dce <externalFlashWrite+0xf2>
 8002e1e:	bf00      	nop
 8002e20:	240006cd 	.word	0x240006cd
 8002e24:	2403ffc0 	.word	0x2403ffc0
 8002e28:	08015147 	.word	0x08015147
 8002e2c:	080153b1 	.word	0x080153b1
 8002e30:	080153d6 	.word	0x080153d6
 8002e34:	080153fa 	.word	0x080153fa
 8002e38:	0801540d 	.word	0x0801540d
 8002e3c:	0801541a 	.word	0x0801541a
 8002e40:	08015440 	.word	0x08015440
 8002e44:	00e4e1c0 	.word	0x00e4e1c0
 8002e48:	0801545a 	.word	0x0801545a
 8002e4c:	0801547b 	.word	0x0801547b
 8002e50:	240006d0 	.word	0x240006d0
 8002e54:	080153ab 	.word	0x080153ab

08002e58 <StartDefaultTask>:
 * @param  argument: Not used. Placeholder for RTOS task compatibility.
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* USER CODE BEGIN StartDefaultTask */
	uint16_t injectCounter = 0;
	//to move to pid task
	restore_alarm_data();
	uint8_t alarmTripsTheSystem = 0;
	uint8_t systemTripBecauseAlarm = 0;
 8002e5c:	2500      	movs	r5, #0

		//alarm Section

		//if the system PID was stopped because of any kind of system fault
		//mark it as the cause of the system trip due to alarm not by the user
		if (pressureAlarmEnable && pressureSensorError && pressureSysStop)
 8002e5e:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8002ff0 <StartDefaultTask+0x198>
 8002e62:	4f4f      	ldr	r7, [pc, #316]	; (8002fa0 <StartDefaultTask+0x148>)
{
 8002e64:	b08f      	sub	sp, #60	; 0x3c
	uint16_t injectCounter = 0;
 8002e66:	462c      	mov	r4, r5
		else
		{
			alarmTripsTheSystem = 0;
		}
		//if an alarm trips the system stop the pid
		if (alarmTripsTheSystem && enablePID == 1)
 8002e68:	4e4e      	ldr	r6, [pc, #312]	; (8002fa4 <StartDefaultTask+0x14c>)
	restore_alarm_data();
 8002e6a:	f7ff fa17 	bl	800229c <restore_alarm_data>
		if (pressureAlarmEnable && pressureSensorError && pressureSysStop)
 8002e6e:	f898 3000 	ldrb.w	r3, [r8]
 8002e72:	b12b      	cbz	r3, 8002e80 <StartDefaultTask+0x28>
 8002e74:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <StartDefaultTask+0x150>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b113      	cbz	r3, 8002e80 <StartDefaultTask+0x28>
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <StartDefaultTask+0x154>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b95b      	cbnz	r3, 8002e98 <StartDefaultTask+0x40>
		else if (enableDryRun && dryRunDetected && dryRunSysStop)
 8002e80:	783b      	ldrb	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8081 	beq.w	8002f8a <StartDefaultTask+0x132>
 8002e88:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <StartDefaultTask+0x158>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d07c      	beq.n	8002f8a <StartDefaultTask+0x132>
 8002e90:	4b48      	ldr	r3, [pc, #288]	; (8002fb4 <StartDefaultTask+0x15c>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d078      	beq.n	8002f8a <StartDefaultTask+0x132>
		if (alarmTripsTheSystem && enablePID == 1)
 8002e98:	f896 9000 	ldrb.w	r9, [r6]
 8002e9c:	f1b9 0f01 	cmp.w	r9, #1
 8002ea0:	d10c      	bne.n	8002ebc <StartDefaultTask+0x64>
		{
			printf("alarm trip disabled pid\n");
 8002ea2:	4845      	ldr	r0, [pc, #276]	; (8002fb8 <StartDefaultTask+0x160>)
			controlAction = 0;
			accumulatedError = 0;
			enablePID = 0;
			enableScheduler = 0;
			systemTripBecauseAlarm = 1;
 8002ea4:	464d      	mov	r5, r9
			printf("alarm trip disabled pid\n");
 8002ea6:	f00e fd0d 	bl	80118c4 <puts>
			controlAction = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	4a43      	ldr	r2, [pc, #268]	; (8002fbc <StartDefaultTask+0x164>)
 8002eae:	6013      	str	r3, [r2, #0]
			accumulatedError = 0;
 8002eb0:	4a43      	ldr	r2, [pc, #268]	; (8002fc0 <StartDefaultTask+0x168>)
 8002eb2:	6013      	str	r3, [r2, #0]
			enablePID = 0;
 8002eb4:	2300      	movs	r3, #0
			enableScheduler = 0;
 8002eb6:	4a43      	ldr	r2, [pc, #268]	; (8002fc4 <StartDefaultTask+0x16c>)
			enablePID = 0;
 8002eb8:	7033      	strb	r3, [r6, #0]
			enableScheduler = 0;
 8002eba:	7013      	strb	r3, [r2, #0]
				systemTripBecauseAlarm = 0;
				printf("alarm Clearing enabled PID \n");
			}
		}
		//if dry run is enabled start reading and acting due to the pid of dry run sensor
		if (enableDryRun)
 8002ebc:	783b      	ldrb	r3, [r7, #0]
 8002ebe:	b14b      	cbz	r3, 8002ed4 <StartDefaultTask+0x7c>
		{
			inputOnestate = HAL_GPIO_ReadPin(GPIOC, Din1_Pin);
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	4841      	ldr	r0, [pc, #260]	; (8002fc8 <StartDefaultTask+0x170>)
 8002ec4:	f005 ffee 	bl	8008ea4 <HAL_GPIO_ReadPin>
			if (inputOnestate == GPIO_PIN_SET)
 8002ec8:	2801      	cmp	r0, #1
 8002eca:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <StartDefaultTask+0x158>)
			{
				dryRunDetected = 1;
			}
			else
			{
				dryRunDetected = 0;
 8002ecc:	bf16      	itet	ne
 8002ece:	2200      	movne	r2, #0
				dryRunDetected = 1;
 8002ed0:	7018      	strbeq	r0, [r3, #0]
				dryRunDetected = 0;
 8002ed2:	701a      	strbne	r2, [r3, #0]

			}
		}

// if the user requested to change the date and time of the rtc from the app set it
		if (setRTC == 1)
 8002ed4:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8002ff4 <StartDefaultTask+0x19c>
 8002ed8:	f89b a000 	ldrb.w	sl, [fp]
 8002edc:	f1ba 0f01 	cmp.w	sl, #1
 8002ee0:	d135      	bne.n	8002f4e <StartDefaultTask+0xf6>
			uint8_t month, day, hour, minute, weekDay;

			// Temporary variables for parsing
			int temp_month, temp_day, temp_hour, temp_minute, temp_weekDay;

			int parsed = sscanf(RTCString, "%4hu-%2d-%2dT%2d:%2d:00,%1d", &year,
 8002ee2:	ab0d      	add	r3, sp, #52	; 0x34
 8002ee4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8002ee8:	4938      	ldr	r1, [pc, #224]	; (8002fcc <StartDefaultTask+0x174>)
 8002eea:	9303      	str	r3, [sp, #12]
 8002eec:	ab0c      	add	r3, sp, #48	; 0x30
 8002eee:	4838      	ldr	r0, [pc, #224]	; (8002fd0 <StartDefaultTask+0x178>)
 8002ef0:	9302      	str	r3, [sp, #8]
 8002ef2:	ab0b      	add	r3, sp, #44	; 0x2c
 8002ef4:	9301      	str	r3, [sp, #4]
 8002ef6:	ab0a      	add	r3, sp, #40	; 0x28
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	ab09      	add	r3, sp, #36	; 0x24
 8002efc:	f00e fd3e 	bl	801197c <siscanf>
 8002f00:	4684      	mov	ip, r0
			// Assign the parsed values to the uint8_t variables
			month = temp_month;
			day = temp_day;
			hour = temp_hour;
			minute = temp_minute;
			weekDay = temp_weekDay;
 8002f02:	980d      	ldr	r0, [sp, #52]	; 0x34
//				printf("Day: %d\n", day);
//				printf("Hour: %d\n", hour);
//				printf("Minute: %d\n", minute);
//				printf("weekDay %d\n",weekDay);

			if (parsed == 6) // Check if all five components were successfully parsed
 8002f04:	f1bc 0f06 	cmp.w	ip, #6
			weekDay = temp_weekDay;
 8002f08:	9004      	str	r0, [sp, #16]
			day = temp_day;
 8002f0a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
			minute = temp_minute;
 8002f0e:	e9dd 390b 	ldrd	r3, r9, [sp, #44]	; 0x2c
			if (parsed == 6) // Check if all five components were successfully parsed
 8002f12:	d137      	bne.n	8002f84 <StartDefaultTask+0x12c>
 8002f14:	9105      	str	r1, [sp, #20]
			{

				HAL_PWR_EnableBkUpAccess(); // Enable access to the backup domain
 8002f16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f1a:	f006 f82d 	bl	8008f78 <HAL_PWR_EnableBkUpAccess>
				Set_RTC_Values(year, month, day, hour, minute, weekDay); // Set the parsed values
 8002f1e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002f22:	9b07      	ldr	r3, [sp, #28]
 8002f24:	9a06      	ldr	r2, [sp, #24]
 8002f26:	9905      	ldr	r1, [sp, #20]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	9001      	str	r0, [sp, #4]
 8002f2c:	fa5f f089 	uxtb.w	r0, r9
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	b2c9      	uxtb	r1, r1
 8002f34:	9000      	str	r0, [sp, #0]
 8002f36:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 8002f3a:	f002 fd67 	bl	8005a0c <Set_RTC_Values>
				HAL_PWR_DisableBkUpAccess(); // Disable access to the backup domain
 8002f3e:	f006 f823 	bl	8008f88 <HAL_PWR_DisableBkUpAccess>

				setRTC = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f88b 3000 	strb.w	r3, [fp]
				sendRTC = 1;
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <StartDefaultTask+0x17c>)
 8002f4a:	f883 a000 	strb.w	sl, [r3]
				// Handle the error if parsing failed
				Error_Handler();
			}
		}
//react to rgb led changes
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, redValue);
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <StartDefaultTask+0x180>)
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, greenValue);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, blueValue);
		// get the current rtc values
		Get_RTC_Values();
// a counter that is responsable for setting a flag that will tirgger a test for if any vfd not responded to modbus requests
		injectCounter++;
 8002f50:	3401      	adds	r4, #1
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, redValue);
 8002f52:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <StartDefaultTask+0x184>)
 8002f54:	681b      	ldr	r3, [r3, #0]
		injectCounter++;
 8002f56:	b2a4      	uxth	r4, r4
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, redValue);
 8002f58:	8812      	ldrh	r2, [r2, #0]
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, greenValue);
 8002f5c:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <StartDefaultTask+0x188>)
 8002f5e:	8812      	ldrh	r2, [r2, #0]
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, blueValue);
 8002f62:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <StartDefaultTask+0x18c>)
 8002f64:	8812      	ldrh	r2, [r2, #0]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
		Get_RTC_Values();
 8002f68:	f002 fd36 	bl	80059d8 <Get_RTC_Values>
		if (injectCounter > 2000)
 8002f6c:	f240 73d1 	movw	r3, #2001	; 0x7d1
		{
			testIFNoVfdResponse = 1;
			injectCounter = 0;
		}
		osDelay(5);
 8002f70:	2005      	movs	r0, #5
		if (injectCounter > 2000)
 8002f72:	429c      	cmp	r4, r3
			testIFNoVfdResponse = 1;
 8002f74:	bf01      	itttt	eq
 8002f76:	4b1c      	ldreq	r3, [pc, #112]	; (8002fe8 <StartDefaultTask+0x190>)
 8002f78:	2201      	moveq	r2, #1
			injectCounter = 0;
 8002f7a:	2400      	moveq	r4, #0
			testIFNoVfdResponse = 1;
 8002f7c:	701a      	strbeq	r2, [r3, #0]
		osDelay(5);
 8002f7e:	f00a fff4 	bl	800df6a <osDelay>
		if (pressureAlarmEnable && pressureSensorError && pressureSysStop)
 8002f82:	e774      	b.n	8002e6e <StartDefaultTask+0x16>
				Error_Handler();
 8002f84:	f002 fc0a 	bl	800579c <Error_Handler>
 8002f88:	e7e1      	b.n	8002f4e <StartDefaultTask+0xf6>
			if (systemTripBecauseAlarm == 1 && alarmTripsTheSystem == 0)
 8002f8a:	2d00      	cmp	r5, #0
 8002f8c:	d096      	beq.n	8002ebc <StartDefaultTask+0x64>
				enableScheduler = 1;
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <StartDefaultTask+0x16c>)
				printf("alarm Clearing enabled PID \n");
 8002f90:	4816      	ldr	r0, [pc, #88]	; (8002fec <StartDefaultTask+0x194>)
				enablePID = 1;
 8002f92:	7035      	strb	r5, [r6, #0]
				enableScheduler = 1;
 8002f94:	701d      	strb	r5, [r3, #0]
				systemTripBecauseAlarm = 0;
 8002f96:	2500      	movs	r5, #0
				printf("alarm Clearing enabled PID \n");
 8002f98:	f00e fc94 	bl	80118c4 <puts>
 8002f9c:	e78e      	b.n	8002ebc <StartDefaultTask+0x64>
 8002f9e:	bf00      	nop
 8002fa0:	2403efd8 	.word	0x2403efd8
 8002fa4:	2403efd9 	.word	0x2403efd9
 8002fa8:	2403eff6 	.word	0x2403eff6
 8002fac:	2403eff7 	.word	0x2403eff7
 8002fb0:	2403efd6 	.word	0x2403efd6
 8002fb4:	2403efd7 	.word	0x2403efd7
 8002fb8:	0801548e 	.word	0x0801548e
 8002fbc:	2403efc0 	.word	0x2403efc0
 8002fc0:	2403efb8 	.word	0x2403efb8
 8002fc4:	2403efda 	.word	0x2403efda
 8002fc8:	58020800 	.word	0x58020800
 8002fcc:	080154c2 	.word	0x080154c2
 8002fd0:	2403ef8c 	.word	0x2403ef8c
 8002fd4:	24000054 	.word	0x24000054
 8002fd8:	24040180 	.word	0x24040180
 8002fdc:	2400004e 	.word	0x2400004e
 8002fe0:	2400004a 	.word	0x2400004a
 8002fe4:	2400002c 	.word	0x2400002c
 8002fe8:	2400005d 	.word	0x2400005d
 8002fec:	080154a6 	.word	0x080154a6
 8002ff0:	2403eff5 	.word	0x2403eff5
 8002ff4:	2403f15d 	.word	0x2403f15d

08002ff8 <UART1_task>:
	/* Infinite loop */
	for (;;)
	{
		//checks if the uart have recived data from the esp32 which is connected to the main board microcontroller
		//stm32h750
		if (usart1HaveNewData)
 8002ff8:	4db1      	ldr	r5, [pc, #708]	; (80032c0 <UART1_task+0x2c8>)
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &d_value, 1);
 8002ffa:	2201      	movs	r2, #1
				slaveAddress = atoi(Data.value);
				//printf("the slave address : %d\n", slaveAddress);
			}

			if (strcmp(Data.identifier, "dataToSend") == 0
					&& atoi(Data.value) != dataToSend)
 8002ffc:	4cb1      	ldr	r4, [pc, #708]	; (80032c4 <UART1_task+0x2cc>)
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &d_value, 1);
 8002ffe:	49b2      	ldr	r1, [pc, #712]	; (80032c8 <UART1_task+0x2d0>)
 8003000:	48b2      	ldr	r0, [pc, #712]	; (80032cc <UART1_task+0x2d4>)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b0c8      	sub	sp, #288	; 0x120
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &d_value, 1);
 8003006:	f00a fc83 	bl	800d910 <HAL_UART_Receive_IT>
		if (usart1HaveNewData)
 800300a:	782b      	ldrb	r3, [r5, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8550 	beq.w	8003ab2 <UART1_task+0xaba>
			Data = ReceiveData();
 8003012:	4668      	mov	r0, sp
 8003014:	f7fd fdd2 	bl	8000bbc <ReceiveData>
 8003018:	4669      	mov	r1, sp
 800301a:	228c      	movs	r2, #140	; 0x8c
 800301c:	a825      	add	r0, sp, #148	; 0x94
 800301e:	f00e ff34 	bl	8011e8a <memcpy>
			if (strcmp(Data.identifier, "ledRed") == 0
 8003022:	49ab      	ldr	r1, [pc, #684]	; (80032d0 <UART1_task+0x2d8>)
 8003024:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003028:	f7fd f95a 	bl	80002e0 <strcmp>
 800302c:	b9c0      	cbnz	r0, 8003060 <UART1_task+0x68>
					&& redValue != (64000 - atoi((Data.value)) * 250))
 800302e:	4ea9      	ldr	r6, [pc, #676]	; (80032d4 <UART1_task+0x2dc>)
 8003030:	a825      	add	r0, sp, #148	; 0x94
 8003032:	8837      	ldrh	r7, [r6, #0]
 8003034:	f00d f871 	bl	801011a <atoi>
 8003038:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 800303c:	4358      	muls	r0, r3
 800303e:	f500 407a 	add.w	r0, r0, #64000	; 0xfa00
 8003042:	4287      	cmp	r7, r0
 8003044:	d00c      	beq.n	8003060 <UART1_task+0x68>
				redValue = 64000 - atoi((Data.value)) * 250;
 8003046:	a825      	add	r0, sp, #148	; 0x94
 8003048:	f00d f867 	bl	801011a <atoi>
 800304c:	ebc0 2300 	rsb	r3, r0, r0, lsl #8
 8003050:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 8003054:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8003058:	0040      	lsls	r0, r0, #1
 800305a:	f5a0 60c0 	sub.w	r0, r0, #1536	; 0x600
 800305e:	8030      	strh	r0, [r6, #0]
			if (strcmp(Data.identifier, "ledGreen") == 0
 8003060:	499d      	ldr	r1, [pc, #628]	; (80032d8 <UART1_task+0x2e0>)
 8003062:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003066:	f7fd f93b 	bl	80002e0 <strcmp>
 800306a:	b9c0      	cbnz	r0, 800309e <UART1_task+0xa6>
					&& greenValue != (64000 - atoi((Data.value)) * 250))
 800306c:	4e9b      	ldr	r6, [pc, #620]	; (80032dc <UART1_task+0x2e4>)
 800306e:	a825      	add	r0, sp, #148	; 0x94
 8003070:	8837      	ldrh	r7, [r6, #0]
 8003072:	f00d f852 	bl	801011a <atoi>
 8003076:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 800307a:	4358      	muls	r0, r3
 800307c:	f500 407a 	add.w	r0, r0, #64000	; 0xfa00
 8003080:	4287      	cmp	r7, r0
 8003082:	d00c      	beq.n	800309e <UART1_task+0xa6>
				greenValue = 64000 - atoi((Data.value)) * 250;
 8003084:	a825      	add	r0, sp, #148	; 0x94
 8003086:	f00d f848 	bl	801011a <atoi>
 800308a:	ebc0 2300 	rsb	r3, r0, r0, lsl #8
 800308e:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 8003092:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8003096:	0040      	lsls	r0, r0, #1
 8003098:	f5a0 60c0 	sub.w	r0, r0, #1536	; 0x600
 800309c:	8030      	strh	r0, [r6, #0]
			if (strcmp(Data.identifier, "ledBlue") == 0
 800309e:	4990      	ldr	r1, [pc, #576]	; (80032e0 <UART1_task+0x2e8>)
 80030a0:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80030a4:	f7fd f91c 	bl	80002e0 <strcmp>
 80030a8:	b9c0      	cbnz	r0, 80030dc <UART1_task+0xe4>
					&& blueValue != (64000 - atoi((Data.value)) * 250))
 80030aa:	4e8e      	ldr	r6, [pc, #568]	; (80032e4 <UART1_task+0x2ec>)
 80030ac:	a825      	add	r0, sp, #148	; 0x94
 80030ae:	8837      	ldrh	r7, [r6, #0]
 80030b0:	f00d f833 	bl	801011a <atoi>
 80030b4:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80030b8:	4358      	muls	r0, r3
 80030ba:	f500 407a 	add.w	r0, r0, #64000	; 0xfa00
 80030be:	4287      	cmp	r7, r0
 80030c0:	d00c      	beq.n	80030dc <UART1_task+0xe4>
				blueValue = 64000 - atoi((Data.value)) * 250;
 80030c2:	a825      	add	r0, sp, #148	; 0x94
 80030c4:	f00d f829 	bl	801011a <atoi>
 80030c8:	ebc0 2300 	rsb	r3, r0, r0, lsl #8
 80030cc:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 80030d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80030d4:	0040      	lsls	r0, r0, #1
 80030d6:	f5a0 60c0 	sub.w	r0, r0, #1536	; 0x600
 80030da:	8030      	strh	r0, [r6, #0]
			if (strcmp(Data.identifier, "setPointRequiredStmRecive") == 0)
 80030dc:	4982      	ldr	r1, [pc, #520]	; (80032e8 <UART1_task+0x2f0>)
 80030de:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80030e2:	f7fd f8fd 	bl	80002e0 <strcmp>
 80030e6:	b938      	cbnz	r0, 80030f8 <UART1_task+0x100>
				setPointRequired = atof(Data.value);
 80030e8:	a825      	add	r0, sp, #148	; 0x94
 80030ea:	f00d f813 	bl	8010114 <atof>
 80030ee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80030f2:	4b7e      	ldr	r3, [pc, #504]	; (80032ec <UART1_task+0x2f4>)
 80030f4:	ed83 0a00 	vstr	s0, [r3]
			if (strcmp(Data.identifier, "offset") == 0
 80030f8:	497d      	ldr	r1, [pc, #500]	; (80032f0 <UART1_task+0x2f8>)
 80030fa:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80030fe:	f7fd f8ef 	bl	80002e0 <strcmp>
 8003102:	b950      	cbnz	r0, 800311a <UART1_task+0x122>
					&& atoi(Data.value) != offset)
 8003104:	4e7b      	ldr	r6, [pc, #492]	; (80032f4 <UART1_task+0x2fc>)
 8003106:	a825      	add	r0, sp, #148	; 0x94
 8003108:	f00d f807 	bl	801011a <atoi>
 800310c:	8833      	ldrh	r3, [r6, #0]
 800310e:	4298      	cmp	r0, r3
 8003110:	d003      	beq.n	800311a <UART1_task+0x122>
				offset = atoi(Data.value);
 8003112:	a825      	add	r0, sp, #148	; 0x94
 8003114:	f00d f801 	bl	801011a <atoi>
 8003118:	8030      	strh	r0, [r6, #0]
			if (strcmp(Data.identifier, "cutIn") == 0
 800311a:	4977      	ldr	r1, [pc, #476]	; (80032f8 <UART1_task+0x300>)
 800311c:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003120:	f7fd f8de 	bl	80002e0 <strcmp>
 8003124:	b998      	cbnz	r0, 800314e <UART1_task+0x156>
					&& atof(Data.value) != cutIn)
 8003126:	4e75      	ldr	r6, [pc, #468]	; (80032fc <UART1_task+0x304>)
 8003128:	a825      	add	r0, sp, #148	; 0x94
 800312a:	f00c fff3 	bl	8010114 <atof>
 800312e:	ed96 7a00 	vldr	s14, [r6]
 8003132:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003136:	eeb4 0b47 	vcmp.f64	d0, d7
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	d006      	beq.n	800314e <UART1_task+0x156>
				cutIn = atof(Data.value);
 8003140:	a825      	add	r0, sp, #148	; 0x94
 8003142:	f00c ffe7 	bl	8010114 <atof>
 8003146:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800314a:	ed86 0a00 	vstr	s0, [r6]
			if (strcmp(Data.identifier, "cutOff") == 0
 800314e:	496c      	ldr	r1, [pc, #432]	; (8003300 <UART1_task+0x308>)
 8003150:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003154:	f7fd f8c4 	bl	80002e0 <strcmp>
 8003158:	b998      	cbnz	r0, 8003182 <UART1_task+0x18a>
					&& atof(Data.value) != cutOff)
 800315a:	4e6a      	ldr	r6, [pc, #424]	; (8003304 <UART1_task+0x30c>)
 800315c:	a825      	add	r0, sp, #148	; 0x94
 800315e:	f00c ffd9 	bl	8010114 <atof>
 8003162:	ed96 7a00 	vldr	s14, [r6]
 8003166:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800316a:	eeb4 0b47 	vcmp.f64	d0, d7
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	d006      	beq.n	8003182 <UART1_task+0x18a>
				cutOff = atof(Data.value);
 8003174:	a825      	add	r0, sp, #148	; 0x94
 8003176:	f00c ffcd 	bl	8010114 <atof>
 800317a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800317e:	ed86 0a00 	vstr	s0, [r6]
			if (strcmp(Data.identifier, "vfdType") == 0
 8003182:	4961      	ldr	r1, [pc, #388]	; (8003308 <UART1_task+0x310>)
 8003184:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003188:	f7fd f8aa 	bl	80002e0 <strcmp>
 800318c:	b940      	cbnz	r0, 80031a0 <UART1_task+0x1a8>
					&& strcmp(Data.value, vfdType) != 0)
 800318e:	495f      	ldr	r1, [pc, #380]	; (800330c <UART1_task+0x314>)
 8003190:	a825      	add	r0, sp, #148	; 0x94
 8003192:	f7fd f8a5 	bl	80002e0 <strcmp>
 8003196:	b118      	cbz	r0, 80031a0 <UART1_task+0x1a8>
				strcpy(vfdType, Data.value);
 8003198:	a925      	add	r1, sp, #148	; 0x94
 800319a:	485c      	ldr	r0, [pc, #368]	; (800330c <UART1_task+0x314>)
 800319c:	f00e fe6d 	bl	8011e7a <strcpy>
			if (strcmp(Data.identifier, "systemPumpsNumber") == 0
 80031a0:	495b      	ldr	r1, [pc, #364]	; (8003310 <UART1_task+0x318>)
 80031a2:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80031a6:	f7fd f89b 	bl	80002e0 <strcmp>
 80031aa:	b950      	cbnz	r0, 80031c2 <UART1_task+0x1ca>
					&& atoi(Data.value) != systemPumpsNumber)
 80031ac:	4e59      	ldr	r6, [pc, #356]	; (8003314 <UART1_task+0x31c>)
 80031ae:	a825      	add	r0, sp, #148	; 0x94
 80031b0:	f00c ffb3 	bl	801011a <atoi>
 80031b4:	7833      	ldrb	r3, [r6, #0]
 80031b6:	4298      	cmp	r0, r3
 80031b8:	d003      	beq.n	80031c2 <UART1_task+0x1ca>
				systemPumpsNumber = atoi(Data.value);
 80031ba:	a825      	add	r0, sp, #148	; 0x94
 80031bc:	f00c ffad 	bl	801011a <atoi>
 80031c0:	7030      	strb	r0, [r6, #0]
			if (strcmp(Data.identifier, "minimumPressure") == 0
 80031c2:	4955      	ldr	r1, [pc, #340]	; (8003318 <UART1_task+0x320>)
 80031c4:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80031c8:	f7fd f88a 	bl	80002e0 <strcmp>
 80031cc:	b998      	cbnz	r0, 80031f6 <UART1_task+0x1fe>
					&& atof(Data.value) != minimumPressure)
 80031ce:	4e53      	ldr	r6, [pc, #332]	; (800331c <UART1_task+0x324>)
 80031d0:	a825      	add	r0, sp, #148	; 0x94
 80031d2:	f00c ff9f 	bl	8010114 <atof>
 80031d6:	ed96 7a00 	vldr	s14, [r6]
 80031da:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80031de:	eeb4 0b47 	vcmp.f64	d0, d7
 80031e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e6:	d006      	beq.n	80031f6 <UART1_task+0x1fe>
				minimumPressure = atof(Data.value);
 80031e8:	a825      	add	r0, sp, #148	; 0x94
 80031ea:	f00c ff93 	bl	8010114 <atof>
 80031ee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80031f2:	ed86 0a00 	vstr	s0, [r6]
			if (strcmp(Data.identifier, "MaximumPressure") == 0
 80031f6:	494a      	ldr	r1, [pc, #296]	; (8003320 <UART1_task+0x328>)
 80031f8:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80031fc:	f7fd f870 	bl	80002e0 <strcmp>
 8003200:	b998      	cbnz	r0, 800322a <UART1_task+0x232>
					&& atof(Data.value) != MaximumPressure)
 8003202:	4e48      	ldr	r6, [pc, #288]	; (8003324 <UART1_task+0x32c>)
 8003204:	a825      	add	r0, sp, #148	; 0x94
 8003206:	f00c ff85 	bl	8010114 <atof>
 800320a:	ed96 7a00 	vldr	s14, [r6]
 800320e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003212:	eeb4 0b47 	vcmp.f64	d0, d7
 8003216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321a:	d006      	beq.n	800322a <UART1_task+0x232>
				MaximumPressure = atof(Data.value);
 800321c:	a825      	add	r0, sp, #148	; 0x94
 800321e:	f00c ff79 	bl	8010114 <atof>
 8003222:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8003226:	ed86 0a00 	vstr	s0, [r6]
			if (strcmp(Data.identifier, "enableDryRun") == 0
 800322a:	493f      	ldr	r1, [pc, #252]	; (8003328 <UART1_task+0x330>)
 800322c:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003230:	f7fd f856 	bl	80002e0 <strcmp>
 8003234:	b950      	cbnz	r0, 800324c <UART1_task+0x254>
					&& atoi(Data.value) != enableDryRun)
 8003236:	4e3d      	ldr	r6, [pc, #244]	; (800332c <UART1_task+0x334>)
 8003238:	a825      	add	r0, sp, #148	; 0x94
 800323a:	f00c ff6e 	bl	801011a <atoi>
 800323e:	7833      	ldrb	r3, [r6, #0]
 8003240:	4298      	cmp	r0, r3
 8003242:	d003      	beq.n	800324c <UART1_task+0x254>
				enableDryRun = atoi(Data.value);
 8003244:	a825      	add	r0, sp, #148	; 0x94
 8003246:	f00c ff68 	bl	801011a <atoi>
 800324a:	7030      	strb	r0, [r6, #0]
			if (strcmp(Data.identifier, "enablePID") == 0
 800324c:	4938      	ldr	r1, [pc, #224]	; (8003330 <UART1_task+0x338>)
 800324e:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003252:	f7fd f845 	bl	80002e0 <strcmp>
 8003256:	b950      	cbnz	r0, 800326e <UART1_task+0x276>
					&& atoi(Data.value) != enablePID)
 8003258:	4e36      	ldr	r6, [pc, #216]	; (8003334 <UART1_task+0x33c>)
 800325a:	a825      	add	r0, sp, #148	; 0x94
 800325c:	f00c ff5d 	bl	801011a <atoi>
 8003260:	7833      	ldrb	r3, [r6, #0]
 8003262:	4298      	cmp	r0, r3
 8003264:	d003      	beq.n	800326e <UART1_task+0x276>
				enablePID = atoi(Data.value);
 8003266:	a825      	add	r0, sp, #148	; 0x94
 8003268:	f00c ff57 	bl	801011a <atoi>
 800326c:	7030      	strb	r0, [r6, #0]
			if (strcmp(Data.identifier, "enableScheduler") == 0
 800326e:	4932      	ldr	r1, [pc, #200]	; (8003338 <UART1_task+0x340>)
 8003270:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003274:	f7fd f834 	bl	80002e0 <strcmp>
 8003278:	b950      	cbnz	r0, 8003290 <UART1_task+0x298>
					&& atoi(Data.value) != enableScheduler)
 800327a:	4e30      	ldr	r6, [pc, #192]	; (800333c <UART1_task+0x344>)
 800327c:	a825      	add	r0, sp, #148	; 0x94
 800327e:	f00c ff4c 	bl	801011a <atoi>
 8003282:	7833      	ldrb	r3, [r6, #0]
 8003284:	4298      	cmp	r0, r3
 8003286:	d003      	beq.n	8003290 <UART1_task+0x298>
				enableScheduler = atoi(Data.value);
 8003288:	a825      	add	r0, sp, #148	; 0x94
 800328a:	f00c ff46 	bl	801011a <atoi>
 800328e:	7030      	strb	r0, [r6, #0]
			if (strcmp(Data.identifier, "currentOfTheFirstReading") == 0)
 8003290:	492b      	ldr	r1, [pc, #172]	; (8003340 <UART1_task+0x348>)
 8003292:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003296:	f7fd f823 	bl	80002e0 <strcmp>
 800329a:	b950      	cbnz	r0, 80032b2 <UART1_task+0x2ba>
				currentOfTheFirstReading = atof(Data.value);
 800329c:	a825      	add	r0, sp, #148	; 0x94
 800329e:	f00c ff39 	bl	8010114 <atof>
 80032a2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80032a6:	4b27      	ldr	r3, [pc, #156]	; (8003344 <UART1_task+0x34c>)
				firstCurrentReadingRecived = 1;
 80032a8:	2201      	movs	r2, #1
				currentOfTheFirstReading = atof(Data.value);
 80032aa:	ed83 0a00 	vstr	s0, [r3]
				firstCurrentReadingRecived = 1;
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <UART1_task+0x350>)
 80032b0:	701a      	strb	r2, [r3, #0]
			if (strcmp(Data.identifier, "currentOfTheSecondReading") == 0)
 80032b2:	4926      	ldr	r1, [pc, #152]	; (800334c <UART1_task+0x354>)
 80032b4:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80032b8:	f7fd f812 	bl	80002e0 <strcmp>
 80032bc:	e048      	b.n	8003350 <UART1_task+0x358>
 80032be:	bf00      	nop
 80032c0:	2404012e 	.word	0x2404012e
 80032c4:	2403efcc 	.word	0x2403efcc
 80032c8:	240400ad 	.word	0x240400ad
 80032cc:	24040440 	.word	0x24040440
 80032d0:	080154de 	.word	0x080154de
 80032d4:	2400004e 	.word	0x2400004e
 80032d8:	080154e5 	.word	0x080154e5
 80032dc:	2400004a 	.word	0x2400004a
 80032e0:	080154ee 	.word	0x080154ee
 80032e4:	2400002c 	.word	0x2400002c
 80032e8:	080154f6 	.word	0x080154f6
 80032ec:	24000058 	.word	0x24000058
 80032f0:	08015510 	.word	0x08015510
 80032f4:	2400004c 	.word	0x2400004c
 80032f8:	08015517 	.word	0x08015517
 80032fc:	24000040 	.word	0x24000040
 8003300:	0801551d 	.word	0x0801551d
 8003304:	24000044 	.word	0x24000044
 8003308:	08015524 	.word	0x08015524
 800330c:	2403f2d9 	.word	0x2403f2d9
 8003310:	0801552c 	.word	0x0801552c
 8003314:	2400005c 	.word	0x2400005c
 8003318:	0801553e 	.word	0x0801553e
 800331c:	2403efec 	.word	0x2403efec
 8003320:	0801554e 	.word	0x0801554e
 8003324:	24000024 	.word	0x24000024
 8003328:	0801555e 	.word	0x0801555e
 800332c:	2403efd8 	.word	0x2403efd8
 8003330:	0801556b 	.word	0x0801556b
 8003334:	2403efd9 	.word	0x2403efd9
 8003338:	08015575 	.word	0x08015575
 800333c:	2403efda 	.word	0x2403efda
 8003340:	08015585 	.word	0x08015585
 8003344:	24000038 	.word	0x24000038
 8003348:	2403efdf 	.word	0x2403efdf
 800334c:	0801559e 	.word	0x0801559e
 8003350:	b950      	cbnz	r0, 8003368 <UART1_task+0x370>
				currentOfTheSecondReading = atof(Data.value);
 8003352:	a825      	add	r0, sp, #148	; 0x94
 8003354:	f00c fede 	bl	8010114 <atof>
 8003358:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800335c:	4baf      	ldr	r3, [pc, #700]	; (800361c <UART1_task+0x624>)
				secondCurrentReadingRecived = 1;
 800335e:	2201      	movs	r2, #1
				currentOfTheSecondReading = atof(Data.value);
 8003360:	ed83 0a00 	vstr	s0, [r3]
				secondCurrentReadingRecived = 1;
 8003364:	4bae      	ldr	r3, [pc, #696]	; (8003620 <UART1_task+0x628>)
 8003366:	701a      	strb	r2, [r3, #0]
			if (strcmp(Data.identifier, "coffA") == 0
 8003368:	49ae      	ldr	r1, [pc, #696]	; (8003624 <UART1_task+0x62c>)
 800336a:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 800336e:	f7fc ffb7 	bl	80002e0 <strcmp>
 8003372:	b998      	cbnz	r0, 800339c <UART1_task+0x3a4>
					&& atof(Data.value) != coffA)
 8003374:	4eac      	ldr	r6, [pc, #688]	; (8003628 <UART1_task+0x630>)
 8003376:	a825      	add	r0, sp, #148	; 0x94
 8003378:	f00c fecc 	bl	8010114 <atof>
 800337c:	ed96 7a00 	vldr	s14, [r6]
 8003380:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003384:	eeb4 0b47 	vcmp.f64	d0, d7
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	d006      	beq.n	800339c <UART1_task+0x3a4>
				coffA = atof(Data.value);
 800338e:	a825      	add	r0, sp, #148	; 0x94
 8003390:	f00c fec0 	bl	8010114 <atof>
 8003394:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8003398:	ed86 0a00 	vstr	s0, [r6]
			if (strcmp(Data.identifier, "coffB") == 0
 800339c:	49a3      	ldr	r1, [pc, #652]	; (800362c <UART1_task+0x634>)
 800339e:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80033a2:	f7fc ff9d 	bl	80002e0 <strcmp>
 80033a6:	b998      	cbnz	r0, 80033d0 <UART1_task+0x3d8>
					&& atof(Data.value) != coffB)
 80033a8:	4ea1      	ldr	r6, [pc, #644]	; (8003630 <UART1_task+0x638>)
 80033aa:	a825      	add	r0, sp, #148	; 0x94
 80033ac:	f00c feb2 	bl	8010114 <atof>
 80033b0:	ed96 7a00 	vldr	s14, [r6]
 80033b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80033b8:	eeb4 0b47 	vcmp.f64	d0, d7
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d006      	beq.n	80033d0 <UART1_task+0x3d8>
				coffB = atof(Data.value);
 80033c2:	a825      	add	r0, sp, #148	; 0x94
 80033c4:	f00c fea6 	bl	8010114 <atof>
 80033c8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80033cc:	ed86 0a00 	vstr	s0, [r6]
			if (strcmp(Data.identifier, "changeOverTime") == 0
 80033d0:	4998      	ldr	r1, [pc, #608]	; (8003634 <UART1_task+0x63c>)
 80033d2:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80033d6:	f7fc ff83 	bl	80002e0 <strcmp>
 80033da:	b950      	cbnz	r0, 80033f2 <UART1_task+0x3fa>
					&& atoi(Data.value) != changeOverTime)
 80033dc:	4e96      	ldr	r6, [pc, #600]	; (8003638 <UART1_task+0x640>)
 80033de:	a825      	add	r0, sp, #148	; 0x94
 80033e0:	f00c fe9b 	bl	801011a <atoi>
 80033e4:	8833      	ldrh	r3, [r6, #0]
 80033e6:	4298      	cmp	r0, r3
 80033e8:	d003      	beq.n	80033f2 <UART1_task+0x3fa>
				changeOverTime = atoi(Data.value);
 80033ea:	a825      	add	r0, sp, #148	; 0x94
 80033ec:	f00c fe95 	bl	801011a <atoi>
 80033f0:	8030      	strh	r0, [r6, #0]
			if (strcmp(Data.identifier, "KP") == 0 && atof(Data.value) != Kp)
 80033f2:	4992      	ldr	r1, [pc, #584]	; (800363c <UART1_task+0x644>)
 80033f4:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80033f8:	f7fc ff72 	bl	80002e0 <strcmp>
 80033fc:	b998      	cbnz	r0, 8003426 <UART1_task+0x42e>
 80033fe:	4e90      	ldr	r6, [pc, #576]	; (8003640 <UART1_task+0x648>)
 8003400:	a825      	add	r0, sp, #148	; 0x94
 8003402:	f00c fe87 	bl	8010114 <atof>
 8003406:	ed96 7a00 	vldr	s14, [r6]
 800340a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800340e:	eeb4 0b47 	vcmp.f64	d0, d7
 8003412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003416:	d006      	beq.n	8003426 <UART1_task+0x42e>
				Kp = atof(Data.value);
 8003418:	a825      	add	r0, sp, #148	; 0x94
 800341a:	f00c fe7b 	bl	8010114 <atof>
 800341e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8003422:	ed86 0a00 	vstr	s0, [r6]
			if (strcmp(Data.identifier, "KI") == 0 && atof(Data.value) != Ki)
 8003426:	4987      	ldr	r1, [pc, #540]	; (8003644 <UART1_task+0x64c>)
 8003428:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 800342c:	f7fc ff58 	bl	80002e0 <strcmp>
 8003430:	b9b0      	cbnz	r0, 8003460 <UART1_task+0x468>
 8003432:	4e85      	ldr	r6, [pc, #532]	; (8003648 <UART1_task+0x650>)
 8003434:	a825      	add	r0, sp, #148	; 0x94
 8003436:	f00c fe6d 	bl	8010114 <atof>
 800343a:	ed96 7a00 	vldr	s14, [r6]
 800343e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003442:	eeb4 0b47 	vcmp.f64	d0, d7
 8003446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344a:	d009      	beq.n	8003460 <UART1_task+0x468>
				Ki = atof(Data.value);
 800344c:	a825      	add	r0, sp, #148	; 0x94
 800344e:	f00c fe61 	bl	8010114 <atof>
 8003452:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
				KIreceived = 1;
 8003456:	4b7d      	ldr	r3, [pc, #500]	; (800364c <UART1_task+0x654>)
 8003458:	2201      	movs	r2, #1
				Ki = atof(Data.value);
 800345a:	ed86 0a00 	vstr	s0, [r6]
				KIreceived = 1;
 800345e:	701a      	strb	r2, [r3, #0]
			if (strcmp(Data.identifier, "KD") == 0 && atof(Data.value) != Kd)
 8003460:	497b      	ldr	r1, [pc, #492]	; (8003650 <UART1_task+0x658>)
 8003462:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003466:	f7fc ff3b 	bl	80002e0 <strcmp>
 800346a:	b998      	cbnz	r0, 8003494 <UART1_task+0x49c>
 800346c:	4e79      	ldr	r6, [pc, #484]	; (8003654 <UART1_task+0x65c>)
 800346e:	a825      	add	r0, sp, #148	; 0x94
 8003470:	f00c fe50 	bl	8010114 <atof>
 8003474:	ed96 7a00 	vldr	s14, [r6]
 8003478:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800347c:	eeb4 0b47 	vcmp.f64	d0, d7
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	d006      	beq.n	8003494 <UART1_task+0x49c>
				Kd = atof(Data.value);
 8003486:	a825      	add	r0, sp, #148	; 0x94
 8003488:	f00c fe44 	bl	8010114 <atof>
 800348c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8003490:	ed86 0a00 	vstr	s0, [r6]
			if (strcmp(Data.identifier, "save") == 0)
 8003494:	4970      	ldr	r1, [pc, #448]	; (8003658 <UART1_task+0x660>)
 8003496:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 800349a:	f7fc ff21 	bl	80002e0 <strcmp>
 800349e:	b940      	cbnz	r0, 80034b2 <UART1_task+0x4ba>
				save = atof(Data.value);
 80034a0:	a825      	add	r0, sp, #148	; 0x94
 80034a2:	f00c fe37 	bl	8010114 <atof>
 80034a6:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 80034aa:	4a6c      	ldr	r2, [pc, #432]	; (800365c <UART1_task+0x664>)
 80034ac:	ee17 3a90 	vmov	r3, s15
 80034b0:	7013      	strb	r3, [r2, #0]
			if (strcmp(Data.identifier, "getFactoryData") == 0)
 80034b2:	496b      	ldr	r1, [pc, #428]	; (8003660 <UART1_task+0x668>)
 80034b4:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80034b8:	f7fc ff12 	bl	80002e0 <strcmp>
 80034bc:	b940      	cbnz	r0, 80034d0 <UART1_task+0x4d8>
				getFactoryData = atof(Data.value);
 80034be:	a825      	add	r0, sp, #148	; 0x94
 80034c0:	f00c fe28 	bl	8010114 <atof>
 80034c4:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 80034c8:	4a66      	ldr	r2, [pc, #408]	; (8003664 <UART1_task+0x66c>)
 80034ca:	ee17 3a90 	vmov	r3, s15
 80034ce:	7013      	strb	r3, [r2, #0]
			if (strcmp(Data.identifier, "ID") == 0
 80034d0:	4965      	ldr	r1, [pc, #404]	; (8003668 <UART1_task+0x670>)
 80034d2:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80034d6:	f7fc ff03 	bl	80002e0 <strcmp>
 80034da:	b950      	cbnz	r0, 80034f2 <UART1_task+0x4fa>
					&& atoi(Data.value) != Slave_ID)
 80034dc:	4e63      	ldr	r6, [pc, #396]	; (800366c <UART1_task+0x674>)
 80034de:	a825      	add	r0, sp, #148	; 0x94
 80034e0:	f00c fe1b 	bl	801011a <atoi>
 80034e4:	7833      	ldrb	r3, [r6, #0]
 80034e6:	4298      	cmp	r0, r3
 80034e8:	d003      	beq.n	80034f2 <UART1_task+0x4fa>
				Slave_ID = atoi(Data.value);
 80034ea:	a825      	add	r0, sp, #148	; 0x94
 80034ec:	f00c fe15 	bl	801011a <atoi>
 80034f0:	7030      	strb	r0, [r6, #0]
			if (strcmp(Data.identifier, "functionNumber") == 0
 80034f2:	495f      	ldr	r1, [pc, #380]	; (8003670 <UART1_task+0x678>)
 80034f4:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80034f8:	f7fc fef2 	bl	80002e0 <strcmp>
 80034fc:	b950      	cbnz	r0, 8003514 <UART1_task+0x51c>
					&& atoi(Data.value) != functionNumber)
 80034fe:	4e5d      	ldr	r6, [pc, #372]	; (8003674 <UART1_task+0x67c>)
 8003500:	a825      	add	r0, sp, #148	; 0x94
 8003502:	f00c fe0a 	bl	801011a <atoi>
 8003506:	7833      	ldrb	r3, [r6, #0]
 8003508:	4298      	cmp	r0, r3
 800350a:	d003      	beq.n	8003514 <UART1_task+0x51c>
				functionNumber = atoi(Data.value);
 800350c:	a825      	add	r0, sp, #148	; 0x94
 800350e:	f00c fe04 	bl	801011a <atoi>
 8003512:	7030      	strb	r0, [r6, #0]
			if (strcmp(Data.identifier, "slaveAddress") == 0
 8003514:	4958      	ldr	r1, [pc, #352]	; (8003678 <UART1_task+0x680>)
 8003516:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 800351a:	f7fc fee1 	bl	80002e0 <strcmp>
 800351e:	b980      	cbnz	r0, 8003542 <UART1_task+0x54a>
					&& atoi(Data.value) != slaveAddress)
 8003520:	4e56      	ldr	r6, [pc, #344]	; (800367c <UART1_task+0x684>)
 8003522:	a825      	add	r0, sp, #148	; 0x94
 8003524:	f00c fdf9 	bl	801011a <atoi>
 8003528:	17c2      	asrs	r2, r0, #31
 800352a:	e9d6 1300 	ldrd	r1, r3, [r6]
 800352e:	429a      	cmp	r2, r3
 8003530:	bf08      	it	eq
 8003532:	4288      	cmpeq	r0, r1
 8003534:	d005      	beq.n	8003542 <UART1_task+0x54a>
				slaveAddress = atoi(Data.value);
 8003536:	a825      	add	r0, sp, #148	; 0x94
 8003538:	f00c fdef 	bl	801011a <atoi>
 800353c:	17c3      	asrs	r3, r0, #31
 800353e:	e9c6 0300 	strd	r0, r3, [r6]
			if (strcmp(Data.identifier, "dataToSend") == 0
 8003542:	494f      	ldr	r1, [pc, #316]	; (8003680 <UART1_task+0x688>)
 8003544:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003548:	f7fc feca 	bl	80002e0 <strcmp>
 800354c:	b9c8      	cbnz	r0, 8003582 <UART1_task+0x58a>
					&& atoi(Data.value) != dataToSend)
 800354e:	a825      	add	r0, sp, #148	; 0x94
 8003550:	f00c fde3 	bl	801011a <atoi>
 8003554:	8823      	ldrh	r3, [r4, #0]
 8003556:	4298      	cmp	r0, r3
 8003558:	d003      	beq.n	8003562 <UART1_task+0x56a>
			{
				dataToSend = atoi(Data.value);
 800355a:	a825      	add	r0, sp, #148	; 0x94
 800355c:	f00c fddd 	bl	801011a <atoi>
 8003560:	8020      	strh	r0, [r4, #0]
				//printf("the data to send : %d\n", dataToSend);
			}

			if (strcmp(Data.identifier, "dataToSend") == 0
 8003562:	4947      	ldr	r1, [pc, #284]	; (8003680 <UART1_task+0x688>)
 8003564:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003568:	f7fc feba 	bl	80002e0 <strcmp>
 800356c:	b948      	cbnz	r0, 8003582 <UART1_task+0x58a>
					&& atoi(Data.value) != dataToSend)
 800356e:	a825      	add	r0, sp, #148	; 0x94
 8003570:	f00c fdd3 	bl	801011a <atoi>
 8003574:	8823      	ldrh	r3, [r4, #0]
 8003576:	4298      	cmp	r0, r3
 8003578:	d003      	beq.n	8003582 <UART1_task+0x58a>
			{
				dataToSend = atoi(Data.value);
 800357a:	a825      	add	r0, sp, #148	; 0x94
 800357c:	f00c fdcd 	bl	801011a <atoi>
 8003580:	8020      	strh	r0, [r4, #0]
				//printf("the data to send : %d\n", dataToSend);
			}
			if (strcmp(Data.identifier, "operationMode") == 0)
 8003582:	4940      	ldr	r1, [pc, #256]	; (8003684 <UART1_task+0x68c>)
 8003584:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003588:	4e3f      	ldr	r6, [pc, #252]	; (8003688 <UART1_task+0x690>)
 800358a:	f7fc fea9 	bl	80002e0 <strcmp>
 800358e:	b918      	cbnz	r0, 8003598 <UART1_task+0x5a0>
			{
				operationMode = atoi(Data.value);
 8003590:	a825      	add	r0, sp, #148	; 0x94
 8003592:	f00c fdc2 	bl	801011a <atoi>
 8003596:	7030      	strb	r0, [r6, #0]

				//printf("the data to send : %d\n", dataToSend);
			}

			if (operationMode == MANUAL_MODE)
 8003598:	7833      	ldrb	r3, [r6, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 80e6 	bne.w	800376c <UART1_task+0x774>
			{
				if (strcmp(Data.identifier, "speedPercentageOfPump1") == 0)
 80035a0:	493a      	ldr	r1, [pc, #232]	; (800368c <UART1_task+0x694>)
 80035a2:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80035a6:	f7fc fe9b 	bl	80002e0 <strcmp>
 80035aa:	b968      	cbnz	r0, 80035c8 <UART1_task+0x5d0>
				{
					manualPumpID = 1;
 80035ac:	4b38      	ldr	r3, [pc, #224]	; (8003690 <UART1_task+0x698>)
 80035ae:	2201      	movs	r2, #1
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 80035b0:	a825      	add	r0, sp, #148	; 0x94
					manualPumpID = 1;
 80035b2:	701a      	strb	r2, [r3, #0]
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 80035b4:	f00c fdb1 	bl	801011a <atoi>
 80035b8:	4b36      	ldr	r3, [pc, #216]	; (8003694 <UART1_task+0x69c>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	4358      	muls	r0, r3
 80035be:	2364      	movs	r3, #100	; 0x64
 80035c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80035c4:	4b34      	ldr	r3, [pc, #208]	; (8003698 <UART1_task+0x6a0>)
 80035c6:	8018      	strh	r0, [r3, #0]

				}
				if (strcmp(Data.identifier, "speedPercentageOfPump2") == 0)
 80035c8:	4934      	ldr	r1, [pc, #208]	; (800369c <UART1_task+0x6a4>)
 80035ca:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80035ce:	f7fc fe87 	bl	80002e0 <strcmp>
 80035d2:	b968      	cbnz	r0, 80035f0 <UART1_task+0x5f8>
				{
					manualPumpID = 2;
 80035d4:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <UART1_task+0x698>)
 80035d6:	2202      	movs	r2, #2
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 80035d8:	a825      	add	r0, sp, #148	; 0x94
					manualPumpID = 2;
 80035da:	701a      	strb	r2, [r3, #0]
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 80035dc:	f00c fd9d 	bl	801011a <atoi>
 80035e0:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <UART1_task+0x69c>)
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	4358      	muls	r0, r3
 80035e6:	2364      	movs	r3, #100	; 0x64
 80035e8:	fb90 f0f3 	sdiv	r0, r0, r3
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <UART1_task+0x6a0>)
 80035ee:	8018      	strh	r0, [r3, #0]
				}
				if (strcmp(Data.identifier, "speedPercentageOfPump3") == 0)
 80035f0:	492b      	ldr	r1, [pc, #172]	; (80036a0 <UART1_task+0x6a8>)
 80035f2:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80035f6:	f7fc fe73 	bl	80002e0 <strcmp>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d152      	bne.n	80036a4 <UART1_task+0x6ac>
				{
					manualPumpID = 3;
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <UART1_task+0x698>)
 8003600:	2203      	movs	r2, #3
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 8003602:	a825      	add	r0, sp, #148	; 0x94
					manualPumpID = 3;
 8003604:	701a      	strb	r2, [r3, #0]
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 8003606:	f00c fd88 	bl	801011a <atoi>
 800360a:	4b22      	ldr	r3, [pc, #136]	; (8003694 <UART1_task+0x69c>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	4358      	muls	r0, r3
 8003610:	2364      	movs	r3, #100	; 0x64
 8003612:	fb90 f0f3 	sdiv	r0, r0, r3
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <UART1_task+0x6a0>)
 8003618:	8018      	strh	r0, [r3, #0]
 800361a:	e043      	b.n	80036a4 <UART1_task+0x6ac>
 800361c:	2400003c 	.word	0x2400003c
 8003620:	2403f157 	.word	0x2403f157
 8003624:	080155b8 	.word	0x080155b8
 8003628:	24000030 	.word	0x24000030
 800362c:	080155be 	.word	0x080155be
 8003630:	24000034 	.word	0x24000034
 8003634:	080155c4 	.word	0x080155c4
 8003638:	2400002e 	.word	0x2400002e
 800363c:	080155d3 	.word	0x080155d3
 8003640:	24000020 	.word	0x24000020
 8003644:	080155d6 	.word	0x080155d6
 8003648:	2400001c 	.word	0x2400001c
 800364c:	2403ef78 	.word	0x2403ef78
 8003650:	080155d9 	.word	0x080155d9
 8003654:	2403ef7c 	.word	0x2403ef7c
 8003658:	080155dc 	.word	0x080155dc
 800365c:	2403f154 	.word	0x2403f154
 8003660:	080155e1 	.word	0x080155e1
 8003664:	2403efe2 	.word	0x2403efe2
 8003668:	08015572 	.word	0x08015572
 800366c:	2403efa5 	.word	0x2403efa5
 8003670:	080155f0 	.word	0x080155f0
 8003674:	2403efe1 	.word	0x2403efe1
 8003678:	080155ff 	.word	0x080155ff
 800367c:	2403f160 	.word	0x2403f160
 8003680:	0801560c 	.word	0x0801560c
 8003684:	08015617 	.word	0x08015617
 8003688:	2403eff4 	.word	0x2403eff4
 800368c:	08015625 	.word	0x08015625
 8003690:	2403efe8 	.word	0x2403efe8
 8003694:	2400001a 	.word	0x2400001a
 8003698:	2403efea 	.word	0x2403efea
 800369c:	0801563c 	.word	0x0801563c
 80036a0:	08015653 	.word	0x08015653
				}
				if (strcmp(Data.identifier, "speedPercentageOfPump4") == 0)
 80036a4:	49a7      	ldr	r1, [pc, #668]	; (8003944 <UART1_task+0x94c>)
 80036a6:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80036aa:	f7fc fe19 	bl	80002e0 <strcmp>
 80036ae:	b968      	cbnz	r0, 80036cc <UART1_task+0x6d4>
				{
					manualPumpID = 4;
 80036b0:	4ba5      	ldr	r3, [pc, #660]	; (8003948 <UART1_task+0x950>)
 80036b2:	2204      	movs	r2, #4
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 80036b4:	a825      	add	r0, sp, #148	; 0x94
					manualPumpID = 4;
 80036b6:	701a      	strb	r2, [r3, #0]
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 80036b8:	f00c fd2f 	bl	801011a <atoi>
 80036bc:	4ba3      	ldr	r3, [pc, #652]	; (800394c <UART1_task+0x954>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	4358      	muls	r0, r3
 80036c2:	2364      	movs	r3, #100	; 0x64
 80036c4:	fb90 f0f3 	sdiv	r0, r0, r3
 80036c8:	4ba1      	ldr	r3, [pc, #644]	; (8003950 <UART1_task+0x958>)
 80036ca:	8018      	strh	r0, [r3, #0]
				}
				if (strcmp(Data.identifier, "speedPercentageOfPump5") == 0)
 80036cc:	49a1      	ldr	r1, [pc, #644]	; (8003954 <UART1_task+0x95c>)
 80036ce:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80036d2:	f7fc fe05 	bl	80002e0 <strcmp>
 80036d6:	b968      	cbnz	r0, 80036f4 <UART1_task+0x6fc>
				{
					manualPumpID = 5;
 80036d8:	4b9b      	ldr	r3, [pc, #620]	; (8003948 <UART1_task+0x950>)
 80036da:	2205      	movs	r2, #5
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 80036dc:	a825      	add	r0, sp, #148	; 0x94
					manualPumpID = 5;
 80036de:	701a      	strb	r2, [r3, #0]
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 80036e0:	f00c fd1b 	bl	801011a <atoi>
 80036e4:	4b99      	ldr	r3, [pc, #612]	; (800394c <UART1_task+0x954>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	4358      	muls	r0, r3
 80036ea:	2364      	movs	r3, #100	; 0x64
 80036ec:	fb90 f0f3 	sdiv	r0, r0, r3
 80036f0:	4b97      	ldr	r3, [pc, #604]	; (8003950 <UART1_task+0x958>)
 80036f2:	8018      	strh	r0, [r3, #0]
				}
				if (strcmp(Data.identifier, "speedPercentageOfPump6") == 0)
 80036f4:	4998      	ldr	r1, [pc, #608]	; (8003958 <UART1_task+0x960>)
 80036f6:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80036fa:	f7fc fdf1 	bl	80002e0 <strcmp>
 80036fe:	b968      	cbnz	r0, 800371c <UART1_task+0x724>
				{
					manualPumpID = 6;
 8003700:	4b91      	ldr	r3, [pc, #580]	; (8003948 <UART1_task+0x950>)
 8003702:	2206      	movs	r2, #6
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 8003704:	a825      	add	r0, sp, #148	; 0x94
					manualPumpID = 6;
 8003706:	701a      	strb	r2, [r3, #0]
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 8003708:	f00c fd07 	bl	801011a <atoi>
 800370c:	4b8f      	ldr	r3, [pc, #572]	; (800394c <UART1_task+0x954>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	4358      	muls	r0, r3
 8003712:	2364      	movs	r3, #100	; 0x64
 8003714:	fb90 f0f3 	sdiv	r0, r0, r3
 8003718:	4b8d      	ldr	r3, [pc, #564]	; (8003950 <UART1_task+0x958>)
 800371a:	8018      	strh	r0, [r3, #0]
				}
				if (strcmp(Data.identifier, "speedPercentageOfPump7") == 0)
 800371c:	498f      	ldr	r1, [pc, #572]	; (800395c <UART1_task+0x964>)
 800371e:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003722:	f7fc fddd 	bl	80002e0 <strcmp>
 8003726:	b968      	cbnz	r0, 8003744 <UART1_task+0x74c>
				{
					manualPumpID = 7;
 8003728:	4b87      	ldr	r3, [pc, #540]	; (8003948 <UART1_task+0x950>)
 800372a:	2207      	movs	r2, #7
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 800372c:	a825      	add	r0, sp, #148	; 0x94
					manualPumpID = 7;
 800372e:	701a      	strb	r2, [r3, #0]
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 8003730:	f00c fcf3 	bl	801011a <atoi>
 8003734:	4b85      	ldr	r3, [pc, #532]	; (800394c <UART1_task+0x954>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	4358      	muls	r0, r3
 800373a:	2364      	movs	r3, #100	; 0x64
 800373c:	fb90 f0f3 	sdiv	r0, r0, r3
 8003740:	4b83      	ldr	r3, [pc, #524]	; (8003950 <UART1_task+0x958>)
 8003742:	8018      	strh	r0, [r3, #0]
				}
				if (strcmp(Data.identifier, "speedPercentageOfPump8") == 0)
 8003744:	4986      	ldr	r1, [pc, #536]	; (8003960 <UART1_task+0x968>)
 8003746:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 800374a:	f7fc fdc9 	bl	80002e0 <strcmp>
 800374e:	b968      	cbnz	r0, 800376c <UART1_task+0x774>
				{
					manualPumpID = 8;
 8003750:	4b7d      	ldr	r3, [pc, #500]	; (8003948 <UART1_task+0x950>)
 8003752:	2208      	movs	r2, #8
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 8003754:	a825      	add	r0, sp, #148	; 0x94
					manualPumpID = 8;
 8003756:	701a      	strb	r2, [r3, #0]
					manualPumpSpeed = (atoi(Data.value)*DanfossVfdMaxSpeed)/100;
 8003758:	f00c fcdf 	bl	801011a <atoi>
 800375c:	4b7b      	ldr	r3, [pc, #492]	; (800394c <UART1_task+0x954>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	4358      	muls	r0, r3
 8003762:	2364      	movs	r3, #100	; 0x64
 8003764:	fb90 f0f3 	sdiv	r0, r0, r3
 8003768:	4b79      	ldr	r3, [pc, #484]	; (8003950 <UART1_task+0x958>)
 800376a:	8018      	strh	r0, [r3, #0]
				}
			}

			if (strcmp(Data.identifier, "changeRTC") == 0)
 800376c:	497d      	ldr	r1, [pc, #500]	; (8003964 <UART1_task+0x96c>)
 800376e:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003772:	f7fc fdb5 	bl	80002e0 <strcmp>
 8003776:	4606      	mov	r6, r0
 8003778:	b948      	cbnz	r0, 800378e <UART1_task+0x796>
			{
				// Ensure that Data.value is null-terminated and doesn't overrun RTCString
				strncpy(RTCString, Data.value, sizeof(RTCString) - 1);
 800377a:	4b7b      	ldr	r3, [pc, #492]	; (8003968 <UART1_task+0x970>)
 800377c:	2218      	movs	r2, #24
 800377e:	a925      	add	r1, sp, #148	; 0x94
 8003780:	4618      	mov	r0, r3
 8003782:	f00e fa3d 	bl	8011c00 <strncpy>
//				printf("%s\n",Data.value);

				// Null-terminate RTCString in case Data.value was too long
				RTCString[sizeof(RTCString) - 1] = '\0';
				setRTC = 1;
 8003786:	4b79      	ldr	r3, [pc, #484]	; (800396c <UART1_task+0x974>)
 8003788:	2201      	movs	r2, #1
				RTCString[sizeof(RTCString) - 1] = '\0';
 800378a:	7606      	strb	r6, [r0, #24]
				setRTC = 1;
 800378c:	701a      	strb	r2, [r3, #0]
			}

			if (strcmp(Data.identifier, "sendNow") == 0)
 800378e:	4978      	ldr	r1, [pc, #480]	; (8003970 <UART1_task+0x978>)
 8003790:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003794:	f7fc fda4 	bl	80002e0 <strcmp>
 8003798:	b910      	cbnz	r0, 80037a0 <UART1_task+0x7a8>
			{

				sendNow = 1;
 800379a:	4b76      	ldr	r3, [pc, #472]	; (8003974 <UART1_task+0x97c>)
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
			}

			if (strcmp(Data.identifier, "getSchedularData") == 0)
 80037a0:	4975      	ldr	r1, [pc, #468]	; (8003978 <UART1_task+0x980>)
 80037a2:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80037a6:	f7fc fd9b 	bl	80002e0 <strcmp>
 80037aa:	b938      	cbnz	r0, 80037bc <UART1_task+0x7c4>
			{
				sendRTC = 1;
 80037ac:	2301      	movs	r3, #1
 80037ae:	4a73      	ldr	r2, [pc, #460]	; (800397c <UART1_task+0x984>)
				sendSchedData = 1;
				printf("send rtc\n");
 80037b0:	4873      	ldr	r0, [pc, #460]	; (8003980 <UART1_task+0x988>)
				sendRTC = 1;
 80037b2:	7013      	strb	r3, [r2, #0]
				sendSchedData = 1;
 80037b4:	4a73      	ldr	r2, [pc, #460]	; (8003984 <UART1_task+0x98c>)
 80037b6:	7013      	strb	r3, [r2, #0]
				printf("send rtc\n");
 80037b8:	f00e f884 	bl	80118c4 <puts>
			}
			if (strcmp(Data.identifier, "getAlarmsdss") == 0)
 80037bc:	4972      	ldr	r1, [pc, #456]	; (8003988 <UART1_task+0x990>)
 80037be:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80037c2:	f7fc fd8d 	bl	80002e0 <strcmp>
 80037c6:	b948      	cbnz	r0, 80037dc <UART1_task+0x7e4>
			{
				if (Data.value[0] == '1')
 80037c8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80037cc:	2b31      	cmp	r3, #49	; 0x31
 80037ce:	f040 8175 	bne.w	8003abc <UART1_task+0xac4>
				{
					sendAlarms = 1;
 80037d2:	2301      	movs	r3, #1
 80037d4:	4a6d      	ldr	r2, [pc, #436]	; (800398c <UART1_task+0x994>)
 80037d6:	7013      	strb	r3, [r2, #0]
					sendAlarmRecords = 1;
 80037d8:	4a6d      	ldr	r2, [pc, #436]	; (8003990 <UART1_task+0x998>)
 80037da:	7013      	strb	r3, [r2, #0]
					sendAlarmRecords = 0;
				}

			}

			if (strcmp(Data.identifier, "DryRunActive") == 0)
 80037dc:	496d      	ldr	r1, [pc, #436]	; (8003994 <UART1_task+0x99c>)
 80037de:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80037e2:	f7fc fd7d 	bl	80002e0 <strcmp>
 80037e6:	b920      	cbnz	r0, 80037f2 <UART1_task+0x7fa>
			{
				enableDryRun = atoi(Data.value);
 80037e8:	a825      	add	r0, sp, #148	; 0x94
 80037ea:	f00c fc96 	bl	801011a <atoi>
 80037ee:	4b6a      	ldr	r3, [pc, #424]	; (8003998 <UART1_task+0x9a0>)
 80037f0:	7018      	strb	r0, [r3, #0]

			}
			if (strcmp(Data.identifier, "DryRunSysStop") == 0)
 80037f2:	496a      	ldr	r1, [pc, #424]	; (800399c <UART1_task+0x9a4>)
 80037f4:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80037f8:	f7fc fd72 	bl	80002e0 <strcmp>
 80037fc:	b920      	cbnz	r0, 8003808 <UART1_task+0x810>
			{

				dryRunSysStop = atoi(Data.value);
 80037fe:	a825      	add	r0, sp, #148	; 0x94
 8003800:	f00c fc8b 	bl	801011a <atoi>
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <UART1_task+0x9a8>)
 8003806:	7018      	strb	r0, [r3, #0]

			}
			if (strcmp(Data.identifier, "pressureActive") == 0)
 8003808:	4966      	ldr	r1, [pc, #408]	; (80039a4 <UART1_task+0x9ac>)
 800380a:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 800380e:	f7fc fd67 	bl	80002e0 <strcmp>
 8003812:	b920      	cbnz	r0, 800381e <UART1_task+0x826>
			{
				pressureAlarmEnable = atoi(Data.value);
 8003814:	a825      	add	r0, sp, #148	; 0x94
 8003816:	f00c fc80 	bl	801011a <atoi>
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <UART1_task+0x9b0>)
 800381c:	7018      	strb	r0, [r3, #0]
			}
			if (strcmp(Data.identifier, "pressureSysStop") == 0)
 800381e:	4963      	ldr	r1, [pc, #396]	; (80039ac <UART1_task+0x9b4>)
 8003820:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003824:	f7fc fd5c 	bl	80002e0 <strcmp>
 8003828:	b930      	cbnz	r0, 8003838 <UART1_task+0x840>
			{
				pressureSysStop = atoi(Data.value);
 800382a:	a825      	add	r0, sp, #148	; 0x94
 800382c:	f00c fc75 	bl	801011a <atoi>
 8003830:	4b5f      	ldr	r3, [pc, #380]	; (80039b0 <UART1_task+0x9b8>)
 8003832:	7018      	strb	r0, [r3, #0]
				store_alarm_data(); //put this on the last alarm to save the values sended from the app
 8003834:	f7fe fd16 	bl	8002264 <store_alarm_data>
			}

			if (strcmp(Data.identifier, "startTime") == 0)
 8003838:	495e      	ldr	r1, [pc, #376]	; (80039b4 <UART1_task+0x9bc>)
 800383a:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 800383e:	f7fc fd4f 	bl	80002e0 <strcmp>
 8003842:	b940      	cbnz	r0, 8003856 <UART1_task+0x85e>
			{

				strncpy(startTime, Data.value, sizeof(startTime) - 1);
 8003844:	a925      	add	r1, sp, #148	; 0x94
 8003846:	221d      	movs	r2, #29
 8003848:	485b      	ldr	r0, [pc, #364]	; (80039b8 <UART1_task+0x9c0>)
 800384a:	f00e f9d9 	bl	8011c00 <strncpy>
				printf("starttime %s\n", startTime);
 800384e:	495a      	ldr	r1, [pc, #360]	; (80039b8 <UART1_task+0x9c0>)
 8003850:	485a      	ldr	r0, [pc, #360]	; (80039bc <UART1_task+0x9c4>)
 8003852:	f00d ffc9 	bl	80117e8 <iprintf>

			}

			if (strcmp(Data.identifier, "weeklyRecord") == 0)
 8003856:	495a      	ldr	r1, [pc, #360]	; (80039c0 <UART1_task+0x9c8>)
 8003858:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 800385c:	f7fc fd40 	bl	80002e0 <strcmp>
 8003860:	b958      	cbnz	r0, 800387a <UART1_task+0x882>
			{

				strncpy(weeklyRecord, Data.value, sizeof(weeklyRecord) - 1);
 8003862:	221d      	movs	r2, #29
 8003864:	a925      	add	r1, sp, #148	; 0x94
 8003866:	4857      	ldr	r0, [pc, #348]	; (80039c4 <UART1_task+0x9cc>)
 8003868:	f00e f9ca 	bl	8011c00 <strncpy>
				printf("weeklyRecord %s\n", weeklyRecord);
 800386c:	4955      	ldr	r1, [pc, #340]	; (80039c4 <UART1_task+0x9cc>)
 800386e:	4856      	ldr	r0, [pc, #344]	; (80039c8 <UART1_task+0x9d0>)
 8003870:	f00d ffba 	bl	80117e8 <iprintf>
				weeklyRecordFlag = 1;
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <UART1_task+0x9d4>)
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]

			}
			if (strcmp(Data.identifier, "stopTime") == 0)
 800387a:	4955      	ldr	r1, [pc, #340]	; (80039d0 <UART1_task+0x9d8>)
 800387c:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003880:	f7fc fd2e 	bl	80002e0 <strcmp>
 8003884:	4606      	mov	r6, r0
 8003886:	bb48      	cbnz	r0, 80038dc <UART1_task+0x8e4>
			{
				strncpy(stopTime, Data.value, strlen(Data.value));
 8003888:	a825      	add	r0, sp, #148	; 0x94
 800388a:	f7fc fd89 	bl	80003a0 <strlen>
 800388e:	a925      	add	r1, sp, #148	; 0x94
 8003890:	4602      	mov	r2, r0
 8003892:	4850      	ldr	r0, [pc, #320]	; (80039d4 <UART1_task+0x9dc>)
 8003894:	f00e f9b4 	bl	8011c00 <strncpy>

				// Clear fullDatedSchedRecord
				memset(fullDatedSchedRecord, 0, sizeof(fullDatedSchedRecord));
 8003898:	2230      	movs	r2, #48	; 0x30
 800389a:	4631      	mov	r1, r6
 800389c:	484e      	ldr	r0, [pc, #312]	; (80039d8 <UART1_task+0x9e0>)
 800389e:	f00e f973 	bl	8011b88 <memset>

				// Copy startTime into fullDatedSchedRecord
				strncpy(fullDatedSchedRecord, startTime, strlen(startTime));
 80038a2:	4845      	ldr	r0, [pc, #276]	; (80039b8 <UART1_task+0x9c0>)
 80038a4:	f7fc fd7c 	bl	80003a0 <strlen>
 80038a8:	4943      	ldr	r1, [pc, #268]	; (80039b8 <UART1_task+0x9c0>)
 80038aa:	4602      	mov	r2, r0
 80038ac:	484a      	ldr	r0, [pc, #296]	; (80039d8 <UART1_task+0x9e0>)
 80038ae:	f00e f9a7 	bl	8011c00 <strncpy>
				// Concatenate a comma into fullDatedSchedRecord
				strncat(fullDatedSchedRecord, ",", 1);
 80038b2:	494a      	ldr	r1, [pc, #296]	; (80039dc <UART1_task+0x9e4>)
 80038b4:	4848      	ldr	r0, [pc, #288]	; (80039d8 <UART1_task+0x9e0>)
 80038b6:	f00e f96f 	bl	8011b98 <strcat>
				// Concatenate stopTime into fullDatedSchedRecord
				strncat(fullDatedSchedRecord, stopTime, strlen(stopTime));
 80038ba:	4846      	ldr	r0, [pc, #280]	; (80039d4 <UART1_task+0x9dc>)
 80038bc:	f7fc fd70 	bl	80003a0 <strlen>
 80038c0:	4944      	ldr	r1, [pc, #272]	; (80039d4 <UART1_task+0x9dc>)
 80038c2:	4602      	mov	r2, r0
 80038c4:	4844      	ldr	r0, [pc, #272]	; (80039d8 <UART1_task+0x9e0>)
 80038c6:	f00e f976 	bl	8011bb6 <strncat>

				// printf("stopTime %s\n", stopTime);
				//   printf("fullDatedSchedRecord %s\n", fullDatedSchedRecord);
				check_specific_record(numberOfSchedulerRecords, startTime,
 80038ca:	4b45      	ldr	r3, [pc, #276]	; (80039e0 <UART1_task+0x9e8>)
 80038cc:	4a41      	ldr	r2, [pc, #260]	; (80039d4 <UART1_task+0x9dc>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	4939      	ldr	r1, [pc, #228]	; (80039b8 <UART1_task+0x9c0>)
 80038d2:	f7fe ff61 	bl	8002798 <check_specific_record>
						stopTime);

				stopTimeFlag = 1;
 80038d6:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <UART1_task+0x9ec>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
			}

			if (strcmp(Data.identifier, "removeSchedRecord") == 0)
 80038dc:	4942      	ldr	r1, [pc, #264]	; (80039e8 <UART1_task+0x9f0>)
 80038de:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 80038e2:	f7fc fcfd 	bl	80002e0 <strcmp>
 80038e6:	b958      	cbnz	r0, 8003900 <UART1_task+0x908>
			{

				indexOfRecordToRemove = atoi(Data.value);
 80038e8:	a825      	add	r0, sp, #148	; 0x94
 80038ea:	f00c fc16 	bl	801011a <atoi>
 80038ee:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <UART1_task+0x9f4>)
				printf("sched record to delete with id  %d\n",
 80038f0:	b281      	uxth	r1, r0
				indexOfRecordToRemove = atoi(Data.value);
 80038f2:	8018      	strh	r0, [r3, #0]
				printf("sched record to delete with id  %d\n",
 80038f4:	483e      	ldr	r0, [pc, #248]	; (80039f0 <UART1_task+0x9f8>)
 80038f6:	f00d ff77 	bl	80117e8 <iprintf>
						indexOfRecordToRemove);
				removeRecordFlag = 1;
 80038fa:	4b3e      	ldr	r3, [pc, #248]	; (80039f4 <UART1_task+0x9fc>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]

			}
			if (strcmp(Data.identifier, "removeWeeklySchedRecord") == 0)
 8003900:	493d      	ldr	r1, [pc, #244]	; (80039f8 <UART1_task+0xa00>)
 8003902:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003906:	f7fc fceb 	bl	80002e0 <strcmp>
 800390a:	b958      	cbnz	r0, 8003924 <UART1_task+0x92c>
			{

				indexOfRecordToRemove = atoi(Data.value);
 800390c:	a825      	add	r0, sp, #148	; 0x94
 800390e:	f00c fc04 	bl	801011a <atoi>
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <UART1_task+0x9f4>)
				printf("weekly sched record to delete with id  %d\n",
 8003914:	b281      	uxth	r1, r0
				indexOfRecordToRemove = atoi(Data.value);
 8003916:	8018      	strh	r0, [r3, #0]
				printf("weekly sched record to delete with id  %d\n",
 8003918:	4838      	ldr	r0, [pc, #224]	; (80039fc <UART1_task+0xa04>)
 800391a:	f00d ff65 	bl	80117e8 <iprintf>
						indexOfRecordToRemove);
				removeWeeklyRecordFlag = 1;
 800391e:	4b38      	ldr	r3, [pc, #224]	; (8003a00 <UART1_task+0xa08>)
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]

			}
			if (strcmp(Data.identifier, "inHome") == 0
 8003924:	4937      	ldr	r1, [pc, #220]	; (8003a04 <UART1_task+0xa0c>)
 8003926:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 800392a:	f7fc fcd9 	bl	80002e0 <strcmp>
 800392e:	2800      	cmp	r0, #0
 8003930:	d178      	bne.n	8003a24 <UART1_task+0xa2c>
					&& atoi(Data.value) != inHomePage)
 8003932:	4e35      	ldr	r6, [pc, #212]	; (8003a08 <UART1_task+0xa10>)
 8003934:	a825      	add	r0, sp, #148	; 0x94
 8003936:	f00c fbf0 	bl	801011a <atoi>
 800393a:	7833      	ldrb	r3, [r6, #0]
 800393c:	4298      	cmp	r0, r3
 800393e:	d071      	beq.n	8003a24 <UART1_task+0xa2c>
 8003940:	e064      	b.n	8003a0c <UART1_task+0xa14>
 8003942:	bf00      	nop
 8003944:	0801566a 	.word	0x0801566a
 8003948:	2403efe8 	.word	0x2403efe8
 800394c:	2400001a 	.word	0x2400001a
 8003950:	2403efea 	.word	0x2403efea
 8003954:	08015681 	.word	0x08015681
 8003958:	08015698 	.word	0x08015698
 800395c:	080156af 	.word	0x080156af
 8003960:	080156c6 	.word	0x080156c6
 8003964:	080156dd 	.word	0x080156dd
 8003968:	2403ef8c 	.word	0x2403ef8c
 800396c:	2403f15d 	.word	0x2403f15d
 8003970:	080156e7 	.word	0x080156e7
 8003974:	2403f15a 	.word	0x2403f15a
 8003978:	080156ef 	.word	0x080156ef
 800397c:	24000054 	.word	0x24000054
 8003980:	08015700 	.word	0x08015700
 8003984:	2403f15c 	.word	0x2403f15c
 8003988:	08015709 	.word	0x08015709
 800398c:	2403f159 	.word	0x2403f159
 8003990:	2403f158 	.word	0x2403f158
 8003994:	08015716 	.word	0x08015716
 8003998:	2403efd8 	.word	0x2403efd8
 800399c:	08015723 	.word	0x08015723
 80039a0:	2403efd7 	.word	0x2403efd7
 80039a4:	08015731 	.word	0x08015731
 80039a8:	2403eff5 	.word	0x2403eff5
 80039ac:	08015740 	.word	0x08015740
 80039b0:	2403eff7 	.word	0x2403eff7
 80039b4:	08015750 	.word	0x08015750
 80039b8:	2400264b 	.word	0x2400264b
 80039bc:	0801575a 	.word	0x0801575a
 80039c0:	08015768 	.word	0x08015768
 80039c4:	2403ef54 	.word	0x2403ef54
 80039c8:	08015775 	.word	0x08015775
 80039cc:	2403ef72 	.word	0x2403ef72
 80039d0:	08015786 	.word	0x08015786
 80039d4:	24002669 	.word	0x24002669
 80039d8:	240006d4 	.word	0x240006d4
 80039dc:	08015178 	.word	0x08015178
 80039e0:	24000010 	.word	0x24000010
 80039e4:	24002687 	.word	0x24002687
 80039e8:	0801578f 	.word	0x0801578f
 80039ec:	24000704 	.word	0x24000704
 80039f0:	080157c0 	.word	0x080157c0
 80039f4:	24002648 	.word	0x24002648
 80039f8:	080157a1 	.word	0x080157a1
 80039fc:	080157b9 	.word	0x080157b9
 8003a00:	24002649 	.word	0x24002649
 8003a04:	080157e4 	.word	0x080157e4
 8003a08:	2403efe3 	.word	0x2403efe3
			{
				inHomePage = atoi(Data.value);
 8003a0c:	a825      	add	r0, sp, #148	; 0x94
 8003a0e:	f00c fb84 	bl	801011a <atoi>
 8003a12:	b2c1      	uxtb	r1, r0
				if(inHomePage==1)
				{
					sendOperationMode=1;
				}
				printf("inHome: %d\n", inHomePage);
 8003a14:	4830      	ldr	r0, [pc, #192]	; (8003ad8 <UART1_task+0xae0>)
				if(inHomePage==1)
 8003a16:	2901      	cmp	r1, #1
				inHomePage = atoi(Data.value);
 8003a18:	7031      	strb	r1, [r6, #0]
					sendOperationMode=1;
 8003a1a:	bf04      	itt	eq
 8003a1c:	4b2f      	ldreq	r3, [pc, #188]	; (8003adc <UART1_task+0xae4>)
 8003a1e:	7019      	strbeq	r1, [r3, #0]
				printf("inHome: %d\n", inHomePage);
 8003a20:	f00d fee2 	bl	80117e8 <iprintf>
			}

			if (strcmp(Data.identifier, "removeAllRecords") == 0
 8003a24:	492e      	ldr	r1, [pc, #184]	; (8003ae0 <UART1_task+0xae8>)
 8003a26:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003a2a:	f7fc fc59 	bl	80002e0 <strcmp>
 8003a2e:	b9d8      	cbnz	r0, 8003a68 <UART1_task+0xa70>
					&& atoi(Data.value) == 1)
 8003a30:	a825      	add	r0, sp, #148	; 0x94
 8003a32:	f00c fb72 	bl	801011a <atoi>
 8003a36:	2801      	cmp	r0, #1
 8003a38:	4606      	mov	r6, r0
 8003a3a:	d104      	bne.n	8003a46 <UART1_task+0xa4e>
			{
				printf("erase all alarms\n");
 8003a3c:	4829      	ldr	r0, [pc, #164]	; (8003ae4 <UART1_task+0xaec>)
 8003a3e:	f00d ff41 	bl	80118c4 <puts>
				eraseAlarmsRecordsFlag = 1;
 8003a42:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <UART1_task+0xaf0>)
 8003a44:	701e      	strb	r6, [r3, #0]
			}

			if (strcmp(Data.identifier, "removeAllRecords") == 0
 8003a46:	4926      	ldr	r1, [pc, #152]	; (8003ae0 <UART1_task+0xae8>)
 8003a48:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003a4c:	f7fc fc48 	bl	80002e0 <strcmp>
 8003a50:	b950      	cbnz	r0, 8003a68 <UART1_task+0xa70>
					&& atoi(Data.value) == 1)
 8003a52:	a825      	add	r0, sp, #148	; 0x94
 8003a54:	f00c fb61 	bl	801011a <atoi>
 8003a58:	2801      	cmp	r0, #1
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	d104      	bne.n	8003a68 <UART1_task+0xa70>
			{
				printf("erase all alarms\n");
 8003a5e:	4821      	ldr	r0, [pc, #132]	; (8003ae4 <UART1_task+0xaec>)
 8003a60:	f00d ff30 	bl	80118c4 <puts>
				eraseAlarmsRecordsFlag = 1;
 8003a64:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <UART1_task+0xaf0>)
 8003a66:	701e      	strb	r6, [r3, #0]
			}

			if (strcmp(Data.identifier, "disableTimeController") == 0
 8003a68:	4920      	ldr	r1, [pc, #128]	; (8003aec <UART1_task+0xaf4>)
 8003a6a:	f10d 00da 	add.w	r0, sp, #218	; 0xda
 8003a6e:	f7fc fc37 	bl	80002e0 <strcmp>
 8003a72:	b9f0      	cbnz	r0, 8003ab2 <UART1_task+0xaba>
					&& atoi(Data.value) != date_week_sched_disabled)
 8003a74:	4e1e      	ldr	r6, [pc, #120]	; (8003af0 <UART1_task+0xaf8>)
 8003a76:	a825      	add	r0, sp, #148	; 0x94
 8003a78:	f00c fb4f 	bl	801011a <atoi>
 8003a7c:	7833      	ldrb	r3, [r6, #0]
 8003a7e:	4298      	cmp	r0, r3
 8003a80:	d017      	beq.n	8003ab2 <UART1_task+0xaba>
			{
				date_week_sched_disabled = atoi(Data.value);
 8003a82:	a825      	add	r0, sp, #148	; 0x94
 8003a84:	f00c fb49 	bl	801011a <atoi>
 8003a88:	7030      	strb	r0, [r6, #0]
				printf("date_week_sched_disabled: %d\n",
 8003a8a:	b2c1      	uxtb	r1, r0
 8003a8c:	4819      	ldr	r0, [pc, #100]	; (8003af4 <UART1_task+0xafc>)
 8003a8e:	f00d feab 	bl	80117e8 <iprintf>
						date_week_sched_disabled);

				if (matchedRecordCount == 0 && matchedWeeklyRecordCount == 0
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <UART1_task+0xb00>)
 8003a94:	4a19      	ldr	r2, [pc, #100]	; (8003afc <UART1_task+0xb04>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <UART1_task+0xb08>)
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <UART1_task+0xb0c>)
 8003aa0:	d113      	bne.n	8003aca <UART1_task+0xad2>
						&& date_week_sched_disabled == 0)
 8003aa2:	7831      	ldrb	r1, [r6, #0]
 8003aa4:	b989      	cbnz	r1, 8003aca <UART1_task+0xad2>
				{
					enablePID = 0;
 8003aa6:	7011      	strb	r1, [r2, #0]
					schedDisabledSystem = 1;
 8003aa8:	2201      	movs	r2, #1
					printf("i am if \n");
 8003aaa:	4817      	ldr	r0, [pc, #92]	; (8003b08 <UART1_task+0xb10>)
					schedDisabledSystem = 1;
 8003aac:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					enablePID = 1;
					schedDisabledSystem = 0;
					printf("i am else \n");
 8003aae:	f00d ff09 	bl	80118c4 <puts>
				}

			}

		}
		osDelay(5);
 8003ab2:	2005      	movs	r0, #5
 8003ab4:	f00a fa59 	bl	800df6a <osDelay>
		if (usart1HaveNewData)
 8003ab8:	f7ff baa7 	b.w	800300a <UART1_task+0x12>
				else if (Data.value[0] == '0')
 8003abc:	2b30      	cmp	r3, #48	; 0x30
					sendAlarms = 0;
 8003abe:	bf01      	itttt	eq
 8003ac0:	4b12      	ldreq	r3, [pc, #72]	; (8003b0c <UART1_task+0xb14>)
 8003ac2:	7018      	strbeq	r0, [r3, #0]
					sendAlarmRecords = 0;
 8003ac4:	4b12      	ldreq	r3, [pc, #72]	; (8003b10 <UART1_task+0xb18>)
 8003ac6:	7018      	strbeq	r0, [r3, #0]
 8003ac8:	e688      	b.n	80037dc <UART1_task+0x7e4>
					enablePID = 1;
 8003aca:	2101      	movs	r1, #1
					printf("i am else \n");
 8003acc:	4811      	ldr	r0, [pc, #68]	; (8003b14 <UART1_task+0xb1c>)
					enablePID = 1;
 8003ace:	7011      	strb	r1, [r2, #0]
					schedDisabledSystem = 0;
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
					printf("i am else \n");
 8003ad4:	e7eb      	b.n	8003aae <UART1_task+0xab6>
 8003ad6:	bf00      	nop
 8003ad8:	080157eb 	.word	0x080157eb
 8003adc:	2403f15b 	.word	0x2403f15b
 8003ae0:	080157f7 	.word	0x080157f7
 8003ae4:	08015808 	.word	0x08015808
 8003ae8:	2403efdb 	.word	0x2403efdb
 8003aec:	08015819 	.word	0x08015819
 8003af0:	24000000 	.word	0x24000000
 8003af4:	0801582f 	.word	0x0801582f
 8003af8:	24000004 	.word	0x24000004
 8003afc:	24000008 	.word	0x24000008
 8003b00:	2403efd9 	.word	0x2403efd9
 8003b04:	2400264a 	.word	0x2400264a
 8003b08:	0801584d 	.word	0x0801584d
 8003b0c:	2403f159 	.word	0x2403f159
 8003b10:	2403f158 	.word	0x2403f158
 8003b14:	08015856 	.word	0x08015856

08003b18 <ADC_4_20mApolling>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ADC_4_20mApolling */
void ADC_4_20mApolling(void *argument)
{
 8003b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* USER CODE BEGIN ADC_4_20mApolling */
	uint8_t firstCurrentRecived = 0;
	uint8_t secondCurrentRecived = 0;
 8003b1c:	2500      	movs	r5, #0

	for (;;)
	{
		// Start the ADC conversion process for ADC1. This initiates the ADC to begin converting the analog signal to a digital value.
		HAL_ADC_Start(&hadc1);
 8003b1e:	4f2b      	ldr	r7, [pc, #172]	; (8003bcc <ADC_4_20mApolling+0xb4>)
 8003b20:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003bf0 <ADC_4_20mApolling+0xd8>
	uint8_t firstCurrentRecived = 0;
 8003b24:	462e      	mov	r6, r5
		{
			pressureSensorError = 0;
		}
		//printf("Raw ADC Value = %u\n", adcValue);
		//if the user send the first calibarion reading from the app record it
		if (firstCurrentReadingRecived)
 8003b26:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003bf4 <ADC_4_20mApolling+0xdc>
		HAL_ADC_Start(&hadc1);
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f003 fcea 	bl	8007504 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003b30:	f04f 31ff 	mov.w	r1, #4294967295
 8003b34:	4638      	mov	r0, r7
 8003b36:	f003 f8e9 	bl	8006d0c <HAL_ADC_PollForConversion>
		uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	f003 f974 	bl	8006e28 <HAL_ADC_GetValue>
		if (adcValue < 5000)
 8003b40:	f241 3387 	movw	r3, #4999	; 0x1387
		uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8003b44:	4604      	mov	r4, r0
		if (adcValue < 5000)
 8003b46:	4298      	cmp	r0, r3
 8003b48:	bf8c      	ite	hi
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	2301      	movls	r3, #1
 8003b4e:	f889 3000 	strb.w	r3, [r9]
		if (firstCurrentReadingRecived)
 8003b52:	f898 3000 	ldrb.w	r3, [r8]
 8003b56:	b12b      	cbz	r3, 8003b64 <ADC_4_20mApolling+0x4c>
		{
			firstADCCalibrationReading = adcValue;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <ADC_4_20mApolling+0xb8>)

			firstCurrentRecived = 1;
 8003b5a:	2601      	movs	r6, #1
			firstADCCalibrationReading = adcValue;
 8003b5c:	8018      	strh	r0, [r3, #0]
			firstCurrentReadingRecived = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f888 3000 	strb.w	r3, [r8]
					//firstADCCalibrationReading);
			//printf("Current of the First Reading = %.8f\n",
				//	currentOfTheFirstReading);
		}
//if the user sent the second 4-20mA reading record it
		if (secondCurrentReadingRecived)
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <ADC_4_20mApolling+0xbc>)
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	b342      	cbz	r2, 8003bbc <ADC_4_20mApolling+0xa4>
		{
			secondADCCalibrationReading = adcValue;
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <ADC_4_20mApolling+0xc0>)
 8003b6c:	8014      	strh	r4, [r2, #0]
			secondCurrentRecived = 1;
			//printf("Second ADC Calibration Reading = %u\n",
					//secondADCCalibrationReading);
			//printf("Current of the Second Reading = %.8f\n",
				//	currentOfTheSecondReading);
			secondCurrentReadingRecived = 0;
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
		}
//if both both readings was received start calibartion the coff A and B
		if (firstCurrentRecived && secondCurrentRecived)
 8003b72:	b346      	cbz	r6, 8003bc6 <ADC_4_20mApolling+0xae>
		{
			CalibrateADC();
			firstCurrentRecived = 0;
			secondCurrentRecived = 0;
 8003b74:	2500      	movs	r5, #0
			CalibrateADC();
 8003b76:	f7fe f823 	bl	8001bc0 <CalibrateADC>
			firstCurrentRecived = 0;
 8003b7a:	462e      	mov	r6, r5

		//	printf("Calibration done.\n");
		}

//get the calibrated current
		float calibratedCurrent = coffA * adcValue + coffB;
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <ADC_4_20mApolling+0xc4>)
 8003b7e:	ee07 4a90 	vmov	s15, r4
		currentPressure = (calibratedCurrent - 4) * (MaximumPressure / 16);
		//printf("Current Pressure = %.8f\n", currentPressure);

		//printf("\n");

		osDelay(50);
 8003b82:	2032      	movs	r0, #50	; 0x32
		float calibratedCurrent = coffA * adcValue + coffB;
 8003b84:	edd3 6a00 	vldr	s13, [r3]
 8003b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <ADC_4_20mApolling+0xc8>)
 8003b8e:	ed93 7a00 	vldr	s14, [r3]
		currentPressure = (calibratedCurrent - 4) * (MaximumPressure / 16);
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <ADC_4_20mApolling+0xcc>)
		float calibratedCurrent = coffA * adcValue + coffB;
 8003b94:	eea7 7aa6 	vfma.f32	s14, s15, s13
		currentPressure = (calibratedCurrent - 4) * (MaximumPressure / 16);
 8003b98:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003be8 <ADC_4_20mApolling+0xd0>
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <ADC_4_20mApolling+0xd4>)
 8003ba2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ba6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003baa:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bb2:	edc3 7a00 	vstr	s15, [r3]
		osDelay(50);
 8003bb6:	f00a f9d8 	bl	800df6a <osDelay>
	{
 8003bba:	e7b6      	b.n	8003b2a <ADC_4_20mApolling+0x12>
		if (firstCurrentRecived && secondCurrentRecived)
 8003bbc:	2e00      	cmp	r6, #0
 8003bbe:	d0dd      	beq.n	8003b7c <ADC_4_20mApolling+0x64>
 8003bc0:	2d00      	cmp	r5, #0
 8003bc2:	d0db      	beq.n	8003b7c <ADC_4_20mApolling+0x64>
 8003bc4:	e7d6      	b.n	8003b74 <ADC_4_20mApolling+0x5c>
			secondCurrentRecived = 1;
 8003bc6:	2501      	movs	r5, #1
 8003bc8:	e7d8      	b.n	8003b7c <ADC_4_20mApolling+0x64>
 8003bca:	bf00      	nop
 8003bcc:	24000514 	.word	0x24000514
 8003bd0:	24000048 	.word	0x24000048
 8003bd4:	2403f157 	.word	0x2403f157
 8003bd8:	24000052 	.word	0x24000052
 8003bdc:	24000030 	.word	0x24000030
 8003be0:	24000034 	.word	0x24000034
 8003be4:	24000024 	.word	0x24000024
 8003be8:	3d800000 	.word	0x3d800000
 8003bec:	2403efc8 	.word	0x2403efc8
 8003bf0:	2403eff6 	.word	0x2403eff6
 8003bf4:	2403efdf 	.word	0x2403efdf

08003bf8 <StartTaskMaster>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskMaster */
void StartTaskMaster(void *argument)
{
 8003bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* USER CODE BEGIN StartTaskMaster */
	telegram[0].u16CoilsNo = 1; // number of elements (coils or registers) to read
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4c3b      	ldr	r4, [pc, #236]	; (8003cec <StartTaskMaster+0xf4>)
{
 8003c00:	b086      	sub	sp, #24

	/* Infinite loop */
	for (;;)
	{

				if (sendNow == 1)
 8003c02:	4f3b      	ldr	r7, [pc, #236]	; (8003cf0 <StartTaskMaster+0xf8>)
				}


				else if (enablePID == 1)
		{
			if (testIFNoVfdResponse)
 8003c04:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8003d24 <StartTaskMaster+0x12c>
	telegram[0].u16CoilsNo = 1; // number of elements (coils or registers) to read
 8003c08:	80a3      	strh	r3, [r4, #4]
	telegram[0].u8id = 1;
 8003c0a:	7023      	strb	r3, [r4, #0]
				if (sendNow == 1)
 8003c0c:	783e      	ldrb	r6, [r7, #0]
 8003c0e:	2e01      	cmp	r6, #1
 8003c10:	d139      	bne.n	8003c86 <StartTaskMaster+0x8e>
					if (functionNumber > 0 && functionNumber < 5)
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <StartTaskMaster+0xfc>)
 8003c14:	781d      	ldrb	r5, [r3, #0]
 8003c16:	1e6b      	subs	r3, r5, #1
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d819      	bhi.n	8003c50 <StartTaskMaster+0x58>
						ModbusRequest(&responseData, Slave_ID, functionNumber,
 8003c1c:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <StartTaskMaster+0x100>)
						telegram[1].u16CoilsNo = 1; // number of elements (coils or registers) to read
 8003c1e:	82a6      	strh	r6, [r4, #20]
						ModbusRequest(&responseData, Slave_ID, functionNumber,
 8003c20:	7819      	ldrb	r1, [r3, #0]
 8003c22:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <StartTaskMaster+0x104>)
 8003c24:	9105      	str	r1, [sp, #20]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	f00a f99c 	bl	800df66 <osThreadGetId>
 8003c2e:	4a34      	ldr	r2, [pc, #208]	; (8003d00 <StartTaskMaster+0x108>)
 8003c30:	9b04      	ldr	r3, [sp, #16]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	9905      	ldr	r1, [sp, #20]
 8003c36:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8003c3a:	4a32      	ldr	r2, [pc, #200]	; (8003d04 <StartTaskMaster+0x10c>)
 8003c3c:	4832      	ldr	r0, [pc, #200]	; (8003d08 <StartTaskMaster+0x110>)
 8003c3e:	9200      	str	r2, [sp, #0]
 8003c40:	462a      	mov	r2, r5
 8003c42:	f7fd fe45 	bl	80018d0 <ModbusRequest>
						sendNow = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	703b      	strb	r3, [r7, #0]
						thereIsData = 1;
 8003c4a:	4b30      	ldr	r3, [pc, #192]	; (8003d0c <StartTaskMaster+0x114>)
 8003c4c:	701e      	strb	r6, [r3, #0]
 8003c4e:	e7dd      	b.n	8003c0c <StartTaskMaster+0x14>
					else if (functionNumber == 5 || functionNumber == 6)
 8003c50:	1f6b      	subs	r3, r5, #5
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d8da      	bhi.n	8003c0c <StartTaskMaster+0x14>
						ModbusRequest(&dataToSend, Slave_ID, functionNumber,
 8003c56:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <StartTaskMaster+0x100>)
						telegram[1].u16CoilsNo = 1; // number of elements (coils or registers) to read
 8003c58:	82a6      	strh	r6, [r4, #20]
						ModbusRequest(&dataToSend, Slave_ID, functionNumber,
 8003c5a:	7819      	ldrb	r1, [r3, #0]
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <StartTaskMaster+0x104>)
 8003c5e:	9105      	str	r1, [sp, #20]
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	9304      	str	r3, [sp, #16]
 8003c64:	f00a f97f 	bl	800df66 <osThreadGetId>
 8003c68:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <StartTaskMaster+0x108>)
 8003c6a:	9b04      	ldr	r3, [sp, #16]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	9905      	ldr	r1, [sp, #20]
 8003c70:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8003c74:	4a23      	ldr	r2, [pc, #140]	; (8003d04 <StartTaskMaster+0x10c>)
 8003c76:	4826      	ldr	r0, [pc, #152]	; (8003d10 <StartTaskMaster+0x118>)
 8003c78:	9200      	str	r2, [sp, #0]
 8003c7a:	462a      	mov	r2, r5
 8003c7c:	f7fd fe28 	bl	80018d0 <ModbusRequest>
						sendNow = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	703b      	strb	r3, [r7, #0]
 8003c84:	e7c2      	b.n	8003c0c <StartTaskMaster+0x14>
				else if (enablePID == 1)
 8003c86:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <StartTaskMaster+0x11c>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d12b      	bne.n	8003ce6 <StartTaskMaster+0xee>
					testIFNoVfdResponse = 0;

				}
			}

			for (int i = 0; i < systemPumpsNumber; i++)
 8003c8e:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <StartTaskMaster+0x120>)
 8003c90:	7819      	ldrb	r1, [r3, #0]
			if (testIFNoVfdResponse)
 8003c92:	f898 3000 	ldrb.w	r3, [r8]
 8003c96:	b14b      	cbz	r3, 8003cac <StartTaskMaster+0xb4>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4820      	ldr	r0, [pc, #128]	; (8003d1c <StartTaskMaster+0x124>)
					speedPercentageOfPump[i] = 2;
 8003c9c:	2502      	movs	r5, #2
				for (int i = 0; i < systemPumpsNumber; i++)
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	428a      	cmp	r2, r1
 8003ca2:	db13      	blt.n	8003ccc <StartTaskMaster+0xd4>
 8003ca4:	b113      	cbz	r3, 8003cac <StartTaskMaster+0xb4>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f888 3000 	strb.w	r3, [r8]
			for (int i = 0; i < systemPumpsNumber; i++)
 8003cac:	2200      	movs	r2, #0
 8003cae:	481b      	ldr	r0, [pc, #108]	; (8003d1c <StartTaskMaster+0x124>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	428a      	cmp	r2, r1
 8003cb4:	db0f      	blt.n	8003cd6 <StartTaskMaster+0xde>
				if (speedPercentageOfPump[i] == 2)
				{
					totalTripPumps++;
				}
			}
			if (totalTripPumps == systemPumpsNumber)
 8003cb6:	428b      	cmp	r3, r1
			{
				totalTripPumps = 0;
				fullSystemTrip = 0;
			}

			osDelay(50);
 8003cb8:	f04f 0032 	mov.w	r0, #50	; 0x32
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <StartTaskMaster+0x128>)
				fullSystemTrip = 1;
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2201      	moveq	r2, #1
				fullSystemTrip = 0;
 8003cc2:	2200      	movne	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]

		}
		else
		{
			osDelay(500);
 8003cc6:	f00a f950 	bl	800df6a <osDelay>
 8003cca:	e79f      	b.n	8003c0c <StartTaskMaster+0x14>
				for (int i = 0; i < systemPumpsNumber; i++)
 8003ccc:	3201      	adds	r2, #1
 8003cce:	2301      	movs	r3, #1
					speedPercentageOfPump[i] = 2;
 8003cd0:	f820 5b02 	strh.w	r5, [r0], #2
				for (int i = 0; i < systemPumpsNumber; i++)
 8003cd4:	e7e4      	b.n	8003ca0 <StartTaskMaster+0xa8>
				if (speedPercentageOfPump[i] == 2)
 8003cd6:	f830 5b02 	ldrh.w	r5, [r0], #2
			for (int i = 0; i < systemPumpsNumber; i++)
 8003cda:	3201      	adds	r2, #1
				if (speedPercentageOfPump[i] == 2)
 8003cdc:	2d02      	cmp	r5, #2
					totalTripPumps++;
 8003cde:	bf04      	itt	eq
 8003ce0:	3301      	addeq	r3, #1
 8003ce2:	b2db      	uxtbeq	r3, r3
			for (int i = 0; i < systemPumpsNumber; i++)
 8003ce4:	e7e5      	b.n	8003cb2 <StartTaskMaster+0xba>
			osDelay(500);
 8003ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cea:	e7ec      	b.n	8003cc6 <StartTaskMaster+0xce>
 8003cec:	2403f178 	.word	0x2403f178
 8003cf0:	2403f15a 	.word	0x2403f15a
 8003cf4:	2403efe1 	.word	0x2403efe1
 8003cf8:	2403efa5 	.word	0x2403efa5
 8003cfc:	2403f160 	.word	0x2403f160
 8003d00:	24000028 	.word	0x24000028
 8003d04:	2403f188 	.word	0x2403f188
 8003d08:	2403f152 	.word	0x2403f152
 8003d0c:	2403f2d8 	.word	0x2403f2d8
 8003d10:	2403efcc 	.word	0x2403efcc
 8003d14:	2403efd9 	.word	0x2403efd9
 8003d18:	2400005c 	.word	0x2400005c
 8003d1c:	2403f168 	.word	0x2403f168
 8003d20:	2403efe0 	.word	0x2403efe0
 8003d24:	2400005d 	.word	0x2400005d

08003d28 <external_flash>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_external_flash */
void external_flash(void *argument)
{
 8003d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/* USER CODE BEGIN external_flash */

	volatile uint8_t debugging_flag_test_store_alarms = 0;
 8003d2c:	2300      	movs	r3, #0
{
 8003d2e:	b085      	sub	sp, #20
	{

		if (debugging_flag_test_store_alarms == 1)
		{

			HAL_StatusTypeDef statusDryRun = store_alarm(dryRun,
 8003d30:	4ca9      	ldr	r4, [pc, #676]	; (8003fd8 <external_flash+0x2b0>)
				printf("Alarm Record %lu: %s\n", i + 1, alarmsArray[i]);
			}
			debugging_flag_test_store_alarms = 0;
		}

		if (eraseDatedRecordsFlag)
 8003d32:	4daa      	ldr	r5, [pc, #680]	; (8003fdc <external_flash+0x2b4>)
	volatile uint8_t debugging_flag_test_store_alarms = 0;
 8003d34:	f88d 300e 	strb.w	r3, [sp, #14]
		if (debugging_flag_test_store_alarms == 1)
 8003d38:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	b2de      	uxtb	r6, r3
 8003d40:	d129      	bne.n	8003d96 <external_flash+0x6e>
			HAL_StatusTypeDef statusDryRun = store_alarm(dryRun,
 8003d42:	4621      	mov	r1, r4
 8003d44:	2000      	movs	r0, #0
 8003d46:	f7fe ff03 	bl	8002b50 <store_alarm>
 8003d4a:	4601      	mov	r1, r0
			printf("Store alarm (dryRun) status: %d\n", statusDryRun);
 8003d4c:	48a4      	ldr	r0, [pc, #656]	; (8003fe0 <external_flash+0x2b8>)
 8003d4e:	f00d fd4b 	bl	80117e8 <iprintf>
			HAL_StatusTypeDef statusReadAlarms = read_alarm_records(
 8003d52:	4fa4      	ldr	r7, [pc, #656]	; (8003fe4 <external_flash+0x2bc>)
			HAL_StatusTypeDef statusNoPressureSensor = store_alarm(
 8003d54:	4621      	mov	r1, r4
 8003d56:	4630      	mov	r0, r6
 8003d58:	f7fe fefa 	bl	8002b50 <store_alarm>
 8003d5c:	4601      	mov	r1, r0
			printf("Store alarm (noPressureSensor) status: %d\n",
 8003d5e:	48a2      	ldr	r0, [pc, #648]	; (8003fe8 <external_flash+0x2c0>)
			for (uint32_t i = 0; i < storedAlarmsNumber; i++)
 8003d60:	2600      	movs	r6, #0
			printf("Store alarm (noPressureSensor) status: %d\n",
 8003d62:	f00d fd41 	bl	80117e8 <iprintf>
			HAL_StatusTypeDef statusReadAlarms = read_alarm_records(
 8003d66:	463a      	mov	r2, r7
 8003d68:	49a0      	ldr	r1, [pc, #640]	; (8003fec <external_flash+0x2c4>)
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7fe fafa 	bl	8002364 <read_alarm_records>
 8003d70:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8003fec <external_flash+0x2c4>
 8003d74:	4601      	mov	r1, r0
				printf("Alarm Record %lu: %s\n", i + 1, alarmsArray[i]);
 8003d76:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 800406c <external_flash+0x344>
			printf("Read alarm records status: %d\n", statusReadAlarms);
 8003d7a:	489d      	ldr	r0, [pc, #628]	; (8003ff0 <external_flash+0x2c8>)
 8003d7c:	f00d fd34 	bl	80117e8 <iprintf>
			printf("Number of alarm records read: %lu\n", storedAlarmsNumber);
 8003d80:	6839      	ldr	r1, [r7, #0]
 8003d82:	489c      	ldr	r0, [pc, #624]	; (8003ff4 <external_flash+0x2cc>)
 8003d84:	f00d fd30 	bl	80117e8 <iprintf>
			for (uint32_t i = 0; i < storedAlarmsNumber; i++)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	42b3      	cmp	r3, r6
 8003d8c:	f200 81a0 	bhi.w	80040d0 <external_flash+0x3a8>
			debugging_flag_test_store_alarms = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f88d 300e 	strb.w	r3, [sp, #14]
		if (eraseDatedRecordsFlag)
 8003d96:	782b      	ldrb	r3, [r5, #0]
 8003d98:	b1db      	cbz	r3, 8003dd2 <external_flash+0xaa>
		{
			S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8003d9a:	2100      	movs	r1, #0
			flStatus = S25FL256S_BlockErase(&hqspi, S25FL256S_SPI_MODE,
 8003d9c:	4e96      	ldr	r6, [pc, #600]	; (8003ff8 <external_flash+0x2d0>)
			S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8003d9e:	4897      	ldr	r0, [pc, #604]	; (8003ffc <external_flash+0x2d4>)
 8003da0:	f001 fe64 	bl	8005a6c <S25FL256S_WriteEnable>
			flStatus = S25FL256S_BlockErase(&hqspi, S25FL256S_SPI_MODE,
 8003da4:	2301      	movs	r3, #1
 8003da6:	4a96      	ldr	r2, [pc, #600]	; (8004000 <external_flash+0x2d8>)
 8003da8:	2100      	movs	r1, #0
 8003daa:	4894      	ldr	r0, [pc, #592]	; (8003ffc <external_flash+0x2d4>)
 8003dac:	f001 ff8d 	bl	8005cca <S25FL256S_BlockErase>
 8003db0:	4601      	mov	r1, r0
 8003db2:	6030      	str	r0, [r6, #0]
			DATED_SCHEDULAR_RECORDS_START_ADDRESS, S25FL256S_ERASE_64K);
			printf(" Erase, status = %ld\r\n", flStatus);
 8003db4:	4893      	ldr	r0, [pc, #588]	; (8004004 <external_flash+0x2dc>)
 8003db6:	f00d fd17 	bl	80117e8 <iprintf>
			if (flStatus == S25FL256S_OK)
 8003dba:	6833      	ldr	r3, [r6, #0]
 8003dbc:	b93b      	cbnz	r3, 8003dce <external_flash+0xa6>
			{
				write_backup_register(datedSchedRegisterNumber, 1);
 8003dbe:	4b92      	ldr	r3, [pc, #584]	; (8004008 <external_flash+0x2e0>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	7818      	ldrb	r0, [r3, #0]
 8003dc4:	f7fe f87e 	bl	8001ec4 <write_backup_register>
				numberOfSchedulerRecords = 1;
 8003dc8:	4b90      	ldr	r3, [pc, #576]	; (800400c <external_flash+0x2e4>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
			}

			eraseDatedRecordsFlag = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	702b      	strb	r3, [r5, #0]
		}

		if (eraseWeeklyRecordsFlag)
 8003dd2:	4e8f      	ldr	r6, [pc, #572]	; (8004010 <external_flash+0x2e8>)
 8003dd4:	7833      	ldrb	r3, [r6, #0]
 8003dd6:	b1db      	cbz	r3, 8003e10 <external_flash+0xe8>
		{
			S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8003dd8:	2100      	movs	r1, #0
			flStatus = S25FL256S_BlockErase(&hqspi, S25FL256S_SPI_MODE,
 8003dda:	4f87      	ldr	r7, [pc, #540]	; (8003ff8 <external_flash+0x2d0>)
			S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8003ddc:	4887      	ldr	r0, [pc, #540]	; (8003ffc <external_flash+0x2d4>)
 8003dde:	f001 fe45 	bl	8005a6c <S25FL256S_WriteEnable>
			flStatus = S25FL256S_BlockErase(&hqspi, S25FL256S_SPI_MODE,
 8003de2:	2301      	movs	r3, #1
 8003de4:	4a8b      	ldr	r2, [pc, #556]	; (8004014 <external_flash+0x2ec>)
 8003de6:	2100      	movs	r1, #0
 8003de8:	4884      	ldr	r0, [pc, #528]	; (8003ffc <external_flash+0x2d4>)
 8003dea:	f001 ff6e 	bl	8005cca <S25FL256S_BlockErase>
 8003dee:	4601      	mov	r1, r0
 8003df0:	6038      	str	r0, [r7, #0]
			WEEKLY_SCHEDULAR_RECORDS_START_ADDRESS, S25FL256S_ERASE_64K);
			printf(" Erase, status = %ld\r\n", flStatus);
 8003df2:	4884      	ldr	r0, [pc, #528]	; (8004004 <external_flash+0x2dc>)
 8003df4:	f00d fcf8 	bl	80117e8 <iprintf>
			if (flStatus == S25FL256S_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b93b      	cbnz	r3, 8003e0c <external_flash+0xe4>
			{

				write_backup_register(numberOfWeeklyRecordsRegNum, 1);
 8003dfc:	4b86      	ldr	r3, [pc, #536]	; (8004018 <external_flash+0x2f0>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	7818      	ldrb	r0, [r3, #0]
 8003e02:	f7fe f85f 	bl	8001ec4 <write_backup_register>
				numberOfWeeklyRecords = 1;
 8003e06:	4b85      	ldr	r3, [pc, #532]	; (800401c <external_flash+0x2f4>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
			}
			eraseWeeklyRecordsFlag = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	7033      	strb	r3, [r6, #0]
		}

		if (eraseAlarmsRecordsFlag)
 8003e10:	4e83      	ldr	r6, [pc, #524]	; (8004020 <external_flash+0x2f8>)
 8003e12:	7833      	ldrb	r3, [r6, #0]
 8003e14:	b1d3      	cbz	r3, 8003e4c <external_flash+0x124>
		{
			S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8003e16:	2100      	movs	r1, #0
			flStatus = S25FL256S_BlockErase(&hqspi, S25FL256S_SPI_MODE,
 8003e18:	4f77      	ldr	r7, [pc, #476]	; (8003ff8 <external_flash+0x2d0>)
			S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8003e1a:	4878      	ldr	r0, [pc, #480]	; (8003ffc <external_flash+0x2d4>)
 8003e1c:	f001 fe26 	bl	8005a6c <S25FL256S_WriteEnable>
			flStatus = S25FL256S_BlockErase(&hqspi, S25FL256S_SPI_MODE,
 8003e20:	2301      	movs	r3, #1
 8003e22:	4622      	mov	r2, r4
 8003e24:	2100      	movs	r1, #0
 8003e26:	4875      	ldr	r0, [pc, #468]	; (8003ffc <external_flash+0x2d4>)
 8003e28:	f001 ff4f 	bl	8005cca <S25FL256S_BlockErase>
 8003e2c:	6038      	str	r0, [r7, #0]
 8003e2e:	4601      	mov	r1, r0
			ALARMS_START_ADDRESS, S25FL256S_ERASE_64K);
			printf(" Erase, status = %ld\r\n", flStatus);
 8003e30:	4874      	ldr	r0, [pc, #464]	; (8004004 <external_flash+0x2dc>)
 8003e32:	f00d fcd9 	bl	80117e8 <iprintf>
			if (flStatus == S25FL256S_OK)
 8003e36:	683f      	ldr	r7, [r7, #0]
 8003e38:	b937      	cbnz	r7, 8003e48 <external_flash+0x120>
			{

				write_backup_register(numberOfAlarmsRegNum, 1);
 8003e3a:	4b7a      	ldr	r3, [pc, #488]	; (8004024 <external_flash+0x2fc>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	7818      	ldrb	r0, [r3, #0]
 8003e40:	f7fe f840 	bl	8001ec4 <write_backup_register>
				storedAlarmsNumber = 0;
 8003e44:	4b67      	ldr	r3, [pc, #412]	; (8003fe4 <external_flash+0x2bc>)
 8003e46:	601f      	str	r7, [r3, #0]
			}
			eraseAlarmsRecordsFlag = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	7033      	strb	r3, [r6, #0]
		}
		if (eraseEntireChipFlag)
 8003e4c:	4f76      	ldr	r7, [pc, #472]	; (8004028 <external_flash+0x300>)
 8003e4e:	783b      	ldrb	r3, [r7, #0]
 8003e50:	b33b      	cbz	r3, 8003ea2 <external_flash+0x17a>
		{

			uint8_t flagStatus = S25FL256S_WriteEnable(&hqspi,
 8003e52:	2100      	movs	r1, #0
 8003e54:	4869      	ldr	r0, [pc, #420]	; (8003ffc <external_flash+0x2d4>)
 8003e56:	f001 fe09 	bl	8005a6c <S25FL256S_WriteEnable>
					S25FL256S_SPI_MODE);
			flStatus = S25FL256S_BlockErase(&hqspi, S25FL256S_SPI_MODE, 0,
 8003e5a:	2200      	movs	r2, #0
			uint8_t flagStatus = S25FL256S_WriteEnable(&hqspi,
 8003e5c:	4606      	mov	r6, r0
			flStatus = S25FL256S_BlockErase(&hqspi, S25FL256S_SPI_MODE, 0,
 8003e5e:	2302      	movs	r3, #2
 8003e60:	4611      	mov	r1, r2
 8003e62:	4866      	ldr	r0, [pc, #408]	; (8003ffc <external_flash+0x2d4>)
 8003e64:	f001 ff31 	bl	8005cca <S25FL256S_BlockErase>
 8003e68:	4b63      	ldr	r3, [pc, #396]	; (8003ff8 <external_flash+0x2d0>)
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	6018      	str	r0, [r3, #0]
					S25FL256S_ERASE_CHIP);
			printf(" Erase, status = %ld\r\n", flStatus);
 8003e6e:	4865      	ldr	r0, [pc, #404]	; (8004004 <external_flash+0x2dc>)
 8003e70:	f00d fcba 	bl	80117e8 <iprintf>
			//wait 130ms for sector erase

			if (flagStatus == S25FL256S_OK)
 8003e74:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8003e78:	d111      	bne.n	8003e9e <external_flash+0x176>
			{
				printf("erased the entire chip successfully\n");
 8003e7a:	486c      	ldr	r0, [pc, #432]	; (800402c <external_flash+0x304>)
 8003e7c:	f00d fd22 	bl	80118c4 <puts>

				write_backup_register(datedSchedRegisterNumber, 1);
 8003e80:	4b61      	ldr	r3, [pc, #388]	; (8004008 <external_flash+0x2e0>)
 8003e82:	2101      	movs	r1, #1
 8003e84:	7818      	ldrb	r0, [r3, #0]
 8003e86:	f7fe f81d 	bl	8001ec4 <write_backup_register>

				write_backup_register(numberOfWeeklyRecordsRegNum, 1);
 8003e8a:	4b63      	ldr	r3, [pc, #396]	; (8004018 <external_flash+0x2f0>)
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	7818      	ldrb	r0, [r3, #0]
 8003e90:	f7fe f818 	bl	8001ec4 <write_backup_register>
				write_backup_register(numberOfAlarmsRegNum, 0);
 8003e94:	4b63      	ldr	r3, [pc, #396]	; (8004024 <external_flash+0x2fc>)
 8003e96:	4631      	mov	r1, r6
 8003e98:	7818      	ldrb	r0, [r3, #0]
 8003e9a:	f7fe f813 	bl	8001ec4 <write_backup_register>
			else if (flagStatus == S25FL256S_ERROR)
			{
				printf("faild to erased the entire chip \n");
			}

			eraseEntireChipFlag = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	703b      	strb	r3, [r7, #0]
		}

		if (eraseExternalFlashFlag == 1)
 8003ea2:	4e63      	ldr	r6, [pc, #396]	; (8004030 <external_flash+0x308>)
 8003ea4:	7837      	ldrb	r7, [r6, #0]
 8003ea6:	2f01      	cmp	r7, #1
 8003ea8:	d111      	bne.n	8003ece <external_flash+0x1a6>
		{

			S25FL256S_WriteEnable(&hqspi, S25FL256S_SPI_MODE);
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4853      	ldr	r0, [pc, #332]	; (8003ffc <external_flash+0x2d4>)
 8003eae:	f001 fddd 	bl	8005a6c <S25FL256S_WriteEnable>
			flStatus = S25FL256S_BlockErase(&hqspi, S25FL256S_SPI_MODE, 0,
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	463b      	mov	r3, r7
 8003eb6:	4851      	ldr	r0, [pc, #324]	; (8003ffc <external_flash+0x2d4>)
 8003eb8:	4611      	mov	r1, r2
 8003eba:	f001 ff06 	bl	8005cca <S25FL256S_BlockErase>
 8003ebe:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <external_flash+0x2d0>)
 8003ec0:	4601      	mov	r1, r0
 8003ec2:	6018      	str	r0, [r3, #0]
					S25FL256S_ERASE_64K);
			printf(" Erase, status = %ld\r\n", flStatus);
 8003ec4:	484f      	ldr	r0, [pc, #316]	; (8004004 <external_flash+0x2dc>)
 8003ec6:	f00d fc8f 	bl	80117e8 <iprintf>
			//wait 130ms for sector erase

			eraseExternalFlashFlag = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	7033      	strb	r3, [r6, #0]
		}

		if (enableMemoryMappedFlag)
 8003ece:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003ed2:	b143      	cbz	r3, 8003ee6 <external_flash+0x1be>
		{
			flStatus = S25FL256S_EnableMemoryMappedModeSTR(&hqspi,
 8003ed4:	2103      	movs	r1, #3
 8003ed6:	4849      	ldr	r0, [pc, #292]	; (8003ffc <external_flash+0x2d4>)
 8003ed8:	f001 ff23 	bl	8005d22 <S25FL256S_EnableMemoryMappedModeSTR>
 8003edc:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <external_flash+0x2d0>)
 8003ede:	6018      	str	r0, [r3, #0]
					S25FL256S_SPI_1I4O_MODE);

			enableMemoryMappedFlag = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f88d 300f 	strb.w	r3, [sp, #15]
		}

		if (removeRecordFlag)
 8003ee6:	4f53      	ldr	r7, [pc, #332]	; (8004034 <external_flash+0x30c>)
 8003ee8:	783b      	ldrb	r3, [r7, #0]
 8003eea:	b333      	cbz	r3, 8003f3a <external_flash+0x212>
		{
			DeleteRecordByIndex(&hqspi, indexOfRecordToRemove,
 8003eec:	4952      	ldr	r1, [pc, #328]	; (8004038 <external_flash+0x310>)
			DATED_SCHEDULAR_RECORDS_START_ADDRESS, DATED_RECORD_SIZE);

			removeRecordFlag = 0;
 8003eee:	2600      	movs	r6, #0
			DeleteRecordByIndex(&hqspi, indexOfRecordToRemove,
 8003ef0:	2330      	movs	r3, #48	; 0x30
 8003ef2:	4a43      	ldr	r2, [pc, #268]	; (8004000 <external_flash+0x2d8>)
 8003ef4:	8809      	ldrh	r1, [r1, #0]
 8003ef6:	4841      	ldr	r0, [pc, #260]	; (8003ffc <external_flash+0x2d4>)
 8003ef8:	f7fe fdaa 	bl	8002a50 <DeleteRecordByIndex>
			removeRecordFlag = 0;
 8003efc:	703e      	strb	r6, [r7, #0]

			ExtractRecords(&hqspi);
			compare_rtc();
			sendMatchedIndices(matchedRecordIndices, &matchedRecordCount,
 8003efe:	4f4f      	ldr	r7, [pc, #316]	; (800403c <external_flash+0x314>)
			ExtractRecords(&hqspi);
 8003f00:	483e      	ldr	r0, [pc, #248]	; (8003ffc <external_flash+0x2d4>)
 8003f02:	f7fe fc85 	bl	8002810 <ExtractRecords>
			compare_rtc();
 8003f06:	f7fe faff 	bl	8002508 <compare_rtc>
			sendMatchedIndices(matchedRecordIndices, &matchedRecordCount,
 8003f0a:	4a4d      	ldr	r2, [pc, #308]	; (8004040 <external_flash+0x318>)
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	484d      	ldr	r0, [pc, #308]	; (8004044 <external_flash+0x31c>)
 8003f10:	f7fe fd74 	bl	80029fc <sendMatchedIndices>
					"matchDatedIndex");

			if (matchedRecordCount == 0 && matchedWeeklyRecordCount == 0
 8003f14:	4a4c      	ldr	r2, [pc, #304]	; (8004048 <external_flash+0x320>)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f040 80e1 	bne.w	80040e2 <external_flash+0x3ba>
					&& date_week_sched_disabled == 0)
 8003f20:	4a4a      	ldr	r2, [pc, #296]	; (800404c <external_flash+0x324>)
 8003f22:	7812      	ldrb	r2, [r2, #0]
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	f040 80df 	bne.w	80040e8 <external_flash+0x3c0>
 8003f2a:	2301      	movs	r3, #1
			{
				enablePID = 0;
 8003f2c:	4948      	ldr	r1, [pc, #288]	; (8004050 <external_flash+0x328>)
			{
				enablePID = 1;
				schedDisabledSystem = 0;
			}

			osDelay(5);
 8003f2e:	2005      	movs	r0, #5
				enablePID = 0;
 8003f30:	700a      	strb	r2, [r1, #0]
				schedDisabledSystem = 1;
 8003f32:	4a48      	ldr	r2, [pc, #288]	; (8004054 <external_flash+0x32c>)
 8003f34:	7013      	strb	r3, [r2, #0]
			osDelay(5);
 8003f36:	f00a f818 	bl	800df6a <osDelay>
		}

		if (removeWeeklyRecordFlag)
 8003f3a:	4e47      	ldr	r6, [pc, #284]	; (8004058 <external_flash+0x330>)
 8003f3c:	7833      	ldrb	r3, [r6, #0]
 8003f3e:	b333      	cbz	r3, 8003f8e <external_flash+0x266>
		{
			DeleteRecordByIndex(&hqspi, indexOfRecordToRemove,
 8003f40:	493d      	ldr	r1, [pc, #244]	; (8004038 <external_flash+0x310>)
 8003f42:	2320      	movs	r3, #32
 8003f44:	4a33      	ldr	r2, [pc, #204]	; (8004014 <external_flash+0x2ec>)
 8003f46:	8809      	ldrh	r1, [r1, #0]
 8003f48:	482c      	ldr	r0, [pc, #176]	; (8003ffc <external_flash+0x2d4>)
			WEEKLY_SCHEDULAR_RECORDS_START_ADDRESS, WEEKLY_RECORD_SIZE);
			ExtractWeeklyRecords(&hqspi);
			compare_weekly_rtc();

			// For sending weekly indices
			sendMatchedIndices(matchedWeeklyRecordIndices,
 8003f4a:	4f3f      	ldr	r7, [pc, #252]	; (8004048 <external_flash+0x320>)
			DeleteRecordByIndex(&hqspi, indexOfRecordToRemove,
 8003f4c:	f7fe fd80 	bl	8002a50 <DeleteRecordByIndex>
			ExtractWeeklyRecords(&hqspi);
 8003f50:	482a      	ldr	r0, [pc, #168]	; (8003ffc <external_flash+0x2d4>)
 8003f52:	f7fe fb51 	bl	80025f8 <ExtractWeeklyRecords>
			compare_weekly_rtc();
 8003f56:	f7fe fa61 	bl	800241c <compare_weekly_rtc>
			sendMatchedIndices(matchedWeeklyRecordIndices,
 8003f5a:	4a40      	ldr	r2, [pc, #256]	; (800405c <external_flash+0x334>)
 8003f5c:	4639      	mov	r1, r7
 8003f5e:	4840      	ldr	r0, [pc, #256]	; (8004060 <external_flash+0x338>)
 8003f60:	f7fe fd4c 	bl	80029fc <sendMatchedIndices>
					&matchedWeeklyRecordCount, "matchedWeeklyIndex");

			if (matchedRecordCount == 0 && matchedWeeklyRecordCount == 0
 8003f64:	4b35      	ldr	r3, [pc, #212]	; (800403c <external_flash+0x314>)
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f040 80be 	bne.w	80040ec <external_flash+0x3c4>
					&& date_week_sched_disabled == 0)
 8003f70:	4a36      	ldr	r2, [pc, #216]	; (800404c <external_flash+0x324>)
 8003f72:	7812      	ldrb	r2, [r2, #0]
 8003f74:	2a00      	cmp	r2, #0
 8003f76:	f040 80bc 	bne.w	80040f2 <external_flash+0x3ca>
 8003f7a:	2301      	movs	r3, #1
			{
				enablePID = 0;
 8003f7c:	4934      	ldr	r1, [pc, #208]	; (8004050 <external_flash+0x328>)
				enablePID = 1;
				schedDisabledSystem = 0;
			}
			removeWeeklyRecordFlag = 0;

			osDelay(5);
 8003f7e:	2005      	movs	r0, #5
				enablePID = 0;
 8003f80:	700a      	strb	r2, [r1, #0]
				schedDisabledSystem = 1;
 8003f82:	4a34      	ldr	r2, [pc, #208]	; (8004054 <external_flash+0x32c>)
 8003f84:	7013      	strb	r3, [r2, #0]
			removeWeeklyRecordFlag = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	7033      	strb	r3, [r6, #0]
			osDelay(5);
 8003f8a:	f009 ffee 	bl	800df6a <osDelay>
		}

		if (stopTimeFlag)
 8003f8e:	4e35      	ldr	r6, [pc, #212]	; (8004064 <external_flash+0x33c>)
 8003f90:	7833      	ldrb	r3, [r6, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d072      	beq.n	800407c <external_flash+0x354>
		{
			externalFlashWrite(DATED_SCHEDULAR_RECORDS_START_ADDRESS,
 8003f96:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <external_flash+0x2e0>)
 8003f98:	4a1c      	ldr	r2, [pc, #112]	; (800400c <external_flash+0x2e4>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4932      	ldr	r1, [pc, #200]	; (8004068 <external_flash+0x340>)
 8003f9e:	4818      	ldr	r0, [pc, #96]	; (8004000 <external_flash+0x2d8>)
					DATED_RECORD_SIZE, datedSchedRegisterNumber);

			ExtractRecords(&hqspi);

			compare_rtc();
			sendMatchedIndices(matchedRecordIndices, &matchedRecordCount,
 8003fa0:	4f26      	ldr	r7, [pc, #152]	; (800403c <external_flash+0x314>)
			externalFlashWrite(DATED_SCHEDULAR_RECORDS_START_ADDRESS,
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2330      	movs	r3, #48	; 0x30
 8003fa6:	f7fe fe99 	bl	8002cdc <externalFlashWrite>
			ExtractRecords(&hqspi);
 8003faa:	4814      	ldr	r0, [pc, #80]	; (8003ffc <external_flash+0x2d4>)
 8003fac:	f7fe fc30 	bl	8002810 <ExtractRecords>
			compare_rtc();
 8003fb0:	f7fe faaa 	bl	8002508 <compare_rtc>
			sendMatchedIndices(matchedRecordIndices, &matchedRecordCount,
 8003fb4:	4a22      	ldr	r2, [pc, #136]	; (8004040 <external_flash+0x318>)
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	4822      	ldr	r0, [pc, #136]	; (8004044 <external_flash+0x31c>)
 8003fba:	f7fe fd1f 	bl	80029fc <sendMatchedIndices>
					"matchDatedIndex");

			if (matchedRecordCount == 0 && matchedWeeklyRecordCount == 0
 8003fbe:	4a22      	ldr	r2, [pc, #136]	; (8004048 <external_flash+0x320>)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f040 8096 	bne.w	80040f6 <external_flash+0x3ce>
					&& date_week_sched_disabled == 0)
 8003fca:	4a20      	ldr	r2, [pc, #128]	; (800404c <external_flash+0x324>)
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	2a00      	cmp	r2, #0
 8003fd0:	f040 8094 	bne.w	80040fc <external_flash+0x3d4>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e04b      	b.n	8004070 <external_flash+0x348>
 8003fd8:	017d7840 	.word	0x017d7840
 8003fdc:	2403efdc 	.word	0x2403efdc
 8003fe0:	08015861 	.word	0x08015861
 8003fe4:	24002688 	.word	0x24002688
 8003fe8:	08015882 	.word	0x08015882
 8003fec:	2403f33e 	.word	0x2403f33e
 8003ff0:	080158ad 	.word	0x080158ad
 8003ff4:	080158cc 	.word	0x080158cc
 8003ff8:	240006d0 	.word	0x240006d0
 8003ffc:	2403ffc0 	.word	0x2403ffc0
 8004000:	00e4e1c0 	.word	0x00e4e1c0
 8004004:	08015905 	.word	0x08015905
 8004008:	24000001 	.word	0x24000001
 800400c:	24000010 	.word	0x24000010
 8004010:	2403efde 	.word	0x2403efde
 8004014:	01312d00 	.word	0x01312d00
 8004018:	24000018 	.word	0x24000018
 800401c:	24000014 	.word	0x24000014
 8004020:	2403efdb 	.word	0x2403efdb
 8004024:	2400000c 	.word	0x2400000c
 8004028:	2403efdd 	.word	0x2403efdd
 800402c:	0801591c 	.word	0x0801591c
 8004030:	240006cc 	.word	0x240006cc
 8004034:	24002648 	.word	0x24002648
 8004038:	24000704 	.word	0x24000704
 800403c:	24000004 	.word	0x24000004
 8004040:	08015940 	.word	0x08015940
 8004044:	24000708 	.word	0x24000708
 8004048:	24000008 	.word	0x24000008
 800404c:	24000000 	.word	0x24000000
 8004050:	2403efd9 	.word	0x2403efd9
 8004054:	2400264a 	.word	0x2400264a
 8004058:	24002649 	.word	0x24002649
 800405c:	08015950 	.word	0x08015950
 8004060:	240016a8 	.word	0x240016a8
 8004064:	24002687 	.word	0x24002687
 8004068:	240006d4 	.word	0x240006d4
 800406c:	080158ef 	.word	0x080158ef
			{
				enablePID = 0;
 8004070:	4926      	ldr	r1, [pc, #152]	; (800410c <external_flash+0x3e4>)
 8004072:	700a      	strb	r2, [r1, #0]
				schedDisabledSystem = 1;
 8004074:	4a26      	ldr	r2, [pc, #152]	; (8004110 <external_flash+0x3e8>)
 8004076:	7013      	strb	r3, [r2, #0]
			else
			{
				enablePID = 1;
				schedDisabledSystem = 0;
			}
			stopTimeFlag = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	7033      	strb	r3, [r6, #0]

		}

		if (weeklyRecordFlag)
 800407c:	4e25      	ldr	r6, [pc, #148]	; (8004114 <external_flash+0x3ec>)
 800407e:	7833      	ldrb	r3, [r6, #0]
 8004080:	b313      	cbz	r3, 80040c8 <external_flash+0x3a0>
		{

			externalFlashWrite(WEEKLY_SCHEDULAR_RECORDS_START_ADDRESS,
 8004082:	4b25      	ldr	r3, [pc, #148]	; (8004118 <external_flash+0x3f0>)
 8004084:	4a25      	ldr	r2, [pc, #148]	; (800411c <external_flash+0x3f4>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4925      	ldr	r1, [pc, #148]	; (8004120 <external_flash+0x3f8>)
 800408a:	4826      	ldr	r0, [pc, #152]	; (8004124 <external_flash+0x3fc>)
			ExtractWeeklyRecords(&hqspi);

			// For sending weekly indices

			compare_weekly_rtc();
			sendMatchedIndices(matchedWeeklyRecordIndices,
 800408c:	4f26      	ldr	r7, [pc, #152]	; (8004128 <external_flash+0x400>)
			externalFlashWrite(WEEKLY_SCHEDULAR_RECORDS_START_ADDRESS,
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2320      	movs	r3, #32
 8004092:	f7fe fe23 	bl	8002cdc <externalFlashWrite>
			ExtractWeeklyRecords(&hqspi);
 8004096:	4825      	ldr	r0, [pc, #148]	; (800412c <external_flash+0x404>)
 8004098:	f7fe faae 	bl	80025f8 <ExtractWeeklyRecords>
			compare_weekly_rtc();
 800409c:	f7fe f9be 	bl	800241c <compare_weekly_rtc>
			sendMatchedIndices(matchedWeeklyRecordIndices,
 80040a0:	4a23      	ldr	r2, [pc, #140]	; (8004130 <external_flash+0x408>)
 80040a2:	4639      	mov	r1, r7
 80040a4:	4823      	ldr	r0, [pc, #140]	; (8004134 <external_flash+0x40c>)
 80040a6:	f7fe fca9 	bl	80029fc <sendMatchedIndices>
					&matchedWeeklyRecordCount, "matchedWeeklyIndex");

			if (matchedRecordCount == 0 && matchedWeeklyRecordCount == 0
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <external_flash+0x410>)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	d125      	bne.n	8004100 <external_flash+0x3d8>
					&& date_week_sched_disabled == 0)
 80040b4:	4a21      	ldr	r2, [pc, #132]	; (800413c <external_flash+0x414>)
 80040b6:	7812      	ldrb	r2, [r2, #0]
 80040b8:	bb2a      	cbnz	r2, 8004106 <external_flash+0x3de>
 80040ba:	2301      	movs	r3, #1
			{
				enablePID = 0;
 80040bc:	4913      	ldr	r1, [pc, #76]	; (800410c <external_flash+0x3e4>)
 80040be:	700a      	strb	r2, [r1, #0]
				schedDisabledSystem = 1;
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <external_flash+0x3e8>)
 80040c2:	7013      	strb	r3, [r2, #0]
			else
			{
				enablePID = 1;
				schedDisabledSystem = 0;
			}
			weeklyRecordFlag = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	7033      	strb	r3, [r6, #0]
		}
		osDelay(10);
 80040c8:	200a      	movs	r0, #10
 80040ca:	f009 ff4e 	bl	800df6a <osDelay>
		if (debugging_flag_test_store_alarms == 1)
 80040ce:	e633      	b.n	8003d38 <external_flash+0x10>
				printf("Alarm Record %lu: %s\n", i + 1, alarmsArray[i]);
 80040d0:	3601      	adds	r6, #1
 80040d2:	4642      	mov	r2, r8
 80040d4:	4648      	mov	r0, r9
 80040d6:	f108 0820 	add.w	r8, r8, #32
 80040da:	4631      	mov	r1, r6
 80040dc:	f00d fb84 	bl	80117e8 <iprintf>
			for (uint32_t i = 0; i < storedAlarmsNumber; i++)
 80040e0:	e652      	b.n	8003d88 <external_flash+0x60>
 80040e2:	2201      	movs	r2, #1
 80040e4:	4633      	mov	r3, r6
 80040e6:	e721      	b.n	8003f2c <external_flash+0x204>
 80040e8:	2201      	movs	r2, #1
 80040ea:	e71f      	b.n	8003f2c <external_flash+0x204>
 80040ec:	2201      	movs	r2, #1
 80040ee:	2300      	movs	r3, #0
 80040f0:	e744      	b.n	8003f7c <external_flash+0x254>
 80040f2:	2201      	movs	r2, #1
 80040f4:	e742      	b.n	8003f7c <external_flash+0x254>
 80040f6:	2201      	movs	r2, #1
 80040f8:	2300      	movs	r3, #0
 80040fa:	e7b9      	b.n	8004070 <external_flash+0x348>
 80040fc:	2201      	movs	r2, #1
 80040fe:	e7b7      	b.n	8004070 <external_flash+0x348>
 8004100:	2201      	movs	r2, #1
 8004102:	2300      	movs	r3, #0
 8004104:	e7da      	b.n	80040bc <external_flash+0x394>
 8004106:	2201      	movs	r2, #1
 8004108:	e7d8      	b.n	80040bc <external_flash+0x394>
 800410a:	bf00      	nop
 800410c:	2403efd9 	.word	0x2403efd9
 8004110:	2400264a 	.word	0x2400264a
 8004114:	2403ef72 	.word	0x2403ef72
 8004118:	24000018 	.word	0x24000018
 800411c:	24000014 	.word	0x24000014
 8004120:	2403ef54 	.word	0x2403ef54
 8004124:	01312d00 	.word	0x01312d00
 8004128:	24000008 	.word	0x24000008
 800412c:	2403ffc0 	.word	0x2403ffc0
 8004130:	08015950 	.word	0x08015950
 8004134:	240016a8 	.word	0x240016a8
 8004138:	24000004 	.word	0x24000004
 800413c:	24000000 	.word	0x24000000

08004140 <UART_Send>:
	char value[15];
	char *DataSend;
	int index = 0;
	uint8_t index1 = 0;

	uint8_t prevPressureSensorError = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	2263      	movs	r2, #99	; 0x63
{
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t index1 = 0;
 8004148:	469b      	mov	fp, r3
{
 800414a:	b0af      	sub	sp, #188	; 0xbc
	int index = 0;
 800414c:	461c      	mov	r4, r3
	uint8_t prevPressureSensorError = 0;
 800414e:	e9cd 2305 	strd	r2, r3, [sp, #20]

	/* Infinite loop */
	for (;;)
	{
//if the user in homepage and pid is enabled start sending the data of this page
		if (enablePID == 1 && inHomePage)
 8004152:	4b5b      	ldr	r3, [pc, #364]	; (80042c0 <UART_Send+0x180>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d14e      	bne.n	80041f8 <UART_Send+0xb8>
 800415a:	4b5a      	ldr	r3, [pc, #360]	; (80042c4 <UART_Send+0x184>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d04a      	beq.n	80041f8 <UART_Send+0xb8>
		{
			switch (index)
 8004162:	2c01      	cmp	r4, #1
 8004164:	d01c      	beq.n	80041a0 <UART_Send+0x60>
 8004166:	2c02      	cmp	r4, #2
 8004168:	d063      	beq.n	8004232 <UART_Send+0xf2>
 800416a:	2c00      	cmp	r4, #0
 800416c:	d133      	bne.n	80041d6 <UART_Send+0x96>
			{
			case 0:
				sprintf(value, "%.2f", currentPressure);
 800416e:	4b56      	ldr	r3, [pc, #344]	; (80042c8 <UART_Send+0x188>)
 8004170:	a808      	add	r0, sp, #32
 8004172:	4956      	ldr	r1, [pc, #344]	; (80042cc <UART_Send+0x18c>)
 8004174:	edd3 7a00 	vldr	s15, [r3]
 8004178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800417c:	ec53 2b17 	vmov	r2, r3, d7
 8004180:	f00d fbdc 	bl	801193c <siprintf>
				DataSend = PrepareData("currentPressure", value);
 8004184:	a908      	add	r1, sp, #32
 8004186:	4852      	ldr	r0, [pc, #328]	; (80042d0 <UART_Send+0x190>)
				break;

			case 2:

				sprintf(value, "%f", setPointRequired);
				DataSend = PrepareData("setPointRequired", value);
 8004188:	f7fc fd2e 	bl	8000be8 <PrepareData>
 800418c:	9007      	str	r0, [sp, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
						strlen(DataSend), 10);
 800418e:	f7fc f907 	bl	80003a0 <strlen>
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 8004192:	230a      	movs	r3, #10
 8004194:	b282      	uxth	r2, r0
 8004196:	9907      	ldr	r1, [sp, #28]
 8004198:	484e      	ldr	r0, [pc, #312]	; (80042d4 <UART_Send+0x194>)
 800419a:	f009 fa4e 	bl	800d63a <HAL_UART_Transmit>

				break;
 800419e:	e01a      	b.n	80041d6 <UART_Send+0x96>
				if (prevPressureSensorError != pressureSensorError
 80041a0:	4d4d      	ldr	r5, [pc, #308]	; (80042d8 <UART_Send+0x198>)
 80041a2:	9b06      	ldr	r3, [sp, #24]
 80041a4:	782a      	ldrb	r2, [r5, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d102      	bne.n	80041b0 <UART_Send+0x70>
						|| sendAlarms)
 80041aa:	4b4c      	ldr	r3, [pc, #304]	; (80042dc <UART_Send+0x19c>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b193      	cbz	r3, 80041d6 <UART_Send+0x96>
					sprintf(value, "%d", pressureSensorError);
 80041b0:	494b      	ldr	r1, [pc, #300]	; (80042e0 <UART_Send+0x1a0>)
 80041b2:	a808      	add	r0, sp, #32
 80041b4:	f00d fbc2 	bl	801193c <siprintf>
					DataSend = PrepareData("pressureError", value);
 80041b8:	a908      	add	r1, sp, #32
 80041ba:	484a      	ldr	r0, [pc, #296]	; (80042e4 <UART_Send+0x1a4>)
 80041bc:	f7fc fd14 	bl	8000be8 <PrepareData>
 80041c0:	9006      	str	r0, [sp, #24]
							strlen(DataSend), 10);
 80041c2:	f7fc f8ed 	bl	80003a0 <strlen>
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 80041c6:	230a      	movs	r3, #10
 80041c8:	b282      	uxth	r2, r0
 80041ca:	9906      	ldr	r1, [sp, #24]
 80041cc:	4841      	ldr	r0, [pc, #260]	; (80042d4 <UART_Send+0x194>)
 80041ce:	f009 fa34 	bl	800d63a <HAL_UART_Transmit>
					prevPressureSensorError = pressureSensorError;
 80041d2:	782b      	ldrb	r3, [r5, #0]
 80041d4:	9306      	str	r3, [sp, #24]
			default:
				break;

			}
			index++;
 80041d6:	3401      	adds	r4, #1
			if (index > 3)
 80041d8:	4f43      	ldr	r7, [pc, #268]	; (80042e8 <UART_Send+0x1a8>)
 80041da:	4e44      	ldr	r6, [pc, #272]	; (80042ec <UART_Send+0x1ac>)
			{
				index = 0; // Reset the index to start from the beginning again
			}

			//send the speed of each pump and the current drawn by each pump.
			for (int i = 0; i < systemPumpsNumber; i++)
 80041dc:	2500      	movs	r5, #0
				index = 0; // Reset the index to start from the beginning again
 80041de:	2c04      	cmp	r4, #4
			for (int i = 0; i < systemPumpsNumber; i++)
 80041e0:	f8df a120 	ldr.w	sl, [pc, #288]	; 8004304 <UART_Send+0x1c4>
			{

				sprintf(value, "%d", speedPercentageOfPump[i]);
 80041e4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80042e0 <UART_Send+0x1a0>
				index = 0; // Reset the index to start from the beginning again
 80041e8:	bfa8      	it	ge
 80041ea:	2400      	movge	r4, #0
				char key[50];
				sprintf(key, "speedPercentageOfPump%d", i + 1);
 80041ec:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8004308 <UART_Send+0x1c8>
			for (int i = 0; i < systemPumpsNumber; i++)
 80041f0:	f89a 3000 	ldrb.w	r3, [sl]
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	dc2a      	bgt.n	800424e <UART_Send+0x10e>
		}


//if the user enterd the factory page data which contain the system setting send the saved data to the app
		//to be shown in the app
		if (getFactoryData == 1)
 80041f8:	4d3d      	ldr	r5, [pc, #244]	; (80042f0 <UART_Send+0x1b0>)
 80041fa:	782b      	ldrb	r3, [r5, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	f040 80a7 	bne.w	8004350 <UART_Send+0x210>
		{

			switch (index1)
 8004202:	f1bb 0f11 	cmp.w	fp, #17
 8004206:	f200 8099 	bhi.w	800433c <UART_Send+0x1fc>
 800420a:	e8df f01b 	tbh	[pc, fp, lsl #1]
 800420e:	007f      	.short	0x007f
 8004210:	02ac029e 	.word	0x02ac029e
 8004214:	02c802ba 	.word	0x02c802ba
 8004218:	02df02d1 	.word	0x02df02d1
 800421c:	02f602ed 	.word	0x02f602ed
 8004220:	030d02ff 	.word	0x030d02ff
 8004224:	0329031b 	.word	0x0329031b
 8004228:	03450337 	.word	0x03450337
 800422c:	035c0353 	.word	0x035c0353
 8004230:	0365      	.short	0x0365
				sprintf(value, "%f", setPointRequired);
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <UART_Send+0x1b4>)
 8004234:	a808      	add	r0, sp, #32
 8004236:	4930      	ldr	r1, [pc, #192]	; (80042f8 <UART_Send+0x1b8>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004240:	ec53 2b17 	vmov	r2, r3, d7
 8004244:	f00d fb7a 	bl	801193c <siprintf>
				DataSend = PrepareData("setPointRequired", value);
 8004248:	a908      	add	r1, sp, #32
 800424a:	482c      	ldr	r0, [pc, #176]	; (80042fc <UART_Send+0x1bc>)
 800424c:	e79c      	b.n	8004188 <UART_Send+0x48>
				sprintf(key, "speedPercentageOfPump%d", i + 1);
 800424e:	3501      	adds	r5, #1
				sprintf(value, "%d", speedPercentageOfPump[i]);
 8004250:	f837 2b02 	ldrh.w	r2, [r7], #2
 8004254:	4641      	mov	r1, r8
 8004256:	a808      	add	r0, sp, #32
 8004258:	f00d fb70 	bl	801193c <siprintf>
				sprintf(key, "speedPercentageOfPump%d", i + 1);
 800425c:	462a      	mov	r2, r5
 800425e:	4649      	mov	r1, r9
 8004260:	a814      	add	r0, sp, #80	; 0x50
 8004262:	f00d fb6b 	bl	801193c <siprintf>
				DataSend = PrepareData(key, value);
 8004266:	a908      	add	r1, sp, #32
 8004268:	a814      	add	r0, sp, #80	; 0x50
 800426a:	f7fc fcbd 	bl	8000be8 <PrepareData>
 800426e:	9007      	str	r0, [sp, #28]
						strlen(DataSend), 20);
 8004270:	f7fc f896 	bl	80003a0 <strlen>
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 8004274:	2314      	movs	r3, #20
 8004276:	b282      	uxth	r2, r0
 8004278:	9907      	ldr	r1, [sp, #28]
 800427a:	4816      	ldr	r0, [pc, #88]	; (80042d4 <UART_Send+0x194>)
 800427c:	f009 f9dd 	bl	800d63a <HAL_UART_Transmit>
				osDelay(20);
 8004280:	2014      	movs	r0, #20
 8004282:	f009 fe72 	bl	800df6a <osDelay>
				sprintf(value, "%d", pumpCurrent[i]);
 8004286:	f836 2b02 	ldrh.w	r2, [r6], #2
 800428a:	4641      	mov	r1, r8
 800428c:	a808      	add	r0, sp, #32
 800428e:	f00d fb55 	bl	801193c <siprintf>
				sprintf(key1, "pump%dCurrent", i + 1);
 8004292:	462a      	mov	r2, r5
 8004294:	491a      	ldr	r1, [pc, #104]	; (8004300 <UART_Send+0x1c0>)
 8004296:	a821      	add	r0, sp, #132	; 0x84
 8004298:	f00d fb50 	bl	801193c <siprintf>
				DataSend = PrepareData(key1, value);
 800429c:	a908      	add	r1, sp, #32
 800429e:	a821      	add	r0, sp, #132	; 0x84
 80042a0:	f7fc fca2 	bl	8000be8 <PrepareData>
 80042a4:	9007      	str	r0, [sp, #28]
						strlen(DataSend), 20);
 80042a6:	f7fc f87b 	bl	80003a0 <strlen>
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 80042aa:	2314      	movs	r3, #20
 80042ac:	b282      	uxth	r2, r0
 80042ae:	9907      	ldr	r1, [sp, #28]
 80042b0:	4808      	ldr	r0, [pc, #32]	; (80042d4 <UART_Send+0x194>)
 80042b2:	f009 f9c2 	bl	800d63a <HAL_UART_Transmit>
				osDelay(20);
 80042b6:	2014      	movs	r0, #20
 80042b8:	f009 fe57 	bl	800df6a <osDelay>
			for (int i = 0; i < systemPumpsNumber; i++)
 80042bc:	e798      	b.n	80041f0 <UART_Send+0xb0>
 80042be:	bf00      	nop
 80042c0:	2403efd9 	.word	0x2403efd9
 80042c4:	2403efe3 	.word	0x2403efe3
 80042c8:	2403efc8 	.word	0x2403efc8
 80042cc:	08015963 	.word	0x08015963
 80042d0:	08015968 	.word	0x08015968
 80042d4:	24040440 	.word	0x24040440
 80042d8:	2403eff6 	.word	0x2403eff6
 80042dc:	2403f159 	.word	0x2403f159
 80042e0:	080159af 	.word	0x080159af
 80042e4:	08015978 	.word	0x08015978
 80042e8:	2403f168 	.word	0x2403f168
 80042ec:	2403f000 	.word	0x2403f000
 80042f0:	2403efe2 	.word	0x2403efe2
 80042f4:	24000058 	.word	0x24000058
 80042f8:	08015986 	.word	0x08015986
 80042fc:	08015989 	.word	0x08015989
 8004300:	080159b2 	.word	0x080159b2
 8004304:	2400005c 	.word	0x2400005c
 8004308:	0801599a 	.word	0x0801599a
			{
			case 0:
				sprintf(value, "%f", setPointRequired);
 800430c:	4bb2      	ldr	r3, [pc, #712]	; (80045d8 <UART_Send+0x498>)
 800430e:	a808      	add	r0, sp, #32
 8004310:	49b2      	ldr	r1, [pc, #712]	; (80045dc <UART_Send+0x49c>)
 8004312:	edd3 7a00 	vldr	s15, [r3]
 8004316:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800431a:	ec53 2b17 	vmov	r2, r3, d7
 800431e:	f00d fb0d 	bl	801193c <siprintf>
				DataSend = PrepareData("setPointOfStm", value);
 8004322:	a908      	add	r1, sp, #32
 8004324:	48ae      	ldr	r0, [pc, #696]	; (80045e0 <UART_Send+0x4a0>)
						strlen(DataSend), 10);
//				printf("15\n");
				break;
			case 17:
				sprintf(value, "%d", enableScheduler);
				DataSend = PrepareData("enableSchedulerOfStm", value);
 8004326:	f7fc fc5f 	bl	8000be8 <PrepareData>
 800432a:	9007      	str	r0, [sp, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
						strlen(DataSend), 10);
 800432c:	f7fc f838 	bl	80003a0 <strlen>
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 8004330:	230a      	movs	r3, #10
 8004332:	b282      	uxth	r2, r0
 8004334:	9907      	ldr	r1, [sp, #28]
 8004336:	48ab      	ldr	r0, [pc, #684]	; (80045e4 <UART_Send+0x4a4>)
 8004338:	f009 f97f 	bl	800d63a <HAL_UART_Transmit>
				break;

			default:
				break;
			}
			index1++;
 800433c:	f10b 0301 	add.w	r3, fp, #1
 8004340:	fa5f fb83 	uxtb.w	fp, r3
			if (index1 > 17)
 8004344:	f1bb 0f11 	cmp.w	fp, #17
			{
				index1 = 0;
				getFactoryData = 0;
 8004348:	bf82      	ittt	hi
 800434a:	2300      	movhi	r3, #0
				index1 = 0;
 800434c:	469b      	movhi	fp, r3
				getFactoryData = 0;
 800434e:	702b      	strbhi	r3, [r5, #0]
			}

		}
		//send the state of dryrun state to the system
		if (enablePID == 1 && inHomePage)
 8004350:	4ba5      	ldr	r3, [pc, #660]	; (80045e8 <UART_Send+0x4a8>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	f040 82ca 	bne.w	80048ee <UART_Send+0x7ae>
 800435a:	4ba4      	ldr	r3, [pc, #656]	; (80045ec <UART_Send+0x4ac>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 82c5 	beq.w	80048ee <UART_Send+0x7ae>
		{
			if (dryRunSendCounter >= 200)
 8004364:	9b05      	ldr	r3, [sp, #20]
 8004366:	2bc7      	cmp	r3, #199	; 0xc7
 8004368:	d91f      	bls.n	80043aa <UART_Send+0x26a>
 800436a:	2502      	movs	r5, #2
			{
				for (uint8_t i = 0; i < 2; i++)
				{
					sprintf(value, "%d", dryRunDetected);
 800436c:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8004654 <UART_Send+0x514>
 8004370:	4f9f      	ldr	r7, [pc, #636]	; (80045f0 <UART_Send+0x4b0>)
					DataSend = PrepareData("dryRunDetected", value);
 8004372:	4ea0      	ldr	r6, [pc, #640]	; (80045f4 <UART_Send+0x4b4>)
					sprintf(value, "%d", dryRunDetected);
 8004374:	f898 2000 	ldrb.w	r2, [r8]
 8004378:	4639      	mov	r1, r7
 800437a:	a808      	add	r0, sp, #32
 800437c:	f00d fade 	bl	801193c <siprintf>
					DataSend = PrepareData("dryRunDetected", value);
 8004380:	a908      	add	r1, sp, #32
 8004382:	4630      	mov	r0, r6
 8004384:	f7fc fc30 	bl	8000be8 <PrepareData>
 8004388:	9005      	str	r0, [sp, #20]
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
							strlen(DataSend), 10);
 800438a:	f7fc f809 	bl	80003a0 <strlen>
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 800438e:	230a      	movs	r3, #10
 8004390:	b282      	uxth	r2, r0
 8004392:	9905      	ldr	r1, [sp, #20]
 8004394:	4893      	ldr	r0, [pc, #588]	; (80045e4 <UART_Send+0x4a4>)
 8004396:	f009 f950 	bl	800d63a <HAL_UART_Transmit>
					osDelay(10);
 800439a:	200a      	movs	r0, #10
 800439c:	f009 fde5 	bl	800df6a <osDelay>
				for (uint8_t i = 0; i < 2; i++)
 80043a0:	2d01      	cmp	r5, #1
 80043a2:	f040 82a2 	bne.w	80048ea <UART_Send+0x7aa>
				}
				dryRunSendCounter = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	9305      	str	r3, [sp, #20]
				dryRunSendCounter = 0;

			}
		}

		dryRunSendCounter++;
 80043aa:	9b05      	ldr	r3, [sp, #20]
// when the user enter the scheduler page on the app send the saved records to the app to display it
		if (sendRTC)
 80043ac:	4f92      	ldr	r7, [pc, #584]	; (80045f8 <UART_Send+0x4b8>)
		dryRunSendCounter++;
 80043ae:	3301      	adds	r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	9305      	str	r3, [sp, #20]
		if (sendRTC)
 80043b4:	783b      	ldrb	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8096 	beq.w	80044e8 <UART_Send+0x3a8>
		{
			Get_RTC_Values();
 80043bc:	f001 fb0c 	bl	80059d8 <Get_RTC_Values>
			char formatted_datetime[20]; // Buffer to hold the formatted date and time string

			sprintf(formatted_datetime, "%02d:%02d %02d/%02d/%04d", sTime.Hours,
					sTime.Minutes, sDate.Date, sDate.Month, 2000 + sDate.Year); // Assuming the year is in the 2000s
 80043c0:	4b8e      	ldr	r3, [pc, #568]	; (80045fc <UART_Send+0x4bc>)
 80043c2:	498f      	ldr	r1, [pc, #572]	; (8004600 <UART_Send+0x4c0>)
			sprintf(formatted_datetime, "%02d:%02d %02d/%02d/%04d", sTime.Hours,
 80043c4:	a821      	add	r0, sp, #132	; 0x84
					sTime.Minutes, sDate.Date, sDate.Month, 2000 + sDate.Year); // Assuming the year is in the 2000s
 80043c6:	78da      	ldrb	r2, [r3, #3]
			DataSend = PrepareData("RTC", formatted_datetime);
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
					10);
			osDelay(10);
			if (sendSchedData)
 80043c8:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 8004674 <UART_Send+0x534>
			sprintf(formatted_datetime, "%02d:%02d %02d/%02d/%04d", sTime.Hours,
 80043cc:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80043d0:	9202      	str	r2, [sp, #8]
 80043d2:	785a      	ldrb	r2, [r3, #1]
 80043d4:	9201      	str	r2, [sp, #4]
 80043d6:	789b      	ldrb	r3, [r3, #2]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	784b      	ldrb	r3, [r1, #1]
 80043dc:	780a      	ldrb	r2, [r1, #0]
 80043de:	4989      	ldr	r1, [pc, #548]	; (8004604 <UART_Send+0x4c4>)
 80043e0:	f00d faac 	bl	801193c <siprintf>
			DataSend = PrepareData("RTC", formatted_datetime);
 80043e4:	a921      	add	r1, sp, #132	; 0x84
 80043e6:	4888      	ldr	r0, [pc, #544]	; (8004608 <UART_Send+0x4c8>)
 80043e8:	f7fc fbfe 	bl	8000be8 <PrepareData>
 80043ec:	9007      	str	r0, [sp, #28]
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 80043ee:	f7fb ffd7 	bl	80003a0 <strlen>
 80043f2:	230a      	movs	r3, #10
 80043f4:	b282      	uxth	r2, r0
 80043f6:	9907      	ldr	r1, [sp, #28]
 80043f8:	487a      	ldr	r0, [pc, #488]	; (80045e4 <UART_Send+0x4a4>)
 80043fa:	f009 f91e 	bl	800d63a <HAL_UART_Transmit>
			osDelay(10);
 80043fe:	200a      	movs	r0, #10
 8004400:	f009 fdb3 	bl	800df6a <osDelay>
			if (sendSchedData)
 8004404:	f898 3000 	ldrb.w	r3, [r8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d06b      	beq.n	80044e4 <UART_Send+0x3a4>
			{

				char value3[15];
				sprintf(value3, "%d", !date_week_sched_disabled);
 800440c:	4b7f      	ldr	r3, [pc, #508]	; (800460c <UART_Send+0x4cc>)
 800440e:	a80c      	add	r0, sp, #48	; 0x30
 8004410:	4977      	ldr	r1, [pc, #476]	; (80045f0 <UART_Send+0x4b0>)
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
						strlen(DataSend), 10);
				osDelay(10); // Adding a delay to ensure there's no data overlap

				// Loop to send each original_record from the valid_records array
				for (int i = 0; i < valid_record_count; i++)
 8004412:	2500      	movs	r5, #0
				sprintf(value3, "%d", !date_week_sched_disabled);
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	4e7e      	ldr	r6, [pc, #504]	; (8004610 <UART_Send+0x4d0>)
 8004418:	fab2 f282 	clz	r2, r2
				for (int i = 0; i < valid_record_count; i++)
 800441c:	f8df 9258 	ldr.w	r9, [pc, #600]	; 8004678 <UART_Send+0x538>
				{
					char *currentRecord = valid_records[i].original_record;
					DataSend = PrepareData("schedRecords", currentRecord);
 8004420:	f8df a258 	ldr.w	sl, [pc, #600]	; 800467c <UART_Send+0x53c>
				sprintf(value3, "%d", !date_week_sched_disabled);
 8004424:	0952      	lsrs	r2, r2, #5
 8004426:	f00d fa89 	bl	801193c <siprintf>
				DataSend = PrepareData("TimeController", value3);
 800442a:	a90c      	add	r1, sp, #48	; 0x30
 800442c:	4879      	ldr	r0, [pc, #484]	; (8004614 <UART_Send+0x4d4>)
 800442e:	f7fc fbdb 	bl	8000be8 <PrepareData>
 8004432:	9007      	str	r0, [sp, #28]
						strlen(DataSend), 10);
 8004434:	f7fb ffb4 	bl	80003a0 <strlen>
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 8004438:	230a      	movs	r3, #10
 800443a:	b282      	uxth	r2, r0
 800443c:	9907      	ldr	r1, [sp, #28]
 800443e:	4869      	ldr	r0, [pc, #420]	; (80045e4 <UART_Send+0x4a4>)
 8004440:	f009 f8fb 	bl	800d63a <HAL_UART_Transmit>
				osDelay(10); // Adding a delay to ensure there's no data overlap
 8004444:	200a      	movs	r0, #10
 8004446:	f009 fd90 	bl	800df6a <osDelay>
				for (int i = 0; i < valid_record_count; i++)
 800444a:	f8d9 3000 	ldr.w	r3, [r9]
 800444e:	42ab      	cmp	r3, r5
 8004450:	f300 82ce 	bgt.w	80049f0 <UART_Send+0x8b0>
 8004454:	4e70      	ldr	r6, [pc, #448]	; (8004618 <UART_Send+0x4d8>)
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
							strlen(DataSend), 10);
					osDelay(10); // Adding a delay to ensure there's no data overlap
				}
				// Loop to send each original_record from the valid_records array
				for (int i = 0; i < valid_weekly_record_count; i++)
 8004456:	2500      	movs	r5, #0
 8004458:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8004680 <UART_Send+0x540>
				{
					char *currentRecord =
							valid_weekly_records[i].original_record;
					DataSend = PrepareData("weeklyschedRecords", currentRecord);
 800445c:	f8df a224 	ldr.w	sl, [pc, #548]	; 8004684 <UART_Send+0x544>
				for (int i = 0; i < valid_weekly_record_count; i++)
 8004460:	f8d9 3000 	ldr.w	r3, [r9]
 8004464:	42ab      	cmp	r3, r5
 8004466:	f200 82d6 	bhi.w	8004a16 <UART_Send+0x8d6>
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
							strlen(DataSend), 10);
					osDelay(10); // Adding a delay to ensure there's no data overlap
				}
				char value1[15];
				sprintf(value1, "%lu", numberOfSchedulerRecords);
 800446a:	4b6c      	ldr	r3, [pc, #432]	; (800461c <UART_Send+0x4dc>)
 800446c:	a810      	add	r0, sp, #64	; 0x40
 800446e:	496c      	ldr	r1, [pc, #432]	; (8004620 <UART_Send+0x4e0>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	f00d fa63 	bl	801193c <siprintf>
				DataSend = PrepareData("datedRecordIndex", value1);
 8004476:	a910      	add	r1, sp, #64	; 0x40
 8004478:	486a      	ldr	r0, [pc, #424]	; (8004624 <UART_Send+0x4e4>)
 800447a:	f7fc fbb5 	bl	8000be8 <PrepareData>
 800447e:	9007      	str	r0, [sp, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
						strlen(DataSend), 10);
 8004480:	f7fb ff8e 	bl	80003a0 <strlen>
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 8004484:	230a      	movs	r3, #10
 8004486:	b282      	uxth	r2, r0
 8004488:	9907      	ldr	r1, [sp, #28]
 800448a:	4856      	ldr	r0, [pc, #344]	; (80045e4 <UART_Send+0x4a4>)
 800448c:	f009 f8d5 	bl	800d63a <HAL_UART_Transmit>
				osDelay(10); // Adding a delay to ensure there's no data overlap
 8004490:	200a      	movs	r0, #10
 8004492:	f009 fd6a 	bl	800df6a <osDelay>
				char value2[15];
				sprintf(value2, "%lu", numberOfWeeklyRecords);
 8004496:	4b64      	ldr	r3, [pc, #400]	; (8004628 <UART_Send+0x4e8>)
 8004498:	4961      	ldr	r1, [pc, #388]	; (8004620 <UART_Send+0x4e0>)
 800449a:	a814      	add	r0, sp, #80	; 0x50
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	f00d fa4d 	bl	801193c <siprintf>
				DataSend = PrepareData("weeklyRecordIndex", value2);
 80044a2:	a914      	add	r1, sp, #80	; 0x50
 80044a4:	4861      	ldr	r0, [pc, #388]	; (800462c <UART_Send+0x4ec>)
 80044a6:	f7fc fb9f 	bl	8000be8 <PrepareData>
 80044aa:	9007      	str	r0, [sp, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
						strlen(DataSend), 10);
 80044ac:	f7fb ff78 	bl	80003a0 <strlen>
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 80044b0:	230a      	movs	r3, #10
 80044b2:	b282      	uxth	r2, r0
 80044b4:	9907      	ldr	r1, [sp, #28]
 80044b6:	484b      	ldr	r0, [pc, #300]	; (80045e4 <UART_Send+0x4a4>)
 80044b8:	f009 f8bf 	bl	800d63a <HAL_UART_Transmit>
				osDelay(10); // Adding a delay to ensure there's no data overlap
 80044bc:	200a      	movs	r0, #10
 80044be:	f009 fd54 	bl	800df6a <osDelay>
				compare_rtc();
 80044c2:	f7fe f821 	bl	8002508 <compare_rtc>
				compare_weekly_rtc();
 80044c6:	f7fd ffa9 	bl	800241c <compare_weekly_rtc>

				// For sending dated indices
				sendMatchedIndices(matchedRecordIndices, &matchedRecordCount,
 80044ca:	4a59      	ldr	r2, [pc, #356]	; (8004630 <UART_Send+0x4f0>)
 80044cc:	4959      	ldr	r1, [pc, #356]	; (8004634 <UART_Send+0x4f4>)
 80044ce:	485a      	ldr	r0, [pc, #360]	; (8004638 <UART_Send+0x4f8>)
 80044d0:	f7fe fa94 	bl	80029fc <sendMatchedIndices>
						"matchDatedIndex");

				// For sending weekly indices
				sendMatchedIndices(matchedWeeklyRecordIndices,
 80044d4:	4a59      	ldr	r2, [pc, #356]	; (800463c <UART_Send+0x4fc>)
 80044d6:	495a      	ldr	r1, [pc, #360]	; (8004640 <UART_Send+0x500>)
 80044d8:	485a      	ldr	r0, [pc, #360]	; (8004644 <UART_Send+0x504>)
 80044da:	f7fe fa8f 	bl	80029fc <sendMatchedIndices>
						&matchedWeeklyRecordCount, "matchedWeeklyIndex");

				sendSchedData = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	f888 3000 	strb.w	r3, [r8]
			}

			sendRTC = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	703b      	strb	r3, [r7, #0]

		}
//if the user enterd the alarm and warning page send the alarm history records to this page .
		if (sendAlarmRecords)
 80044e8:	4f57      	ldr	r7, [pc, #348]	; (8004648 <UART_Send+0x508>)
 80044ea:	783b      	ldrb	r3, [r7, #0]
 80044ec:	b173      	cbz	r3, 800450c <UART_Send+0x3cc>
 80044ee:	4e57      	ldr	r6, [pc, #348]	; (800464c <UART_Send+0x50c>)
		{
			for (uint32_t i = 0; i < storedAlarmsNumber; i++)
 80044f0:	2500      	movs	r5, #0
 80044f2:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8004688 <UART_Send+0x548>
			{

				DataSend = PrepareData("alarmRecord", alarmsArray[i]);
 80044f6:	f8df 9194 	ldr.w	r9, [pc, #404]	; 800468c <UART_Send+0x54c>
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 80044fa:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80045e4 <UART_Send+0x4a4>
			for (uint32_t i = 0; i < storedAlarmsNumber; i++)
 80044fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004502:	42ab      	cmp	r3, r5
 8004504:	f200 829a 	bhi.w	8004a3c <UART_Send+0x8fc>
						strlen(DataSend), 10);
				osDelay(10); // Adding a delay to ensure there's no data overlap
				printf("Alarm Record %lu: %s\n", i + 1, alarmsArray[i]);
			}
			sendAlarmRecords = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	703b      	strb	r3, [r7, #0]
		}
		//send the current state of possible alarms in the system and weither each alarm will stop the system
		if (sendAlarms == 1)
 800450c:	4b50      	ldr	r3, [pc, #320]	; (8004650 <UART_Send+0x510>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	f040 80eb 	bne.w	80046ec <UART_Send+0x5ac>
		{

			sprintf(value, "%d", dryRunDetected);
 8004516:	4b4f      	ldr	r3, [pc, #316]	; (8004654 <UART_Send+0x514>)
 8004518:	a808      	add	r0, sp, #32
 800451a:	4935      	ldr	r1, [pc, #212]	; (80045f0 <UART_Send+0x4b0>)
 800451c:	781a      	ldrb	r2, [r3, #0]
 800451e:	f00d fa0d 	bl	801193c <siprintf>
			DataSend = PrepareData("dryRunDetected", value);
 8004522:	a908      	add	r1, sp, #32
 8004524:	4833      	ldr	r0, [pc, #204]	; (80045f4 <UART_Send+0x4b4>)
 8004526:	f7fc fb5f 	bl	8000be8 <PrepareData>
 800452a:	9007      	str	r0, [sp, #28]
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 800452c:	f7fb ff38 	bl	80003a0 <strlen>
 8004530:	230a      	movs	r3, #10
 8004532:	b282      	uxth	r2, r0
 8004534:	9907      	ldr	r1, [sp, #28]
 8004536:	482b      	ldr	r0, [pc, #172]	; (80045e4 <UART_Send+0x4a4>)
 8004538:	f009 f87f 	bl	800d63a <HAL_UART_Transmit>
					10);
			osDelay(10);
 800453c:	200a      	movs	r0, #10
 800453e:	f009 fd14 	bl	800df6a <osDelay>

			sprintf(value, "%d", pressureSensorError);
 8004542:	4b45      	ldr	r3, [pc, #276]	; (8004658 <UART_Send+0x518>)
 8004544:	492a      	ldr	r1, [pc, #168]	; (80045f0 <UART_Send+0x4b0>)
 8004546:	a808      	add	r0, sp, #32
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	f00d f9f7 	bl	801193c <siprintf>
			DataSend = PrepareData("pressureSensorError", value);
 800454e:	a908      	add	r1, sp, #32
 8004550:	4842      	ldr	r0, [pc, #264]	; (800465c <UART_Send+0x51c>)
 8004552:	f7fc fb49 	bl	8000be8 <PrepareData>
 8004556:	9007      	str	r0, [sp, #28]
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 8004558:	f7fb ff22 	bl	80003a0 <strlen>
 800455c:	230a      	movs	r3, #10
 800455e:	b282      	uxth	r2, r0
 8004560:	9907      	ldr	r1, [sp, #28]
 8004562:	4820      	ldr	r0, [pc, #128]	; (80045e4 <UART_Send+0x4a4>)
 8004564:	f009 f869 	bl	800d63a <HAL_UART_Transmit>
					10);
			osDelay(10);
 8004568:	200a      	movs	r0, #10
 800456a:	f009 fcfe 	bl	800df6a <osDelay>

			sprintf(value, "%d", enableDryRun);
 800456e:	4b3c      	ldr	r3, [pc, #240]	; (8004660 <UART_Send+0x520>)
 8004570:	491f      	ldr	r1, [pc, #124]	; (80045f0 <UART_Send+0x4b0>)
 8004572:	a808      	add	r0, sp, #32
 8004574:	781a      	ldrb	r2, [r3, #0]
 8004576:	f00d f9e1 	bl	801193c <siprintf>
			DataSend = PrepareData("enableDryRun", value);
 800457a:	a908      	add	r1, sp, #32
 800457c:	4839      	ldr	r0, [pc, #228]	; (8004664 <UART_Send+0x524>)
 800457e:	f7fc fb33 	bl	8000be8 <PrepareData>
 8004582:	9007      	str	r0, [sp, #28]
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 8004584:	f7fb ff0c 	bl	80003a0 <strlen>
 8004588:	230a      	movs	r3, #10
 800458a:	b282      	uxth	r2, r0
 800458c:	9907      	ldr	r1, [sp, #28]
 800458e:	4815      	ldr	r0, [pc, #84]	; (80045e4 <UART_Send+0x4a4>)
 8004590:	f009 f853 	bl	800d63a <HAL_UART_Transmit>
					10);
			osDelay(10);
 8004594:	200a      	movs	r0, #10
 8004596:	f009 fce8 	bl	800df6a <osDelay>

			sprintf(value, "%d", dryRunSysStop);
 800459a:	4b33      	ldr	r3, [pc, #204]	; (8004668 <UART_Send+0x528>)
 800459c:	4914      	ldr	r1, [pc, #80]	; (80045f0 <UART_Send+0x4b0>)
 800459e:	a808      	add	r0, sp, #32
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	f00d f9cb 	bl	801193c <siprintf>
			DataSend = PrepareData("dryRunSysStop", value);
 80045a6:	a908      	add	r1, sp, #32
 80045a8:	4830      	ldr	r0, [pc, #192]	; (800466c <UART_Send+0x52c>)
 80045aa:	f7fc fb1d 	bl	8000be8 <PrepareData>
 80045ae:	9007      	str	r0, [sp, #28]
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 80045b0:	f7fb fef6 	bl	80003a0 <strlen>
 80045b4:	230a      	movs	r3, #10
 80045b6:	b282      	uxth	r2, r0
 80045b8:	9907      	ldr	r1, [sp, #28]
 80045ba:	480a      	ldr	r0, [pc, #40]	; (80045e4 <UART_Send+0x4a4>)
 80045bc:	f009 f83d 	bl	800d63a <HAL_UART_Transmit>
					10);
			osDelay(10);
 80045c0:	200a      	movs	r0, #10
 80045c2:	f009 fcd2 	bl	800df6a <osDelay>

			sprintf(value, "%d", pressureAlarmEnable);
 80045c6:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <UART_Send+0x530>)
 80045c8:	4909      	ldr	r1, [pc, #36]	; (80045f0 <UART_Send+0x4b0>)
 80045ca:	a808      	add	r0, sp, #32
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	f00d f9b5 	bl	801193c <siprintf>
			DataSend = PrepareData("pressureAlarmEnable", value);
 80045d2:	a908      	add	r1, sp, #32
 80045d4:	e05c      	b.n	8004690 <UART_Send+0x550>
 80045d6:	bf00      	nop
 80045d8:	24000058 	.word	0x24000058
 80045dc:	08015986 	.word	0x08015986
 80045e0:	080159c0 	.word	0x080159c0
 80045e4:	24040440 	.word	0x24040440
 80045e8:	2403efd9 	.word	0x2403efd9
 80045ec:	2403efe3 	.word	0x2403efe3
 80045f0:	080159af 	.word	0x080159af
 80045f4:	08015ae1 	.word	0x08015ae1
 80045f8:	24000054 	.word	0x24000054
 80045fc:	24040030 	.word	0x24040030
 8004600:	24040034 	.word	0x24040034
 8004604:	08015af0 	.word	0x08015af0
 8004608:	080156e3 	.word	0x080156e3
 800460c:	24000000 	.word	0x24000000
 8004610:	240026a4 	.word	0x240026a4
 8004614:	08015820 	.word	0x08015820
 8004618:	2401fb68 	.word	0x2401fb68
 800461c:	24000010 	.word	0x24000010
 8004620:	08015b1c 	.word	0x08015b1c
 8004624:	08015b20 	.word	0x08015b20
 8004628:	24000014 	.word	0x24000014
 800462c:	08015b31 	.word	0x08015b31
 8004630:	08015940 	.word	0x08015940
 8004634:	24000004 	.word	0x24000004
 8004638:	24000708 	.word	0x24000708
 800463c:	08015950 	.word	0x08015950
 8004640:	24000008 	.word	0x24000008
 8004644:	240016a8 	.word	0x240016a8
 8004648:	2403f158 	.word	0x2403f158
 800464c:	2403f33e 	.word	0x2403f33e
 8004650:	2403f159 	.word	0x2403f159
 8004654:	2403efd6 	.word	0x2403efd6
 8004658:	2403eff6 	.word	0x2403eff6
 800465c:	08015b4f 	.word	0x08015b4f
 8004660:	2403efd8 	.word	0x2403efd8
 8004664:	0801555e 	.word	0x0801555e
 8004668:	2403efd7 	.word	0x2403efd7
 800466c:	08015b63 	.word	0x08015b63
 8004670:	2403eff5 	.word	0x2403eff5
 8004674:	2403f15c 	.word	0x2403f15c
 8004678:	2400268c 	.word	0x2400268c
 800467c:	08015b0f 	.word	0x08015b0f
 8004680:	2401fb50 	.word	0x2401fb50
 8004684:	08015b09 	.word	0x08015b09
 8004688:	24002688 	.word	0x24002688
 800468c:	08015b43 	.word	0x08015b43
 8004690:	48a9      	ldr	r0, [pc, #676]	; (8004938 <UART_Send+0x7f8>)
 8004692:	f7fc faa9 	bl	8000be8 <PrepareData>
 8004696:	9007      	str	r0, [sp, #28]
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 8004698:	f7fb fe82 	bl	80003a0 <strlen>
 800469c:	230a      	movs	r3, #10
 800469e:	b282      	uxth	r2, r0
 80046a0:	9907      	ldr	r1, [sp, #28]
 80046a2:	48a6      	ldr	r0, [pc, #664]	; (800493c <UART_Send+0x7fc>)
 80046a4:	f008 ffc9 	bl	800d63a <HAL_UART_Transmit>
					10);

			sprintf(value, "%d", pressureSysStop);
 80046a8:	4ba5      	ldr	r3, [pc, #660]	; (8004940 <UART_Send+0x800>)
 80046aa:	49a6      	ldr	r1, [pc, #664]	; (8004944 <UART_Send+0x804>)
 80046ac:	a808      	add	r0, sp, #32
 80046ae:	781a      	ldrb	r2, [r3, #0]
 80046b0:	f00d f944 	bl	801193c <siprintf>
			DataSend = PrepareData("pressureSysStop", value);
 80046b4:	a908      	add	r1, sp, #32
 80046b6:	48a4      	ldr	r0, [pc, #656]	; (8004948 <UART_Send+0x808>)
 80046b8:	f7fc fa96 	bl	8000be8 <PrepareData>
 80046bc:	9007      	str	r0, [sp, #28]
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 80046be:	f7fb fe6f 	bl	80003a0 <strlen>
 80046c2:	230a      	movs	r3, #10
 80046c4:	b282      	uxth	r2, r0
 80046c6:	9907      	ldr	r1, [sp, #28]
 80046c8:	489c      	ldr	r0, [pc, #624]	; (800493c <UART_Send+0x7fc>)
 80046ca:	f008 ffb6 	bl	800d63a <HAL_UART_Transmit>
					10);
			osDelay(10);
 80046ce:	200a      	movs	r0, #10
 80046d0:	f009 fc4b 	bl	800df6a <osDelay>
			osDelay(100);
 80046d4:	2064      	movs	r0, #100	; 0x64
 80046d6:	f009 fc48 	bl	800df6a <osDelay>
			sendAlarms++;
 80046da:	4a9c      	ldr	r2, [pc, #624]	; (800494c <UART_Send+0x80c>)
 80046dc:	7813      	ldrb	r3, [r2, #0]
 80046de:	3301      	adds	r3, #1
 80046e0:	b2db      	uxtb	r3, r3
			if (sendAlarms >= 4)
 80046e2:	2b03      	cmp	r3, #3
			{
				sendAlarms = 0;
 80046e4:	bf84      	itt	hi
 80046e6:	2300      	movhi	r3, #0
 80046e8:	4a98      	ldrhi	r2, [pc, #608]	; (800494c <UART_Send+0x80c>)
 80046ea:	7013      	strb	r3, [r2, #0]
			}
		}
		//when the user enter the home page send the current mode (manual or automatic) to display the approprate graphics on the app
		if(sendOperationMode==1)
 80046ec:	4e98      	ldr	r6, [pc, #608]	; (8004950 <UART_Send+0x810>)
 80046ee:	7833      	ldrb	r3, [r6, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d126      	bne.n	8004742 <UART_Send+0x602>
		{
			sprintf(value, "%d", operationMode);
 80046f4:	4b97      	ldr	r3, [pc, #604]	; (8004954 <UART_Send+0x814>)
 80046f6:	a808      	add	r0, sp, #32
 80046f8:	4992      	ldr	r1, [pc, #584]	; (8004944 <UART_Send+0x804>)
 80046fa:	781a      	ldrb	r2, [r3, #0]
 80046fc:	f00d f91e 	bl	801193c <siprintf>
			DataSend = PrepareData("operationMode", value);
 8004700:	a908      	add	r1, sp, #32
 8004702:	4895      	ldr	r0, [pc, #596]	; (8004958 <UART_Send+0x818>)
 8004704:	f7fc fa70 	bl	8000be8 <PrepareData>
 8004708:	4605      	mov	r5, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 800470a:	f7fb fe49 	bl	80003a0 <strlen>
 800470e:	230a      	movs	r3, #10
 8004710:	b282      	uxth	r2, r0
 8004712:	4629      	mov	r1, r5
 8004714:	4889      	ldr	r0, [pc, #548]	; (800493c <UART_Send+0x7fc>)
 8004716:	f008 ff90 	bl	800d63a <HAL_UART_Transmit>
					10);

			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 800471a:	4628      	mov	r0, r5
 800471c:	f7fb fe40 	bl	80003a0 <strlen>
 8004720:	230a      	movs	r3, #10
 8004722:	b282      	uxth	r2, r0
 8004724:	4629      	mov	r1, r5
 8004726:	4885      	ldr	r0, [pc, #532]	; (800493c <UART_Send+0x7fc>)
 8004728:	f008 ff87 	bl	800d63a <HAL_UART_Transmit>
					10);
			HAL_UART_Transmit(&huart1, (uint8_t*) DataSend, strlen(DataSend),
 800472c:	4628      	mov	r0, r5
 800472e:	f7fb fe37 	bl	80003a0 <strlen>
 8004732:	230a      	movs	r3, #10
 8004734:	b282      	uxth	r2, r0
 8004736:	4629      	mov	r1, r5
 8004738:	4880      	ldr	r0, [pc, #512]	; (800493c <UART_Send+0x7fc>)
 800473a:	f008 ff7e 	bl	800d63a <HAL_UART_Transmit>
					10);
			sendOperationMode=0;
 800473e:	2300      	movs	r3, #0
 8004740:	7033      	strb	r3, [r6, #0]
		}
		osDelay(10);
 8004742:	200a      	movs	r0, #10
 8004744:	f009 fc11 	bl	800df6a <osDelay>
		if (enablePID == 1 && inHomePage)
 8004748:	e503      	b.n	8004152 <UART_Send+0x12>
				sprintf(value, "%f", Kp);
 800474a:	4b84      	ldr	r3, [pc, #528]	; (800495c <UART_Send+0x81c>)
 800474c:	a808      	add	r0, sp, #32
 800474e:	4984      	ldr	r1, [pc, #528]	; (8004960 <UART_Send+0x820>)
 8004750:	edd3 7a00 	vldr	s15, [r3]
 8004754:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004758:	ec53 2b17 	vmov	r2, r3, d7
 800475c:	f00d f8ee 	bl	801193c <siprintf>
				DataSend = PrepareData("KpOfStm", value);
 8004760:	a908      	add	r1, sp, #32
 8004762:	4880      	ldr	r0, [pc, #512]	; (8004964 <UART_Send+0x824>)
 8004764:	e5df      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", Ki);
 8004766:	4b80      	ldr	r3, [pc, #512]	; (8004968 <UART_Send+0x828>)
 8004768:	a808      	add	r0, sp, #32
 800476a:	497d      	ldr	r1, [pc, #500]	; (8004960 <UART_Send+0x820>)
 800476c:	edd3 7a00 	vldr	s15, [r3]
 8004770:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004774:	ec53 2b17 	vmov	r2, r3, d7
 8004778:	f00d f8e0 	bl	801193c <siprintf>
				DataSend = PrepareData("KiOfStm", value);
 800477c:	a908      	add	r1, sp, #32
 800477e:	487b      	ldr	r0, [pc, #492]	; (800496c <UART_Send+0x82c>)
 8004780:	e5d1      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", Kd);
 8004782:	4b7b      	ldr	r3, [pc, #492]	; (8004970 <UART_Send+0x830>)
 8004784:	a808      	add	r0, sp, #32
 8004786:	4976      	ldr	r1, [pc, #472]	; (8004960 <UART_Send+0x820>)
 8004788:	edd3 7a00 	vldr	s15, [r3]
 800478c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004790:	ec53 2b17 	vmov	r2, r3, d7
 8004794:	f00d f8d2 	bl	801193c <siprintf>
				DataSend = PrepareData("KdOfStm", value);
 8004798:	a908      	add	r1, sp, #32
 800479a:	4876      	ldr	r0, [pc, #472]	; (8004974 <UART_Send+0x834>)
 800479c:	e5c3      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%d", offset);
 800479e:	4b76      	ldr	r3, [pc, #472]	; (8004978 <UART_Send+0x838>)
 80047a0:	a808      	add	r0, sp, #32
 80047a2:	4968      	ldr	r1, [pc, #416]	; (8004944 <UART_Send+0x804>)
 80047a4:	881a      	ldrh	r2, [r3, #0]
 80047a6:	f00d f8c9 	bl	801193c <siprintf>
				DataSend = PrepareData("offsetOfStm", value);
 80047aa:	a908      	add	r1, sp, #32
 80047ac:	4873      	ldr	r0, [pc, #460]	; (800497c <UART_Send+0x83c>)
 80047ae:	e5ba      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", cutIn);
 80047b0:	4b73      	ldr	r3, [pc, #460]	; (8004980 <UART_Send+0x840>)
 80047b2:	a808      	add	r0, sp, #32
 80047b4:	496a      	ldr	r1, [pc, #424]	; (8004960 <UART_Send+0x820>)
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047be:	ec53 2b17 	vmov	r2, r3, d7
 80047c2:	f00d f8bb 	bl	801193c <siprintf>
				DataSend = PrepareData("cutInOfStm", value);
 80047c6:	a908      	add	r1, sp, #32
 80047c8:	486e      	ldr	r0, [pc, #440]	; (8004984 <UART_Send+0x844>)
 80047ca:	e5ac      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", cutOff);
 80047cc:	4b6e      	ldr	r3, [pc, #440]	; (8004988 <UART_Send+0x848>)
 80047ce:	a808      	add	r0, sp, #32
 80047d0:	4963      	ldr	r1, [pc, #396]	; (8004960 <UART_Send+0x820>)
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047da:	ec53 2b17 	vmov	r2, r3, d7
 80047de:	f00d f8ad 	bl	801193c <siprintf>
				DataSend = PrepareData("cutOffOfStm", value);
 80047e2:	a908      	add	r1, sp, #32
 80047e4:	4869      	ldr	r0, [pc, #420]	; (800498c <UART_Send+0x84c>)
 80047e6:	e59e      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%d", changeOverTime);
 80047e8:	4b69      	ldr	r3, [pc, #420]	; (8004990 <UART_Send+0x850>)
 80047ea:	a808      	add	r0, sp, #32
 80047ec:	4955      	ldr	r1, [pc, #340]	; (8004944 <UART_Send+0x804>)
 80047ee:	881a      	ldrh	r2, [r3, #0]
 80047f0:	f00d f8a4 	bl	801193c <siprintf>
				DataSend = PrepareData("changeOverTimeOfStm", value);
 80047f4:	a908      	add	r1, sp, #32
 80047f6:	4867      	ldr	r0, [pc, #412]	; (8004994 <UART_Send+0x854>)
 80047f8:	e595      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%d", systemPumpsNumber);
 80047fa:	4b67      	ldr	r3, [pc, #412]	; (8004998 <UART_Send+0x858>)
 80047fc:	a808      	add	r0, sp, #32
 80047fe:	4951      	ldr	r1, [pc, #324]	; (8004944 <UART_Send+0x804>)
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	f00d f89b 	bl	801193c <siprintf>
				DataSend = PrepareData("systemPumpsNumberOfStm", value);
 8004806:	a908      	add	r1, sp, #32
 8004808:	4864      	ldr	r0, [pc, #400]	; (800499c <UART_Send+0x85c>)
 800480a:	e58c      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", currentOfTheFirstReading);
 800480c:	4b64      	ldr	r3, [pc, #400]	; (80049a0 <UART_Send+0x860>)
 800480e:	a808      	add	r0, sp, #32
 8004810:	4953      	ldr	r1, [pc, #332]	; (8004960 <UART_Send+0x820>)
 8004812:	edd3 7a00 	vldr	s15, [r3]
 8004816:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800481a:	ec53 2b17 	vmov	r2, r3, d7
 800481e:	f00d f88d 	bl	801193c <siprintf>
				DataSend = PrepareData("currentOfTheFirstReadingOfStm", value);
 8004822:	a908      	add	r1, sp, #32
 8004824:	485f      	ldr	r0, [pc, #380]	; (80049a4 <UART_Send+0x864>)
 8004826:	e57e      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", currentOfTheSecondReading);
 8004828:	4b5f      	ldr	r3, [pc, #380]	; (80049a8 <UART_Send+0x868>)
 800482a:	a808      	add	r0, sp, #32
 800482c:	494c      	ldr	r1, [pc, #304]	; (8004960 <UART_Send+0x820>)
 800482e:	edd3 7a00 	vldr	s15, [r3]
 8004832:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004836:	ec53 2b17 	vmov	r2, r3, d7
 800483a:	f00d f87f 	bl	801193c <siprintf>
				DataSend = PrepareData("currentOfTheSecondReadingOfStm", value);
 800483e:	a908      	add	r1, sp, #32
 8004840:	485a      	ldr	r0, [pc, #360]	; (80049ac <UART_Send+0x86c>)
 8004842:	e570      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", coffA);
 8004844:	4b5a      	ldr	r3, [pc, #360]	; (80049b0 <UART_Send+0x870>)
 8004846:	a808      	add	r0, sp, #32
 8004848:	4945      	ldr	r1, [pc, #276]	; (8004960 <UART_Send+0x820>)
 800484a:	edd3 7a00 	vldr	s15, [r3]
 800484e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004852:	ec53 2b17 	vmov	r2, r3, d7
 8004856:	f00d f871 	bl	801193c <siprintf>
				DataSend = PrepareData("coffAOfStm", value);
 800485a:	a908      	add	r1, sp, #32
 800485c:	4855      	ldr	r0, [pc, #340]	; (80049b4 <UART_Send+0x874>)
 800485e:	e562      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", coffB);
 8004860:	4b55      	ldr	r3, [pc, #340]	; (80049b8 <UART_Send+0x878>)
 8004862:	a808      	add	r0, sp, #32
 8004864:	493e      	ldr	r1, [pc, #248]	; (8004960 <UART_Send+0x820>)
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800486e:	ec53 2b17 	vmov	r2, r3, d7
 8004872:	f00d f863 	bl	801193c <siprintf>
				DataSend = PrepareData("coffBOfStm", value);
 8004876:	a908      	add	r1, sp, #32
 8004878:	4850      	ldr	r0, [pc, #320]	; (80049bc <UART_Send+0x87c>)
 800487a:	e554      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", minimumPressure);
 800487c:	4b50      	ldr	r3, [pc, #320]	; (80049c0 <UART_Send+0x880>)
 800487e:	a808      	add	r0, sp, #32
 8004880:	4937      	ldr	r1, [pc, #220]	; (8004960 <UART_Send+0x820>)
 8004882:	edd3 7a00 	vldr	s15, [r3]
 8004886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800488a:	ec53 2b17 	vmov	r2, r3, d7
 800488e:	f00d f855 	bl	801193c <siprintf>
				DataSend = PrepareData("LowestSensorOfStm", value);
 8004892:	a908      	add	r1, sp, #32
 8004894:	484b      	ldr	r0, [pc, #300]	; (80049c4 <UART_Send+0x884>)
 8004896:	e546      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%f", MaximumPressure);
 8004898:	4b4b      	ldr	r3, [pc, #300]	; (80049c8 <UART_Send+0x888>)
 800489a:	a808      	add	r0, sp, #32
 800489c:	4930      	ldr	r1, [pc, #192]	; (8004960 <UART_Send+0x820>)
 800489e:	edd3 7a00 	vldr	s15, [r3]
 80048a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048a6:	ec53 2b17 	vmov	r2, r3, d7
 80048aa:	f00d f847 	bl	801193c <siprintf>
				DataSend = PrepareData("HigestSensorOfStm", value);
 80048ae:	a908      	add	r1, sp, #32
 80048b0:	4846      	ldr	r0, [pc, #280]	; (80049cc <UART_Send+0x88c>)
 80048b2:	e538      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%d", enableDryRun);
 80048b4:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <UART_Send+0x890>)
 80048b6:	a808      	add	r0, sp, #32
 80048b8:	4922      	ldr	r1, [pc, #136]	; (8004944 <UART_Send+0x804>)
 80048ba:	781a      	ldrb	r2, [r3, #0]
 80048bc:	f00d f83e 	bl	801193c <siprintf>
				DataSend = PrepareData("enableDryRunOfStm", value);
 80048c0:	a908      	add	r1, sp, #32
 80048c2:	4844      	ldr	r0, [pc, #272]	; (80049d4 <UART_Send+0x894>)
 80048c4:	e52f      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%d", enablePID);
 80048c6:	4b44      	ldr	r3, [pc, #272]	; (80049d8 <UART_Send+0x898>)
 80048c8:	a808      	add	r0, sp, #32
 80048ca:	491e      	ldr	r1, [pc, #120]	; (8004944 <UART_Send+0x804>)
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	f00d f835 	bl	801193c <siprintf>
				DataSend = PrepareData("enablePIDOfStm", value);
 80048d2:	a908      	add	r1, sp, #32
 80048d4:	4841      	ldr	r0, [pc, #260]	; (80049dc <UART_Send+0x89c>)
 80048d6:	e526      	b.n	8004326 <UART_Send+0x1e6>
				sprintf(value, "%d", enableScheduler);
 80048d8:	4b41      	ldr	r3, [pc, #260]	; (80049e0 <UART_Send+0x8a0>)
 80048da:	a808      	add	r0, sp, #32
 80048dc:	4919      	ldr	r1, [pc, #100]	; (8004944 <UART_Send+0x804>)
 80048de:	781a      	ldrb	r2, [r3, #0]
 80048e0:	f00d f82c 	bl	801193c <siprintf>
				DataSend = PrepareData("enableSchedulerOfStm", value);
 80048e4:	a908      	add	r1, sp, #32
 80048e6:	483f      	ldr	r0, [pc, #252]	; (80049e4 <UART_Send+0x8a4>)
 80048e8:	e51d      	b.n	8004326 <UART_Send+0x1e6>
 80048ea:	2501      	movs	r5, #1
 80048ec:	e542      	b.n	8004374 <UART_Send+0x234>
			if (dryRunSendCounter >= 1000)
 80048ee:	9b05      	ldr	r3, [sp, #20]
 80048f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048f4:	f47f ad59 	bne.w	80043aa <UART_Send+0x26a>
 80048f8:	2502      	movs	r5, #2
					sprintf(value, "%d", dryRunDetected);
 80048fa:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80049ec <UART_Send+0x8ac>
 80048fe:	4f11      	ldr	r7, [pc, #68]	; (8004944 <UART_Send+0x804>)
					DataSend = PrepareData("dryRunDetected", value);
 8004900:	4e39      	ldr	r6, [pc, #228]	; (80049e8 <UART_Send+0x8a8>)
					sprintf(value, "%d", dryRunDetected);
 8004902:	f898 2000 	ldrb.w	r2, [r8]
 8004906:	4639      	mov	r1, r7
 8004908:	a808      	add	r0, sp, #32
 800490a:	f00d f817 	bl	801193c <siprintf>
					DataSend = PrepareData("dryRunDetected", value);
 800490e:	a908      	add	r1, sp, #32
 8004910:	4630      	mov	r0, r6
 8004912:	f7fc f969 	bl	8000be8 <PrepareData>
 8004916:	9005      	str	r0, [sp, #20]
							strlen(DataSend), 10);
 8004918:	f7fb fd42 	bl	80003a0 <strlen>
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 800491c:	230a      	movs	r3, #10
 800491e:	b282      	uxth	r2, r0
 8004920:	9905      	ldr	r1, [sp, #20]
 8004922:	4806      	ldr	r0, [pc, #24]	; (800493c <UART_Send+0x7fc>)
 8004924:	f008 fe89 	bl	800d63a <HAL_UART_Transmit>
					osDelay(10);
 8004928:	200a      	movs	r0, #10
 800492a:	f009 fb1e 	bl	800df6a <osDelay>
				for (uint8_t i = 0; i < 2; i++)
 800492e:	2d01      	cmp	r5, #1
 8004930:	f43f ad39 	beq.w	80043a6 <UART_Send+0x266>
 8004934:	2501      	movs	r5, #1
 8004936:	e7e4      	b.n	8004902 <UART_Send+0x7c2>
 8004938:	08015b71 	.word	0x08015b71
 800493c:	24040440 	.word	0x24040440
 8004940:	2403eff7 	.word	0x2403eff7
 8004944:	080159af 	.word	0x080159af
 8004948:	08015740 	.word	0x08015740
 800494c:	2403f159 	.word	0x2403f159
 8004950:	2403f15b 	.word	0x2403f15b
 8004954:	2403eff4 	.word	0x2403eff4
 8004958:	08015617 	.word	0x08015617
 800495c:	24000020 	.word	0x24000020
 8004960:	08015986 	.word	0x08015986
 8004964:	080159ce 	.word	0x080159ce
 8004968:	2400001c 	.word	0x2400001c
 800496c:	080159d6 	.word	0x080159d6
 8004970:	2403ef7c 	.word	0x2403ef7c
 8004974:	080159de 	.word	0x080159de
 8004978:	2400004c 	.word	0x2400004c
 800497c:	080159e6 	.word	0x080159e6
 8004980:	24000040 	.word	0x24000040
 8004984:	080159f2 	.word	0x080159f2
 8004988:	24000044 	.word	0x24000044
 800498c:	080159fd 	.word	0x080159fd
 8004990:	2400002e 	.word	0x2400002e
 8004994:	08015a09 	.word	0x08015a09
 8004998:	2400005c 	.word	0x2400005c
 800499c:	08015a1d 	.word	0x08015a1d
 80049a0:	24000038 	.word	0x24000038
 80049a4:	08015a34 	.word	0x08015a34
 80049a8:	2400003c 	.word	0x2400003c
 80049ac:	08015a52 	.word	0x08015a52
 80049b0:	24000030 	.word	0x24000030
 80049b4:	08015a71 	.word	0x08015a71
 80049b8:	24000034 	.word	0x24000034
 80049bc:	08015a7c 	.word	0x08015a7c
 80049c0:	2403efec 	.word	0x2403efec
 80049c4:	08015a87 	.word	0x08015a87
 80049c8:	24000024 	.word	0x24000024
 80049cc:	08015a99 	.word	0x08015a99
 80049d0:	2403efd8 	.word	0x2403efd8
 80049d4:	08015aab 	.word	0x08015aab
 80049d8:	2403efd9 	.word	0x2403efd9
 80049dc:	08015abd 	.word	0x08015abd
 80049e0:	2403efda 	.word	0x2403efda
 80049e4:	08015acc 	.word	0x08015acc
 80049e8:	08015ae1 	.word	0x08015ae1
 80049ec:	2403efd6 	.word	0x2403efd6
					DataSend = PrepareData("schedRecords", currentRecord);
 80049f0:	4631      	mov	r1, r6
 80049f2:	4650      	mov	r0, sl
 80049f4:	f7fc f8f8 	bl	8000be8 <PrepareData>
 80049f8:	9007      	str	r0, [sp, #28]
							strlen(DataSend), 10);
 80049fa:	f7fb fcd1 	bl	80003a0 <strlen>
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 80049fe:	230a      	movs	r3, #10
 8004a00:	b282      	uxth	r2, r0
 8004a02:	9907      	ldr	r1, [sp, #28]
 8004a04:	4819      	ldr	r0, [pc, #100]	; (8004a6c <UART_Send+0x92c>)
				for (int i = 0; i < valid_record_count; i++)
 8004a06:	3501      	adds	r5, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 8004a08:	f008 fe17 	bl	800d63a <HAL_UART_Transmit>
					osDelay(10); // Adding a delay to ensure there's no data overlap
 8004a0c:	200a      	movs	r0, #10
 8004a0e:	3678      	adds	r6, #120	; 0x78
 8004a10:	f009 faab 	bl	800df6a <osDelay>
				for (int i = 0; i < valid_record_count; i++)
 8004a14:	e519      	b.n	800444a <UART_Send+0x30a>
					DataSend = PrepareData("weeklyschedRecords", currentRecord);
 8004a16:	4631      	mov	r1, r6
 8004a18:	4650      	mov	r0, sl
 8004a1a:	f7fc f8e5 	bl	8000be8 <PrepareData>
 8004a1e:	9007      	str	r0, [sp, #28]
							strlen(DataSend), 10);
 8004a20:	f7fb fcbe 	bl	80003a0 <strlen>
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 8004a24:	230a      	movs	r3, #10
 8004a26:	b282      	uxth	r2, r0
 8004a28:	9907      	ldr	r1, [sp, #28]
 8004a2a:	4810      	ldr	r0, [pc, #64]	; (8004a6c <UART_Send+0x92c>)
				for (int i = 0; i < valid_weekly_record_count; i++)
 8004a2c:	3501      	adds	r5, #1
					HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 8004a2e:	f008 fe04 	bl	800d63a <HAL_UART_Transmit>
					osDelay(10); // Adding a delay to ensure there's no data overlap
 8004a32:	200a      	movs	r0, #10
 8004a34:	3680      	adds	r6, #128	; 0x80
 8004a36:	f009 fa98 	bl	800df6a <osDelay>
				for (int i = 0; i < valid_weekly_record_count; i++)
 8004a3a:	e511      	b.n	8004460 <UART_Send+0x320>
				DataSend = PrepareData("alarmRecord", alarmsArray[i]);
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4648      	mov	r0, r9
 8004a40:	f7fc f8d2 	bl	8000be8 <PrepareData>
				printf("Alarm Record %lu: %s\n", i + 1, alarmsArray[i]);
 8004a44:	3501      	adds	r5, #1
				DataSend = PrepareData("alarmRecord", alarmsArray[i]);
 8004a46:	9007      	str	r0, [sp, #28]
						strlen(DataSend), 10);
 8004a48:	f7fb fcaa 	bl	80003a0 <strlen>
				HAL_UART_Transmit(&huart1, (uint8_t*) DataSend,
 8004a4c:	230a      	movs	r3, #10
 8004a4e:	b282      	uxth	r2, r0
 8004a50:	9907      	ldr	r1, [sp, #28]
 8004a52:	4650      	mov	r0, sl
 8004a54:	f008 fdf1 	bl	800d63a <HAL_UART_Transmit>
				osDelay(10); // Adding a delay to ensure there's no data overlap
 8004a58:	200a      	movs	r0, #10
 8004a5a:	f009 fa86 	bl	800df6a <osDelay>
				printf("Alarm Record %lu: %s\n", i + 1, alarmsArray[i]);
 8004a5e:	4632      	mov	r2, r6
 8004a60:	4629      	mov	r1, r5
 8004a62:	4803      	ldr	r0, [pc, #12]	; (8004a70 <UART_Send+0x930>)
 8004a64:	3620      	adds	r6, #32
 8004a66:	f00c febf 	bl	80117e8 <iprintf>
			for (uint32_t i = 0; i < storedAlarmsNumber; i++)
 8004a6a:	e548      	b.n	80044fe <UART_Send+0x3be>
 8004a6c:	24040440 	.word	0x24040440
 8004a70:	080158ef 	.word	0x080158ef

08004a74 <PIDControl>:
 * @retval None
 */
/* USER CODE END Header_PIDControl */
#if defined(MULTI_VFD)
void PIDControl(void *argument)
{
 8004a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* USER CODE BEGIN PIDControl */
	//monitor the current speed of the pump that is risisng up
	uint16_t tempPumpToAwakeSpeed = 0;
	uint8_t startPumpsFlag = 0;

	telegram[1].u16CoilsNo = 1; // number of elements (coils or registers) to read
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4ca6      	ldr	r4, [pc, #664]	; (8004d14 <PIDControl+0x2a0>)
	uint16_t tempPumpToAwakeSpeed = 0;
 8004a7c:	2300      	movs	r3, #0
{
 8004a7e:	b08b      	sub	sp, #44	; 0x2c
	telegram[1].u16CoilsNo = 1; // number of elements (coils or registers) to read
 8004a80:	82a2      	strh	r2, [r4, #20]
	telegram[1].u8id = 1;
 8004a82:	f804 2f10 	strb.w	r2, [r4, #16]!
							&telegram[1], osThreadGetId(), TimeoutValue);
					ModbusRequest(&manualPumpSpeed, manualPumpID,
							MB_FC_WRITE_HOLDING_REGISTER, danfoss101Speed,
							&telegram[1], osThreadGetId(), TimeoutValue);
				}
				manualPumpSpeed = 0;
 8004a86:	469b      	mov	fp, r3
	OldKI = Ki;
 8004a88:	4aa3      	ldr	r2, [pc, #652]	; (8004d18 <PIDControl+0x2a4>)
 8004a8a:	49a4      	ldr	r1, [pc, #656]	; (8004d1c <PIDControl+0x2a8>)
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	4da4      	ldr	r5, [pc, #656]	; (8004d20 <PIDControl+0x2ac>)
	uint16_t tempPumpToAwakeSpeed = 0;
 8004a90:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	int16_t schedulerPumpToShutDownSpeed = 0;
 8004a94:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	OldKI = Ki;
 8004a98:	600a      	str	r2, [r1, #0]
	uint8_t startPumpsFlag = 0;
 8004a9a:	9305      	str	r3, [sp, #20]
		if (operationMode == AUTO_MODE)
 8004a9c:	4ba1      	ldr	r3, [pc, #644]	; (8004d24 <PIDControl+0x2b0>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f040 8335 	bne.w	8005110 <PIDControl+0x69c>
			if (arrangeChanged == 0 && enablePID == 1)
 8004aa6:	4ba0      	ldr	r3, [pc, #640]	; (8004d28 <PIDControl+0x2b4>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 824a 	bne.w	8004f44 <PIDControl+0x4d0>
 8004ab0:	4b9e      	ldr	r3, [pc, #632]	; (8004d2c <PIDControl+0x2b8>)
 8004ab2:	781a      	ldrb	r2, [r3, #0]
 8004ab4:	2a01      	cmp	r2, #1
 8004ab6:	f040 8245 	bne.w	8004f44 <PIDControl+0x4d0>
				if (currentPressure <= (setPointRequired - cutIn)
 8004aba:	4b9d      	ldr	r3, [pc, #628]	; (8004d30 <PIDControl+0x2bc>)
 8004abc:	2000      	movs	r0, #0
 8004abe:	4e9d      	ldr	r6, [pc, #628]	; (8004d34 <PIDControl+0x2c0>)
 8004ac0:	ed93 7a00 	vldr	s14, [r3]
 8004ac4:	4b9c      	ldr	r3, [pc, #624]	; (8004d38 <PIDControl+0x2c4>)
 8004ac6:	edd3 7a00 	vldr	s15, [r3]
 8004aca:	4b9c      	ldr	r3, [pc, #624]	; (8004d3c <PIDControl+0x2c8>)
 8004acc:	edd3 6a00 	vldr	s13, [r3]
 8004ad0:	4b9b      	ldr	r3, [pc, #620]	; (8004d40 <PIDControl+0x2cc>)
 8004ad2:	ee77 6a66 	vsub.f32	s13, s14, s13
 8004ad6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ade:	db03      	blt.n	8004ae8 <PIDControl+0x74>
						&& startPumpsFlag == 0 && activePumps == 0)
 8004ae0:	7831      	ldrb	r1, [r6, #0]
 8004ae2:	9f05      	ldr	r7, [sp, #20]
 8004ae4:	4339      	orrs	r1, r7
 8004ae6:	d00d      	beq.n	8004b04 <PIDControl+0x90>
				else if (currentPressure >= (setPointRequired + cutOff)
 8004ae8:	4a96      	ldr	r2, [pc, #600]	; (8004d44 <PIDControl+0x2d0>)
 8004aea:	edd2 6a00 	vldr	s13, [r2]
 8004aee:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004af2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afa:	db04      	blt.n	8004b06 <PIDControl+0x92>
						&& startPumpsFlag == 1)
 8004afc:	9a05      	ldr	r2, [sp, #20]
 8004afe:	b112      	cbz	r2, 8004b06 <PIDControl+0x92>
					startPumpsFlag = 0;
 8004b00:	2200      	movs	r2, #0
					accumulatedError = 0;
 8004b02:	6018      	str	r0, [r3, #0]
					startPumpsFlag = 1;
 8004b04:	9205      	str	r2, [sp, #20]
				float Pout = Kp * error;
 8004b06:	4a90      	ldr	r2, [pc, #576]	; (8004d48 <PIDControl+0x2d4>)
				float error = setPointRequired - currentPressure;
 8004b08:	ee37 7a67 	vsub.f32	s14, s14, s15
				float Pout = Kp * error;
 8004b0c:	edd2 7a00 	vldr	s15, [r2]
						accumulatedError *= (OldKI / Ki);
 8004b10:	4a81      	ldr	r2, [pc, #516]	; (8004d18 <PIDControl+0x2a4>)
 8004b12:	ed92 5a00 	vldr	s10, [r2]
				if (KIreceived == 1)
 8004b16:	4a8d      	ldr	r2, [pc, #564]	; (8004d4c <PIDControl+0x2d8>)
 8004b18:	7811      	ldrb	r1, [r2, #0]
 8004b1a:	2901      	cmp	r1, #1
 8004b1c:	d116      	bne.n	8004b4c <PIDControl+0xd8>
					if (OldKI != 0)
 8004b1e:	497f      	ldr	r1, [pc, #508]	; (8004d1c <PIDControl+0x2a8>)
					KIreceived = 0;
 8004b20:	f882 b000 	strb.w	fp, [r2]
					if (OldKI != 0)
 8004b24:	ed91 6a00 	vldr	s12, [r1]
					OldKI = Ki;
 8004b28:	4a7c      	ldr	r2, [pc, #496]	; (8004d1c <PIDControl+0x2a8>)
					if (OldKI != 0)
 8004b2a:	eeb5 6a40 	vcmp.f32	s12, #0.0
					OldKI = Ki;
 8004b2e:	ed82 5a00 	vstr	s10, [r2]
					if (OldKI != 0)
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						accumulatedError *= (OldKI / Ki);
 8004b36:	bf1b      	ittet	ne
 8004b38:	eec6 6a05 	vdivne.f32	s13, s12, s10
 8004b3c:	ed93 6a00 	vldrne	s12, [r3]
						accumulatedError = 0;
 8004b40:	eddf 6a83 	vldreq	s13, [pc, #524]	; 8004d50 <PIDControl+0x2dc>
						accumulatedError *= (OldKI / Ki);
 8004b44:	ee66 6a86 	vmulne.f32	s13, s13, s12
 8004b48:	edc3 6a00 	vstr	s13, [r3]
				accumulatedError += error * 200; // deltaTime is the time step, e.g., 30ms
 8004b4c:	ed9f 6a81 	vldr	s12, [pc, #516]	; 8004d54 <PIDControl+0x2e0>
 8004b50:	edd3 6a00 	vldr	s13, [r3]
 8004b54:	ee27 6a06 	vmul.f32	s12, s14, s12
				float Dout = Kd * deltaError; // deltaTime is the time step, e.g., 30ms
 8004b58:	497f      	ldr	r1, [pc, #508]	; (8004d58 <PIDControl+0x2e4>)
				float deltaError = error - lastError;
 8004b5a:	f8df c218 	ldr.w	ip, [pc, #536]	; 8004d74 <PIDControl+0x300>
					if (controlAction < DanfossVfdMaxSpeed * .5 && controlAction > 0)
 8004b5e:	4f7f      	ldr	r7, [pc, #508]	; (8004d5c <PIDControl+0x2e8>)
				accumulatedError += error * 200; // deltaTime is the time step, e.g., 30ms
 8004b60:	ee76 6a26 	vadd.f32	s13, s12, s13
				if (startPumpsFlag == 1)
 8004b64:	9a05      	ldr	r2, [sp, #20]
				float Dout = Kd * deltaError; // deltaTime is the time step, e.g., 30ms
 8004b66:	edd1 4a00 	vldr	s9, [r1]
				float deltaError = error - lastError;
 8004b6a:	eddc 5a00 	vldr	s11, [ip]
					if (controlAction < DanfossVfdMaxSpeed * .5 && controlAction > 0)
 8004b6e:	8839      	ldrh	r1, [r7, #0]
 8004b70:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8004d78 <PIDControl+0x304>
				accumulatedError += error * 200; // deltaTime is the time step, e.g., 30ms
 8004b74:	edc3 6a00 	vstr	s13, [r3]
				if (startPumpsFlag == 1)
 8004b78:	2a00      	cmp	r2, #0
 8004b7a:	f000 809c 	beq.w	8004cb6 <PIDControl+0x242>
				float Pout = Kp * error;
 8004b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
				float deltaError = error - lastError;
 8004b82:	ee77 5a65 	vsub.f32	s11, s14, s11
					controlAction = Pout + Iout + Dout;
 8004b86:	eee6 7a85 	vfma.f32	s15, s13, s10
 8004b8a:	eee4 7aa5 	vfma.f32	s15, s9, s11
					if (controlAction < DanfossVfdMaxSpeed * .5 && controlAction > 0)
 8004b8e:	ee05 1a10 	vmov	s10, r1
 8004b92:	eeba 5bef 	vcvt.f64.s32	d5, d5, #1
 8004b96:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
					controlAction = Pout + Iout + Dout;
 8004b9a:	edc8 7a00 	vstr	s15, [r8]
					if (controlAction < DanfossVfdMaxSpeed * .5 && controlAction > 0)
 8004b9e:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	d508      	bpl.n	8004bba <PIDControl+0x146>
 8004ba8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	dd03      	ble.n	8004bba <PIDControl+0x146>
						controlAction = DanfossVfdMaxSpeed * .5;
 8004bb2:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8004bb6:	ed88 5a00 	vstr	s10, [r8]
				if (accumulatedError < 0)
 8004bba:	eef5 6ac0 	vcmpe.f32	s13, #0.0
				if (controlAction <= 0)
 8004bbe:	edd8 7a00 	vldr	s15, [r8]
				lastError = error; // Save the current error for next loop iteration
 8004bc2:	ed8c 7a00 	vstr	s14, [ip]
				if (accumulatedError < 0)
 8004bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				if (controlAction <= 0)
 8004bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
					accumulatedError = 0;
 8004bce:	bf48      	it	mi
 8004bd0:	6018      	strmi	r0, [r3, #0]
				if (controlAction <= 0)
 8004bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					startPumpsFlag = 0;
 8004bd6:	bf9c      	itt	ls
 8004bd8:	2200      	movls	r2, #0
					controlAction = 0;
 8004bda:	f8c8 0000 	strls.w	r0, [r8]
				if (controlAction > DanfossVfdMaxSpeed * systemPumpsNumber)
 8004bde:	ed98 7a00 	vldr	s14, [r8]
					startPumpsFlag = 0;
 8004be2:	bf98      	it	ls
 8004be4:	9205      	strls	r2, [sp, #20]
				if (controlAction > DanfossVfdMaxSpeed * systemPumpsNumber)
 8004be6:	4a5e      	ldr	r2, [pc, #376]	; (8004d60 <PIDControl+0x2ec>)
					accumulatedError = 0;
 8004be8:	bf98      	it	ls
 8004bea:	6018      	strls	r0, [r3, #0]
				if (controlAction > DanfossVfdMaxSpeed * systemPumpsNumber)
 8004bec:	7812      	ldrb	r2, [r2, #0]
 8004bee:	434a      	muls	r2, r1
 8004bf0:	ee07 2a90 	vmov	s15, r2
 8004bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					controlAction = DanfossVfdMaxSpeed * systemPumpsNumber;
 8004c00:	bf41      	itttt	mi
 8004c02:	edc8 7a00 	vstrmi	s15, [r8]
					accumulatedError -= error * 200;
 8004c06:	edd3 7a00 	vldrmi	s15, [r3]
 8004c0a:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8004c0e:	edc3 7a00 	vstrmi	s15, [r3]
				store_internal_system_data();
 8004c12:	f7fd faf7 	bl	8002204 <store_internal_system_data>
				controlActionDifference = controlAction - prevControlAction;
 8004c16:	4a53      	ldr	r2, [pc, #332]	; (8004d64 <PIDControl+0x2f0>)
 8004c18:	edd8 7a00 	vldr	s15, [r8]
 8004c1c:	ed92 7a00 	vldr	s14, [r2]
 8004c20:	4951      	ldr	r1, [pc, #324]	; (8004d68 <PIDControl+0x2f4>)
 8004c22:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004c26:	f8df c154 	ldr.w	ip, [pc, #340]	; 8004d7c <PIDControl+0x308>
				prevControlAction = controlAction;
 8004c2a:	edc2 7a00 	vstr	s15, [r2]
				controlActionDifference = controlAction - prevControlAction;
 8004c2e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004c32:	ee17 3a10 	vmov	r3, s14
 8004c36:	b21b      	sxth	r3, r3
				if (controlActionDifference > 0)
 8004c38:	2b00      	cmp	r3, #0
				controlActionDifference = controlAction - prevControlAction;
 8004c3a:	800b      	strh	r3, [r1, #0]
				if (controlActionDifference > 0)
 8004c3c:	494b      	ldr	r1, [pc, #300]	; (8004d6c <PIDControl+0x2f8>)
 8004c3e:	dd3d      	ble.n	8004cbc <PIDControl+0x248>
					activePumps = (controlAction + DanfossVfdMaxSpeed
 8004c40:	8838      	ldrh	r0, [r7, #0]
							+ offset / 2 - 1)
 8004c42:	f8bc 2000 	ldrh.w	r2, [ip]
					activePumps = (controlAction + DanfossVfdMaxSpeed
 8004c46:	ee07 0a10 	vmov	s14, r0
							+ offset / 2 - 1)
 8004c4a:	0852      	lsrs	r2, r2, #1
					activePumps = (controlAction + DanfossVfdMaxSpeed
 8004c4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
							+ offset / 2 - 1)
 8004c50:	ee06 2a90 	vmov	s13, r2
							/ (DanfossVfdMaxSpeed + offset / 2);
 8004c54:	4410      	add	r0, r2
							+ offset / 2 - 1)
 8004c56:	eef8 6ae6 	vcvt.f32.s32	s13, s13
					activePumps = (controlAction + DanfossVfdMaxSpeed
 8004c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ offset / 2 - 1)
 8004c5e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c66:	ee37 7a66 	vsub.f32	s14, s14, s13
							/ (DanfossVfdMaxSpeed + offset / 2);
 8004c6a:	ee06 0a90 	vmov	s13, r0
 8004c6e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004c72:	ee87 6a26 	vdiv.f32	s12, s14, s13
					activePumps = (controlAction + DanfossVfdMaxSpeed
 8004c76:	eebc 7ac6 	vcvt.u32.f32	s14, s12
 8004c7a:	ee17 2a10 	vmov	r2, s14
 8004c7e:	7032      	strb	r2, [r6, #0]
				if (activePumps > systemPumpsNumber) // make sure it doesn't exceed the total number of pumps available
 8004c80:	4a37      	ldr	r2, [pc, #220]	; (8004d60 <PIDControl+0x2ec>)
 8004c82:	7810      	ldrb	r0, [r2, #0]
 8004c84:	7832      	ldrb	r2, [r6, #0]
 8004c86:	4282      	cmp	r2, r0
 8004c88:	4a39      	ldr	r2, [pc, #228]	; (8004d70 <PIDControl+0x2fc>)
 8004c8a:	d93e      	bls.n	8004d0a <PIDControl+0x296>
					activePumps = systemPumpsNumber;
 8004c8c:	7030      	strb	r0, [r6, #0]
				if (controlAction >= offset && activePumps == 0)
 8004c8e:	f8bc 3000 	ldrh.w	r3, [ip]
 8004c92:	ee07 3a10 	vmov	s14, r3
 8004c96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca2:	db6d      	blt.n	8004d80 <PIDControl+0x30c>
 8004ca4:	7833      	ldrb	r3, [r6, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d16a      	bne.n	8004d80 <PIDControl+0x30c>
					desiredSpeedPerPump = controlAction;
 8004caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cae:	ee17 3a90 	vmov	r3, s15
					desiredSpeedPerPump = controlAction / activePumps;
 8004cb2:	800b      	strh	r3, [r1, #0]
 8004cb4:	e06d      	b.n	8004d92 <PIDControl+0x31e>
					controlAction = 0;
 8004cb6:	f8c8 0000 	str.w	r0, [r8]
 8004cba:	e77e      	b.n	8004bba <PIDControl+0x146>
				else if (controlActionDifference < 0
 8004cbc:	d0e0      	beq.n	8004c80 <PIDControl+0x20c>
								<= (DanfossVfdMaxSpeed * 88 / 100))
 8004cbe:	883a      	ldrh	r2, [r7, #0]
 8004cc0:	2058      	movs	r0, #88	; 0x58
 8004cc2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004cc6:	f8b1 e000 	ldrh.w	lr, [r1]
 8004cca:	4350      	muls	r0, r2
 8004ccc:	fbb0 f0f8 	udiv	r0, r0, r8
						&& desiredSpeedPerPump
 8004cd0:	4586      	cmp	lr, r0
 8004cd2:	dcd5      	bgt.n	8004c80 <PIDControl+0x20c>
							- (offset / 2) - 1)
 8004cd4:	f8bc 0000 	ldrh.w	r0, [ip]
					activePumps = (controlAction + DanfossVfdMaxSpeed
 8004cd8:	ee07 2a10 	vmov	s14, r2
							- (offset / 2) - 1)
 8004cdc:	0840      	lsrs	r0, r0, #1
					activePumps = (controlAction + DanfossVfdMaxSpeed
 8004cde:	eef8 6ac7 	vcvt.f32.s32	s13, s14
							- (offset / 2) - 1)
 8004ce2:	ee07 0a10 	vmov	s14, r0
							/ (DanfossVfdMaxSpeed - (offset / 2));
 8004ce6:	1a12      	subs	r2, r2, r0
					activePumps = (controlAction + DanfossVfdMaxSpeed
 8004ce8:	ee76 6aa7 	vadd.f32	s13, s13, s15
							- (offset / 2) - 1)
 8004cec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004cf0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8004cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cf8:	ee76 6ac7 	vsub.f32	s13, s13, s14
							/ (DanfossVfdMaxSpeed - (offset / 2));
 8004cfc:	ee07 2a10 	vmov	s14, r2
 8004d00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d04:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8004d08:	e7b5      	b.n	8004c76 <PIDControl+0x202>
				else if (controlActionDifference == 0)
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1bf      	bne.n	8004c8e <PIDControl+0x21a>
					activePumps = prevActivePumps;
 8004d0e:	7813      	ldrb	r3, [r2, #0]
 8004d10:	7033      	strb	r3, [r6, #0]
 8004d12:	e7bc      	b.n	8004c8e <PIDControl+0x21a>
 8004d14:	2403f178 	.word	0x2403f178
 8004d18:	2400001c 	.word	0x2400001c
 8004d1c:	2403ef80 	.word	0x2403ef80
 8004d20:	24000028 	.word	0x24000028
 8004d24:	2403eff4 	.word	0x2403eff4
 8004d28:	2403efbd 	.word	0x2403efbd
 8004d2c:	2403efd9 	.word	0x2403efd9
 8004d30:	24000058 	.word	0x24000058
 8004d34:	2403efbc 	.word	0x2403efbc
 8004d38:	2403efc8 	.word	0x2403efc8
 8004d3c:	24000040 	.word	0x24000040
 8004d40:	2403efb8 	.word	0x2403efb8
 8004d44:	24000044 	.word	0x24000044
 8004d48:	24000020 	.word	0x24000020
 8004d4c:	2403ef78 	.word	0x2403ef78
 8004d50:	00000000 	.word	0x00000000
 8004d54:	43480000 	.word	0x43480000
 8004d58:	2403ef7c 	.word	0x2403ef7c
 8004d5c:	2400001a 	.word	0x2400001a
 8004d60:	2400005c 	.word	0x2400005c
 8004d64:	2403effc 	.word	0x2403effc
 8004d68:	2403efc4 	.word	0x2403efc4
 8004d6c:	2403efd4 	.word	0x2403efd4
 8004d70:	2403eff8 	.word	0x2403eff8
 8004d74:	2403efe4 	.word	0x2403efe4
 8004d78:	2403efc0 	.word	0x2403efc0
 8004d7c:	2400004c 	.word	0x2400004c
				else if (controlAction < offset)
 8004d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d88:	d52d      	bpl.n	8004de6 <PIDControl+0x372>
					desiredSpeedPerPump = 0;
 8004d8a:	f8a1 b000 	strh.w	fp, [r1]
					activePumps = 0;
 8004d8e:	f886 b000 	strb.w	fp, [r6]
				prevActivePumps = activePumps;
 8004d92:	7833      	ldrb	r3, [r6, #0]
							ModbusRequest(&desiredSpeedPerPump,
 8004d94:	4ea1      	ldr	r6, [pc, #644]	; (800501c <PIDControl+0x5a8>)
				prevActivePumps = activePumps;
 8004d96:	7013      	strb	r3, [r2, #0]
				if (desiredSpeedPerPump > DanfossVfdMaxSpeed)
 8004d98:	883b      	ldrh	r3, [r7, #0]
 8004d9a:	880a      	ldrh	r2, [r1, #0]
 8004d9c:	429a      	cmp	r2, r3
					desiredSpeedPerPump = DanfossVfdMaxSpeed;
 8004d9e:	bf88      	it	hi
 8004da0:	800b      	strhhi	r3, [r1, #0]
					startPumpsFlag = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	9306      	str	r3, [sp, #24]
				for (uint8_t i = 0; i < systemPumpsNumber; i++)
 8004da6:	4b9e      	ldr	r3, [pc, #632]	; (8005020 <PIDControl+0x5ac>)
 8004da8:	f89d 8018 	ldrb.w	r8, [sp, #24]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	4543      	cmp	r3, r8
 8004db0:	d825      	bhi.n	8004dfe <PIDControl+0x38a>
				manualPumpID = 0;
			}
		}
			// get the readings of the speed and the current from the vfd of each pump
			for (int i = 0; i < systemPumpsNumber; i++)
 8004db2:	4f9c      	ldr	r7, [pc, #624]	; (8005024 <PIDControl+0x5b0>)
 8004db4:	2600      	movs	r6, #0
 8004db6:	4b9a      	ldr	r3, [pc, #616]	; (8005020 <PIDControl+0x5ac>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	42b3      	cmp	r3, r6
 8004dbc:	f300 81df 	bgt.w	800517e <PIDControl+0x70a>
 8004dc0:	4f99      	ldr	r7, [pc, #612]	; (8005028 <PIDControl+0x5b4>)
				//	printf("read speed  of pump %d %d \n",i,speedPercentageOfPump[i]);

			}

			// get the readings of the speed and the current from the vfd of each pump
			for (int i = 0; i < systemPumpsNumber; i++)
 8004dc2:	2600      	movs	r6, #0
 8004dc4:	4b96      	ldr	r3, [pc, #600]	; (8005020 <PIDControl+0x5ac>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	42b3      	cmp	r3, r6
 8004dca:	f300 81e8 	bgt.w	800519e <PIDControl+0x72a>
						, &telegram[1], osThreadGetId(), TimeoutValue);
//				osDelay(100);

			}

			if (save == 1)
 8004dce:	4e97      	ldr	r6, [pc, #604]	; (800502c <PIDControl+0x5b8>)
 8004dd0:	7833      	ldrb	r3, [r6, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d103      	bne.n	8004dde <PIDControl+0x36a>
			{
				store_factory_page_data();
 8004dd6:	f7fd f8f3 	bl	8001fc0 <store_factory_page_data>
				save = 0;
 8004dda:	f886 b000 	strb.w	fp, [r6]
			}
			osDelay(100);
 8004dde:	2064      	movs	r0, #100	; 0x64
 8004de0:	f009 f8c3 	bl	800df6a <osDelay>
		if (operationMode == AUTO_MODE)
 8004de4:	e65a      	b.n	8004a9c <PIDControl+0x28>
					desiredSpeedPerPump = controlAction / activePumps;
 8004de6:	7833      	ldrb	r3, [r6, #0]
 8004de8:	ee06 3a90 	vmov	s13, r3
 8004dec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004df0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004df4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004df8:	ee17 3a10 	vmov	r3, s14
 8004dfc:	e759      	b.n	8004cb2 <PIDControl+0x23e>
					if (i < activePumps)
 8004dfe:	4b8c      	ldr	r3, [pc, #560]	; (8005030 <PIDControl+0x5bc>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	4543      	cmp	r3, r8
 8004e04:	d966      	bls.n	8004ed4 <PIDControl+0x460>
						if (pumpInfoArray[i].isRunning == 0)
 8004e06:	2728      	movs	r7, #40	; 0x28
 8004e08:	fb07 f708 	mul.w	r7, r7, r8
 8004e0c:	eb06 0a07 	add.w	sl, r6, r7
 8004e10:	f89a 9024 	ldrb.w	r9, [sl, #36]	; 0x24
 8004e14:	f1b9 0f00 	cmp.w	r9, #0
 8004e18:	d132      	bne.n	8004e80 <PIDControl+0x40c>
							Update_Working_Time(pumpInfoArray[i].id,
 8004e1a:	5df0      	ldrb	r0, [r6, r7]
 8004e1c:	4649      	mov	r1, r9
							uint16_t tempHolder1 = 0;
 8004e1e:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
							Update_Working_Time(pumpInfoArray[i].id,
 8004e22:	f001 f899 	bl	8005f58 <Update_Working_Time>
							ModbusRequest(&requestResponseHolder,
 8004e26:	5df1      	ldrb	r1, [r6, r7]
 8004e28:	9107      	str	r1, [sp, #28]
 8004e2a:	f009 f89c 	bl	800df66 <osThreadGetId>
 8004e2e:	682b      	ldr	r3, [r5, #0]
 8004e30:	2206      	movs	r2, #6
 8004e32:	9907      	ldr	r1, [sp, #28]
 8004e34:	9400      	str	r4, [sp, #0]
 8004e36:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8004e3a:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8004e3e:	487d      	ldr	r0, [pc, #500]	; (8005034 <PIDControl+0x5c0>)
 8004e40:	f7fc fd46 	bl	80018d0 <ModbusRequest>
							ModbusRequest(&tempHolder1, pumpInfoArray[i].id,
 8004e44:	5df1      	ldrb	r1, [r6, r7]
 8004e46:	9107      	str	r1, [sp, #28]
 8004e48:	f009 f88d 	bl	800df66 <osThreadGetId>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	9907      	ldr	r1, [sp, #28]
 8004e52:	9400      	str	r4, [sp, #0]
 8004e54:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8004e58:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8004e5c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8004e60:	f7fc fd36 	bl	80018d0 <ModbusRequest>
							if (tempHolder1 == danfoss101_runForward)
 8004e64:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8004e68:	f240 437c 	movw	r3, #1148	; 0x47c
 8004e6c:	5df7      	ldrb	r7, [r6, r7]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d122      	bne.n	8004eb8 <PIDControl+0x444>
								pumpInfoArray[i].isRunning = 1;
 8004e72:	2301      	movs	r3, #1
								Update_Working_Time(pumpInfoArray[i].id,
 8004e74:	4649      	mov	r1, r9
 8004e76:	4638      	mov	r0, r7
								pumpInfoArray[i].isRunning = 1;
 8004e78:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
								Update_Working_Time(pumpInfoArray[i].id,
 8004e7c:	f001 f86c 	bl	8005f58 <Update_Working_Time>
						ModbusRequest(&desiredSpeedPerPump, pumpInfoArray[i].id,
 8004e80:	2328      	movs	r3, #40	; 0x28
 8004e82:	fb03 f308 	mul.w	r3, r3, r8
 8004e86:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800503c <PIDControl+0x5c8>
 8004e8a:	5cf1      	ldrb	r1, [r6, r3]
 8004e8c:	18f7      	adds	r7, r6, r3
 8004e8e:	9107      	str	r1, [sp, #28]
 8004e90:	f009 f869 	bl	800df66 <osThreadGetId>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	2206      	movs	r2, #6
 8004e98:	9907      	ldr	r1, [sp, #28]
 8004e9a:	9400      	str	r4, [sp, #0]
 8004e9c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8004ea0:	f24c 3359 	movw	r3, #50009	; 0xc359
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	f7fc fd13 	bl	80018d0 <ModbusRequest>
						pumpInfoArray[i].currentSpeed = desiredSpeedPerPump;
 8004eaa:	f8b8 3000 	ldrh.w	r3, [r8]
 8004eae:	807b      	strh	r3, [r7, #2]
				for (uint8_t i = 0; i < systemPumpsNumber; i++)
 8004eb0:	9b06      	ldr	r3, [sp, #24]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	9306      	str	r3, [sp, #24]
 8004eb6:	e776      	b.n	8004da6 <PIDControl+0x332>
								ModbusRequest(&requestResponseHolder,
 8004eb8:	f009 f855 	bl	800df66 <osThreadGetId>
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	2206      	movs	r2, #6
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	9400      	str	r4, [sp, #0]
 8004ec4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8004ec8:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8004ecc:	4859      	ldr	r0, [pc, #356]	; (8005034 <PIDControl+0x5c0>)
 8004ece:	f7fc fcff 	bl	80018d0 <ModbusRequest>
 8004ed2:	e7d5      	b.n	8004e80 <PIDControl+0x40c>
						if (arrangeChanged == 0)
 8004ed4:	4b58      	ldr	r3, [pc, #352]	; (8005038 <PIDControl+0x5c4>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e7      	bne.n	8004eb0 <PIDControl+0x43c>
							ModbusRequest(&desiredSpeedPerPump,
 8004ee0:	2728      	movs	r7, #40	; 0x28
							requestResponseHolder1 = danfoss101_stop;
 8004ee2:	f8df a160 	ldr.w	sl, [pc, #352]	; 8005044 <PIDControl+0x5d0>
							ModbusRequest(&desiredSpeedPerPump,
 8004ee6:	fb07 f708 	mul.w	r7, r7, r8
 8004eea:	5df1      	ldrb	r1, [r6, r7]
 8004eec:	eb06 0807 	add.w	r8, r6, r7
 8004ef0:	9107      	str	r1, [sp, #28]
 8004ef2:	f009 f838 	bl	800df66 <osThreadGetId>
 8004ef6:	682b      	ldr	r3, [r5, #0]
 8004ef8:	2206      	movs	r2, #6
 8004efa:	9907      	ldr	r1, [sp, #28]
 8004efc:	9400      	str	r4, [sp, #0]
 8004efe:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8004f02:	f24c 3359 	movw	r3, #50009	; 0xc359
 8004f06:	484d      	ldr	r0, [pc, #308]	; (800503c <PIDControl+0x5c8>)
 8004f08:	f7fc fce2 	bl	80018d0 <ModbusRequest>
							requestResponseHolder1 = danfoss101_stop;
 8004f0c:	f240 433c 	movw	r3, #1084	; 0x43c
							ModbusRequest(&requestResponseHolder1,
 8004f10:	5df1      	ldrb	r1, [r6, r7]
							requestResponseHolder1 = danfoss101_stop;
 8004f12:	f8aa 3000 	strh.w	r3, [sl]
							ModbusRequest(&requestResponseHolder1,
 8004f16:	9107      	str	r1, [sp, #28]
 8004f18:	f009 f825 	bl	800df66 <osThreadGetId>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	2206      	movs	r2, #6
 8004f20:	9907      	ldr	r1, [sp, #28]
 8004f22:	9400      	str	r4, [sp, #0]
 8004f24:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8004f28:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8004f2c:	4650      	mov	r0, sl
 8004f2e:	f7fc fccf 	bl	80018d0 <ModbusRequest>
							Update_Working_Time(pumpInfoArray[i].id,
 8004f32:	2101      	movs	r1, #1
 8004f34:	5df0      	ldrb	r0, [r6, r7]
 8004f36:	f001 f80f 	bl	8005f58 <Update_Working_Time>
							pumpInfoArray[i].currentSpeed = 0;
 8004f3a:	f8a8 9002 	strh.w	r9, [r8, #2]
							pumpInfoArray[i].isRunning = 0;
 8004f3e:	f888 9024 	strb.w	r9, [r8, #36]	; 0x24
 8004f42:	e7b5      	b.n	8004eb0 <PIDControl+0x43c>
			else if (enableScheduler && desiredSpeedPerPump != 0
 8004f44:	4b3e      	ldr	r3, [pc, #248]	; (8005040 <PIDControl+0x5cc>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80dd 	beq.w	8005108 <PIDControl+0x694>
 8004f4e:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 800503c <PIDControl+0x5c8>
 8004f52:	f8ba 3000 	ldrh.w	r3, [sl]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80d6 	beq.w	8005108 <PIDControl+0x694>
					&& arrangeChanged)
 8004f5c:	4b36      	ldr	r3, [pc, #216]	; (8005038 <PIDControl+0x5c4>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80d1 	beq.w	8005108 <PIDControl+0x694>
				if (pumpInfoArray[schedulerPumpToRiseIndex].isRunning == 0)
 8004f66:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8005048 <PIDControl+0x5d4>
					ModbusRequest(&requestResponseHolder,
 8004f6a:	2728      	movs	r7, #40	; 0x28
 8004f6c:	4e2b      	ldr	r6, [pc, #172]	; (800501c <PIDControl+0x5a8>)
				if (pumpInfoArray[schedulerPumpToRiseIndex].isRunning == 0)
 8004f6e:	f898 3000 	ldrb.w	r3, [r8]
					ModbusRequest(&requestResponseHolder,
 8004f72:	437b      	muls	r3, r7
 8004f74:	18f2      	adds	r2, r6, r3
 8004f76:	5cf1      	ldrb	r1, [r6, r3]
				if (pumpInfoArray[schedulerPumpToRiseIndex].isRunning == 0)
 8004f78:	f892 9024 	ldrb.w	r9, [r2, #36]	; 0x24
 8004f7c:	9106      	str	r1, [sp, #24]
 8004f7e:	f1b9 0f00 	cmp.w	r9, #0
 8004f82:	d163      	bne.n	800504c <PIDControl+0x5d8>
					requestResponseHolder = danfoss101_runForward;
 8004f84:	f240 437c 	movw	r3, #1148	; 0x47c
 8004f88:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8005034 <PIDControl+0x5c0>
					uint16_t tempHolder = 0;
 8004f8c:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
					requestResponseHolder = danfoss101_runForward;
 8004f90:	f8aa 3000 	strh.w	r3, [sl]
					ModbusRequest(&requestResponseHolder,
 8004f94:	f008 ffe7 	bl	800df66 <osThreadGetId>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	2206      	movs	r2, #6
 8004f9c:	9906      	ldr	r1, [sp, #24]
 8004f9e:	9400      	str	r4, [sp, #0]
 8004fa0:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8004fa4:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8004fa8:	4650      	mov	r0, sl
 8004faa:	f7fc fc91 	bl	80018d0 <ModbusRequest>
					ModbusRequest(&tempHolder,
 8004fae:	f898 3000 	ldrb.w	r3, [r8]
 8004fb2:	437b      	muls	r3, r7
 8004fb4:	5cf1      	ldrb	r1, [r6, r3]
 8004fb6:	9106      	str	r1, [sp, #24]
 8004fb8:	f008 ffd5 	bl	800df66 <osThreadGetId>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	9906      	ldr	r1, [sp, #24]
 8004fc2:	9400      	str	r4, [sp, #0]
 8004fc4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8004fc8:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8004fcc:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8004fd0:	f7fc fc7e 	bl	80018d0 <ModbusRequest>
					if (tempHolder == danfoss101_runForward)
 8004fd4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8004fd8:	f240 427c 	movw	r2, #1148	; 0x47c
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	f898 3000 	ldrb.w	r3, [r8]
						pumpInfoArray[schedulerPumpToRiseIndex].isRunning = 1;
 8004fe2:	fb07 f303 	mul.w	r3, r7, r3
					if (tempHolder == danfoss101_runForward)
 8004fe6:	d108      	bne.n	8004ffa <PIDControl+0x586>
						pumpInfoArray[schedulerPumpToRiseIndex].isRunning = 1;
 8004fe8:	2101      	movs	r1, #1
 8004fea:	18f2      	adds	r2, r6, r3
						Update_Working_Time(
 8004fec:	5cf0      	ldrb	r0, [r6, r3]
						pumpInfoArray[schedulerPumpToRiseIndex].isRunning = 1;
 8004fee:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
						Update_Working_Time(
 8004ff2:	4649      	mov	r1, r9
						Update_Working_Time(
 8004ff4:	f000 ffb0 	bl	8005f58 <Update_Working_Time>
 8004ff8:	e6db      	b.n	8004db2 <PIDControl+0x33e>
						ModbusRequest(&tempHolder,
 8004ffa:	5cf1      	ldrb	r1, [r6, r3]
 8004ffc:	9106      	str	r1, [sp, #24]
 8004ffe:	f008 ffb2 	bl	800df66 <osThreadGetId>
 8005002:	682b      	ldr	r3, [r5, #0]
 8005004:	2203      	movs	r2, #3
 8005006:	9906      	ldr	r1, [sp, #24]
 8005008:	9400      	str	r4, [sp, #0]
 800500a:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800500e:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8005012:	f10d 0026 	add.w	r0, sp, #38	; 0x26
						ModbusRequest(&desiredSpeedPerPump,
 8005016:	f7fc fc5b 	bl	80018d0 <ModbusRequest>
 800501a:	e6ca      	b.n	8004db2 <PIDControl+0x33e>
 800501c:	2403f010 	.word	0x2403f010
 8005020:	2400005c 	.word	0x2400005c
 8005024:	2403f168 	.word	0x2403f168
 8005028:	2403f000 	.word	0x2403f000
 800502c:	2403f154 	.word	0x2403f154
 8005030:	2403efbc 	.word	0x2403efbc
 8005034:	2403f150 	.word	0x2403f150
 8005038:	2403efbd 	.word	0x2403efbd
 800503c:	2403efd4 	.word	0x2403efd4
 8005040:	2403efda 	.word	0x2403efda
 8005044:	24000050 	.word	0x24000050
 8005048:	2403f155 	.word	0x2403f155
					ModbusRequest(&desiredSpeedPerPump,
 800504c:	f008 ff8b 	bl	800df66 <osThreadGetId>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	2206      	movs	r2, #6
 8005054:	9906      	ldr	r1, [sp, #24]
 8005056:	9400      	str	r4, [sp, #0]
 8005058:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800505c:	f24c 3359 	movw	r3, #50009	; 0xc359
 8005060:	4650      	mov	r0, sl
 8005062:	f7fc fc35 	bl	80018d0 <ModbusRequest>
					ModbusRequest(&tempPumpToAwakeSpeed,
 8005066:	f898 3000 	ldrb.w	r3, [r8]
 800506a:	437b      	muls	r3, r7
 800506c:	5cf1      	ldrb	r1, [r6, r3]
 800506e:	9106      	str	r1, [sp, #24]
 8005070:	f008 ff79 	bl	800df66 <osThreadGetId>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	2203      	movs	r2, #3
 8005078:	9906      	ldr	r1, [sp, #24]
 800507a:	9400      	str	r4, [sp, #0]
 800507c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8005080:	f24c 3359 	movw	r3, #50009	; 0xc359
 8005084:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8005088:	f7fc fc22 	bl	80018d0 <ModbusRequest>
					if (tempPumpToAwakeSpeed != 0)
 800508c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8005090:	b34b      	cbz	r3, 80050e6 <PIDControl+0x672>
						ModbusRequest(&schedulerPumpToShutDownSpeed,
 8005092:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80051d0 <PIDControl+0x75c>
						schedulerPumpToShutDownSpeed = 0;
 8005096:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
						ModbusRequest(&schedulerPumpToShutDownSpeed,
 800509a:	f899 3000 	ldrb.w	r3, [r9]
 800509e:	437b      	muls	r3, r7
 80050a0:	5cf1      	ldrb	r1, [r6, r3]
 80050a2:	9106      	str	r1, [sp, #24]
 80050a4:	f008 ff5f 	bl	800df66 <osThreadGetId>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	2206      	movs	r2, #6
 80050ac:	9906      	ldr	r1, [sp, #24]
 80050ae:	9400      	str	r4, [sp, #0]
 80050b0:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80050b4:	f24c 3359 	movw	r3, #50009	; 0xc359
 80050b8:	a809      	add	r0, sp, #36	; 0x24
 80050ba:	f7fc fc09 	bl	80018d0 <ModbusRequest>
						arrangeChanged = 0;
 80050be:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <PIDControl+0x74c>)
						Update_Working_Time(
 80050c0:	2101      	movs	r1, #1
						arrangeChanged = 0;
 80050c2:	f883 b000 	strb.w	fp, [r3]
						pumpInfoArray[schedulerPumpToShutDownIndex].isRunning =
 80050c6:	f899 3000 	ldrb.w	r3, [r9]
 80050ca:	fb07 6303 	mla	r3, r7, r3, r6
 80050ce:	f883 b024 	strb.w	fp, [r3, #36]	; 0x24
						pumpInfoArray[schedulerPumpToShutDownIndex].currentSpeed =
 80050d2:	f8a3 b002 	strh.w	fp, [r3, #2]
						schedulerPumpToShutDownIndex = 20;
 80050d6:	2314      	movs	r3, #20
 80050d8:	f889 3000 	strb.w	r3, [r9]
						schedulerPumpToRiseIndex = 20;
 80050dc:	f888 3000 	strb.w	r3, [r8]
						Update_Working_Time(
 80050e0:	f896 0320 	ldrb.w	r0, [r6, #800]	; 0x320
 80050e4:	e786      	b.n	8004ff4 <PIDControl+0x580>
						ModbusRequest(&desiredSpeedPerPump,
 80050e6:	f898 3000 	ldrb.w	r3, [r8]
 80050ea:	437b      	muls	r3, r7
 80050ec:	5cf1      	ldrb	r1, [r6, r3]
 80050ee:	9106      	str	r1, [sp, #24]
 80050f0:	f008 ff39 	bl	800df66 <osThreadGetId>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	2206      	movs	r2, #6
 80050f8:	9906      	ldr	r1, [sp, #24]
 80050fa:	9400      	str	r4, [sp, #0]
 80050fc:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8005100:	f24c 3359 	movw	r3, #50009	; 0xc359
 8005104:	4650      	mov	r0, sl
 8005106:	e786      	b.n	8005016 <PIDControl+0x5a2>
				arrangeChanged = 0;
 8005108:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <PIDControl+0x74c>)
 800510a:	f883 b000 	strb.w	fp, [r3]
 800510e:	e650      	b.n	8004db2 <PIDControl+0x33e>
		else if (operationMode == MANUAL_MODE)
 8005110:	2b00      	cmp	r3, #0
 8005112:	f47f ae4e 	bne.w	8004db2 <PIDControl+0x33e>
			if (manualPumpID != 0)
 8005116:	4e2b      	ldr	r6, [pc, #172]	; (80051c4 <PIDControl+0x750>)
 8005118:	7831      	ldrb	r1, [r6, #0]
 800511a:	2900      	cmp	r1, #0
 800511c:	f43f ae49 	beq.w	8004db2 <PIDControl+0x33e>
				if (manualPumpSpeed > 0)
 8005120:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80051cc <PIDControl+0x758>
 8005124:	4f28      	ldr	r7, [pc, #160]	; (80051c8 <PIDControl+0x754>)
 8005126:	f8b8 3000 	ldrh.w	r3, [r8]
 800512a:	9106      	str	r1, [sp, #24]
 800512c:	b323      	cbz	r3, 8005178 <PIDControl+0x704>
					requestResponseHolder = danfoss101_runForward;
 800512e:	f240 437c 	movw	r3, #1148	; 0x47c
					requestResponseHolder = danfoss101_stop;
 8005132:	803b      	strh	r3, [r7, #0]
					ModbusRequest(&requestResponseHolder, manualPumpID,
 8005134:	f008 ff17 	bl	800df66 <osThreadGetId>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	2206      	movs	r2, #6
 800513c:	9906      	ldr	r1, [sp, #24]
 800513e:	9400      	str	r4, [sp, #0]
 8005140:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8005144:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8005148:	4638      	mov	r0, r7
 800514a:	f7fc fbc1 	bl	80018d0 <ModbusRequest>
					ModbusRequest(&manualPumpSpeed, manualPumpID,
 800514e:	7831      	ldrb	r1, [r6, #0]
 8005150:	9106      	str	r1, [sp, #24]
 8005152:	f008 ff08 	bl	800df66 <osThreadGetId>
 8005156:	682b      	ldr	r3, [r5, #0]
 8005158:	2206      	movs	r2, #6
 800515a:	9906      	ldr	r1, [sp, #24]
 800515c:	9400      	str	r4, [sp, #0]
 800515e:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8005162:	f24c 3359 	movw	r3, #50009	; 0xc359
 8005166:	4640      	mov	r0, r8
 8005168:	f7fc fbb2 	bl	80018d0 <ModbusRequest>
				manualPumpSpeed = 0;
 800516c:	4b17      	ldr	r3, [pc, #92]	; (80051cc <PIDControl+0x758>)
				manualPumpID = 0;
 800516e:	f886 b000 	strb.w	fp, [r6]
				manualPumpSpeed = 0;
 8005172:	f8a3 b000 	strh.w	fp, [r3]
				manualPumpID = 0;
 8005176:	e61c      	b.n	8004db2 <PIDControl+0x33e>
					requestResponseHolder = danfoss101_stop;
 8005178:	f240 433c 	movw	r3, #1084	; 0x43c
 800517c:	e7d9      	b.n	8005132 <PIDControl+0x6be>
				ModbusRequest(&speedPercentageOfPump[i], i + 1,
 800517e:	f008 fef2 	bl	800df66 <osThreadGetId>
 8005182:	3601      	adds	r6, #1
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	2203      	movs	r2, #3
 8005188:	b2f1      	uxtb	r1, r6
 800518a:	9400      	str	r4, [sp, #0]
 800518c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8005190:	4638      	mov	r0, r7
 8005192:	f24c 3359 	movw	r3, #50009	; 0xc359
 8005196:	3702      	adds	r7, #2
 8005198:	f7fc fb9a 	bl	80018d0 <ModbusRequest>
			for (int i = 0; i < systemPumpsNumber; i++)
 800519c:	e60b      	b.n	8004db6 <PIDControl+0x342>
				ModbusRequest(&pumpCurrent[i], i + 1,
 800519e:	f008 fee2 	bl	800df66 <osThreadGetId>
 80051a2:	3601      	adds	r6, #1
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	2203      	movs	r2, #3
 80051a8:	b2f1      	uxtb	r1, r6
 80051aa:	9400      	str	r4, [sp, #0]
 80051ac:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80051b0:	4638      	mov	r0, r7
 80051b2:	f643 730b 	movw	r3, #16139	; 0x3f0b
 80051b6:	3702      	adds	r7, #2
 80051b8:	f7fc fb8a 	bl	80018d0 <ModbusRequest>
			for (int i = 0; i < systemPumpsNumber; i++)
 80051bc:	e602      	b.n	8004dc4 <PIDControl+0x350>
 80051be:	bf00      	nop
 80051c0:	2403efbd 	.word	0x2403efbd
 80051c4:	2403efe8 	.word	0x2403efe8
 80051c8:	2403f150 	.word	0x2403f150
 80051cc:	2403efea 	.word	0x2403efea
 80051d0:	2403f156 	.word	0x2403f156

080051d4 <Pumps_Scheduler>:
	 * @param argument: Not used
	 * @retval None
	 */
	/* USER CODE END Header_Pumps_Scheduler */
	void Pumps_Scheduler(void *argument)
	{
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

			sendRTC = 1;
//store the values of the pumpinfoArray in the temp to compare with it later
			for (int i = 0; i < systemPumpsNumber; i++)
			{
				tempPumpInfoArray[i].id = pumpInfoArray[i].id;
 80051d6:	4e3b      	ldr	r6, [pc, #236]	; (80052c4 <Pumps_Scheduler+0xf0>)
 80051d8:	4d3b      	ldr	r5, [pc, #236]	; (80052c8 <Pumps_Scheduler+0xf4>)
			osDelay(60000);
 80051da:	f64e 2060 	movw	r0, #60000	; 0xea60
 80051de:	f008 fec4 	bl	800df6a <osDelay>
			if (matchedRecordCount == 0 && matchedWeeklyRecordCount == 0
 80051e2:	4b3a      	ldr	r3, [pc, #232]	; (80052cc <Pumps_Scheduler+0xf8>)
 80051e4:	4a3a      	ldr	r2, [pc, #232]	; (80052d0 <Pumps_Scheduler+0xfc>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	d14e      	bne.n	800528c <Pumps_Scheduler+0xb8>
					&& date_week_sched_disabled == 0)
 80051ee:	4a39      	ldr	r2, [pc, #228]	; (80052d4 <Pumps_Scheduler+0x100>)
 80051f0:	7812      	ldrb	r2, [r2, #0]
 80051f2:	2a00      	cmp	r2, #0
 80051f4:	d14d      	bne.n	8005292 <Pumps_Scheduler+0xbe>
 80051f6:	2301      	movs	r3, #1
				enablePID = 0;
 80051f8:	4937      	ldr	r1, [pc, #220]	; (80052d8 <Pumps_Scheduler+0x104>)
 80051fa:	2028      	movs	r0, #40	; 0x28
			for (int i = 0; i < systemPumpsNumber; i++)
 80051fc:	4f37      	ldr	r7, [pc, #220]	; (80052dc <Pumps_Scheduler+0x108>)
				enablePID = 0;
 80051fe:	700a      	strb	r2, [r1, #0]
				schedDisabledSystem = 1;
 8005200:	4a37      	ldr	r2, [pc, #220]	; (80052e0 <Pumps_Scheduler+0x10c>)
			for (int i = 0; i < systemPumpsNumber; i++)
 8005202:	7839      	ldrb	r1, [r7, #0]
				schedDisabledSystem = 1;
 8005204:	7013      	strb	r3, [r2, #0]
			sendRTC = 1;
 8005206:	2201      	movs	r2, #1
 8005208:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <Pumps_Scheduler+0x110>)
 800520a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < systemPumpsNumber; i++)
 800520c:	2300      	movs	r3, #0
 800520e:	4299      	cmp	r1, r3
 8005210:	dc41      	bgt.n	8005296 <Pumps_Scheduler+0xc2>
			}

			Get_RTC_Values();
			for (uint8_t i = 1; i <= systemPumpsNumber; i++)
 8005212:	2401      	movs	r4, #1
			Get_RTC_Values();
 8005214:	f000 fbe0 	bl	80059d8 <Get_RTC_Values>
			for (uint8_t i = 1; i <= systemPumpsNumber; i++)
 8005218:	7839      	ldrb	r1, [r7, #0]
 800521a:	42a1      	cmp	r1, r4
 800521c:	d241      	bcs.n	80052a2 <Pumps_Scheduler+0xce>
			{
				Update_Working_Time(i, UPDATE_TIME);
			}
//sort the pumps according ascending according to the working hours

			if (!arrangeChanged && enableScheduler)
 800521e:	4c32      	ldr	r4, [pc, #200]	; (80052e8 <Pumps_Scheduler+0x114>)
 8005220:	7823      	ldrb	r3, [r4, #0]
 8005222:	b94b      	cbnz	r3, 8005238 <Pumps_Scheduler+0x64>
 8005224:	4b31      	ldr	r3, [pc, #196]	; (80052ec <Pumps_Scheduler+0x118>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b133      	cbz	r3, 8005238 <Pumps_Scheduler+0x64>
			{

				Sort_Pumps_By_changeOverTime(pumpInfoArray, systemPumpsNumber,
 800522a:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <Pumps_Scheduler+0x11c>)
 800522c:	4628      	mov	r0, r5
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	f000 fe1a 	bl	8005e68 <Sort_Pumps_By_changeOverTime>
						changeOverTime);
				write_pump_data_to_backup_registers();
 8005234:	f7fc fe6a 	bl	8001f0c <write_pump_data_to_backup_registers>
			}

//check for change in the order of the pumps
			for (int i = 0; i < systemPumpsNumber; i++)
 8005238:	783b      	ldrb	r3, [r7, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	2028      	movs	r0, #40	; 0x28
 800523e:	4293      	cmp	r3, r2
 8005240:	ddcb      	ble.n	80051da <Pumps_Scheduler+0x6>
			{

				if (tempPumpInfoArray[i].id != pumpInfoArray[i].id)
 8005242:	fb00 f102 	mul.w	r1, r0, r2
 8005246:	5d8f      	ldrb	r7, [r1, r6]
 8005248:	5d49      	ldrb	r1, [r1, r5]
 800524a:	428f      	cmp	r7, r1
 800524c:	d038      	beq.n	80052c0 <Pumps_Scheduler+0xec>

				{
					//sotre the new sorted array
					for (int j = 0; j < systemPumpsNumber; j++)
 800524e:	2200      	movs	r2, #0
 8005250:	2728      	movs	r7, #40	; 0x28
					{
						tempPumpInfoArray[j].id = pumpInfoArray[j].id;
 8005252:	fb07 f102 	mul.w	r1, r7, r2
					for (int j = 0; j < systemPumpsNumber; j++)
 8005256:	3201      	adds	r2, #1
						tempPumpInfoArray[j].id = pumpInfoArray[j].id;
 8005258:	5c68      	ldrb	r0, [r5, r1]
					for (int j = 0; j < systemPumpsNumber; j++)
 800525a:	4293      	cmp	r3, r2
						tempPumpInfoArray[j].id = pumpInfoArray[j].id;
 800525c:	5470      	strb	r0, [r6, r1]
					for (int j = 0; j < systemPumpsNumber; j++)
 800525e:	dcf8      	bgt.n	8005252 <Pumps_Scheduler+0x7e>
 8005260:	4919      	ldr	r1, [pc, #100]	; (80052c8 <Pumps_Scheduler+0xf4>)
					}
					//get the pump that should work
					for (int j = 0; j < systemPumpsNumber; j++)
 8005262:	2200      	movs	r2, #0
					{
						if (pumpInfoArray[j].isRunning == 0)
 8005264:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 8005268:	bb10      	cbnz	r0, 80052b0 <Pumps_Scheduler+0xdc>
						{
							schedulerPumpToRiseIndex = j;
 800526a:	4922      	ldr	r1, [pc, #136]	; (80052f4 <Pumps_Scheduler+0x120>)
 800526c:	700a      	strb	r2, [r1, #0]
							arrangeChanged = 1;
 800526e:	2201      	movs	r2, #1
 8005270:	7022      	strb	r2, [r4, #0]
							break;
						}
					}

					if (arrangeChanged)
 8005272:	7822      	ldrb	r2, [r4, #0]
 8005274:	2a00      	cmp	r2, #0
 8005276:	d0af      	beq.n	80051d8 <Pumps_Scheduler+0x4>
					{
						//get the pump that should shutdown
						for (int j = systemPumpsNumber - 1; j >= 0; j--)
 8005278:	3b01      	subs	r3, #1
						{
							if (pumpInfoArray[j].isRunning == 1)
 800527a:	2228      	movs	r2, #40	; 0x28
 800527c:	fb02 5103 	mla	r1, r2, r3, r5
 8005280:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8005284:	b1c9      	cbz	r1, 80052ba <Pumps_Scheduler+0xe6>
							{
								schedulerPumpToShutDownIndex = j;
 8005286:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <Pumps_Scheduler+0x124>)
 8005288:	7013      	strb	r3, [r2, #0]
								break;
 800528a:	e7a5      	b.n	80051d8 <Pumps_Scheduler+0x4>
 800528c:	2201      	movs	r2, #1
 800528e:	2300      	movs	r3, #0
 8005290:	e7b2      	b.n	80051f8 <Pumps_Scheduler+0x24>
 8005292:	2201      	movs	r2, #1
 8005294:	e7b0      	b.n	80051f8 <Pumps_Scheduler+0x24>
				tempPumpInfoArray[i].id = pumpInfoArray[i].id;
 8005296:	fb00 f203 	mul.w	r2, r0, r3
			for (int i = 0; i < systemPumpsNumber; i++)
 800529a:	3301      	adds	r3, #1
				tempPumpInfoArray[i].id = pumpInfoArray[i].id;
 800529c:	5d54      	ldrb	r4, [r2, r5]
 800529e:	5594      	strb	r4, [r2, r6]
			for (int i = 0; i < systemPumpsNumber; i++)
 80052a0:	e7b5      	b.n	800520e <Pumps_Scheduler+0x3a>
				Update_Working_Time(i, UPDATE_TIME);
 80052a2:	4620      	mov	r0, r4
			for (uint8_t i = 1; i <= systemPumpsNumber; i++)
 80052a4:	3401      	adds	r4, #1
				Update_Working_Time(i, UPDATE_TIME);
 80052a6:	2102      	movs	r1, #2
			for (uint8_t i = 1; i <= systemPumpsNumber; i++)
 80052a8:	b2e4      	uxtb	r4, r4
				Update_Working_Time(i, UPDATE_TIME);
 80052aa:	f000 fe55 	bl	8005f58 <Update_Working_Time>
			for (uint8_t i = 1; i <= systemPumpsNumber; i++)
 80052ae:	e7b3      	b.n	8005218 <Pumps_Scheduler+0x44>
					for (int j = 0; j < systemPumpsNumber; j++)
 80052b0:	3201      	adds	r2, #1
 80052b2:	3128      	adds	r1, #40	; 0x28
 80052b4:	4293      	cmp	r3, r2
 80052b6:	dcd5      	bgt.n	8005264 <Pumps_Scheduler+0x90>
 80052b8:	e7db      	b.n	8005272 <Pumps_Scheduler+0x9e>
						for (int j = systemPumpsNumber - 1; j >= 0; j--)
 80052ba:	3b01      	subs	r3, #1
 80052bc:	d2de      	bcs.n	800527c <Pumps_Scheduler+0xa8>
 80052be:	e78b      	b.n	80051d8 <Pumps_Scheduler+0x4>
			for (int i = 0; i < systemPumpsNumber; i++)
 80052c0:	3201      	adds	r2, #1
 80052c2:	e7bc      	b.n	800523e <Pumps_Scheduler+0x6a>
 80052c4:	2403f198 	.word	0x2403f198
 80052c8:	2403f010 	.word	0x2403f010
 80052cc:	24000004 	.word	0x24000004
 80052d0:	24000008 	.word	0x24000008
 80052d4:	24000000 	.word	0x24000000
 80052d8:	2403efd9 	.word	0x2403efd9
 80052dc:	2400005c 	.word	0x2400005c
 80052e0:	2400264a 	.word	0x2400264a
 80052e4:	24000054 	.word	0x24000054
 80052e8:	2403efbd 	.word	0x2403efbd
 80052ec:	2403efda 	.word	0x2403efda
 80052f0:	2400002e 	.word	0x2400002e
 80052f4:	2403f155 	.word	0x2403f155
 80052f8:	2403f156 	.word	0x2403f156

080052fc <vApplicationStackOverflowHook>:
{
 80052fc:	4602      	mov	r2, r0
	printf("Stack overflow in task: %s (Handle: %p)\n", pcTaskName, xTask);
 80052fe:	4802      	ldr	r0, [pc, #8]	; (8005308 <vApplicationStackOverflowHook+0xc>)
{
 8005300:	b508      	push	{r3, lr}
	printf("Stack overflow in task: %s (Handle: %p)\n", pcTaskName, xTask);
 8005302:	f00c fa71 	bl	80117e8 <iprintf>
	while (1)
 8005306:	e7fe      	b.n	8005306 <vApplicationStackOverflowHook+0xa>
 8005308:	08015b85 	.word	0x08015b85

0800530c <MX_FREERTOS_Init>:
{
 800530c:	b508      	push	{r3, lr}
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800530e:	4a1c      	ldr	r2, [pc, #112]	; (8005380 <MX_FREERTOS_Init+0x74>)
 8005310:	2100      	movs	r1, #0
 8005312:	481c      	ldr	r0, [pc, #112]	; (8005384 <MX_FREERTOS_Init+0x78>)
 8005314:	f008 fde0 	bl	800ded8 <osThreadNew>
 8005318:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <MX_FREERTOS_Init+0x7c>)
	UART1TaskHandle = osThreadNew(UART1_task, NULL, &UART1Task_attributes);
 800531a:	4a1c      	ldr	r2, [pc, #112]	; (800538c <MX_FREERTOS_Init+0x80>)
 800531c:	2100      	movs	r1, #0
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800531e:	6018      	str	r0, [r3, #0]
	UART1TaskHandle = osThreadNew(UART1_task, NULL, &UART1Task_attributes);
 8005320:	481b      	ldr	r0, [pc, #108]	; (8005390 <MX_FREERTOS_Init+0x84>)
 8005322:	f008 fdd9 	bl	800ded8 <osThreadNew>
 8005326:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <MX_FREERTOS_Init+0x88>)
	Task4_20mAscanHandle = osThreadNew(ADC_4_20mApolling, NULL,
 8005328:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <MX_FREERTOS_Init+0x8c>)
 800532a:	2100      	movs	r1, #0
	UART1TaskHandle = osThreadNew(UART1_task, NULL, &UART1Task_attributes);
 800532c:	6018      	str	r0, [r3, #0]
	Task4_20mAscanHandle = osThreadNew(ADC_4_20mApolling, NULL,
 800532e:	481b      	ldr	r0, [pc, #108]	; (800539c <MX_FREERTOS_Init+0x90>)
 8005330:	f008 fdd2 	bl	800ded8 <osThreadNew>
 8005334:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <MX_FREERTOS_Init+0x94>)
	myTaskMasterHandle = osThreadNew(StartTaskMaster, NULL,
 8005336:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <MX_FREERTOS_Init+0x98>)
 8005338:	2100      	movs	r1, #0
	Task4_20mAscanHandle = osThreadNew(ADC_4_20mApolling, NULL,
 800533a:	6018      	str	r0, [r3, #0]
	myTaskMasterHandle = osThreadNew(StartTaskMaster, NULL,
 800533c:	481a      	ldr	r0, [pc, #104]	; (80053a8 <MX_FREERTOS_Init+0x9c>)
 800533e:	f008 fdcb 	bl	800ded8 <osThreadNew>
 8005342:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <MX_FREERTOS_Init+0xa0>)
	ExternalFlashHandle = osThreadNew(external_flash, NULL,
 8005344:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <MX_FREERTOS_Init+0xa4>)
 8005346:	2100      	movs	r1, #0
	myTaskMasterHandle = osThreadNew(StartTaskMaster, NULL,
 8005348:	6018      	str	r0, [r3, #0]
	ExternalFlashHandle = osThreadNew(external_flash, NULL,
 800534a:	481a      	ldr	r0, [pc, #104]	; (80053b4 <MX_FREERTOS_Init+0xa8>)
 800534c:	f008 fdc4 	bl	800ded8 <osThreadNew>
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <MX_FREERTOS_Init+0xac>)
	UARTSendHandle = osThreadNew(UART_Send, NULL, &UARTSend_attributes);
 8005352:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <MX_FREERTOS_Init+0xb0>)
 8005354:	2100      	movs	r1, #0
	ExternalFlashHandle = osThreadNew(external_flash, NULL,
 8005356:	6018      	str	r0, [r3, #0]
	UARTSendHandle = osThreadNew(UART_Send, NULL, &UARTSend_attributes);
 8005358:	4819      	ldr	r0, [pc, #100]	; (80053c0 <MX_FREERTOS_Init+0xb4>)
 800535a:	f008 fdbd 	bl	800ded8 <osThreadNew>
 800535e:	4b19      	ldr	r3, [pc, #100]	; (80053c4 <MX_FREERTOS_Init+0xb8>)
	PIDHandle = osThreadNew(PIDControl, NULL, &PID_attributes);
 8005360:	4a19      	ldr	r2, [pc, #100]	; (80053c8 <MX_FREERTOS_Init+0xbc>)
 8005362:	2100      	movs	r1, #0
	UARTSendHandle = osThreadNew(UART_Send, NULL, &UARTSend_attributes);
 8005364:	6018      	str	r0, [r3, #0]
	PIDHandle = osThreadNew(PIDControl, NULL, &PID_attributes);
 8005366:	4819      	ldr	r0, [pc, #100]	; (80053cc <MX_FREERTOS_Init+0xc0>)
 8005368:	f008 fdb6 	bl	800ded8 <osThreadNew>
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <MX_FREERTOS_Init+0xc4>)
	PumpsSchedulerHandle = osThreadNew(Pumps_Scheduler, NULL,
 800536e:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <MX_FREERTOS_Init+0xc8>)
 8005370:	2100      	movs	r1, #0
	PIDHandle = osThreadNew(PIDControl, NULL, &PID_attributes);
 8005372:	6018      	str	r0, [r3, #0]
	PumpsSchedulerHandle = osThreadNew(Pumps_Scheduler, NULL,
 8005374:	4818      	ldr	r0, [pc, #96]	; (80053d8 <MX_FREERTOS_Init+0xcc>)
 8005376:	f008 fdaf 	bl	800ded8 <osThreadNew>
 800537a:	4b18      	ldr	r3, [pc, #96]	; (80053dc <MX_FREERTOS_Init+0xd0>)
 800537c:	6018      	str	r0, [r3, #0]
}
 800537e:	bd08      	pop	{r3, pc}
 8005380:	08015ce0 	.word	0x08015ce0
 8005384:	08002e59 	.word	0x08002e59
 8005388:	2403efd0 	.word	0x2403efd0
 800538c:	08015c98 	.word	0x08015c98
 8005390:	08002ff9 	.word	0x08002ff9
 8005394:	2403efac 	.word	0x2403efac
 8005398:	08015c74 	.word	0x08015c74
 800539c:	08003b19 	.word	0x08003b19
 80053a0:	2403efa8 	.word	0x2403efa8
 80053a4:	08015d04 	.word	0x08015d04
 80053a8:	08003bf9 	.word	0x08003bf9
 80053ac:	2403eff0 	.word	0x2403eff0
 80053b0:	08015c08 	.word	0x08015c08
 80053b4:	08003d29 	.word	0x08003d29
 80053b8:	2403ef74 	.word	0x2403ef74
 80053bc:	08015cbc 	.word	0x08015cbc
 80053c0:	08004141 	.word	0x08004141
 80053c4:	2403efb0 	.word	0x2403efb0
 80053c8:	08015c2c 	.word	0x08015c2c
 80053cc:	08004a75 	.word	0x08004a75
 80053d0:	2403ef84 	.word	0x2403ef84
 80053d4:	08015c50 	.word	0x08015c50
 80053d8:	080051d5 	.word	0x080051d5
 80053dc:	2403ef88 	.word	0x2403ef88

080053e0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80053e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e2:	2214      	movs	r2, #20
{
 80053e4:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e6:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fpresent_LED_GPIO_Port, Fpresent_LED_Pin, GPIO_PIN_RESET);
 80053e8:	4d40      	ldr	r5, [pc, #256]	; (80054ec <MX_GPIO_Init+0x10c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ea:	eb0d 0002 	add.w	r0, sp, r2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_RST_Pin|ESP32_IO0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Dout1_Pin|Dout2_Pin|Dout3_Pin, GPIO_PIN_RESET);
 80053ee:	4e40      	ldr	r6, [pc, #256]	; (80054f0 <MX_GPIO_Init+0x110>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f0:	f00c fbca 	bl	8011b88 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053f4:	4b3f      	ldr	r3, [pc, #252]	; (80054f4 <MX_GPIO_Init+0x114>)
  HAL_GPIO_WritePin(Fpresent_LED_GPIO_Port, Fpresent_LED_Pin, GPIO_PIN_RESET);
 80053f6:	4628      	mov	r0, r5
 80053f8:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Fpresent_LED_Pin|ESP32_RST_Pin|ESP32_IO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fe:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005400:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005402:	f042 0210 	orr.w	r2, r2, #16
 8005406:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800540a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800540e:	f002 0210 	and.w	r2, r2, #16
 8005412:	9200      	str	r2, [sp, #0]
 8005414:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005416:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800541a:	f042 0204 	orr.w	r2, r2, #4
 800541e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005422:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005426:	f002 0204 	and.w	r2, r2, #4
 800542a:	9201      	str	r2, [sp, #4]
 800542c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800542e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800543a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800543e:	f002 0201 	and.w	r2, r2, #1
 8005442:	9202      	str	r2, [sp, #8]
 8005444:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005446:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800544a:	f042 0202 	orr.w	r2, r2, #2
 800544e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005452:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005456:	f002 0202 	and.w	r2, r2, #2
 800545a:	9203      	str	r2, [sp, #12]
 800545c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800545e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005462:	f042 0208 	orr.w	r2, r2, #8
 8005466:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(Fpresent_LED_GPIO_Port, Fpresent_LED_Pin, GPIO_PIN_RESET);
 800546a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800546c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	9304      	str	r3, [sp, #16]
 8005476:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(Fpresent_LED_GPIO_Port, Fpresent_LED_Pin, GPIO_PIN_RESET);
 8005478:	f003 fd1a 	bl	8008eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, ESP32_RST_Pin|ESP32_IO0_Pin, GPIO_PIN_SET);
 800547c:	4628      	mov	r0, r5
 800547e:	2201      	movs	r2, #1
 8005480:	2130      	movs	r1, #48	; 0x30
 8005482:	f003 fd15 	bl	8008eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, Dout1_Pin|Dout2_Pin|Dout3_Pin, GPIO_PIN_RESET);
 8005486:	2200      	movs	r2, #0
 8005488:	4630      	mov	r0, r6
 800548a:	2107      	movs	r1, #7
 800548c:	f003 fd10 	bl	8008eb0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005490:	2338      	movs	r3, #56	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005492:	a905      	add	r1, sp, #20
 8005494:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005496:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800549e:	f003 fb77 	bl	8008b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Din4_Pin|Din1_Pin|Din2_Pin;
 80054a2:	2332      	movs	r3, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054a4:	a905      	add	r1, sp, #20
 80054a6:	4814      	ldr	r0, [pc, #80]	; (80054f8 <MX_GPIO_Init+0x118>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054aa:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054ae:	f003 fb6f 	bl	8008b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Din3_Pin;
 80054b2:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Din3_GPIO_Port, &GPIO_InitStruct);
 80054b4:	a905      	add	r1, sp, #20
 80054b6:	4811      	ldr	r0, [pc, #68]	; (80054fc <MX_GPIO_Init+0x11c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054ba:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(Din3_GPIO_Port, &GPIO_InitStruct);
 80054be:	f003 fb67 	bl	8008b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HWid2_Pin|HWid0_Pin|HWid1_Pin;
 80054c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c6:	a905      	add	r1, sp, #20
 80054c8:	480d      	ldr	r0, [pc, #52]	; (8005500 <MX_GPIO_Init+0x120>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054ca:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80054ce:	2302      	movs	r3, #2
 80054d0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d2:	f003 fb5d 	bl	8008b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Dout1_Pin|Dout2_Pin|Dout3_Pin;
 80054d6:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054d8:	a905      	add	r1, sp, #20
 80054da:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054dc:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e0:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054e4:	f003 fb54 	bl	8008b90 <HAL_GPIO_Init>

}
 80054e8:	b00b      	add	sp, #44	; 0x2c
 80054ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ec:	58021000 	.word	0x58021000
 80054f0:	58020c00 	.word	0x58020c00
 80054f4:	58024400 	.word	0x58024400
 80054f8:	58020800 	.word	0x58020800
 80054fc:	58020000 	.word	0x58020000
 8005500:	58020400 	.word	0x58020400

08005504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005504:	b530      	push	{r4, r5, lr}
 8005506:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005508:	224c      	movs	r2, #76	; 0x4c
 800550a:	2100      	movs	r1, #0
 800550c:	a809      	add	r0, sp, #36	; 0x24
 800550e:	f00c fb3b 	bl	8011b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005512:	2220      	movs	r2, #32
 8005514:	2100      	movs	r1, #0
 8005516:	a801      	add	r0, sp, #4
 8005518:	f00c fb36 	bl	8011b88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800551c:	2002      	movs	r0, #2
 800551e:	f003 fd3b 	bl	8008f98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005522:	2300      	movs	r3, #0
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <SystemClock_Config+0xcc>)
 8005528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4a28      	ldr	r2, [pc, #160]	; (80055d4 <SystemClock_Config+0xd0>)
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	6993      	ldr	r3, [r2, #24]
 800553c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005544:	6193      	str	r3, [r2, #24]
 8005546:	6993      	ldr	r3, [r2, #24]
 8005548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005550:	6993      	ldr	r3, [r2, #24]
 8005552:	049c      	lsls	r4, r3, #18
 8005554:	d5fc      	bpl.n	8005550 <SystemClock_Config+0x4c>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005556:	f003 fd0f 	bl	8008f78 <HAL_PWR_EnableBkUpAccess>
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800555a:	2402      	movs	r4, #2
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800555c:	f001 fba6 	bl	8006cac <HAL_GetREVID>
 8005560:	4a1d      	ldr	r2, [pc, #116]	; (80055d8 <SystemClock_Config+0xd4>)
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005562:	2010      	movs	r0, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005564:	2540      	movs	r5, #64	; 0x40
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005566:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005568:	f023 0318 	bic.w	r3, r3, #24
 800556c:	6713      	str	r3, [r2, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800556e:	2326      	movs	r3, #38	; 0x26
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005570:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005572:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8005574:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005576:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLP = 4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005578:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800557a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800557c:	e9cd 0214 	strd	r0, r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 4;
 8005580:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005582:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8005584:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005588:	e9cd 2416 	strd	r2, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800558c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800558e:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005590:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005594:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005598:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800559a:	f004 f909 	bl	80097b0 <HAL_RCC_OscConfig>
 800559e:	b108      	cbz	r0, 80055a4 <SystemClock_Config+0xa0>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80055a2:	e7fe      	b.n	80055a2 <SystemClock_Config+0x9e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055a4:	2303      	movs	r3, #3
 80055a6:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055a8:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055aa:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80055ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80055b2:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80055b6:	e9cd 3007 	strd	r3, r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055ba:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80055bc:	e9cd 5505 	strd	r5, r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055c0:	f004 fc44 	bl	8009e4c <HAL_RCC_ClockConfig>
 80055c4:	b108      	cbz	r0, 80055ca <SystemClock_Config+0xc6>
 80055c6:	b672      	cpsid	i
  while (1)
 80055c8:	e7fe      	b.n	80055c8 <SystemClock_Config+0xc4>
}
 80055ca:	b01d      	add	sp, #116	; 0x74
 80055cc:	bd30      	pop	{r4, r5, pc}
 80055ce:	bf00      	nop
 80055d0:	58000400 	.word	0x58000400
 80055d4:	58024800 	.word	0x58024800
 80055d8:	58024400 	.word	0x58024400

080055dc <PeriphCommonClock_Config>:
{
 80055dc:	b500      	push	{lr}
 80055de:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055e0:	22a0      	movs	r2, #160	; 0xa0
 80055e2:	2100      	movs	r1, #0
 80055e4:	a808      	add	r0, sp, #32
 80055e6:	f00c facf 	bl	8011b88 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80055ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80055ee:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80055f0:	2102      	movs	r1, #2
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055f2:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80055f4:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	2220      	movs	r2, #32
 80055fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8005600:	2308      	movs	r3, #8
  PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8005602:	e9cd 3304 	strd	r3, r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8005606:	23c0      	movs	r3, #192	; 0xc0
 8005608:	e9cd 1306 	strd	r1, r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800560c:	f004 fea4 	bl	800a358 <HAL_RCCEx_PeriphCLKConfig>
 8005610:	b108      	cbz	r0, 8005616 <PeriphCommonClock_Config+0x3a>
 8005612:	b672      	cpsid	i
  while (1)
 8005614:	e7fe      	b.n	8005614 <PeriphCommonClock_Config+0x38>
}
 8005616:	b031      	add	sp, #196	; 0xc4
 8005618:	f85d fb04 	ldr.w	pc, [sp], #4

0800561c <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800561c:	4b4f      	ldr	r3, [pc, #316]	; (800575c <main+0x140>)
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
{
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	d111      	bne.n	800564c <main+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005628:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800562c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005630:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005634:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005638:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800563c:	695a      	ldr	r2, [r3, #20]
 800563e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005642:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005644:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005648:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800564c:	4a43      	ldr	r2, [pc, #268]	; (800575c <main+0x140>)
 800564e:	6953      	ldr	r3, [r2, #20]
 8005650:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8005654:	d123      	bne.n	800569e <main+0x82>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005656:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800565a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800565e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005662:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005666:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800566a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800566e:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005670:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005674:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005676:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800567a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800567c:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8005680:	d2f9      	bcs.n	8005676 <main+0x5a>
    } while(sets-- != 0U);
 8005682:	3b20      	subs	r3, #32
 8005684:	f113 0f20 	cmn.w	r3, #32
 8005688:	d1f2      	bne.n	8005670 <main+0x54>
 800568a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800568e:	6953      	ldr	r3, [r2, #20]
 8005690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005694:	6153      	str	r3, [r2, #20]
 8005696:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800569a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800569e:	f001 fab3 	bl	8006c08 <HAL_Init>
	 storedAlarmsNumber =read_backup_register(numberOfAlarmsRegNum) ;
 80056a2:	4c2f      	ldr	r4, [pc, #188]	; (8005760 <main+0x144>)
  SystemClock_Config();
 80056a4:	f7ff ff2e 	bl	8005504 <SystemClock_Config>
  PeriphCommonClock_Config();
 80056a8:	f7ff ff98 	bl	80055dc <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80056ac:	f7ff fe98 	bl	80053e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80056b0:	f7fc fe14 	bl	80022dc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80056b4:	f000 ffb4 	bl	8006620 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80056b8:	f000 ffe4 	bl	8006684 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80056bc:	f001 f848 	bl	8006750 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80056c0:	f000 ff4e 	bl	8006560 <MX_TIM4_Init>
  MX_USB_OTG_FS_HCD_Init();
 80056c4:	f001 fa02 	bl	8006acc <MX_USB_OTG_FS_HCD_Init>
  MX_ADC1_Init();
 80056c8:	f7fc faa6 	bl	8001c18 <MX_ADC1_Init>
  MX_QUADSPI_Init();
 80056cc:	f000 f868 	bl	80057a0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80056d0:	f000 f942 	bl	8005958 <MX_RTC_Init>
  MX_ADC2_Init();
 80056d4:	f7fc faea 	bl	8001cac <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80056d8:	f001 f806 	bl	80066e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80056dc:	f000 feb4 	bl	8006448 <MX_TIM2_Init>
	 ModbusMasterHandler2Init();
 80056e0:	f7fc f8ca 	bl	8001878 <ModbusMasterHandler2Init>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80056e4:	2104      	movs	r1, #4
 80056e6:	481f      	ldr	r0, [pc, #124]	; (8005764 <main+0x148>)
 80056e8:	f006 fd9e 	bl	800c228 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80056ec:	2108      	movs	r1, #8
 80056ee:	481d      	ldr	r0, [pc, #116]	; (8005764 <main+0x148>)
 80056f0:	f006 fd9a 	bl	800c228 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80056f4:	210c      	movs	r1, #12
 80056f6:	481b      	ldr	r0, [pc, #108]	; (8005764 <main+0x148>)
 80056f8:	f006 fd96 	bl	800c228 <HAL_TIM_PWM_Start>
	delete_pump_data_from_backup_registers();
 80056fc:	f7fc fc22 	bl	8001f44 <delete_pump_data_from_backup_registers>
	restore_factory_page_data();
 8005700:	f7fc fcf0 	bl	80020e4 <restore_factory_page_data>
	restore_internal_system_data();
 8005704:	f7fc fd96 	bl	8002234 <restore_internal_system_data>
	restore_pump_data();
 8005708:	f7fc fc22 	bl	8001f50 <restore_pump_data>
	numberOfSchedulerRecords = read_backup_register(datedSchedRegisterNumber);
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <main+0x14c>)
 800570e:	7818      	ldrb	r0, [r3, #0]
 8005710:	f7fc fbea 	bl	8001ee8 <read_backup_register>
 8005714:	4b15      	ldr	r3, [pc, #84]	; (800576c <main+0x150>)
 8005716:	6018      	str	r0, [r3, #0]
	numberOfWeeklyRecords = read_backup_register(numberOfWeeklyRecordsRegNum);
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <main+0x154>)
 800571a:	7818      	ldrb	r0, [r3, #0]
 800571c:	f7fc fbe4 	bl	8001ee8 <read_backup_register>
 8005720:	4b14      	ldr	r3, [pc, #80]	; (8005774 <main+0x158>)
 8005722:	6018      	str	r0, [r3, #0]
	 storedAlarmsNumber =read_backup_register(numberOfAlarmsRegNum) ;
 8005724:	4b14      	ldr	r3, [pc, #80]	; (8005778 <main+0x15c>)
 8005726:	7818      	ldrb	r0, [r3, #0]
 8005728:	f7fc fbde 	bl	8001ee8 <read_backup_register>
 800572c:	6020      	str	r0, [r4, #0]
	ExtractRecords(&hqspi);
 800572e:	4813      	ldr	r0, [pc, #76]	; (800577c <main+0x160>)
 8005730:	f7fd f86e 	bl	8002810 <ExtractRecords>
	ExtractWeeklyRecords(&hqspi);
 8005734:	4811      	ldr	r0, [pc, #68]	; (800577c <main+0x160>)
 8005736:	f7fc ff5f 	bl	80025f8 <ExtractWeeklyRecords>
	HAL_StatusTypeDef statusReadAlarms = read_alarm_records(
 800573a:	4622      	mov	r2, r4
 800573c:	4910      	ldr	r1, [pc, #64]	; (8005780 <main+0x164>)
 800573e:	4811      	ldr	r0, [pc, #68]	; (8005784 <main+0x168>)
 8005740:	f7fc fe10 	bl	8002364 <read_alarm_records>
	compare_rtc();
 8005744:	f7fc fee0 	bl	8002508 <compare_rtc>
		compare_weekly_rtc();
 8005748:	f7fc fe68 	bl	800241c <compare_weekly_rtc>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800574c:	f008 fb98 	bl	800de80 <osKernelInitialize>
  MX_FREERTOS_Init();
 8005750:	f7ff fddc 	bl	800530c <MX_FREERTOS_Init>
  osKernelStart();
 8005754:	f008 fba6 	bl	800dea4 <osKernelStart>
  while (1)
 8005758:	e7fe      	b.n	8005758 <main+0x13c>
 800575a:	bf00      	nop
 800575c:	e000ed00 	.word	0xe000ed00
 8005760:	24002688 	.word	0x24002688
 8005764:	24040180 	.word	0x24040180
 8005768:	24000001 	.word	0x24000001
 800576c:	24000010 	.word	0x24000010
 8005770:	24000018 	.word	0x24000018
 8005774:	24000014 	.word	0x24000014
 8005778:	2400000c 	.word	0x2400000c
 800577c:	2403ffc0 	.word	0x2403ffc0
 8005780:	2403f33e 	.word	0x2403f33e
 8005784:	017d7840 	.word	0x017d7840

08005788 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM17) {
 8005788:	6802      	ldr	r2, [r0, #0]
 800578a:	4b03      	ldr	r3, [pc, #12]	; (8005798 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800578c:	429a      	cmp	r2, r3
 800578e:	d101      	bne.n	8005794 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8005790:	f001 ba68 	b.w	8006c64 <HAL_IncTick>
}
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40014800 	.word	0x40014800

0800579c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800579c:	b672      	cpsid	i
  while (1)
 800579e:	e7fe      	b.n	800579e <Error_Handler+0x2>

080057a0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80057a0:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80057a2:	4813      	ldr	r0, [pc, #76]	; (80057f0 <MX_QUADSPI_Init+0x50>)
  hqspi.Init.ClockPrescaler = 4;
 80057a4:	2304      	movs	r3, #4
 80057a6:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <MX_QUADSPI_Init+0x54>)
  hqspi.Init.FifoThreshold = 4;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
  hqspi.Init.FlashSize = 24;
 80057a8:	2110      	movs	r1, #16
  hqspi.Init.FifoThreshold = 4;
 80057aa:	6083      	str	r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80057ac:	f44f 6ca0 	mov.w	ip, #1280	; 0x500
  hqspi.Init.ClockPrescaler = 4;
 80057b0:	e9c0 2300 	strd	r2, r3, [r0]
  hqspi.Init.FlashSize = 24;
 80057b4:	2318      	movs	r3, #24
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80057b6:	2280      	movs	r2, #128	; 0x80
  hqspi.Init.FlashSize = 24;
 80057b8:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80057bc:	2300      	movs	r3, #0
 80057be:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80057c2:	e9c0 2307 	strd	r2, r3, [r0, #28]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80057c6:	f003 fcf5 	bl	80091b4 <HAL_QSPI_Init>
 80057ca:	b108      	cbz	r0, 80057d0 <MX_QUADSPI_Init+0x30>
  {
    Error_Handler();
 80057cc:	f7ff ffe6 	bl	800579c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 80057d0:	4807      	ldr	r0, [pc, #28]	; (80057f0 <MX_QUADSPI_Init+0x50>)
 80057d2:	f003 fd3d 	bl	8009250 <HAL_QSPI_DeInit>
 80057d6:	b108      	cbz	r0, 80057dc <MX_QUADSPI_Init+0x3c>
	  Error_Handler();
 80057d8:	f7ff ffe0 	bl	800579c <Error_Handler>
     }
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80057dc:	4804      	ldr	r0, [pc, #16]	; (80057f0 <MX_QUADSPI_Init+0x50>)
 80057de:	f003 fce9 	bl	80091b4 <HAL_QSPI_Init>
 80057e2:	b118      	cbz	r0, 80057ec <MX_QUADSPI_Init+0x4c>
    {
      Error_Handler();
    }
  /* USER CODE END QUADSPI_Init 2 */

}
 80057e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      Error_Handler();
 80057e8:	f7ff bfd8 	b.w	800579c <Error_Handler>
}
 80057ec:	bd08      	pop	{r3, pc}
 80057ee:	bf00      	nop
 80057f0:	2403ffc0 	.word	0x2403ffc0
 80057f4:	52005000 	.word	0x52005000

080057f8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80057f8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057fa:	2214      	movs	r2, #20
{
 80057fc:	b0ba      	sub	sp, #232	; 0xe8
 80057fe:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005800:	2100      	movs	r1, #0
 8005802:	eb0d 0002 	add.w	r0, sp, r2
 8005806:	f00c f9bf 	bl	8011b88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800580a:	22c0      	movs	r2, #192	; 0xc0
 800580c:	2100      	movs	r1, #0
 800580e:	a80a      	add	r0, sp, #40	; 0x28
 8005810:	f00c f9ba 	bl	8011b88 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8005814:	6822      	ldr	r2, [r4, #0]
 8005816:	4b36      	ldr	r3, [pc, #216]	; (80058f0 <HAL_QSPI_MspInit+0xf8>)
 8005818:	429a      	cmp	r2, r3
 800581a:	d167      	bne.n	80058ec <HAL_QSPI_MspInit+0xf4>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800581c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005820:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005822:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8005824:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005828:	f004 fd96 	bl	800a358 <HAL_RCCEx_PeriphCLKConfig>
 800582c:	b108      	cbz	r0, 8005832 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800582e:	f7ff ffb5 	bl	800579c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005832:	4b30      	ldr	r3, [pc, #192]	; (80058f4 <HAL_QSPI_MspInit+0xfc>)
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005834:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005836:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005838:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800583a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800583e:	a905      	add	r1, sp, #20
 8005840:	482d      	ldr	r0, [pc, #180]	; (80058f8 <HAL_QSPI_MspInit+0x100>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005846:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800584a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800584e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005852:	9201      	str	r2, [sp, #4]
 8005854:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005856:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800585a:	f042 0202 	orr.w	r2, r2, #2
 800585e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005862:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005866:	f002 0202 	and.w	r2, r2, #2
 800586a:	9202      	str	r2, [sp, #8]
 800586c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800586e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005872:	f042 0210 	orr.w	r2, r2, #16
 8005876:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800587a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800587e:	f002 0210 	and.w	r2, r2, #16
 8005882:	9203      	str	r2, [sp, #12]
 8005884:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005886:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800588a:	f042 0204 	orr.w	r2, r2, #4
 800588e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005896:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a0:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058a2:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a6:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058aa:	f003 f971 	bl	8008b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80058ae:	f44f 63f0 	mov.w	r3, #1920	; 0x780
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058b2:	a905      	add	r1, sp, #20
 80058b4:	4811      	ldr	r0, [pc, #68]	; (80058fc <HAL_QSPI_MspInit+0x104>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b6:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80058ba:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058bc:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80058c0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058c2:	f003 f965 	bl	8008b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80058c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058ca:	a905      	add	r1, sp, #20
 80058cc:	480c      	ldr	r0, [pc, #48]	; (8005900 <HAL_QSPI_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80058ce:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d0:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d4:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058d8:	f003 f95a 	bl	8008b90 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80058dc:	205c      	movs	r0, #92	; 0x5c
 80058de:	4622      	mov	r2, r4
 80058e0:	2105      	movs	r1, #5
 80058e2:	f002 f8b1 	bl	8007a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80058e6:	205c      	movs	r0, #92	; 0x5c
 80058e8:	f002 f8e0 	bl	8007aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80058ec:	b03a      	add	sp, #232	; 0xe8
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	52005000 	.word	0x52005000
 80058f4:	58024400 	.word	0x58024400
 80058f8:	58020400 	.word	0x58020400
 80058fc:	58021000 	.word	0x58021000
 8005900:	58020800 	.word	0x58020800

08005904 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{

  if(qspiHandle->Instance==QUADSPI)
 8005904:	6802      	ldr	r2, [r0, #0]
{
 8005906:	b508      	push	{r3, lr}
  if(qspiHandle->Instance==QUADSPI)
 8005908:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <HAL_QSPI_MspDeInit+0x40>)
 800590a:	429a      	cmp	r2, r3
 800590c:	d119      	bne.n	8005942 <HAL_QSPI_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800590e:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <HAL_QSPI_MspDeInit+0x44>)
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8005910:	2104      	movs	r1, #4
 8005912:	480e      	ldr	r0, [pc, #56]	; (800594c <HAL_QSPI_MspDeInit+0x48>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8005914:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8005918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800591c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8005920:	f003 fa20 	bl	8008d64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10);
 8005924:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8005928:	4809      	ldr	r0, [pc, #36]	; (8005950 <HAL_QSPI_MspDeInit+0x4c>)
 800592a:	f003 fa1b 	bl	8008d64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 800592e:	4809      	ldr	r0, [pc, #36]	; (8005954 <HAL_QSPI_MspDeInit+0x50>)
 8005930:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005934:	f003 fa16 	bl	8008d64 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8005938:	205c      	movs	r0, #92	; 0x5c
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 800593a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 800593e:	f002 b8c3 	b.w	8007ac8 <HAL_NVIC_DisableIRQ>
}
 8005942:	bd08      	pop	{r3, pc}
 8005944:	52005000 	.word	0x52005000
 8005948:	58024400 	.word	0x58024400
 800594c:	58020400 	.word	0x58020400
 8005950:	58021000 	.word	0x58021000
 8005954:	58020800 	.word	0x58020800

08005958 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005958:	b508      	push	{r3, lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800595a:	480a      	ldr	r0, [pc, #40]	; (8005984 <MX_RTC_Init+0x2c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800595c:	2300      	movs	r3, #0
 800595e:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <MX_RTC_Init+0x30>)
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8005960:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005962:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005964:	6143      	str	r3, [r0, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005966:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 800596a:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800596c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hrtc.Init.SynchPrediv = 255;
 8005970:	e9c0 1202 	strd	r1, r2, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005974:	f005 fdec 	bl	800b550 <HAL_RTC_Init>
 8005978:	b118      	cbz	r0, 8005982 <MX_RTC_Init+0x2a>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800597a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800597e:	f7ff bf0d 	b.w	800579c <Error_Handler>
}
 8005982:	bd08      	pop	{r3, pc}
 8005984:	2404000c 	.word	0x2404000c
 8005988:	58004000 	.word	0x58004000

0800598c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800598c:	b510      	push	{r4, lr}
 800598e:	b0b0      	sub	sp, #192	; 0xc0
 8005990:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005992:	22c0      	movs	r2, #192	; 0xc0
 8005994:	2100      	movs	r1, #0
 8005996:	4668      	mov	r0, sp
 8005998:	f00c f8f6 	bl	8011b88 <memset>
  if(rtcHandle->Instance==RTC)
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <HAL_RTC_MspInit+0x44>)
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d112      	bne.n	80059ca <HAL_RTC_MspInit+0x3e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80059a4:	2300      	movs	r3, #0
 80059a6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059aa:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80059ac:	e9cd 2300 	strd	r2, r3, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80059b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059b4:	932d      	str	r3, [sp, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059b6:	f004 fccf 	bl	800a358 <HAL_RCCEx_PeriphCLKConfig>
 80059ba:	b108      	cbz	r0, 80059c0 <HAL_RTC_MspInit+0x34>
    {
      Error_Handler();
 80059bc:	f7ff feee 	bl	800579c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80059c0:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <HAL_RTC_MspInit+0x48>)
 80059c2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80059c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80059ca:	b030      	add	sp, #192	; 0xc0
 80059cc:	bd10      	pop	{r4, pc}
 80059ce:	bf00      	nop
 80059d0:	58004000 	.word	0x58004000
 80059d4:	58024400 	.word	0x58024400

080059d8 <Get_RTC_Values>:

/* USER CODE BEGIN 1 */
 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;
void Get_RTC_Values(void)
{
 80059d8:	b508      	push	{r3, lr}
	// Read the current time
	if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80059da:	2200      	movs	r2, #0
 80059dc:	4908      	ldr	r1, [pc, #32]	; (8005a00 <Get_RTC_Values+0x28>)
 80059de:	4809      	ldr	r0, [pc, #36]	; (8005a04 <Get_RTC_Values+0x2c>)
 80059e0:	f005 fec6 	bl	800b770 <HAL_RTC_GetTime>
 80059e4:	b108      	cbz	r0, 80059ea <Get_RTC_Values+0x12>
	{
		// Handle the error if required
		Error_Handler();
 80059e6:	f7ff fed9 	bl	800579c <Error_Handler>
	}

	// Read the current date
	if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80059ea:	2200      	movs	r2, #0
 80059ec:	4906      	ldr	r1, [pc, #24]	; (8005a08 <Get_RTC_Values+0x30>)
 80059ee:	4805      	ldr	r0, [pc, #20]	; (8005a04 <Get_RTC_Values+0x2c>)
 80059f0:	f005 fee1 	bl	800b7b6 <HAL_RTC_GetDate>
 80059f4:	b118      	cbz	r0, 80059fe <Get_RTC_Values+0x26>
		Error_Handler();
	}
	// Print the current time and date
//	    printf("Current Time: %02d:%02d:%02d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
//	    printf("Current Date: %02d-%02d-%04d\n", sDate.Date, sDate.Month, 2000 + sDate.Year);  // Assuming the year is in the 2000s
}
 80059f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 80059fa:	f7ff becf 	b.w	800579c <Error_Handler>
}
 80059fe:	bd08      	pop	{r3, pc}
 8005a00:	24040034 	.word	0x24040034
 8005a04:	2404000c 	.word	0x2404000c
 8005a08:	24040030 	.word	0x24040030

08005a0c <Set_RTC_Values>:


void Set_RTC_Values(uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute,uint8_t weekDay)
{
 8005a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	4604      	mov	r4, r0
 8005a12:	460e      	mov	r6, r1
 8005a14:	4615      	mov	r5, r2

    RTC_TimeTypeDef sTime = {0};
 8005a16:	2100      	movs	r1, #0
 8005a18:	2214      	movs	r2, #20
 8005a1a:	a801      	add	r0, sp, #4
{
 8005a1c:	461f      	mov	r7, r3
    RTC_TimeTypeDef sTime = {0};
 8005a1e:	f00c f8b3 	bl	8011b88 <memset>
    RTC_DateTypeDef sDate = {0};

    // Set the time structure fields
    sTime.Hours   = hour;
    sTime.Minutes = minute;
 8005a22:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    sTime.Seconds = 0;  // Assuming you want to reset seconds to 0

    // Set the date structure fields
    sDate.Year  = (uint8_t)(year - 2000);  // Extract the last two digits of the year
 8005a26:	3430      	adds	r4, #48	; 0x30
    sDate.Date  = day;
    sDate.WeekDay=weekDay;
    //sDate.WeekDay=RTC_WEEKDAY_SATURDAY;

    // Set the new time
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005a28:	2200      	movs	r2, #0
    sTime.Minutes = minute;
 8005a2a:	f88d 3005 	strb.w	r3, [sp, #5]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005a2e:	a901      	add	r1, sp, #4
    sDate.WeekDay=weekDay;
 8005a30:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005a34:	480c      	ldr	r0, [pc, #48]	; (8005a68 <Set_RTC_Values+0x5c>)
    sTime.Hours   = hour;
 8005a36:	f88d 7004 	strb.w	r7, [sp, #4]
    sDate.Year  = (uint8_t)(year - 2000);  // Extract the last two digits of the year
 8005a3a:	f88d 4003 	strb.w	r4, [sp, #3]
    sDate.Month = month;
 8005a3e:	f88d 6001 	strb.w	r6, [sp, #1]
    sDate.Date  = day;
 8005a42:	f88d 5002 	strb.w	r5, [sp, #2]
    sDate.WeekDay=weekDay;
 8005a46:	f88d 3000 	strb.w	r3, [sp]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005a4a:	f005 fdd8 	bl	800b5fe <HAL_RTC_SetTime>
 8005a4e:	b108      	cbz	r0, 8005a54 <Set_RTC_Values+0x48>
    {
        // Handle the error if required
        Error_Handler();
 8005a50:	f7ff fea4 	bl	800579c <Error_Handler>
    }

    // Set the new date
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005a54:	2200      	movs	r2, #0
 8005a56:	4669      	mov	r1, sp
 8005a58:	4803      	ldr	r0, [pc, #12]	; (8005a68 <Set_RTC_Values+0x5c>)
 8005a5a:	f005 fe32 	bl	800b6c2 <HAL_RTC_SetDate>
 8005a5e:	b108      	cbz	r0, 8005a64 <Set_RTC_Values+0x58>
    {
        // Handle the error if required
        Error_Handler();
 8005a60:	f7ff fe9c 	bl	800579c <Error_Handler>
    }


}
 8005a64:	b007      	add	sp, #28
 8005a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a68:	2404000c 	.word	0x2404000c

08005a6c <S25FL256S_WriteEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t S25FL256S_WriteEnable(QSPI_HandleTypeDef *Ctx, S25FL256S_Interface_t Mode)
{
 8005a6c:	b510      	push	{r4, lr}
  QSPI_AutoPollingTypeDef s_config;

  UNUSED(Mode); /* The command Write Enable is always 1-0-0 */

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8005a72:	b094      	sub	sp, #80	; 0x50
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a74:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8005a78:	4604      	mov	r4, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a7a:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = S25FL256S_WRITE_ENABLE_CMD;
 8005a7c:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a7e:	a906      	add	r1, sp, #24
  s_command.Instruction       = S25FL256S_WRITE_ENABLE_CMD;
 8005a80:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005a82:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a84:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8005a88:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8005a8a:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005a8c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005a8e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a92:	f003 fbee 	bl	8009272 <HAL_QSPI_Command>
 8005a96:	b9e0      	cbnz	r0, 8005ad2 <S25FL256S_WriteEnable+0x66>
  {
    return S25FL256S_ERROR;
  }
  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = S25FL256S_SR1_WREN;
 8005a98:	2302      	movs	r3, #2
  s_config.Mask            = S25FL256S_SR1_WREN;
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
 8005a9a:	2201      	movs	r2, #1
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_command.Instruction    = S25FL256S_READ_STATUS_REG1_CMD;
 8005a9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005aa0:	9004      	str	r0, [sp, #16]
  s_command.DataMode       = QSPI_DATA_1_LINE;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aa2:	4620      	mov	r0, r4
  s_config.Mask            = S25FL256S_SR1_WREN;
 8005aa4:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = S25FL256S_READ_STATUS_REG1_CMD;
 8005aae:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ab0:	466a      	mov	r2, sp
  s_command.Instruction    = S25FL256S_READ_STATUS_REG1_CMD;
 8005ab2:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8005ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aba:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8005abc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005abe:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ac2:	f003 fcd1 	bl	8009468 <HAL_QSPI_AutoPolling>
 8005ac6:	3800      	subs	r0, #0
 8005ac8:	bf18      	it	ne
 8005aca:	2001      	movne	r0, #1
 8005acc:	4240      	negs	r0, r0
  {
    return S25FL256S_ERROR;
  }

  return S25FL256S_OK;
}
 8005ace:	b014      	add	sp, #80	; 0x50
 8005ad0:	bd10      	pop	{r4, pc}
    return S25FL256S_ERROR;
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	e7fa      	b.n	8005ace <S25FL256S_WriteEnable+0x62>

08005ad8 <S25FL256S_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ 256
  * @retval QSPI memory status
  */
int32_t S25FL256S_PageProgram(QSPI_HandleTypeDef *Ctx, S25FL256S_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8005ad8:	b530      	push	{r4, r5, lr}
 8005ada:	4615      	mov	r5, r2
 8005adc:	b08f      	sub	sp, #60	; 0x3c
//    s_command.DataMode        = QSPI_DATA_4_LINES;
//    break;

  case S25FL256S_SPI_MODE :                   /* 1-1-1 commands, Power on H/W default setting */
  default :
    s_command.Instruction     = S25FL256S_PAGE_PROG_4_BYTE_ADDR_CMD;
 8005ade:	2212      	movs	r2, #18
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8005ae0:	f44f 7c80 	mov.w	ip, #256	; 0x100
    s_command.DataMode        = QSPI_DATA_1_LINE;
    break;
  }

  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.Address           = WriteAddr;
 8005ae4:	9301      	str	r3, [sp, #4]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005ae6:	2300      	movs	r3, #0
    s_command.Instruction     = S25FL256S_PAGE_PROG_4_BYTE_ADDR_CMD;
 8005ae8:	9200      	str	r2, [sp, #0]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8005aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aee:	4669      	mov	r1, sp
{
 8005af0:	4604      	mov	r4, r0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005af2:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles       = 0;
 8005af4:	9305      	str	r3, [sp, #20]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8005af6:	e9cd c206 	strd	ip, r2, [sp, #24]
    s_command.DataMode        = QSPI_DATA_1_LINE;
 8005afa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005afe:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005b00:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005b04:	9203      	str	r2, [sp, #12]
  s_command.NbData            = Size;
 8005b06:	9a12      	ldr	r2, [sp, #72]	; 0x48
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005b08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b0c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005b10:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b14:	f003 fbad 	bl	8009272 <HAL_QSPI_Command>
 8005b18:	b958      	cbnz	r0, 8005b32 <S25FL256S_PageProgram+0x5a>
  {
    return S25FL256S_ERROR;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(Ctx, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1e:	4629      	mov	r1, r5
 8005b20:	4620      	mov	r0, r4
 8005b22:	f003 fbe9 	bl	80092f8 <HAL_QSPI_Transmit>
 8005b26:	3800      	subs	r0, #0
 8005b28:	bf18      	it	ne
 8005b2a:	2001      	movne	r0, #1
 8005b2c:	4240      	negs	r0, r0
  {
    return S25FL256S_ERROR;
  }

  return S25FL256S_OK;
}
 8005b2e:	b00f      	add	sp, #60	; 0x3c
 8005b30:	bd30      	pop	{r4, r5, pc}
    return S25FL256S_ERROR;
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295
 8005b36:	e7fa      	b.n	8005b2e <S25FL256S_PageProgram+0x56>

08005b38 <S25FL256S_Enter4LinesDataMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t S25FL256S_Enter4LinesDataMode(QSPI_HandleTypeDef *Ctx, S25FL256S_Interface_t Mode)
{
 8005b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2], reg1;

  /* Initialize the read status register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = S25FL256S_READ_STATUS_REG1_CMD;
 8005b3c:	2305      	movs	r3, #5
{
 8005b3e:	b090      	sub	sp, #64	; 0x40
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005b40:	f44f 7880 	mov.w	r8, #256	; 0x100
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8005b44:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
  s_command.DummyCycles       = 0;
  s_command.NbData            = 1;
 8005b48:	2501      	movs	r5, #1
  s_command.Instruction       = S25FL256S_READ_STATUS_REG1_CMD;
 8005b4a:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005b4c:	2300      	movs	r3, #0
{
 8005b4e:	460e      	mov	r6, r1
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	a902      	add	r1, sp, #8
{
 8005b56:	4604      	mov	r4, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005b58:	f8cd 8020 	str.w	r8, [sp, #32]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8005b5c:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8005b5e:	9307      	str	r3, [sp, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005b60:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005b64:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005b68:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b6c:	f003 fb81 	bl	8009272 <HAL_QSPI_Command>
 8005b70:	b120      	cbz	r0, 8005b7c <S25FL256S_Enter4LinesDataMode+0x44>
  {
    return S25FL256S_ERROR;
 8005b72:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return S25FL256S_ERROR;
  }

  return S25FL256S_OK;
}
 8005b76:	b010      	add	sp, #64	; 0x40
 8005b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_QSPI_Receive(Ctx, &reg1, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b80:	f10d 0103 	add.w	r1, sp, #3
 8005b84:	4620      	mov	r0, r4
 8005b86:	f003 fc10 	bl	80093aa <HAL_QSPI_Receive>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d1f1      	bne.n	8005b72 <S25FL256S_Enter4LinesDataMode+0x3a>
	  reg[0] = reg1;
 8005b8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b92:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8005b96:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b98:	a902      	add	r1, sp, #8
	  reg[0] = reg1;
 8005b9a:	f88d 3004 	strb.w	r3, [sp, #4]
  s_command.Instruction       = S25FL256S_READ_CONFIGURATION_REG1_CMD;
 8005b9e:	2335      	movs	r3, #53	; 0x35
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005ba0:	f8cd 8020 	str.w	r8, [sp, #32]
  s_command.Instruction       = S25FL256S_READ_CONFIGURATION_REG1_CMD;
 8005ba4:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8005ba6:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005ba8:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005bac:	e9cd 500c 	strd	r5, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005bb0:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f003 fb5c 	bl	8009272 <HAL_QSPI_Command>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d1d9      	bne.n	8005b72 <S25FL256S_Enter4LinesDataMode+0x3a>
  if (HAL_QSPI_Receive(Ctx, &reg1, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc2:	f10d 0103 	add.w	r1, sp, #3
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f003 fbef 	bl	80093aa <HAL_QSPI_Receive>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d1d0      	bne.n	8005b72 <S25FL256S_Enter4LinesDataMode+0x3a>
	  reg[1] = reg1;
 8005bd0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  if( S25FL256S_WriteEnable(Ctx,Mode)!=S25FL256S_OK)
 8005bd4:	4631      	mov	r1, r6
 8005bd6:	4620      	mov	r0, r4
	  reg[1] = reg1;
 8005bd8:	f88d 3005 	strb.w	r3, [sp, #5]
  if( S25FL256S_WriteEnable(Ctx,Mode)!=S25FL256S_OK)
 8005bdc:	f7ff ff46 	bl	8005a6c <S25FL256S_WriteEnable>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d1c6      	bne.n	8005b72 <S25FL256S_Enter4LinesDataMode+0x3a>
  s_command.NbData = 2;
 8005be4:	2302      	movs	r3, #2
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bea:	a902      	add	r1, sp, #8
 8005bec:	4620      	mov	r0, r4
  s_command.NbData = 2;
 8005bee:	930c      	str	r3, [sp, #48]	; 0x30
  MODIFY_REG(reg[0], 0x00, S25FL256S_SR1_WREN);
 8005bf0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  s_command.Instruction = S25FL256S_WRITE_STATUS_CMD_REG_CMD;
 8005bf4:	9502      	str	r5, [sp, #8]
  MODIFY_REG(reg[0], 0x00, S25FL256S_SR1_WREN);
 8005bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bfa:	f043 0302 	orr.w	r3, r3, #2
 8005bfe:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c02:	f003 fb36 	bl	8009272 <HAL_QSPI_Command>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d1b3      	bne.n	8005b72 <S25FL256S_Enter4LinesDataMode+0x3a>
  if (HAL_QSPI_Transmit(Ctx, reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0e:	a901      	add	r1, sp, #4
 8005c10:	4620      	mov	r0, r4
 8005c12:	f003 fb71 	bl	80092f8 <HAL_QSPI_Transmit>
 8005c16:	3800      	subs	r0, #0
 8005c18:	bf18      	it	ne
 8005c1a:	2001      	movne	r0, #1
 8005c1c:	4240      	negs	r0, r0
 8005c1e:	e7aa      	b.n	8005b76 <S25FL256S_Enter4LinesDataMode+0x3e>

08005c20 <S25FL256S_ReadSTR>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */
int32_t S25FL256S_ReadSTR(QSPI_HandleTypeDef *Ctx, S25FL256S_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8005c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c24:	4680      	mov	r8, r0
  QSPI_CommandTypeDef s_command;

  switch(Mode)
 8005c26:	1e48      	subs	r0, r1, #1
{
 8005c28:	b08f      	sub	sp, #60	; 0x3c
 8005c2a:	4691      	mov	r9, r2
  switch(Mode)
 8005c2c:	2803      	cmp	r0, #3
 8005c2e:	d83c      	bhi.n	8005caa <S25FL256S_ReadSTR+0x8a>
 8005c30:	e8df f000 	tbb	[pc, r0]
 8005c34:	342e4102 	.word	0x342e4102
 8005c38:	273c      	movs	r7, #60	; 0x3c
 8005c3a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005c3e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
    s_command.Instruction     = S25FL256S_QUAD_OUT_FAST_READ_4_BYTE_ADDR_CMD;
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
    s_command.DataMode        = QSPI_DATA_4_LINES;
    s_command.DummyCycles     = S25FL256S_DUMMY_CYCLES_READ;
    break;
 8005c42:	2408      	movs	r4, #8
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005c44:	f44f 7280 	mov.w	r2, #256	; 0x100
    break;
  }

  /* Initialize the read command */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.Address           = ReadAddr;
 8005c48:	9301      	str	r3, [sp, #4]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005c4a:	2300      	movs	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c4c:	4669      	mov	r1, sp
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005c4e:	9206      	str	r2, [sp, #24]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005c50:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c54:	4640      	mov	r0, r8
    s_command.Instruction     = S25FL256S_DUAL_OUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005c56:	9700      	str	r7, [sp, #0]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005c58:	9203      	str	r2, [sp, #12]
  s_command.NbData            = Size;
 8005c5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8005c5c:	9607      	str	r6, [sp, #28]
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8005c5e:	9509      	str	r5, [sp, #36]	; 0x24
    s_command.DummyCycles     = S25FL256S_DUMMY_CYCLES_READ;
 8005c60:	9405      	str	r4, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005c62:	9308      	str	r3, [sp, #32]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005c64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c68:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005c6c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c70:	f003 faff 	bl	8009272 <HAL_QSPI_Command>
 8005c74:	bb30      	cbnz	r0, 8005cc4 <S25FL256S_ReadSTR+0xa4>
  {
    return S25FL256S_ERROR;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(Ctx, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	f003 fb94 	bl	80093aa <HAL_QSPI_Receive>
 8005c82:	3800      	subs	r0, #0
 8005c84:	bf18      	it	ne
 8005c86:	2001      	movne	r0, #1
 8005c88:	4240      	negs	r0, r0
  {
    return S25FL256S_ERROR;
  }

  return S25FL256S_OK;
}
 8005c8a:	b00f      	add	sp, #60	; 0x3c
 8005c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    break;
 8005c90:	276c      	movs	r7, #108	; 0x6c
 8005c92:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005c96:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
 8005c9a:	e7d2      	b.n	8005c42 <S25FL256S_ReadSTR+0x22>
    break;
 8005c9c:	27ec      	movs	r7, #236	; 0xec
 8005c9e:	f44f 6640 	mov.w	r6, #3072	; 0xc00
 8005ca2:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
 8005ca6:	2406      	movs	r4, #6
 8005ca8:	e7cc      	b.n	8005c44 <S25FL256S_ReadSTR+0x24>
    break;
 8005caa:	270c      	movs	r7, #12
 8005cac:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005cb0:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005cb4:	e7c5      	b.n	8005c42 <S25FL256S_ReadSTR+0x22>
  switch(Mode)
 8005cb6:	27bc      	movs	r7, #188	; 0xbc
 8005cb8:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8005cbc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8005cc0:	2404      	movs	r4, #4
 8005cc2:	e7bf      	b.n	8005c44 <S25FL256S_ReadSTR+0x24>
    return S25FL256S_ERROR;
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	e7df      	b.n	8005c8a <S25FL256S_ReadSTR+0x6a>

08005cca <S25FL256S_BlockErase>:
  QSPI_CommandTypeDef s_command;

  UNUSED(Mode); /* The Erase commands are always 1-1-0 or 1-0-0 */

  /* Setup erase command */
  switch(BlockSize)
 8005cca:	2b01      	cmp	r3, #1
{
 8005ccc:	b500      	push	{lr}
 8005cce:	b08f      	sub	sp, #60	; 0x3c
  switch(BlockSize)
 8005cd0:	d003      	beq.n	8005cda <S25FL256S_BlockErase+0x10>
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d00b      	beq.n	8005cee <S25FL256S_BlockErase+0x24>
    s_command.AddressMode     = QSPI_ADDRESS_NONE;
  break;

  case S25FL256S_ERASE_4K :
  default :
    s_command.Instruction     = S25FL256S_SUBSECTOR_ERASE_4_BYTE_ADDR_CMD_4K;
 8005cd6:	2321      	movs	r3, #33	; 0x21
 8005cd8:	e000      	b.n	8005cdc <S25FL256S_BlockErase+0x12>
    s_command.Instruction     = S25FL256S_SECTOR_ERASE_4_BYTE_ADDR_CMD;
 8005cda:	23dc      	movs	r3, #220	; 0xdc
    s_command.Instruction     = S25FL256S_SUBSECTOR_ERASE_4_BYTE_ADDR_CMD_4K;
 8005cdc:	9300      	str	r3, [sp, #0]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8005cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
    s_command.AddressSize     = QSPI_ADDRESS_32_BITS;
    s_command.Address         = BlockAddress;
 8005ce2:	9201      	str	r2, [sp, #4]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8005ce4:	9307      	str	r3, [sp, #28]
    s_command.AddressSize     = QSPI_ADDRESS_32_BITS;
 8005ce6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005cea:	9303      	str	r3, [sp, #12]
    break;
 8005cec:	e003      	b.n	8005cf6 <S25FL256S_BlockErase+0x2c>
    s_command.Instruction     = S25FL256S_BULK_ERASE_ALTERNATE_CMD;
 8005cee:	23c7      	movs	r3, #199	; 0xc7
 8005cf0:	9300      	str	r3, [sp, #0]
    s_command.AddressMode     = QSPI_ADDRESS_NONE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9307      	str	r3, [sp, #28]
  }

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if(HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfe:	4669      	mov	r1, sp
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005d00:	9306      	str	r3, [sp, #24]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles       = 0;
 8005d06:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005d08:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005d0a:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005d0c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if(HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d10:	f003 faaf 	bl	8009272 <HAL_QSPI_Command>
 8005d14:	3800      	subs	r0, #0
 8005d16:	bf18      	it	ne
 8005d18:	2001      	movne	r0, #1
  {
    return S25FL256S_ERROR;
  }

  return S25FL256S_OK;
}
 8005d1a:	4240      	negs	r0, r0
 8005d1c:	b00f      	add	sp, #60	; 0x3c
 8005d1e:	f85d fb04 	ldr.w	pc, [sp], #4

08005d22 <S25FL256S_EnableMemoryMappedModeSTR>:
int32_t S25FL256S_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, S25FL256S_Interface_t Mode)
{
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  switch(Mode)
 8005d22:	3901      	subs	r1, #1
{
 8005d24:	b510      	push	{r4, lr}
 8005d26:	b090      	sub	sp, #64	; 0x40
  switch(Mode)
 8005d28:	2903      	cmp	r1, #3
 8005d2a:	d82e      	bhi.n	8005d8a <S25FL256S_EnableMemoryMappedModeSTR+0x68>
 8005d2c:	e8df f001 	tbb	[pc, r1]
 8005d30:	29083302 	.word	0x29083302
 8005d34:	213c      	movs	r1, #60	; 0x3c
 8005d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d3e:	e004      	b.n	8005d4a <S25FL256S_EnableMemoryMappedModeSTR+0x28>
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
    s_command.Instruction     = S25FL256S_QUAD_OUT_FAST_READ_4_BYTE_ADDR_CMD;
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
    s_command.DataMode        = QSPI_DATA_4_LINES;
    s_command.DummyCycles     = S25FL256S_DUMMY_CYCLES_READ;
    break;
 8005d40:	216c      	movs	r1, #108	; 0x6c
 8005d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
    s_command.Instruction     = S25FL256S_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
    s_command.DataMode        = QSPI_DATA_4_LINES;
    s_command.DummyCycles     = S25FL256S_DUMMY_CYCLES_READ_QUAD_INOUT;
    break;
 8005d46:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8005d4a:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_1_LINE;
    s_command.DummyCycles     = S25FL256S_DUMMY_CYCLES_READ;
    break;
  }

  s_command.DummyCycles        = S25FL256S_DUMMY_CYCLES_READ;
 8005d4c:	2308      	movs	r3, #8
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8005d4e:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;
  s_command.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
  /* Configure the command for the read instruction */
  s_command.AddressSize        = QSPI_ADDRESS_32_BITS;
 8005d50:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  s_command.DummyCycles        = S25FL256S_DUMMY_CYCLES_READ;
 8005d54:	9307      	str	r3, [sp, #28]
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005d56:	f44f 7480 	mov.w	r4, #256	; 0x100
  s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;
 8005d5a:	2300      	movs	r3, #0
    s_command.Instruction     = S25FL256S_DUAL_OUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005d5c:	9102      	str	r1, [sp, #8]
  s_command.AddressSize        = QSPI_ADDRESS_32_BITS;
 8005d5e:	9205      	str	r2, [sp, #20]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0x00;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005d60:	a902      	add	r1, sp, #8
 8005d62:	466a      	mov	r2, sp
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005d64:	9408      	str	r4, [sp, #32]
  s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;
 8005d66:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8005d68:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005d6a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0x00;
 8005d6e:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005d72:	f003 fbc9 	bl	8009508 <HAL_QSPI_MemoryMapped>
 8005d76:	3800      	subs	r0, #0
 8005d78:	bf18      	it	ne
 8005d7a:	2001      	movne	r0, #1
  {
    return S25FL256S_ERROR;
  }

  return S25FL256S_OK;
}
 8005d7c:	4240      	negs	r0, r0
 8005d7e:	b010      	add	sp, #64	; 0x40
 8005d80:	bd10      	pop	{r4, pc}
    break;
 8005d82:	21ec      	movs	r1, #236	; 0xec
 8005d84:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005d88:	e7dd      	b.n	8005d46 <S25FL256S_EnableMemoryMappedModeSTR+0x24>
    break;
 8005d8a:	210c      	movs	r1, #12
 8005d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d94:	e7d9      	b.n	8005d4a <S25FL256S_EnableMemoryMappedModeSTR+0x28>
  switch(Mode)
 8005d96:	21bc      	movs	r1, #188	; 0xbc
 8005d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d9c:	e7cd      	b.n	8005d3a <S25FL256S_EnableMemoryMappedModeSTR+0x18>
	...

08005da0 <calculateElapsedDays.isra.0>:
	// or if it's divisible by 400.
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}

// Assuming daysInMonth is an array where January is daysInMonth[0], February is daysInMonth[1], etc.
static int32_t calculateElapsedDays(RTC_DateTypeDef startDate,
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	b087      	sub	sp, #28
 8005da6:	4607      	mov	r7, r0
		RTC_DateTypeDef endDate)
{
	int32_t elapsedDays = 0;
	int startYear = 2000 + startDate.Year;
 8005da8:	f502 66fa 	add.w	r6, r2, #2000	; 0x7d0
static int32_t calculateElapsedDays(RTC_DateTypeDef startDate,
 8005dac:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8005db0:	f89d e040 	ldrb.w	lr, [sp, #64]	; 0x40
	int endYear = 2000 + endDate.Year;

	// Handle same-day start and end first
	if (startYear == endYear && startDate.Month == endDate.Month
 8005db4:	4282      	cmp	r2, r0
	int endYear = 2000 + endDate.Year;
 8005db6:	f500 6cfa 	add.w	ip, r0, #2000	; 0x7d0
static int32_t calculateElapsedDays(RTC_DateTypeDef startDate,
 8005dba:	e9cd 3100 	strd	r3, r1, [sp]
	if (startYear == endYear && startDate.Month == endDate.Month
 8005dbe:	d103      	bne.n	8005dc8 <calculateElapsedDays.isra.0+0x28>
 8005dc0:	429f      	cmp	r7, r3
 8005dc2:	d101      	bne.n	8005dc8 <calculateElapsedDays.isra.0+0x28>
			&& startDate.Date == endDate.Date)
 8005dc4:	4571      	cmp	r1, lr
 8005dc6:	d04b      	beq.n	8005e60 <calculateElapsedDays.isra.0+0xc0>
 8005dc8:	4632      	mov	r2, r6
 8005dca:	2000      	movs	r0, #0
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8005dcc:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005dd0:	f44f 79c8 	mov.w	r9, #400	; 0x190
 8005dd4:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8005dd8:	e01e      	b.n	8005e18 <calculateElapsedDays.isra.0+0x78>
 8005dda:	fbb2 f5f8 	udiv	r5, r2, r8
 8005dde:	fb08 2515 	mls	r5, r8, r5, r2
		return 0;
	}

	for (int year = startYear; year <= endYear; year++)
	{
		int startMonth = (year == startYear) ? startDate.Month : 1;
 8005de2:	4296      	cmp	r6, r2
 8005de4:	bf0c      	ite	eq
 8005de6:	463c      	moveq	r4, r7
 8005de8:	2401      	movne	r4, #1
		int endMonth = (year == endYear) ? endDate.Month : 12;
 8005dea:	491e      	ldr	r1, [pc, #120]	; (8005e64 <calculateElapsedDays.isra.0+0xc4>)
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8005dec:	9503      	str	r5, [sp, #12]
		int endMonth = (year == endYear) ? endDate.Month : 12;
 8005dee:	9b00      	ldr	r3, [sp, #0]
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8005df0:	fbb2 f5f9 	udiv	r5, r2, r9
 8005df4:	fb09 2515 	mls	r5, r9, r5, r2
		int endMonth = (year == endYear) ? endDate.Month : 12;
 8005df8:	4594      	cmp	ip, r2
 8005dfa:	bf18      	it	ne
 8005dfc:	230c      	movne	r3, #12
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8005dfe:	9504      	str	r5, [sp, #16]
 8005e00:	eb04 050a 	add.w	r5, r4, sl
		int endMonth = (year == endYear) ? endDate.Month : 12;
 8005e04:	9302      	str	r3, [sp, #8]

		for (int month = startMonth; month <= endMonth; month++)
 8005e06:	eb01 0585 	add.w	r5, r1, r5, lsl #2
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8005e0a:	f002 0103 	and.w	r1, r2, #3
 8005e0e:	9105      	str	r1, [sp, #20]
		for (int month = startMonth; month <= endMonth; month++)
 8005e10:	9902      	ldr	r1, [sp, #8]
 8005e12:	42a1      	cmp	r1, r4
 8005e14:	da05      	bge.n	8005e22 <calculateElapsedDays.isra.0+0x82>
	for (int year = startYear; year <= endYear; year++)
 8005e16:	3201      	adds	r2, #1
 8005e18:	4594      	cmp	ip, r2
 8005e1a:	dade      	bge.n	8005dda <calculateElapsedDays.isra.0+0x3a>
				elapsedDays += 1;
			}
		}
	}
	return elapsedDays;
}
 8005e1c:	b007      	add	sp, #28
 8005e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (year == startYear && month == startDate.Month)
 8005e22:	4296      	cmp	r6, r2
 8005e24:	d112      	bne.n	8005e4c <calculateElapsedDays.isra.0+0xac>
 8005e26:	42a7      	cmp	r7, r4
 8005e28:	d110      	bne.n	8005e4c <calculateElapsedDays.isra.0+0xac>
				elapsedDays += daysInMonth[month - 1] - startDate.Date;
 8005e2a:	6829      	ldr	r1, [r5, #0]
 8005e2c:	9b01      	ldr	r3, [sp, #4]
 8005e2e:	eba1 0b03 	sub.w	fp, r1, r3
 8005e32:	4458      	add	r0, fp
			if (month == 2 && isLeapYear(year))
 8005e34:	2c02      	cmp	r4, #2
 8005e36:	d106      	bne.n	8005e46 <calculateElapsedDays.isra.0+0xa6>
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8005e38:	9905      	ldr	r1, [sp, #20]
 8005e3a:	b909      	cbnz	r1, 8005e40 <calculateElapsedDays.isra.0+0xa0>
 8005e3c:	9903      	ldr	r1, [sp, #12]
 8005e3e:	b909      	cbnz	r1, 8005e44 <calculateElapsedDays.isra.0+0xa4>
			if (month == 2 && isLeapYear(year))
 8005e40:	9904      	ldr	r1, [sp, #16]
 8005e42:	b901      	cbnz	r1, 8005e46 <calculateElapsedDays.isra.0+0xa6>
				elapsedDays += 1;
 8005e44:	3001      	adds	r0, #1
		for (int month = startMonth; month <= endMonth; month++)
 8005e46:	3401      	adds	r4, #1
 8005e48:	3504      	adds	r5, #4
 8005e4a:	e7e1      	b.n	8005e10 <calculateElapsedDays.isra.0+0x70>
			else if (year == endYear && month == endDate.Month)
 8005e4c:	4594      	cmp	ip, r2
 8005e4e:	d104      	bne.n	8005e5a <calculateElapsedDays.isra.0+0xba>
 8005e50:	9b00      	ldr	r3, [sp, #0]
 8005e52:	429c      	cmp	r4, r3
 8005e54:	d101      	bne.n	8005e5a <calculateElapsedDays.isra.0+0xba>
				elapsedDays += endDate.Date;
 8005e56:	4470      	add	r0, lr
 8005e58:	e7ec      	b.n	8005e34 <calculateElapsedDays.isra.0+0x94>
				elapsedDays += daysInMonth[month - 1];  // General case
 8005e5a:	6829      	ldr	r1, [r5, #0]
 8005e5c:	4408      	add	r0, r1
 8005e5e:	e7e9      	b.n	8005e34 <calculateElapsedDays.isra.0+0x94>
		return 0;
 8005e60:	2000      	movs	r0, #0
 8005e62:	e7db      	b.n	8005e1c <calculateElapsedDays.isra.0+0x7c>
 8005e64:	08015d28 	.word	0x08015d28

08005e68 <Sort_Pumps_By_changeOverTime>:
//    }
//}

void Sort_Pumps_By_changeOverTime(PumpInfo *array, uint8_t size,
		uint8_t changeOverTime)
{
 8005e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e6c:	460f      	mov	r7, r1
	int8_t maxIndex = -1;
	uint8_t maxPumpChangeOverUnits = 0;
	uint8_t changeOrderTrigger = 0;
	for (uint8_t i = 0; i < size; i++)
 8005e6e:	2100      	movs	r1, #0
{
 8005e70:	4604      	mov	r4, r0
 8005e72:	4684      	mov	ip, r0
 8005e74:	b08b      	sub	sp, #44	; 0x2c
	uint8_t maxPumpChangeOverUnits = 0;
 8005e76:	4608      	mov	r0, r1
	int8_t maxIndex = -1;
 8005e78:	f04f 36ff 	mov.w	r6, #4294967295
	{
		PumpInfo temp = array[i];
		uint8_t pumpChangeOverUnits = ((temp.workingHours * 60)
 8005e7c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
	for (uint8_t i = 0; i < size; i++)
 8005e80:	b2cb      	uxtb	r3, r1
 8005e82:	429f      	cmp	r7, r3
 8005e84:	d814      	bhi.n	8005eb0 <Sort_Pumps_By_changeOverTime+0x48>
			maxIndex = i;

		}
	}

	if (maxIndex >= 0)
 8005e86:	2e00      	cmp	r6, #0
 8005e88:	db0f      	blt.n	8005eaa <Sort_Pumps_By_changeOverTime+0x42>
	{
		//check that all the pumps after it not equal to it
		if (maxIndex < (size-1))
 8005e8a:	f107 3cff 	add.w	ip, r7, #4294967295
 8005e8e:	4566      	cmp	r6, ip
 8005e90:	da0b      	bge.n	8005eaa <Sort_Pumps_By_changeOverTime+0x42>
		{
			for (uint8_t i = maxIndex + 1; i < size; i++)
 8005e92:	b2f5      	uxtb	r5, r6
			{

				PumpInfo temp = array[i];
				uint8_t ChangeOverUnits = ((temp.workingHours * 60)
 8005e94:	f04f 083c 	mov.w	r8, #60	; 0x3c
			for (uint8_t i = maxIndex + 1; i < size; i++)
 8005e98:	1c6b      	adds	r3, r5, #1
 8005e9a:	fa5f fe83 	uxtb.w	lr, r3
 8005e9e:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8005ea2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005ea6:	45be      	cmp	lr, r7
 8005ea8:	d311      	bcc.n	8005ece <Sort_Pumps_By_changeOverTime+0x66>
				array[i] = array[i + 1];
			}
			array[size - 1] = temp;
		}
	}
}
 8005eaa:	b00b      	add	sp, #44	; 0x2c
 8005eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				+ temp.workingMinutes) / changeOverTime;
 8005eb0:	e9dc 5301 	ldrd	r5, r3, [ip, #4]
 8005eb4:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8005eb8:	fb0e 3305 	mla	r3, lr, r5, r3
 8005ebc:	fbb3 f3f2 	udiv	r3, r3, r2
		uint8_t pumpChangeOverUnits = ((temp.workingHours * 60)
 8005ec0:	b2db      	uxtb	r3, r3
		if (pumpChangeOverUnits > maxPumpChangeOverUnits)
 8005ec2:	4298      	cmp	r0, r3
			maxIndex = i;
 8005ec4:	bf3c      	itt	cc
 8005ec6:	b24e      	sxtbcc	r6, r1
 8005ec8:	4618      	movcc	r0, r3
	for (uint8_t i = 0; i < size; i++)
 8005eca:	3101      	adds	r1, #1
 8005ecc:	e7d8      	b.n	8005e80 <Sort_Pumps_By_changeOverTime+0x18>
				PumpInfo temp = array[i];
 8005ece:	4619      	mov	r1, r3
				uint8_t ChangeOverUnits = ((temp.workingHours * 60)
 8005ed0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005ed4:	3328      	adds	r3, #40	; 0x28
						+ temp.workingMinutes) / changeOverTime;
 8005ed6:	6889      	ldr	r1, [r1, #8]
 8005ed8:	fb08 1109 	mla	r1, r8, r9, r1
 8005edc:	fbb1 f1f2 	udiv	r1, r1, r2
				if (ChangeOverUnits < maxPumpChangeOverUnits)
 8005ee0:	b2c9      	uxtb	r1, r1
 8005ee2:	4288      	cmp	r0, r1
 8005ee4:	d920      	bls.n	8005f28 <Sort_Pumps_By_changeOverTime+0xc0>
			PumpInfo temp = array[maxIndex];
 8005ee6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005eea:	46ee      	mov	lr, sp
 8005eec:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8005ef0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ef2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005ef6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ef8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005efc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8005f00:	e88e 0003 	stmia.w	lr, {r0, r1}
			for (uint8_t i = maxIndex; i < size - 1; i++)
 8005f04:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8005f08:	45ac      	cmp	ip, r5
 8005f0a:	dc12      	bgt.n	8005f32 <Sort_Pumps_By_changeOverTime+0xca>
			array[size - 1] = temp;
 8005f0c:	fb0e 4107 	mla	r1, lr, r7, r4
 8005f10:	466d      	mov	r5, sp
 8005f12:	f1a1 0428 	sub.w	r4, r1, #40	; 0x28
 8005f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005f22:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8005f26:	e7c0      	b.n	8005eaa <Sort_Pumps_By_changeOverTime+0x42>
			for (uint8_t i = maxIndex + 1; i < size; i++)
 8005f28:	f10e 0e01 	add.w	lr, lr, #1
 8005f2c:	fa5f fe8e 	uxtb.w	lr, lr
 8005f30:	e7b9      	b.n	8005ea6 <Sort_Pumps_By_changeOverTime+0x3e>
				array[i] = array[i + 1];
 8005f32:	f105 0801 	add.w	r8, r5, #1
 8005f36:	fb05 e50e 	mla	r5, r5, lr, lr
 8005f3a:	4425      	add	r5, r4
 8005f3c:	f1a5 0628 	sub.w	r6, r5, #40	; 0x28
 8005f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005f48:	e895 0003 	ldmia.w	r5, {r0, r1}
			for (uint8_t i = maxIndex; i < size - 1; i++)
 8005f4c:	fa5f f588 	uxtb.w	r5, r8
				array[i] = array[i + 1];
 8005f50:	e886 0003 	stmia.w	r6, {r0, r1}
			for (uint8_t i = maxIndex; i < size - 1; i++)
 8005f54:	e7d8      	b.n	8005f08 <Sort_Pumps_By_changeOverTime+0xa0>
	...

08005f58 <Update_Working_Time>:
}


// This function updates the working time of a pump based on its ID and the action (START_COUNTING or STOP_COUNTING).
void Update_Working_Time(uint8_t id, CountAction action)
{
 8005f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f5a:	4606      	mov	r6, r0

	// Get the current time and date from the RTC (Real-Time Clock) module and store them in currentTime and currentDate.
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8005f5c:	2200      	movs	r2, #0
{
 8005f5e:	460d      	mov	r5, r1
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8005f60:	484c      	ldr	r0, [pc, #304]	; (8006094 <Update_Working_Time+0x13c>)
 8005f62:	494d      	ldr	r1, [pc, #308]	; (8006098 <Update_Working_Time+0x140>)
 8005f64:	f005 fc04 	bl	800b770 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8005f68:	2200      	movs	r2, #0
 8005f6a:	494c      	ldr	r1, [pc, #304]	; (800609c <Update_Working_Time+0x144>)
 8005f6c:	4849      	ldr	r0, [pc, #292]	; (8006094 <Update_Working_Time+0x13c>)
 8005f6e:	f005 fc22 	bl	800b7b6 <HAL_RTC_GetDate>
//	printf("Current time: %02d:%02d:%02d\n", currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
//	printf("Current date: %02d/%02d/%04d\n", currentDate.Date, currentDate.Month, 2000 + currentDate.Year);
//	printf("\n");
	// Check if the pump ID is within the valid range of pump IDs.
	if (id >= 1 && id <= MAX_NUM_PUMPS)
 8005f72:	1e73      	subs	r3, r6, #1
 8005f74:	2b07      	cmp	r3, #7
 8005f76:	d81a      	bhi.n	8005fae <Update_Working_Time+0x56>
	for (int i = 0; i < MAX_NUM_PUMPS; i++)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2028      	movs	r0, #40	; 0x28
		if (pumpInfoArray[i].id == id)
 8005f7c:	4a48      	ldr	r2, [pc, #288]	; (80060a0 <Update_Working_Time+0x148>)
 8005f7e:	fb00 f103 	mul.w	r1, r0, r3
 8005f82:	188c      	adds	r4, r1, r2
 8005f84:	5c51      	ldrb	r1, [r2, r1]
 8005f86:	42b1      	cmp	r1, r6
 8005f88:	d003      	beq.n	8005f92 <Update_Working_Time+0x3a>
	for (int i = 0; i < MAX_NUM_PUMPS; i++)
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d1f6      	bne.n	8005f7e <Update_Working_Time+0x26>
	return NULL;
 8005f90:	2400      	movs	r4, #0
			//	while (1)
			;
		}

		// Check if the action is to start counting time.
		if (action == START_COUNTING)
 8005f92:	b975      	cbnz	r5, 8005fb2 <Update_Working_Time+0x5a>
		{
			// Store the current time and date as the starting time and date.
			pInfo->startTime = currentTime;
 8005f94:	4e40      	ldr	r6, [pc, #256]	; (8006098 <Update_Working_Time+0x140>)
 8005f96:	f104 050c 	add.w	r5, r4, #12
 8005f9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f9e:	6833      	ldr	r3, [r6, #0]
 8005fa0:	602b      	str	r3, [r5, #0]
			pInfo->startDate = currentDate;
 8005fa2:	4b3e      	ldr	r3, [pc, #248]	; (800609c <Update_Working_Time+0x144>)
 8005fa4:	6818      	ldr	r0, [r3, #0]
			pInfo->isRunning = true; // Indicate that the pump is currently working.
 8005fa6:	2301      	movs	r3, #1
			pInfo->startDate = currentDate;
 8005fa8:	6220      	str	r0, [r4, #32]
						currentDate);

				// Update the working hours and minutes for the pump.
				updatePumpInfo(pInfo, elapsedDays, pInfo->startTime,
						currentTime, STOP_COUNTING);
				pInfo->isRunning = false;
 8005faa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	{
		// Handle the error for invalid pump ID (infinite loop for now; better error handling may be needed).
		//while (1)
		;
	}
}
 8005fae:	b003      	add	sp, #12
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (action == STOP_COUNTING)
 8005fb2:	2d01      	cmp	r5, #1
 8005fb4:	d12f      	bne.n	8006016 <Update_Working_Time+0xbe>
			if (pInfo->isRunning)
 8005fb6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f7      	beq.n	8005fae <Update_Working_Time+0x56>
				int32_t elapsedDays = calculateElapsedDays(pInfo->startDate,
 8005fbe:	4b37      	ldr	r3, [pc, #220]	; (800609c <Update_Working_Time+0x144>)
 8005fc0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8005fc4:	78dd      	ldrb	r5, [r3, #3]
 8005fc6:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8005fca:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8005fce:	9501      	str	r5, [sp, #4]
 8005fd0:	789d      	ldrb	r5, [r3, #2]
 8005fd2:	9500      	str	r5, [sp, #0]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	f7ff fee3 	bl	8005da0 <calculateElapsedDays.isra.0>
			+ (endTime.Hours - startTime.Hours);
 8005fda:	4a2f      	ldr	r2, [pc, #188]	; (8006098 <Update_Working_Time+0x140>)
 8005fdc:	7b21      	ldrb	r1, [r4, #12]
 8005fde:	7813      	ldrb	r3, [r2, #0]
 8005fe0:	1a5b      	subs	r3, r3, r1
	uint32_t elapsedHours = elapsedDays * 24
 8005fe2:	2118      	movs	r1, #24
 8005fe4:	fb01 3000 	mla	r0, r1, r0, r3
	int32_t elapsedMinutes = endTime.Minutes - startTime.Minutes;
 8005fe8:	7853      	ldrb	r3, [r2, #1]
 8005fea:	7b62      	ldrb	r2, [r4, #13]
	if (elapsedMinutes < 0)
 8005fec:	1a9b      	subs	r3, r3, r2
	pInfo->workingHours += elapsedHours;
 8005fee:	6862      	ldr	r2, [r4, #4]
		elapsedHours -= 1;
 8005ff0:	bf44      	itt	mi
 8005ff2:	f100 30ff 	addmi.w	r0, r0, #4294967295
		elapsedMinutes += 60;
 8005ff6:	333c      	addmi	r3, #60	; 0x3c
	pInfo->workingHours += elapsedHours;
 8005ff8:	4410      	add	r0, r2
	pInfo->workingMinutes += elapsedMinutes;
 8005ffa:	68a2      	ldr	r2, [r4, #8]
 8005ffc:	4413      	add	r3, r2
	pInfo->workingHours += elapsedHours;
 8005ffe:	6060      	str	r0, [r4, #4]
	if (pInfo->workingMinutes >= 60)
 8006000:	2b3b      	cmp	r3, #59	; 0x3b
		pInfo->workingMinutes -= 60;
 8006002:	bf85      	ittet	hi
 8006004:	3b3c      	subhi	r3, #60	; 0x3c
		pInfo->workingHours += 1;
 8006006:	3001      	addhi	r0, #1
	pInfo->workingMinutes += elapsedMinutes;
 8006008:	60a3      	strls	r3, [r4, #8]
		pInfo->workingMinutes -= 60;
 800600a:	60a3      	strhi	r3, [r4, #8]
				pInfo->isRunning = false;
 800600c:	f04f 0300 	mov.w	r3, #0
		pInfo->workingHours += 1;
 8006010:	bf88      	it	hi
 8006012:	6060      	strhi	r0, [r4, #4]
				pInfo->isRunning = false;
 8006014:	e7c9      	b.n	8005faa <Update_Working_Time+0x52>
		else if (action == UPDATE_TIME)
 8006016:	2d02      	cmp	r5, #2
 8006018:	d1c9      	bne.n	8005fae <Update_Working_Time+0x56>
			if (pInfo->isRunning)
 800601a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0c5      	beq.n	8005fae <Update_Working_Time+0x56>
				int32_t elapsedDays = calculateElapsedDays(pInfo->startDate,
 8006022:	4f1e      	ldr	r7, [pc, #120]	; (800609c <Update_Working_Time+0x144>)
 8006024:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 800602e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	78bb      	ldrb	r3, [r7, #2]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	787b      	ldrb	r3, [r7, #1]
 800603a:	f7ff feb1 	bl	8005da0 <calculateElapsedDays.isra.0>
			+ (endTime.Hours - startTime.Hours);
 800603e:	4a16      	ldr	r2, [pc, #88]	; (8006098 <Update_Working_Time+0x140>)
 8006040:	7b21      	ldrb	r1, [r4, #12]
		pInfo->startTime = currentTime;
 8006042:	f104 0c0c 	add.w	ip, r4, #12
			+ (endTime.Hours - startTime.Hours);
 8006046:	7813      	ldrb	r3, [r2, #0]
	int32_t elapsedMinutes = endTime.Minutes - startTime.Minutes;
 8006048:	7856      	ldrb	r6, [r2, #1]
			+ (endTime.Hours - startTime.Hours);
 800604a:	1a5b      	subs	r3, r3, r1
	uint32_t elapsedHours = elapsedDays * 24
 800604c:	2118      	movs	r1, #24
		pInfo->startTime = currentTime;
 800604e:	f8df e048 	ldr.w	lr, [pc, #72]	; 8006098 <Update_Working_Time+0x140>
	uint32_t elapsedHours = elapsedDays * 24
 8006052:	fb01 3000 	mla	r0, r1, r0, r3
	int32_t elapsedMinutes = endTime.Minutes - startTime.Minutes;
 8006056:	7b63      	ldrb	r3, [r4, #13]
	if (elapsedMinutes < 0)
 8006058:	1af6      	subs	r6, r6, r3
	pInfo->workingHours += elapsedHours;
 800605a:	6863      	ldr	r3, [r4, #4]
		elapsedHours -= 1;
 800605c:	bf44      	itt	mi
 800605e:	f100 30ff 	addmi.w	r0, r0, #4294967295
		elapsedMinutes += 60;
 8006062:	363c      	addmi	r6, #60	; 0x3c
	pInfo->workingHours += elapsedHours;
 8006064:	18c5      	adds	r5, r0, r3
	pInfo->workingMinutes += elapsedMinutes;
 8006066:	68a3      	ldr	r3, [r4, #8]
 8006068:	441e      	add	r6, r3
	pInfo->workingHours += elapsedHours;
 800606a:	6065      	str	r5, [r4, #4]
	if (pInfo->workingMinutes >= 60)
 800606c:	2e3b      	cmp	r6, #59	; 0x3b
	pInfo->workingMinutes += elapsedMinutes;
 800606e:	60a6      	str	r6, [r4, #8]
		pInfo->startTime = currentTime;
 8006070:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
		pInfo->workingMinutes -= 60;
 8006074:	bf84      	itt	hi
 8006076:	3e3c      	subhi	r6, #60	; 0x3c
		pInfo->workingHours += 1;
 8006078:	3501      	addhi	r5, #1
		pInfo->startTime = currentTime;
 800607a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800607e:	f8de 3000 	ldr.w	r3, [lr]
		pInfo->startDate = currentDate;
 8006082:	6838      	ldr	r0, [r7, #0]
		pInfo->startTime = currentTime;
 8006084:	f8cc 3000 	str.w	r3, [ip]
		pInfo->startDate = currentDate;
 8006088:	6220      	str	r0, [r4, #32]
		pInfo->workingMinutes -= 60;
 800608a:	bf84      	itt	hi
 800608c:	60a6      	strhi	r6, [r4, #8]
		pInfo->workingHours += 1;
 800608e:	6065      	strhi	r5, [r4, #4]
}
 8006090:	e78d      	b.n	8005fae <Update_Working_Time+0x56>
 8006092:	bf00      	nop
 8006094:	2404000c 	.word	0x2404000c
 8006098:	2404004c 	.word	0x2404004c
 800609c:	24040048 	.word	0x24040048
 80060a0:	2403f010 	.word	0x2403f010

080060a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060a4:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060a6:	4c17      	ldr	r4, [pc, #92]	; (8006104 <HAL_MspInit+0x60>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80060a8:	2200      	movs	r2, #0
 80060aa:	210f      	movs	r1, #15
 80060ac:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80060b4:	f043 0302 	orr.w	r3, r3, #2
 80060b8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80060bc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80060c8:	f001 fcbe 	bl	8007a48 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80060cc:	2200      	movs	r2, #0
 80060ce:	2105      	movs	r1, #5
 80060d0:	2051      	movs	r0, #81	; 0x51
 80060d2:	f001 fcb9 	bl	8007a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80060d6:	2051      	movs	r0, #81	; 0x51
 80060d8:	f001 fce8 	bl	8007aac <HAL_NVIC_EnableIRQ>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80060dc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80060e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e4:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80060e8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80060ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	9b01      	ldr	r3, [sp, #4]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80060f4:	f000 fdea 	bl	8006ccc <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80060f8:	2002      	movs	r0, #2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060fa:	b002      	add	sp, #8
 80060fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8006100:	f000 bdda 	b.w	8006cb8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8006104:	58024400 	.word	0x58024400

08006108 <HAL_InitTick>:
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006108:	280f      	cmp	r0, #15
{
 800610a:	b510      	push	{r4, lr}
 800610c:	4604      	mov	r4, r0
 800610e:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006110:	d902      	bls.n	8006118 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8006112:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim17);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8006114:	b00a      	add	sp, #40	; 0x28
 8006116:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8006118:	4601      	mov	r1, r0
 800611a:	2200      	movs	r2, #0
 800611c:	2076      	movs	r0, #118	; 0x76
 800611e:	f001 fc93 	bl	8007a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8006122:	2076      	movs	r0, #118	; 0x76
 8006124:	f001 fcc2 	bl	8007aac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8006128:	4b16      	ldr	r3, [pc, #88]	; (8006184 <HAL_InitTick+0x7c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800612a:	4669      	mov	r1, sp
 800612c:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800612e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM17_CLK_ENABLE();
 8006130:	4b15      	ldr	r3, [pc, #84]	; (8006188 <HAL_InitTick+0x80>)
  htim17.Instance = TIM17;
 8006132:	4c16      	ldr	r4, [pc, #88]	; (800618c <HAL_InitTick+0x84>)
  __HAL_RCC_TIM17_CLK_ENABLE();
 8006134:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006138:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800613c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006148:	9301      	str	r3, [sp, #4]
 800614a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800614c:	f003 ffea 	bl	800a124 <HAL_RCC_GetClockConfig>
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006150:	f003 ffd6 	bl	800a100 <HAL_RCC_GetPCLK2Freq>
  htim17.Instance = TIM17;
 8006154:	4b0e      	ldr	r3, [pc, #56]	; (8006190 <HAL_InitTick+0x88>)
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006156:	0040      	lsls	r0, r0, #1
  htim17.Instance = TIM17;
 8006158:	6023      	str	r3, [r4, #0]
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800615a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800615e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006160:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <HAL_InitTick+0x8c>)
 8006162:	fbb0 f0f3 	udiv	r0, r0, r3
 8006166:	3801      	subs	r0, #1
  htim17.Init.ClockDivision = 0;
 8006168:	2300      	movs	r3, #0
  htim17.Init.Prescaler = uwPrescalerValue;
 800616a:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800616c:	4620      	mov	r0, r4
  htim17.Init.ClockDivision = 0;
 800616e:	6123      	str	r3, [r4, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006170:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8006172:	f005 fdcd 	bl	800bd10 <HAL_TIM_Base_Init>
 8006176:	2800      	cmp	r0, #0
 8006178:	d1cb      	bne.n	8006112 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim17);
 800617a:	4620      	mov	r0, r4
 800617c:	f005 fc6e 	bl	800ba5c <HAL_TIM_Base_Start_IT>
 8006180:	e7c8      	b.n	8006114 <HAL_InitTick+0xc>
 8006182:	bf00      	nop
 8006184:	2400006c 	.word	0x2400006c
 8006188:	58024400 	.word	0x58024400
 800618c:	24040060 	.word	0x24040060
 8006190:	40014800 	.word	0x40014800
 8006194:	000f4240 	.word	0x000f4240

08006198 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006198:	e7fe      	b.n	8006198 <NMI_Handler>
	...

0800619c <HardFault_Handler>:
  __ASM volatile ("dsb 0xF":::"memory");
 800619c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80061a0:	4905      	ldr	r1, [pc, #20]	; (80061b8 <HardFault_Handler+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <HardFault_Handler+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80061a4:	68ca      	ldr	r2, [r1, #12]
 80061a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60cb      	str	r3, [r1, #12]
 80061ae:	f3bf 8f4f 	dsb	sy
    __NOP();
 80061b2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80061b4:	e7fd      	b.n	80061b2 <HardFault_Handler+0x16>
 80061b6:	bf00      	nop
 80061b8:	e000ed00 	.word	0xe000ed00
 80061bc:	05fa0004 	.word	0x05fa0004

080061c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061c0:	e7fe      	b.n	80061c0 <MemManage_Handler>

080061c2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061c2:	e7fe      	b.n	80061c2 <BusFault_Handler>

080061c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061c4:	e7fe      	b.n	80061c4 <UsageFault_Handler>

080061c6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061c6:	4770      	bx	lr

080061c8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <DMA1_Stream0_IRQHandler+0x8>)
 80061ca:	f002 bb11 	b.w	80087f0 <HAL_DMA_IRQHandler>
 80061ce:	bf00      	nop
 80061d0:	240402bc 	.word	0x240402bc

080061d4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80061d4:	4801      	ldr	r0, [pc, #4]	; (80061dc <DMA1_Stream1_IRQHandler+0x8>)
 80061d6:	f002 bb0b 	b.w	80087f0 <HAL_DMA_IRQHandler>
 80061da:	bf00      	nop
 80061dc:	24040334 	.word	0x24040334

080061e0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <DMA1_Stream2_IRQHandler+0x8>)
 80061e2:	f002 bb05 	b.w	80087f0 <HAL_DMA_IRQHandler>
 80061e6:	bf00      	nop
 80061e8:	240005dc 	.word	0x240005dc

080061ec <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80061ec:	4801      	ldr	r0, [pc, #4]	; (80061f4 <DMA1_Stream3_IRQHandler+0x8>)
 80061ee:	f002 baff 	b.w	80087f0 <HAL_DMA_IRQHandler>
 80061f2:	bf00      	nop
 80061f4:	24000654 	.word	0x24000654

080061f8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80061f8:	4801      	ldr	r0, [pc, #4]	; (8006200 <DMA1_Stream4_IRQHandler+0x8>)
 80061fa:	f002 baf9 	b.w	80087f0 <HAL_DMA_IRQHandler>
 80061fe:	bf00      	nop
 8006200:	240401cc 	.word	0x240401cc

08006204 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <DMA1_Stream5_IRQHandler+0x8>)
 8006206:	f002 baf3 	b.w	80087f0 <HAL_DMA_IRQHandler>
 800620a:	bf00      	nop
 800620c:	24040244 	.word	0x24040244

08006210 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006210:	4804      	ldr	r0, [pc, #16]	; (8006224 <ADC_IRQHandler+0x14>)
{
 8006212:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 8006214:	f000 fe0e 	bl	8006e34 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8006218:	4803      	ldr	r0, [pc, #12]	; (8006228 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800621a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 800621e:	f000 be09 	b.w	8006e34 <HAL_ADC_IRQHandler>
 8006222:	bf00      	nop
 8006224:	24000514 	.word	0x24000514
 8006228:	24000578 	.word	0x24000578

0800622c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800622c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	if (countOfGetBuffer >= sizeof(getBuffer) ) countOfGetBuffer = 0;
 800622e:	4c10      	ldr	r4, [pc, #64]	; (8006270 <USART1_IRQHandler+0x44>)
 8006230:	7823      	ldrb	r3, [r4, #0]
 8006232:	061b      	lsls	r3, r3, #24
 8006234:	d501      	bpl.n	800623a <USART1_IRQHandler+0xe>
 8006236:	2300      	movs	r3, #0
 8006238:	7023      	strb	r3, [r4, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800623a:	480e      	ldr	r0, [pc, #56]	; (8006274 <USART1_IRQHandler+0x48>)
 800623c:	f006 faee 	bl	800c81c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  getBuffer[countOfGetBuffer++] = d_value;
 8006240:	7822      	ldrb	r2, [r4, #0]
 8006242:	490d      	ldr	r1, [pc, #52]	; (8006278 <USART1_IRQHandler+0x4c>)
 8006244:	1c53      	adds	r3, r2, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	7023      	strb	r3, [r4, #0]
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <USART1_IRQHandler+0x50>)
 800624c:	7818      	ldrb	r0, [r3, #0]
    	if (d_value == '\n') {
 800624e:	781b      	ldrb	r3, [r3, #0]
  getBuffer[countOfGetBuffer++] = d_value;
 8006250:	5488      	strb	r0, [r1, r2]
    	if (d_value == '\n') {
 8006252:	2b0a      	cmp	r3, #10
 8006254:	d104      	bne.n	8006260 <USART1_IRQHandler+0x34>
    		usart1HaveNewData = 1;
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <USART1_IRQHandler+0x54>)
 8006258:	2201      	movs	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
    		//while (HAL_UART_Transmit(&huart1, (uint8_t*) getBuffer,	countOfGetBuffer, 1000) != HAL_OK)
    		//	;

    		countOfGetBuffer = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	7023      	strb	r3, [r4, #0]
    	}
    	HAL_UART_Receive_IT(&huart1, (uint8_t*) &d_value, 1); //Because the receive interrupt is entered every time a character is received, this line of code must be added, otherwise only one character can be received, and the entire string cannot be received.
 8006260:	2201      	movs	r2, #1
 8006262:	4906      	ldr	r1, [pc, #24]	; (800627c <USART1_IRQHandler+0x50>)
 8006264:	4803      	ldr	r0, [pc, #12]	; (8006274 <USART1_IRQHandler+0x48>)
  /* USER CODE END USART1_IRQn 1 */
}
 8006266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	HAL_UART_Receive_IT(&huart1, (uint8_t*) &d_value, 1); //Because the receive interrupt is entered every time a character is received, this line of code must be added, otherwise only one character can be received, and the entire string cannot be received.
 800626a:	f007 bb51 	b.w	800d910 <HAL_UART_Receive_IT>
 800626e:	bf00      	nop
 8006270:	240400ac 	.word	0x240400ac
 8006274:	24040440 	.word	0x24040440
 8006278:	240400ae 	.word	0x240400ae
 800627c:	240400ad 	.word	0x240400ad
 8006280:	2404012e 	.word	0x2404012e

08006284 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <USART3_IRQHandler+0x8>)
 8006286:	f006 bac9 	b.w	800c81c <HAL_UART_IRQHandler>
 800628a:	bf00      	nop
 800628c:	24040568 	.word	0x24040568

08006290 <FPU_IRQHandler>:
 8006290:	4770      	bx	lr
	...

08006294 <QUADSPI_IRQHandler>:
void QUADSPI_IRQHandler(void)
{
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <QUADSPI_IRQHandler+0x8>)
 8006296:	f003 b99b 	b.w	80095d0 <HAL_QSPI_IRQHandler>
 800629a:	bf00      	nop
 800629c:	2403ffc0 	.word	0x2403ffc0

080062a0 <TIM17_IRQHandler>:
void TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80062a0:	4801      	ldr	r0, [pc, #4]	; (80062a8 <TIM17_IRQHandler+0x8>)
 80062a2:	f005 bc1e 	b.w	800bae2 <HAL_TIM_IRQHandler>
 80062a6:	bf00      	nop
 80062a8:	24040060 	.word	0x24040060

080062ac <Custome_ITM_SendChar_ch0>:


void Custome_ITM_SendChar_ch0(uint8_t data)
{
    // Enable DWT and ITM units by setting the TRCENA bit in the DEMCR register
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80062ac:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <Custome_ITM_SendChar_ch0+0x28>)
 80062ae:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80062b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062b6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    // Enable Stimulus Port 0 by setting the corresponding bit in the ITM Trace Enable Register
    ITM->TER |= (1UL << 0);
 80062ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80062be:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
    // Wait until the FIFO is ready to accept data
    while (!(ITM->PORT[0].u32 & 1U));
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	07d2      	lsls	r2, r2, #31
 80062ce:	d5fc      	bpl.n	80062ca <Custome_ITM_SendChar_ch0+0x1e>

    // Write data to the ITM Stimulus Port 0
    ITM->PORT[0].u8 = data;
 80062d0:	7018      	strb	r0, [r3, #0]
}
 80062d2:	4770      	bx	lr
 80062d4:	e000ed00 	.word	0xe000ed00

080062d8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80062d8:	2001      	movs	r0, #1
 80062da:	4770      	bx	lr

080062dc <_kill>:

int _kill(int pid, int sig)
{
 80062dc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80062de:	f00b fd9f 	bl	8011e20 <__errno>
 80062e2:	2316      	movs	r3, #22
 80062e4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80062e6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ea:	bd08      	pop	{r3, pc}

080062ec <_exit>:

void _exit (int status)
{
 80062ec:	b508      	push	{r3, lr}
  errno = EINVAL;
 80062ee:	f00b fd97 	bl	8011e20 <__errno>
 80062f2:	2316      	movs	r3, #22
 80062f4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80062f6:	e7fe      	b.n	80062f6 <_exit+0xa>

080062f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	460d      	mov	r5, r1
 80062fc:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062fe:	460e      	mov	r6, r1
 8006300:	1b73      	subs	r3, r6, r5
 8006302:	429c      	cmp	r4, r3
 8006304:	dc01      	bgt.n	800630a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8006306:	4620      	mov	r0, r4
 8006308:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800630a:	f3af 8000 	nop.w
 800630e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006312:	e7f5      	b.n	8006300 <_read+0x8>

08006314 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006318:	460d      	mov	r5, r1
 800631a:	1a6b      	subs	r3, r5, r1
 800631c:	429c      	cmp	r4, r3
 800631e:	dc01      	bgt.n	8006324 <_write+0x10>
  {
	  Custome_ITM_SendChar_ch0(*ptr++);
  }
  return len;
}
 8006320:	4620      	mov	r0, r4
 8006322:	bd38      	pop	{r3, r4, r5, pc}
	  Custome_ITM_SendChar_ch0(*ptr++);
 8006324:	f815 0b01 	ldrb.w	r0, [r5], #1
 8006328:	f7ff ffc0 	bl	80062ac <Custome_ITM_SendChar_ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800632c:	e7f5      	b.n	800631a <_write+0x6>

0800632e <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	4770      	bx	lr

08006334 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8006338:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800633a:	604b      	str	r3, [r1, #4]
}
 800633c:	4770      	bx	lr

0800633e <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800633e:	2001      	movs	r0, #1
 8006340:	4770      	bx	lr

08006342 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006342:	2000      	movs	r0, #0
 8006344:	4770      	bx	lr
	...

08006348 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006348:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <_sbrk+0x30>)
{
 800634a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800634c:	6811      	ldr	r1, [r2, #0]
{
 800634e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8006350:	b909      	cbnz	r1, 8006356 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8006352:	490a      	ldr	r1, [pc, #40]	; (800637c <_sbrk+0x34>)
 8006354:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006356:	6810      	ldr	r0, [r2, #0]
 8006358:	4909      	ldr	r1, [pc, #36]	; (8006380 <_sbrk+0x38>)
 800635a:	4c0a      	ldr	r4, [pc, #40]	; (8006384 <_sbrk+0x3c>)
 800635c:	4403      	add	r3, r0
 800635e:	1b09      	subs	r1, r1, r4
 8006360:	428b      	cmp	r3, r1
 8006362:	d906      	bls.n	8006372 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8006364:	f00b fd5c 	bl	8011e20 <__errno>
 8006368:	230c      	movs	r3, #12
 800636a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800636c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8006370:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8006372:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8006374:	e7fc      	b.n	8006370 <_sbrk+0x28>
 8006376:	bf00      	nop
 8006378:	24040130 	.word	0x24040130
 800637c:	24045440 	.word	0x24045440
 8006380:	24080000 	.word	0x24080000
 8006384:	00000400 	.word	0x00000400

08006388 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006388:	4a25      	ldr	r2, [pc, #148]	; (8006420 <SystemInit+0x98>)
 800638a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800638e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006392:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006396:	4a23      	ldr	r2, [pc, #140]	; (8006424 <SystemInit+0x9c>)
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	2b06      	cmp	r3, #6
 80063a0:	d805      	bhi.n	80063ae <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80063a2:	6813      	ldr	r3, [r2, #0]
 80063a4:	f023 030f 	bic.w	r3, r3, #15
 80063a8:	f043 0307 	orr.w	r3, r3, #7
 80063ac:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80063ae:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <SystemInit+0xa0>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80063b8:	2200      	movs	r2, #0
 80063ba:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80063bc:	4a1b      	ldr	r2, [pc, #108]	; (800642c <SystemInit+0xa4>)
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80063c2:	4918      	ldr	r1, [pc, #96]	; (8006424 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 80063c4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80063c6:	680a      	ldr	r2, [r1, #0]
 80063c8:	0712      	lsls	r2, r2, #28
 80063ca:	d505      	bpl.n	80063d8 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80063cc:	680a      	ldr	r2, [r1, #0]
 80063ce:	f022 020f 	bic.w	r2, r2, #15
 80063d2:	f042 0207 	orr.w	r2, r2, #7
 80063d6:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80063d8:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80063da:	4915      	ldr	r1, [pc, #84]	; (8006430 <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 80063dc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80063de:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80063e0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80063e2:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80063e4:	4913      	ldr	r1, [pc, #76]	; (8006434 <SystemInit+0xac>)
 80063e6:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80063e8:	4913      	ldr	r1, [pc, #76]	; (8006438 <SystemInit+0xb0>)
 80063ea:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80063ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80063ee:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80063f0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80063f2:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80063f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80063f6:	6819      	ldr	r1, [r3, #0]
 80063f8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80063fc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80063fe:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006400:	4b0e      	ldr	r3, [pc, #56]	; (800643c <SystemInit+0xb4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	0c1b      	lsrs	r3, r3, #16
 8006406:	041b      	lsls	r3, r3, #16
 8006408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800640c:	d203      	bcs.n	8006416 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800640e:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <SystemInit+0xb8>)
 8006410:	2201      	movs	r2, #1
 8006412:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006416:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <SystemInit+0xbc>)
 8006418:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800641c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800641e:	4770      	bx	lr
 8006420:	e000ed00 	.word	0xe000ed00
 8006424:	52002000 	.word	0x52002000
 8006428:	58024400 	.word	0x58024400
 800642c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006430:	02020200 	.word	0x02020200
 8006434:	01ff0000 	.word	0x01ff0000
 8006438:	01010280 	.word	0x01010280
 800643c:	5c001000 	.word	0x5c001000
 8006440:	51008000 	.word	0x51008000
 8006444:	52004000 	.word	0x52004000

08006448 <MX_TIM2_Init>:

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006448:	2210      	movs	r2, #16
 800644a:	2100      	movs	r1, #0
{
 800644c:	b500      	push	{lr}
 800644e:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006450:	eb0d 0002 	add.w	r0, sp, r2
 8006454:	f00b fb98 	bl	8011b88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006458:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800645a:	4815      	ldr	r0, [pc, #84]	; (80064b0 <MX_TIM2_Init+0x68>)
 800645c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006460:	9303      	str	r3, [sp, #12]
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006462:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006464:	6183      	str	r3, [r0, #24]
  htim2.Init.Prescaler = 0;
 8006466:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.Period = 4294967295;
 800646a:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800646e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006472:	e9c0 2303 	strd	r2, r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006476:	f005 fc4b 	bl	800bd10 <HAL_TIM_Base_Init>
 800647a:	b108      	cbz	r0, 8006480 <MX_TIM2_Init+0x38>
  {
    Error_Handler();
 800647c:	f7ff f98e 	bl	800579c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006484:	a904      	add	r1, sp, #16
 8006486:	480a      	ldr	r0, [pc, #40]	; (80064b0 <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006488:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800648a:	f005 fd6f 	bl	800bf6c <HAL_TIM_ConfigClockSource>
 800648e:	b108      	cbz	r0, 8006494 <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 8006490:	f7ff f984 	bl	800579c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006494:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006496:	a901      	add	r1, sp, #4
 8006498:	4805      	ldr	r0, [pc, #20]	; (80064b0 <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800649a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800649c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800649e:	f005 fec5 	bl	800c22c <HAL_TIMEx_MasterConfigSynchronization>
 80064a2:	b108      	cbz	r0, 80064a8 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 80064a4:	f7ff f97a 	bl	800579c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80064a8:	b009      	add	sp, #36	; 0x24
 80064aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80064ae:	bf00      	nop
 80064b0:	24040134 	.word	0x24040134

080064b4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80064b4:	6803      	ldr	r3, [r0, #0]
{
 80064b6:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064bc:	d10e      	bne.n	80064dc <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80064be:	4b10      	ldr	r3, [pc, #64]	; (8006500 <HAL_TIM_Base_MspInit+0x4c>)
 80064c0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80064c4:	f042 0201 	orr.w	r2, r2, #1
 80064c8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80064cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80064d8:	b002      	add	sp, #8
 80064da:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM4)
 80064dc:	4a09      	ldr	r2, [pc, #36]	; (8006504 <HAL_TIM_Base_MspInit+0x50>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d1fa      	bne.n	80064d8 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80064e2:	4b07      	ldr	r3, [pc, #28]	; (8006500 <HAL_TIM_Base_MspInit+0x4c>)
 80064e4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80064e8:	f042 0204 	orr.w	r2, r2, #4
 80064ec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80064f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	9b01      	ldr	r3, [sp, #4]
}
 80064fc:	e7ec      	b.n	80064d8 <HAL_TIM_Base_MspInit+0x24>
 80064fe:	bf00      	nop
 8006500:	58024400 	.word	0x58024400
 8006504:	40000800 	.word	0x40000800

08006508 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006508:	b510      	push	{r4, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800650e:	2214      	movs	r2, #20
 8006510:	2100      	movs	r1, #0
 8006512:	a801      	add	r0, sp, #4
 8006514:	f00b fb38 	bl	8011b88 <memset>
  if(timHandle->Instance==TIM4)
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <HAL_TIM_MspPostInit+0x4c>)
 800651c:	429a      	cmp	r2, r3
 800651e:	d116      	bne.n	800654e <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006522:	a901      	add	r1, sp, #4
 8006524:	480d      	ldr	r0, [pc, #52]	; (800655c <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006526:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800652a:	f042 0208 	orr.w	r2, r2, #8
 800652e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006532:	f44f 4260 	mov.w	r2, #57344	; 0xe000
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006542:	2302      	movs	r3, #2
 8006544:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006548:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800654a:	f002 fb21 	bl	8008b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800654e:	b006      	add	sp, #24
 8006550:	bd10      	pop	{r4, pc}
 8006552:	bf00      	nop
 8006554:	40000800 	.word	0x40000800
 8006558:	58024400 	.word	0x58024400
 800655c:	58020c00 	.word	0x58020c00

08006560 <MX_TIM4_Init>:
{
 8006560:	b510      	push	{r4, lr}
 8006562:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006564:	2210      	movs	r2, #16
 8006566:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006568:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800656a:	a803      	add	r0, sp, #12
 800656c:	f00b fb0c 	bl	8011b88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006570:	221c      	movs	r2, #28
 8006572:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006574:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006576:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800657a:	e9cd 4400 	strd	r4, r4, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800657e:	f00b fb03 	bl	8011b88 <memset>
  htim4.Instance = TIM4;
 8006582:	4825      	ldr	r0, [pc, #148]	; (8006618 <MX_TIM4_Init+0xb8>)
 8006584:	4b25      	ldr	r3, [pc, #148]	; (800661c <MX_TIM4_Init+0xbc>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006586:	6084      	str	r4, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006588:	6184      	str	r4, [r0, #24]
  htim4.Init.Prescaler = 0;
 800658a:	e9c0 3400 	strd	r3, r4, [r0]
  htim4.Init.Period = 65535;
 800658e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006592:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006596:	f005 fbbb 	bl	800bd10 <HAL_TIM_Base_Init>
 800659a:	b108      	cbz	r0, 80065a0 <MX_TIM4_Init+0x40>
    Error_Handler();
 800659c:	f7ff f8fe 	bl	800579c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80065a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80065a4:	a903      	add	r1, sp, #12
 80065a6:	481c      	ldr	r0, [pc, #112]	; (8006618 <MX_TIM4_Init+0xb8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80065a8:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80065aa:	f005 fcdf 	bl	800bf6c <HAL_TIM_ConfigClockSource>
 80065ae:	b108      	cbz	r0, 80065b4 <MX_TIM4_Init+0x54>
    Error_Handler();
 80065b0:	f7ff f8f4 	bl	800579c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80065b4:	4818      	ldr	r0, [pc, #96]	; (8006618 <MX_TIM4_Init+0xb8>)
 80065b6:	f005 fbdb 	bl	800bd70 <HAL_TIM_PWM_Init>
 80065ba:	b108      	cbz	r0, 80065c0 <MX_TIM4_Init+0x60>
    Error_Handler();
 80065bc:	f7ff f8ee 	bl	800579c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065c0:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80065c2:	4669      	mov	r1, sp
 80065c4:	4814      	ldr	r0, [pc, #80]	; (8006618 <MX_TIM4_Init+0xb8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065c6:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065c8:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80065ca:	f005 fe2f 	bl	800c22c <HAL_TIMEx_MasterConfigSynchronization>
 80065ce:	b108      	cbz	r0, 80065d4 <MX_TIM4_Init+0x74>
    Error_Handler();
 80065d0:	f7ff f8e4 	bl	800579c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065d4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065d6:	2204      	movs	r2, #4
 80065d8:	a907      	add	r1, sp, #28
 80065da:	480f      	ldr	r0, [pc, #60]	; (8006618 <MX_TIM4_Init+0xb8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065dc:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065de:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80065e0:	e9cd 3407 	strd	r3, r4, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065e4:	f005 fc3a 	bl	800be5c <HAL_TIM_PWM_ConfigChannel>
 80065e8:	b108      	cbz	r0, 80065ee <MX_TIM4_Init+0x8e>
    Error_Handler();
 80065ea:	f7ff f8d7 	bl	800579c <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80065ee:	2208      	movs	r2, #8
 80065f0:	a907      	add	r1, sp, #28
 80065f2:	4809      	ldr	r0, [pc, #36]	; (8006618 <MX_TIM4_Init+0xb8>)
 80065f4:	f005 fc32 	bl	800be5c <HAL_TIM_PWM_ConfigChannel>
 80065f8:	b108      	cbz	r0, 80065fe <MX_TIM4_Init+0x9e>
    Error_Handler();
 80065fa:	f7ff f8cf 	bl	800579c <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80065fe:	220c      	movs	r2, #12
 8006600:	a907      	add	r1, sp, #28
 8006602:	4805      	ldr	r0, [pc, #20]	; (8006618 <MX_TIM4_Init+0xb8>)
 8006604:	f005 fc2a 	bl	800be5c <HAL_TIM_PWM_ConfigChannel>
 8006608:	b108      	cbz	r0, 800660e <MX_TIM4_Init+0xae>
    Error_Handler();
 800660a:	f7ff f8c7 	bl	800579c <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 800660e:	4802      	ldr	r0, [pc, #8]	; (8006618 <MX_TIM4_Init+0xb8>)
 8006610:	f7ff ff7a 	bl	8006508 <HAL_TIM_MspPostInit>
}
 8006614:	b00e      	add	sp, #56	; 0x38
 8006616:	bd10      	pop	{r4, pc}
 8006618:	24040180 	.word	0x24040180
 800661c:	40000800 	.word	0x40000800

08006620 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006620:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006622:	4816      	ldr	r0, [pc, #88]	; (800667c <MX_LPUART1_UART_Init+0x5c>)
  hlpuart1.Init.BaudRate = 115200;
 8006624:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006628:	4a15      	ldr	r2, [pc, #84]	; (8006680 <MX_LPUART1_UART_Init+0x60>)
 800662a:	e9c0 2300 	strd	r2, r3, [r0]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800662e:	2300      	movs	r3, #0
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006630:	220c      	movs	r2, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006632:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006636:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006638:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800663a:	6643      	str	r3, [r0, #100]	; 0x64
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800663c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006640:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006644:	f007 f8ab 	bl	800d79e <HAL_UART_Init>
 8006648:	b108      	cbz	r0, 800664e <MX_LPUART1_UART_Init+0x2e>
  {
    Error_Handler();
 800664a:	f7ff f8a7 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800664e:	2100      	movs	r1, #0
 8006650:	480a      	ldr	r0, [pc, #40]	; (800667c <MX_LPUART1_UART_Init+0x5c>)
 8006652:	f007 fa4e 	bl	800daf2 <HAL_UARTEx_SetTxFifoThreshold>
 8006656:	b108      	cbz	r0, 800665c <MX_LPUART1_UART_Init+0x3c>
  {
    Error_Handler();
 8006658:	f7ff f8a0 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800665c:	2100      	movs	r1, #0
 800665e:	4807      	ldr	r0, [pc, #28]	; (800667c <MX_LPUART1_UART_Init+0x5c>)
 8006660:	f007 fa67 	bl	800db32 <HAL_UARTEx_SetRxFifoThreshold>
 8006664:	b108      	cbz	r0, 800666a <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 8006666:	f7ff f899 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800666a:	4804      	ldr	r0, [pc, #16]	; (800667c <MX_LPUART1_UART_Init+0x5c>)
 800666c:	f007 fa26 	bl	800dabc <HAL_UARTEx_DisableFifoMode>
 8006670:	b118      	cbz	r0, 800667a <MX_LPUART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006676:	f7ff b891 	b.w	800579c <Error_Handler>
}
 800667a:	bd08      	pop	{r3, pc}
 800667c:	240403ac 	.word	0x240403ac
 8006680:	58000c00 	.word	0x58000c00

08006684 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006684:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006686:	4816      	ldr	r0, [pc, #88]	; (80066e0 <MX_USART1_UART_Init+0x5c>)
  huart1.Init.BaudRate = 115200;
 8006688:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800668c:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <MX_USART1_UART_Init+0x60>)
 800668e:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006692:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006694:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006696:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800669a:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800669c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066a0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80066a4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80066a8:	f007 f879 	bl	800d79e <HAL_UART_Init>
 80066ac:	b108      	cbz	r0, 80066b2 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 80066ae:	f7ff f875 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80066b2:	2100      	movs	r1, #0
 80066b4:	480a      	ldr	r0, [pc, #40]	; (80066e0 <MX_USART1_UART_Init+0x5c>)
 80066b6:	f007 fa1c 	bl	800daf2 <HAL_UARTEx_SetTxFifoThreshold>
 80066ba:	b108      	cbz	r0, 80066c0 <MX_USART1_UART_Init+0x3c>
  {
    Error_Handler();
 80066bc:	f7ff f86e 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80066c0:	2100      	movs	r1, #0
 80066c2:	4807      	ldr	r0, [pc, #28]	; (80066e0 <MX_USART1_UART_Init+0x5c>)
 80066c4:	f007 fa35 	bl	800db32 <HAL_UARTEx_SetRxFifoThreshold>
 80066c8:	b108      	cbz	r0, 80066ce <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80066ca:	f7ff f867 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80066ce:	4804      	ldr	r0, [pc, #16]	; (80066e0 <MX_USART1_UART_Init+0x5c>)
 80066d0:	f007 f9f4 	bl	800dabc <HAL_UARTEx_DisableFifoMode>
 80066d4:	b118      	cbz	r0, 80066de <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80066d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80066da:	f7ff b85f 	b.w	800579c <Error_Handler>
}
 80066de:	bd08      	pop	{r3, pc}
 80066e0:	24040440 	.word	0x24040440
 80066e4:	40011000 	.word	0x40011000

080066e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80066e8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066ea:	4817      	ldr	r0, [pc, #92]	; (8006748 <MX_USART2_UART_Init+0x60>)
  huart2.Init.BaudRate = 115200;
 80066ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80066f0:	4a16      	ldr	r2, [pc, #88]	; (800674c <MX_USART2_UART_Init+0x64>)
 80066f2:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066f6:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066f8:	220c      	movs	r2, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80066fa:	4619      	mov	r1, r3
  huart2.Init.Parity = UART_PARITY_NONE;
 80066fc:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066fe:	e9c0 2305 	strd	r2, r3, [r0, #20]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8006702:	461a      	mov	r2, r3
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006704:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006708:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800670c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8006710:	f007 f992 	bl	800da38 <HAL_RS485Ex_Init>
 8006714:	b108      	cbz	r0, 800671a <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
 8006716:	f7ff f841 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800671a:	2100      	movs	r1, #0
 800671c:	480a      	ldr	r0, [pc, #40]	; (8006748 <MX_USART2_UART_Init+0x60>)
 800671e:	f007 f9e8 	bl	800daf2 <HAL_UARTEx_SetTxFifoThreshold>
 8006722:	b108      	cbz	r0, 8006728 <MX_USART2_UART_Init+0x40>
  {
    Error_Handler();
 8006724:	f7ff f83a 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006728:	2100      	movs	r1, #0
 800672a:	4807      	ldr	r0, [pc, #28]	; (8006748 <MX_USART2_UART_Init+0x60>)
 800672c:	f007 fa01 	bl	800db32 <HAL_UARTEx_SetRxFifoThreshold>
 8006730:	b108      	cbz	r0, 8006736 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
 8006732:	f7ff f833 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006736:	4804      	ldr	r0, [pc, #16]	; (8006748 <MX_USART2_UART_Init+0x60>)
 8006738:	f007 f9c0 	bl	800dabc <HAL_UARTEx_DisableFifoMode>
 800673c:	b118      	cbz	r0, 8006746 <MX_USART2_UART_Init+0x5e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800673e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006742:	f7ff b82b 	b.w	800579c <Error_Handler>
}
 8006746:	bd08      	pop	{r3, pc}
 8006748:	240404d4 	.word	0x240404d4
 800674c:	40004400 	.word	0x40004400

08006750 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006750:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006752:	4817      	ldr	r0, [pc, #92]	; (80067b0 <MX_USART3_UART_Init+0x60>)
  huart3.Init.BaudRate = 19200;
 8006754:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8006758:	4a16      	ldr	r2, [pc, #88]	; (80067b4 <MX_USART3_UART_Init+0x64>)
 800675a:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800675e:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006760:	220c      	movs	r2, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8006762:	4619      	mov	r1, r3
  huart3.Init.Parity = UART_PARITY_NONE;
 8006764:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006766:	e9c0 2305 	strd	r2, r3, [r0, #20]
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800676a:	461a      	mov	r2, r3
  huart3.Init.StopBits = UART_STOPBITS_1;
 800676c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006770:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006774:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8006778:	f007 f95e 	bl	800da38 <HAL_RS485Ex_Init>
 800677c:	b108      	cbz	r0, 8006782 <MX_USART3_UART_Init+0x32>
  {
    Error_Handler();
 800677e:	f7ff f80d 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006782:	2100      	movs	r1, #0
 8006784:	480a      	ldr	r0, [pc, #40]	; (80067b0 <MX_USART3_UART_Init+0x60>)
 8006786:	f007 f9b4 	bl	800daf2 <HAL_UARTEx_SetTxFifoThreshold>
 800678a:	b108      	cbz	r0, 8006790 <MX_USART3_UART_Init+0x40>
  {
    Error_Handler();
 800678c:	f7ff f806 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006790:	2100      	movs	r1, #0
 8006792:	4807      	ldr	r0, [pc, #28]	; (80067b0 <MX_USART3_UART_Init+0x60>)
 8006794:	f007 f9cd 	bl	800db32 <HAL_UARTEx_SetRxFifoThreshold>
 8006798:	b108      	cbz	r0, 800679e <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
 800679a:	f7fe ffff 	bl	800579c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800679e:	4804      	ldr	r0, [pc, #16]	; (80067b0 <MX_USART3_UART_Init+0x60>)
 80067a0:	f007 f98c 	bl	800dabc <HAL_UARTEx_DisableFifoMode>
 80067a4:	b118      	cbz	r0, 80067ae <MX_USART3_UART_Init+0x5e>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80067a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80067aa:	f7fe bff7 	b.w	800579c <Error_Handler>
}
 80067ae:	bd08      	pop	{r3, pc}
 80067b0:	24040568 	.word	0x24040568
 80067b4:	40004800 	.word	0x40004800

080067b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80067b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ba:	b0bf      	sub	sp, #252	; 0xfc
 80067bc:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067be:	2214      	movs	r2, #20
 80067c0:	2100      	movs	r1, #0
 80067c2:	a809      	add	r0, sp, #36	; 0x24
 80067c4:	f00b f9e0 	bl	8011b88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80067c8:	22c0      	movs	r2, #192	; 0xc0
 80067ca:	2100      	movs	r1, #0
 80067cc:	a80e      	add	r0, sp, #56	; 0x38
 80067ce:	f00b f9db 	bl	8011b88 <memset>
  if(uartHandle->Instance==LPUART1)
 80067d2:	682b      	ldr	r3, [r5, #0]
 80067d4:	4aad      	ldr	r2, [pc, #692]	; (8006a8c <HAL_UART_MspInit+0x2d4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d131      	bne.n	800683e <HAL_UART_MspInit+0x86>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80067da:	2204      	movs	r2, #4
 80067dc:	2300      	movs	r3, #0
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067de:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80067e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067e4:	f003 fdb8 	bl	800a358 <HAL_RCCEx_PeriphCLKConfig>
 80067e8:	b108      	cbz	r0, 80067ee <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 80067ea:	f7fe ffd7 	bl	800579c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80067ee:	4ba8      	ldr	r3, [pc, #672]	; (8006a90 <HAL_UART_MspInit+0x2d8>)
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f0:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067f2:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80067f4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80067f8:	f042 0208 	orr.w	r2, r2, #8
 80067fc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006800:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006804:	f002 0208 	and.w	r2, r2, #8
 8006808:	9200      	str	r2, [sp, #0]
 800680a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800680c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006810:	f042 0202 	orr.w	r2, r2, #2
 8006814:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006824:	2302      	movs	r3, #2
 8006826:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800682a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800682c:	4899      	ldr	r0, [pc, #612]	; (8006a94 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800682e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8006832:	2308      	movs	r3, #8
 8006834:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006836:	f002 f9ab 	bl	8008b90 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800683a:	b03f      	add	sp, #252	; 0xfc
 800683c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==USART1)
 800683e:	4a96      	ldr	r2, [pc, #600]	; (8006a98 <HAL_UART_MspInit+0x2e0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d139      	bne.n	80068b8 <HAL_UART_MspInit+0x100>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006844:	2201      	movs	r2, #1
 8006846:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006848:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800684a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800684e:	f003 fd83 	bl	800a358 <HAL_RCCEx_PeriphCLKConfig>
 8006852:	b108      	cbz	r0, 8006858 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8006854:	f7fe ffa2 	bl	800579c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006858:	4b8d      	ldr	r3, [pc, #564]	; (8006a90 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800685a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006860:	488c      	ldr	r0, [pc, #560]	; (8006a94 <HAL_UART_MspInit+0x2dc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006862:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006866:	f042 0210 	orr.w	r2, r2, #16
 800686a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800686e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006872:	f002 0210 	and.w	r2, r2, #16
 8006876:	9202      	str	r2, [sp, #8]
 8006878:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800687a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800687e:	f042 0202 	orr.w	r2, r2, #2
 8006882:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	9303      	str	r3, [sp, #12]
 8006890:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006892:	2302      	movs	r3, #2
 8006894:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006898:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800689a:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800689c:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068a2:	f002 f975 	bl	8008b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80068a6:	2025      	movs	r0, #37	; 0x25
 80068a8:	4622      	mov	r2, r4
 80068aa:	2105      	movs	r1, #5
 80068ac:	f001 f8cc 	bl	8007a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80068b0:	2025      	movs	r0, #37	; 0x25
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80068b2:	f001 f8fb 	bl	8007aac <HAL_NVIC_EnableIRQ>
}
 80068b6:	e7c0      	b.n	800683a <HAL_UART_MspInit+0x82>
  else if(uartHandle->Instance==USART2)
 80068b8:	4a78      	ldr	r2, [pc, #480]	; (8006a9c <HAL_UART_MspInit+0x2e4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d179      	bne.n	80069b2 <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068be:	2202      	movs	r2, #2
 80068c0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068c2:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068c8:	f003 fd46 	bl	800a358 <HAL_RCCEx_PeriphCLKConfig>
 80068cc:	b108      	cbz	r0, 80068d2 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 80068ce:	f7fe ff65 	bl	800579c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80068d2:	4b6f      	ldr	r3, [pc, #444]	; (8006a90 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d4:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80068d6:	2407      	movs	r4, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d8:	2702      	movs	r7, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 80068da:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068de:	a909      	add	r1, sp, #36	; 0x24
 80068e0:	486f      	ldr	r0, [pc, #444]	; (8006aa0 <HAL_UART_MspInit+0x2e8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80068e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80068e6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80068ea:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80068ee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80068f2:	9204      	str	r2, [sp, #16]
 80068f4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006902:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006906:	f002 0201 	and.w	r2, r2, #1
 800690a:	9205      	str	r2, [sp, #20]
 800690c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800690e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006912:	f042 0208 	orr.w	r2, r2, #8
 8006916:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800691a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800691e:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	9306      	str	r3, [sp, #24]
 8006926:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006928:	2306      	movs	r3, #6
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800692a:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800692e:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006932:	f002 f92d 	bl	8008b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006936:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006938:	485a      	ldr	r0, [pc, #360]	; (8006aa4 <HAL_UART_MspInit+0x2ec>)
 800693a:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800693c:	940d      	str	r4, [sp, #52]	; 0x34
    hdma_usart2_rx.Instance = DMA1_Stream4;
 800693e:	4c5a      	ldr	r4, [pc, #360]	; (8006aa8 <HAL_UART_MspInit+0x2f0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006940:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006944:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006948:	f002 f922 	bl	8008b90 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800694c:	232b      	movs	r3, #43	; 0x2b
 800694e:	4a57      	ldr	r2, [pc, #348]	; (8006aac <HAL_UART_MspInit+0x2f4>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006950:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006952:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006956:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800695a:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800695e:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006962:	e9c4 6606 	strd	r6, r6, [r4, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006966:	e9c4 6608 	strd	r6, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800696a:	f001 fa51 	bl	8007e10 <HAL_DMA_Init>
 800696e:	b108      	cbz	r0, 8006974 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8006970:	f7fe ff14 	bl	800579c <Error_Handler>
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006974:	232c      	movs	r3, #44	; 0x2c
 8006976:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006ac8 <HAL_UART_MspInit+0x310>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800697a:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800697e:	f04f 0e40 	mov.w	lr, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006982:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006984:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Instance = DMA1_Stream5;
 8006988:	4c49      	ldr	r4, [pc, #292]	; (8006ab0 <HAL_UART_MspInit+0x2f8>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800698a:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800698e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006990:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006992:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006996:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800699a:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800699e:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80069a2:	f001 fa35 	bl	8007e10 <HAL_DMA_Init>
 80069a6:	b108      	cbz	r0, 80069ac <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 80069a8:	f7fe fef8 	bl	800579c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80069ac:	67ec      	str	r4, [r5, #124]	; 0x7c
 80069ae:	63a5      	str	r5, [r4, #56]	; 0x38
 80069b0:	e743      	b.n	800683a <HAL_UART_MspInit+0x82>
  else if(uartHandle->Instance==USART3)
 80069b2:	4a40      	ldr	r2, [pc, #256]	; (8006ab4 <HAL_UART_MspInit+0x2fc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	f47f af40 	bne.w	800683a <HAL_UART_MspInit+0x82>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80069ba:	2202      	movs	r2, #2
 80069bc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069be:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80069c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069c4:	f003 fcc8 	bl	800a358 <HAL_RCCEx_PeriphCLKConfig>
 80069c8:	b108      	cbz	r0, 80069ce <HAL_UART_MspInit+0x216>
      Error_Handler();
 80069ca:	f7fe fee7 	bl	800579c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80069ce:	4b30      	ldr	r3, [pc, #192]	; (8006a90 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d0:	f44f 5098 	mov.w	r0, #4864	; 0x1300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d4:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069d6:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_USART3_CLK_ENABLE();
 80069d8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80069dc:	4c36      	ldr	r4, [pc, #216]	; (8006ab8 <HAL_UART_MspInit+0x300>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80069de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80069e2:	4f36      	ldr	r7, [pc, #216]	; (8006abc <HAL_UART_MspInit+0x304>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80069e4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80069e8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80069ec:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80069f0:	9207      	str	r2, [sp, #28]
 80069f2:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80069f8:	f042 0208 	orr.w	r2, r2, #8
 80069fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	9308      	str	r3, [sp, #32]
 8006a0a:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a12:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a14:	4823      	ldr	r0, [pc, #140]	; (8006aa4 <HAL_UART_MspInit+0x2ec>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a16:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a18:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a1c:	f002 f8b8 	bl	8008b90 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006a20:	232d      	movs	r3, #45	; 0x2d
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006a22:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006a24:	e9c4 7300 	strd	r7, r3, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a2c:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a30:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006a34:	e9c4 6606 	strd	r6, r6, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a38:	e9c4 6608 	strd	r6, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006a3c:	f001 f9e8 	bl	8007e10 <HAL_DMA_Init>
 8006a40:	b108      	cbz	r0, 8006a46 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8006a42:	f7fe feab 	bl	800579c <Error_Handler>
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006a46:	4a1e      	ldr	r2, [pc, #120]	; (8006ac0 <HAL_UART_MspInit+0x308>)
 8006a48:	232e      	movs	r3, #46	; 0x2e
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006a4a:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a4e:	2140      	movs	r1, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006a50:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8006a52:	4c1c      	ldr	r4, [pc, #112]	; (8006ac4 <HAL_UART_MspInit+0x30c>)
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006a54:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a58:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006a5e:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a60:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a64:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006a68:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a6c:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006a70:	f001 f9ce 	bl	8007e10 <HAL_DMA_Init>
 8006a74:	b108      	cbz	r0, 8006a7a <HAL_UART_MspInit+0x2c2>
      Error_Handler();
 8006a76:	f7fe fe91 	bl	800579c <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006a7a:	2027      	movs	r0, #39	; 0x27
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006a80:	67ec      	str	r4, [r5, #124]	; 0x7c
 8006a82:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006a84:	f000 ffe0 	bl	8007a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006a88:	2027      	movs	r0, #39	; 0x27
 8006a8a:	e712      	b.n	80068b2 <HAL_UART_MspInit+0xfa>
 8006a8c:	58000c00 	.word	0x58000c00
 8006a90:	58024400 	.word	0x58024400
 8006a94:	58020400 	.word	0x58020400
 8006a98:	40011000 	.word	0x40011000
 8006a9c:	40004400 	.word	0x40004400
 8006aa0:	58020000 	.word	0x58020000
 8006aa4:	58020c00 	.word	0x58020c00
 8006aa8:	240401cc 	.word	0x240401cc
 8006aac:	40020070 	.word	0x40020070
 8006ab0:	24040244 	.word	0x24040244
 8006ab4:	40004800 	.word	0x40004800
 8006ab8:	240402bc 	.word	0x240402bc
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	24040334 	.word	0x24040334
 8006ac8:	40020088 	.word	0x40020088

08006acc <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 8006acc:	b508      	push	{r3, lr}
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ace:	480a      	ldr	r0, [pc, #40]	; (8006af8 <MX_USB_OTG_FS_HCD_Init+0x2c>)
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ad0:	f04f 0c01 	mov.w	ip, #1
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <MX_USB_OTG_FS_HCD_Init+0x30>)
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006ad6:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ad8:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8006ada:	2310      	movs	r3, #16
 8006adc:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e9c0 3c03 	strd	r3, ip, [r0, #12]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006ae4:	e9c0 2306 	strd	r2, r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006ae8:	f002 f9e7 	bl	8008eba <HAL_HCD_Init>
 8006aec:	b118      	cbz	r0, 8006af6 <MX_USB_OTG_FS_HCD_Init+0x2a>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8006aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006af2:	f7fe be53 	b.w	800579c <Error_Handler>
}
 8006af6:	bd08      	pop	{r3, pc}
 8006af8:	240405fc 	.word	0x240405fc
 8006afc:	40080000 	.word	0x40080000

08006b00 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006b00:	b530      	push	{r4, r5, lr}
 8006b02:	b0b9      	sub	sp, #228	; 0xe4
 8006b04:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b06:	2214      	movs	r2, #20
 8006b08:	2100      	movs	r1, #0
 8006b0a:	a803      	add	r0, sp, #12
 8006b0c:	f00b f83c 	bl	8011b88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006b10:	22c0      	movs	r2, #192	; 0xc0
 8006b12:	2100      	movs	r1, #0
 8006b14:	a808      	add	r0, sp, #32
 8006b16:	f00b f837 	bl	8011b88 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8006b1a:	6822      	ldr	r2, [r4, #0]
 8006b1c:	4b22      	ldr	r3, [pc, #136]	; (8006ba8 <HAL_HCD_MspInit+0xa8>)
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d13f      	bne.n	8006ba2 <HAL_HCD_MspInit+0xa2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006b22:	2300      	movs	r3, #0
 8006b24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b28:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006b2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006b2e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8006b32:	932a      	str	r3, [sp, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b34:	f003 fc10 	bl	800a358 <HAL_RCCEx_PeriphCLKConfig>
 8006b38:	b108      	cbz	r0, 8006b3e <HAL_HCD_MspInit+0x3e>
    {
      Error_Handler();
 8006b3a:	f7fe fe2f 	bl	800579c <Error_Handler>

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b3e:	4c1b      	ldr	r4, [pc, #108]	; (8006bac <HAL_HCD_MspInit+0xac>)
    HAL_PWREx_EnableUSBVoltageDetector();
 8006b40:	f002 fa4e 	bl	8008fe0 <HAL_PWREx_EnableUSBVoltageDetector>
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b44:	2500      	movs	r5, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b46:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b48:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b4c:	4818      	ldr	r0, [pc, #96]	; (8006bb0 <HAL_HCD_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006b56:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b5a:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b68:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b6c:	f002 f810 	bl	8008b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b70:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006b74:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b76:	a903      	add	r1, sp, #12
 8006b78:	480d      	ldr	r0, [pc, #52]	; (8006bb0 <HAL_HCD_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b7a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8006b7e:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b80:	e9cd 5505 	strd	r5, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8006b84:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b86:	f002 f803 	bl	8008b90 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b8a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8006b8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b92:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8006b96:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8006b9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b9e:	9302      	str	r3, [sp, #8]
 8006ba0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ba2:	b039      	add	sp, #228	; 0xe4
 8006ba4:	bd30      	pop	{r4, r5, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40080000 	.word	0x40080000
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	58020000 	.word	0x58020000

08006bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006bb8:	f7ff fbe6 	bl	8006388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006bbc:	480c      	ldr	r0, [pc, #48]	; (8006bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006bbe:	490d      	ldr	r1, [pc, #52]	; (8006bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006bc0:	4a0d      	ldr	r2, [pc, #52]	; (8006bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bc4:	e002      	b.n	8006bcc <LoopCopyDataInit>

08006bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bca:	3304      	adds	r3, #4

08006bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bd0:	d3f9      	bcc.n	8006bc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bd2:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006bd4:	4c0a      	ldr	r4, [pc, #40]	; (8006c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006bd8:	e001      	b.n	8006bde <LoopFillZerobss>

08006bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bdc:	3204      	adds	r2, #4

08006bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006be0:	d3fb      	bcc.n	8006bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006be2:	f00b f923 	bl	8011e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006be6:	f7fe fd19 	bl	800561c <main>
  bx  lr
 8006bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006bec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006bf0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006bf4:	2400023c 	.word	0x2400023c
  ldr r2, =_sidata
 8006bf8:	08016288 	.word	0x08016288
  ldr r2, =_sbss
 8006bfc:	24000240 	.word	0x24000240
  ldr r4, =_ebss
 8006c00:	2404543c 	.word	0x2404543c

08006c04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c04:	e7fe      	b.n	8006c04 <ADC3_IRQHandler>
	...

08006c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c08:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c0a:	2003      	movs	r0, #3
 8006c0c:	f000 ff0a 	bl	8007a24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c10:	f003 f87a 	bl	8009d08 <HAL_RCC_GetSysClockFreq>
 8006c14:	490f      	ldr	r1, [pc, #60]	; (8006c54 <HAL_Init+0x4c>)
 8006c16:	4a10      	ldr	r2, [pc, #64]	; (8006c58 <HAL_Init+0x50>)
 8006c18:	698b      	ldr	r3, [r1, #24]
 8006c1a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006c1e:	5cd3      	ldrb	r3, [r2, r3]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c26:	698b      	ldr	r3, [r1, #24]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	5cd3      	ldrb	r3, [r2, r3]
 8006c2e:	4a0b      	ldr	r2, [pc, #44]	; (8006c5c <HAL_Init+0x54>)
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	fa20 f303 	lsr.w	r3, r0, r3
 8006c38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <HAL_Init+0x58>)
 8006c3c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c3e:	200f      	movs	r0, #15
 8006c40:	f7ff fa62 	bl	8006108 <HAL_InitTick>
 8006c44:	4604      	mov	r4, r0
 8006c46:	b918      	cbnz	r0, 8006c50 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c48:	f7ff fa2c 	bl	80060a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006c50:	2401      	movs	r4, #1
 8006c52:	e7fb      	b.n	8006c4c <HAL_Init+0x44>
 8006c54:	58024400 	.word	0x58024400
 8006c58:	08015d5c 	.word	0x08015d5c
 8006c5c:	24000064 	.word	0x24000064
 8006c60:	24000060 	.word	0x24000060

08006c64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006c64:	4a03      	ldr	r2, [pc, #12]	; (8006c74 <HAL_IncTick+0x10>)
 8006c66:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <HAL_IncTick+0x14>)
 8006c68:	6811      	ldr	r1, [r2, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	440b      	add	r3, r1
 8006c6e:	6013      	str	r3, [r2, #0]
}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	24040900 	.word	0x24040900
 8006c78:	24000068 	.word	0x24000068

08006c7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006c7c:	4b01      	ldr	r3, [pc, #4]	; (8006c84 <HAL_GetTick+0x8>)
 8006c7e:	6818      	ldr	r0, [r3, #0]
}
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	24040900 	.word	0x24040900

08006c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006c8c:	f7ff fff6 	bl	8006c7c <HAL_GetTick>
 8006c90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c92:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006c94:	bf1e      	ittt	ne
 8006c96:	4b04      	ldrne	r3, [pc, #16]	; (8006ca8 <HAL_Delay+0x20>)
 8006c98:	781b      	ldrbne	r3, [r3, #0]
 8006c9a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c9c:	f7ff ffee 	bl	8006c7c <HAL_GetTick>
 8006ca0:	1b43      	subs	r3, r0, r5
 8006ca2:	42a3      	cmp	r3, r4
 8006ca4:	d3fa      	bcc.n	8006c9c <HAL_Delay+0x14>
  {
  }
}
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	24000068 	.word	0x24000068

08006cac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006cac:	4b01      	ldr	r3, [pc, #4]	; (8006cb4 <HAL_GetREVID+0x8>)
 8006cae:	6818      	ldr	r0, [r3, #0]
}
 8006cb0:	0c00      	lsrs	r0, r0, #16
 8006cb2:	4770      	bx	lr
 8006cb4:	5c001000 	.word	0x5c001000

08006cb8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8006cb8:	4a03      	ldr	r2, [pc, #12]	; (8006cc8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	f023 0302 	bic.w	r3, r3, #2
 8006cc0:	4318      	orrs	r0, r3
 8006cc2:	6010      	str	r0, [r2, #0]
}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	58003c00 	.word	0x58003c00

08006ccc <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8006ccc:	4a02      	ldr	r2, [pc, #8]	; (8006cd8 <HAL_SYSCFG_DisableVREFBUF+0xc>)
 8006cce:	6813      	ldr	r3, [r2, #0]
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	6013      	str	r3, [r2, #0]
}
 8006cd6:	4770      	bx	lr
 8006cd8:	58003c00 	.word	0x58003c00

08006cdc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006cdc:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006cde:	0dcc      	lsrs	r4, r1, #23
 8006ce0:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8006ce2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8006ce6:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006ce8:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8006cec:	408d      	lsls	r5, r1
 8006cee:	408a      	lsls	r2, r1
 8006cf0:	5903      	ldr	r3, [r0, r4]
 8006cf2:	ea23 0305 	bic.w	r3, r3, r5
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006cfa:	bd30      	pop	{r4, r5, pc}

08006cfc <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cfc:	6880      	ldr	r0, [r0, #8]
}
 8006cfe:	f000 0001 	and.w	r0, r0, #1
 8006d02:	4770      	bx	lr

08006d04 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d04:	6880      	ldr	r0, [r0, #8]
}
 8006d06:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8006d0a:	4770      	bx	lr

08006d0c <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d0c:	6803      	ldr	r3, [r0, #0]
 8006d0e:	4a42      	ldr	r2, [pc, #264]	; (8006e18 <HAL_ADC_PollForConversion+0x10c>)
 8006d10:	4293      	cmp	r3, r2
{
 8006d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d16:	4604      	mov	r4, r0
 8006d18:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d1a:	d01e      	beq.n	8006d5a <HAL_ADC_PollForConversion+0x4e>
 8006d1c:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8006d20:	483e      	ldr	r0, [pc, #248]	; (8006e1c <HAL_ADC_PollForConversion+0x110>)
 8006d22:	493f      	ldr	r1, [pc, #252]	; (8006e20 <HAL_ADC_PollForConversion+0x114>)
 8006d24:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 8006d28:	4283      	cmp	r3, r0
 8006d2a:	bf08      	it	eq
 8006d2c:	460a      	moveq	r2, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006d2e:	6925      	ldr	r5, [r4, #16]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006d30:	6897      	ldr	r7, [r2, #8]
 8006d32:	2d08      	cmp	r5, #8
 8006d34:	f007 071f 	and.w	r7, r7, #31
 8006d38:	d022      	beq.n	8006d80 <HAL_ADC_PollForConversion+0x74>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006d3a:	f240 2221 	movw	r2, #545	; 0x221
 8006d3e:	40fa      	lsrs	r2, r7
 8006d40:	07d1      	lsls	r1, r2, #31
 8006d42:	d50c      	bpl.n	8006d5e <HAL_ADC_PollForConversion+0x52>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006d4a:	d018      	beq.n	8006d7e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8006d4e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d50:	f043 0320 	orr.w	r3, r3, #32
 8006d54:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8006d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d5a:	4a31      	ldr	r2, [pc, #196]	; (8006e20 <HAL_ADC_PollForConversion+0x114>)
 8006d5c:	e7e7      	b.n	8006d2e <HAL_ADC_PollForConversion+0x22>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006d5e:	4a2e      	ldr	r2, [pc, #184]	; (8006e18 <HAL_ADC_PollForConversion+0x10c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00a      	beq.n	8006d7a <HAL_ADC_PollForConversion+0x6e>
 8006d64:	482d      	ldr	r0, [pc, #180]	; (8006e1c <HAL_ADC_PollForConversion+0x110>)
 8006d66:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006d6a:	492e      	ldr	r1, [pc, #184]	; (8006e24 <HAL_ADC_PollForConversion+0x118>)
 8006d6c:	4283      	cmp	r3, r0
 8006d6e:	bf18      	it	ne
 8006d70:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006d72:	6893      	ldr	r3, [r2, #8]
 8006d74:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006d78:	e7e7      	b.n	8006d4a <HAL_ADC_PollForConversion+0x3e>
 8006d7a:	4a29      	ldr	r2, [pc, #164]	; (8006e20 <HAL_ADC_PollForConversion+0x114>)
 8006d7c:	e7f9      	b.n	8006d72 <HAL_ADC_PollForConversion+0x66>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006d7e:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 8006d80:	f7ff ff7c 	bl	8006c7c <HAL_GetTick>
 8006d84:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	422a      	tst	r2, r5
 8006d8c:	d020      	beq.n	8006dd0 <HAL_ADC_PollForConversion+0xc4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d94:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006d9c:	d10f      	bne.n	8006dbe <HAL_ADC_PollForConversion+0xb2>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006d9e:	7d62      	ldrb	r2, [r4, #21]
 8006da0:	b96a      	cbnz	r2, 8006dbe <HAL_ADC_PollForConversion+0xb2>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	0710      	lsls	r0, r2, #28
 8006da6:	d50a      	bpl.n	8006dbe <HAL_ADC_PollForConversion+0xb2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006da8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dae:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006db0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006db2:	04d1      	lsls	r1, r2, #19
 8006db4:	d403      	bmi.n	8006dbe <HAL_ADC_PollForConversion+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006db6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	6562      	str	r2, [r4, #84]	; 0x54
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006dbe:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <HAL_ADC_PollForConversion+0x110>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d021      	beq.n	8006e08 <HAL_ADC_PollForConversion+0xfc>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006dc4:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006dc6:	2d08      	cmp	r5, #8
 8006dc8:	d118      	bne.n	8006dfc <HAL_ADC_PollForConversion+0xf0>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006dca:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8006dcc:	2000      	movs	r0, #0
 8006dce:	e7c2      	b.n	8006d56 <HAL_ADC_PollForConversion+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006dd0:	1c72      	adds	r2, r6, #1
 8006dd2:	d0d9      	beq.n	8006d88 <HAL_ADC_PollForConversion+0x7c>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006dd4:	f7ff ff52 	bl	8006c7c <HAL_GetTick>
 8006dd8:	eba0 0008 	sub.w	r0, r0, r8
 8006ddc:	42b0      	cmp	r0, r6
 8006dde:	d801      	bhi.n	8006de4 <HAL_ADC_PollForConversion+0xd8>
 8006de0:	2e00      	cmp	r6, #0
 8006de2:	d1d0      	bne.n	8006d86 <HAL_ADC_PollForConversion+0x7a>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	402b      	ands	r3, r5
 8006dea:	d1cc      	bne.n	8006d86 <HAL_ADC_PollForConversion+0x7a>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006dec:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_TIMEOUT;
 8006dee:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8006df0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006df4:	f042 0204 	orr.w	r2, r2, #4
 8006df8:	6562      	str	r2, [r4, #84]	; 0x54
          return HAL_TIMEOUT;
 8006dfa:	e7ac      	b.n	8006d56 <HAL_ADC_PollForConversion+0x4a>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006dfc:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8006e00:	d1e4      	bne.n	8006dcc <HAL_ADC_PollForConversion+0xc0>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006e02:	220c      	movs	r2, #12
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e7a6      	b.n	8006d56 <HAL_ADC_PollForConversion+0x4a>
 8006e08:	f240 2221 	movw	r2, #545	; 0x221
 8006e0c:	40fa      	lsrs	r2, r7
 8006e0e:	07d2      	lsls	r2, r2, #31
 8006e10:	d4d8      	bmi.n	8006dc4 <HAL_ADC_PollForConversion+0xb8>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006e12:	4a01      	ldr	r2, [pc, #4]	; (8006e18 <HAL_ADC_PollForConversion+0x10c>)
 8006e14:	68d0      	ldr	r0, [r2, #12]
 8006e16:	e7d6      	b.n	8006dc6 <HAL_ADC_PollForConversion+0xba>
 8006e18:	40022000 	.word	0x40022000
 8006e1c:	40022100 	.word	0x40022100
 8006e20:	40022300 	.word	0x40022300
 8006e24:	58026300 	.word	0x58026300

08006e28 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006e28:	6803      	ldr	r3, [r0, #0]
 8006e2a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8006e2c:	4770      	bx	lr

08006e2e <HAL_ADC_ConvCpltCallback>:
 8006e2e:	4770      	bx	lr

08006e30 <HAL_ADC_LevelOutOfWindowCallback>:
 8006e30:	4770      	bx	lr

08006e32 <HAL_ADC_ErrorCallback>:
 8006e32:	4770      	bx	lr

08006e34 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006e36:	6802      	ldr	r2, [r0, #0]
{
 8006e38:	4604      	mov	r4, r0
  uint32_t tmp_ier = hadc->Instance->IER;
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e3a:	4b92      	ldr	r3, [pc, #584]	; (8007084 <HAL_ADC_IRQHandler+0x250>)
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006e3c:	6815      	ldr	r5, [r2, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e3e:	429a      	cmp	r2, r3
  uint32_t tmp_ier = hadc->Instance->IER;
 8006e40:	6856      	ldr	r6, [r2, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e42:	f000 80fd 	beq.w	8007040 <HAL_ADC_IRQHandler+0x20c>
 8006e46:	4890      	ldr	r0, [pc, #576]	; (8007088 <HAL_ADC_IRQHandler+0x254>)
 8006e48:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006e4c:	498f      	ldr	r1, [pc, #572]	; (800708c <HAL_ADC_IRQHandler+0x258>)
 8006e4e:	4282      	cmp	r2, r0
 8006e50:	bf18      	it	ne
 8006e52:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006e54:	689f      	ldr	r7, [r3, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006e56:	07a9      	lsls	r1, r5, #30
 8006e58:	f007 071f 	and.w	r7, r7, #31
 8006e5c:	d50e      	bpl.n	8006e7c <HAL_ADC_IRQHandler+0x48>
 8006e5e:	07b2      	lsls	r2, r6, #30
 8006e60:	d50c      	bpl.n	8006e7c <HAL_ADC_IRQHandler+0x48>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e64:	06db      	lsls	r3, r3, #27
 8006e66:	d403      	bmi.n	8006e70 <HAL_ADC_IRQHandler+0x3c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e6e:	6563      	str	r3, [r4, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 fd71 	bl	8007958 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006e7c:	0768      	lsls	r0, r5, #29
 8006e7e:	d501      	bpl.n	8006e84 <HAL_ADC_IRQHandler+0x50>
 8006e80:	0771      	lsls	r1, r6, #29
 8006e82:	d403      	bmi.n	8006e8c <HAL_ADC_IRQHandler+0x58>
 8006e84:	072a      	lsls	r2, r5, #28
 8006e86:	d532      	bpl.n	8006eee <HAL_ADC_IRQHandler+0xba>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006e88:	0733      	lsls	r3, r6, #28
 8006e8a:	d530      	bpl.n	8006eee <HAL_ADC_IRQHandler+0xba>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e8e:	06d8      	lsls	r0, r3, #27
 8006e90:	d403      	bmi.n	8006e9a <HAL_ADC_IRQHandler+0x66>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e98:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e9a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006ea2:	d11e      	bne.n	8006ee2 <HAL_ADC_IRQHandler+0xae>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ea4:	4a78      	ldr	r2, [pc, #480]	; (8007088 <HAL_ADC_IRQHandler+0x254>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	f000 80f4 	beq.w	8007094 <HAL_ADC_IRQHandler+0x260>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006eac:	68da      	ldr	r2, [r3, #12]
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006eae:	0491      	lsls	r1, r2, #18
 8006eb0:	d417      	bmi.n	8006ee2 <HAL_ADC_IRQHandler+0xae>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	0712      	lsls	r2, r2, #28
 8006eb6:	d514      	bpl.n	8006ee2 <HAL_ADC_IRQHandler+0xae>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff ff23 	bl	8006d04 <LL_ADC_REG_IsConversionOngoing>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f040 80c0 	bne.w	8007044 <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	f022 020c 	bic.w	r2, r2, #12
 8006eca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ecc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed2:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ed4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ed6:	04db      	lsls	r3, r3, #19
 8006ed8:	d403      	bmi.n	8006ee2 <HAL_ADC_IRQHandler+0xae>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006eda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006edc:	f043 0301 	orr.w	r3, r3, #1
 8006ee0:	6563      	str	r3, [r4, #84]	; 0x54
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f7ff ffa3 	bl	8006e2e <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	220c      	movs	r2, #12
 8006eec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006eee:	06a8      	lsls	r0, r5, #26
 8006ef0:	d501      	bpl.n	8006ef6 <HAL_ADC_IRQHandler+0xc2>
 8006ef2:	06b1      	lsls	r1, r6, #26
 8006ef4:	d403      	bmi.n	8006efe <HAL_ADC_IRQHandler+0xca>
 8006ef6:	066a      	lsls	r2, r5, #25
 8006ef8:	d53c      	bpl.n	8006f74 <HAL_ADC_IRQHandler+0x140>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006efa:	0673      	lsls	r3, r6, #25
 8006efc:	d53a      	bpl.n	8006f74 <HAL_ADC_IRQHandler+0x140>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006efe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f00:	06d8      	lsls	r0, r3, #27
 8006f02:	d403      	bmi.n	8006f0c <HAL_ADC_IRQHandler+0xd8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006f04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f0a:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006f0c:	6823      	ldr	r3, [r4, #0]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006f0e:	4a5e      	ldr	r2, [pc, #376]	; (8007088 <HAL_ADC_IRQHandler+0x254>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006f10:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f12:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006f14:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006f16:	f401 71c0 	and.w	r1, r1, #384	; 0x180
 8006f1a:	f040 809c 	bne.w	8007056 <HAL_ADC_IRQHandler+0x222>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006f1e:	22c1      	movs	r2, #193	; 0xc1
 8006f20:	40fa      	lsrs	r2, r7
 8006f22:	07d2      	lsls	r2, r2, #31
 8006f24:	f100 8097 	bmi.w	8007056 <HAL_ADC_IRQHandler+0x222>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006f28:	4a56      	ldr	r2, [pc, #344]	; (8007084 <HAL_ADC_IRQHandler+0x250>)
 8006f2a:	68d2      	ldr	r2, [r2, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006f2c:	b9e1      	cbnz	r1, 8006f68 <HAL_ADC_IRQHandler+0x134>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006f2e:	0191      	lsls	r1, r2, #6
 8006f30:	d505      	bpl.n	8006f3e <HAL_ADC_IRQHandler+0x10a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006f32:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006f36:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006f3a:	4301      	orrs	r1, r0
 8006f3c:	d114      	bne.n	8006f68 <HAL_ADC_IRQHandler+0x134>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006f3e:	6819      	ldr	r1, [r3, #0]
 8006f40:	0648      	lsls	r0, r1, #25
 8006f42:	d511      	bpl.n	8006f68 <HAL_ADC_IRQHandler+0x134>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006f44:	0291      	lsls	r1, r2, #10
 8006f46:	d40f      	bmi.n	8006f68 <HAL_ADC_IRQHandler+0x134>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	0712      	lsls	r2, r2, #28
 8006f4c:	f100 8085 	bmi.w	800705a <HAL_ADC_IRQHandler+0x226>
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f56:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006f58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f5e:	6563      	str	r3, [r4, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006f60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f62:	05db      	lsls	r3, r3, #23
 8006f64:	f140 8082 	bpl.w	800706c <HAL_ADC_IRQHandler+0x238>
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f000 fcf1 	bl	8007950 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	2260      	movs	r2, #96	; 0x60
 8006f72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006f74:	0628      	lsls	r0, r5, #24
 8006f76:	d50b      	bpl.n	8006f90 <HAL_ADC_IRQHandler+0x15c>
 8006f78:	0631      	lsls	r1, r6, #24
 8006f7a:	d509      	bpl.n	8006f90 <HAL_ADC_IRQHandler+0x15c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006f7c:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006f7e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f84:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006f86:	f7ff ff53 	bl	8006e30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	2280      	movs	r2, #128	; 0x80
 8006f8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006f90:	05ea      	lsls	r2, r5, #23
 8006f92:	d50c      	bpl.n	8006fae <HAL_ADC_IRQHandler+0x17a>
 8006f94:	05f3      	lsls	r3, r6, #23
 8006f96:	d50a      	bpl.n	8006fae <HAL_ADC_IRQHandler+0x17a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006f98:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006f9a:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa0:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006fa2:	f000 fcd7 	bl	8007954 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006fae:	05a8      	lsls	r0, r5, #22
 8006fb0:	d50c      	bpl.n	8006fcc <HAL_ADC_IRQHandler+0x198>
 8006fb2:	05b1      	lsls	r1, r6, #22
 8006fb4:	d50a      	bpl.n	8006fcc <HAL_ADC_IRQHandler+0x198>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006fb6:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006fb8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fbe:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006fc0:	f000 fcc9 	bl	8007956 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006fcc:	06ea      	lsls	r2, r5, #27
 8006fce:	d522      	bpl.n	8007016 <HAL_ADC_IRQHandler+0x1e2>
 8006fd0:	06f3      	lsls	r3, r6, #27
 8006fd2:	d520      	bpl.n	8007016 <HAL_ADC_IRQHandler+0x1e2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006fd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006fd6:	b183      	cbz	r3, 8006ffa <HAL_ADC_IRQHandler+0x1c6>
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006fd8:	6822      	ldr	r2, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006fda:	2f00      	cmp	r7, #0
 8006fdc:	d04d      	beq.n	800707a <HAL_ADC_IRQHandler+0x246>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006fde:	4b29      	ldr	r3, [pc, #164]	; (8007084 <HAL_ADC_IRQHandler+0x250>)
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d048      	beq.n	8007076 <HAL_ADC_IRQHandler+0x242>
 8006fe4:	4828      	ldr	r0, [pc, #160]	; (8007088 <HAL_ADC_IRQHandler+0x254>)
 8006fe6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006fea:	4928      	ldr	r1, [pc, #160]	; (800708c <HAL_ADC_IRQHandler+0x258>)
 8006fec:	4282      	cmp	r2, r0
 8006fee:	bf18      	it	ne
 8006ff0:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f413 4f40 	tst.w	r3, #49152	; 0xc000
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8006ff8:	d00a      	beq.n	8007010 <HAL_ADC_IRQHandler+0x1dc>
    }

    if (overrun_error == 1UL)
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006ffa:	6d63      	ldr	r3, [r4, #84]	; 0x54
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006ffc:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007002:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007006:	f043 0302 	orr.w	r3, r3, #2
 800700a:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 800700c:	f7ff ff11 	bl	8006e32 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	2210      	movs	r2, #16
 8007014:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007016:	0568      	lsls	r0, r5, #21
 8007018:	d545      	bpl.n	80070a6 <HAL_ADC_IRQHandler+0x272>
 800701a:	0571      	lsls	r1, r6, #21
 800701c:	d543      	bpl.n	80070a6 <HAL_ADC_IRQHandler+0x272>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800701e:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007020:	f44f 6280 	mov.w	r2, #1024	; 0x400

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007024:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800702a:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800702c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800702e:	f043 0308 	orr.w	r3, r3, #8
 8007032:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	601a      	str	r2, [r3, #0]
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007038:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800703c:	f000 bc89 	b.w	8007952 <HAL_ADCEx_InjectedQueueOverflowCallback>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007040:	4b13      	ldr	r3, [pc, #76]	; (8007090 <HAL_ADC_IRQHandler+0x25c>)
 8007042:	e707      	b.n	8006e54 <HAL_ADC_IRQHandler+0x20>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007044:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007046:	f043 0310 	orr.w	r3, r3, #16
 800704a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800704c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	65a3      	str	r3, [r4, #88]	; 0x58
 8007054:	e745      	b.n	8006ee2 <HAL_ADC_IRQHandler+0xae>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	e768      	b.n	8006f2c <HAL_ADC_IRQHandler+0xf8>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800705a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800705c:	f043 0310 	orr.w	r3, r3, #16
 8007060:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007062:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	65a3      	str	r3, [r4, #88]	; 0x58
 800706a:	e77d      	b.n	8006f68 <HAL_ADC_IRQHandler+0x134>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800706c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800706e:	f043 0301 	orr.w	r3, r3, #1
 8007072:	6563      	str	r3, [r4, #84]	; 0x54
 8007074:	e778      	b.n	8006f68 <HAL_ADC_IRQHandler+0x134>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <HAL_ADC_IRQHandler+0x25c>)
 8007078:	e7bb      	b.n	8006ff2 <HAL_ADC_IRQHandler+0x1be>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800707a:	68d3      	ldr	r3, [r2, #12]
 800707c:	f013 0f03 	tst.w	r3, #3
 8007080:	e7ba      	b.n	8006ff8 <HAL_ADC_IRQHandler+0x1c4>
 8007082:	bf00      	nop
 8007084:	40022000 	.word	0x40022000
 8007088:	40022100 	.word	0x40022100
 800708c:	58026300 	.word	0x58026300
 8007090:	40022300 	.word	0x40022300
 8007094:	f240 2221 	movw	r2, #545	; 0x221
 8007098:	40fa      	lsrs	r2, r7
 800709a:	07d2      	lsls	r2, r2, #31
 800709c:	f53f af06 	bmi.w	8006eac <HAL_ADC_IRQHandler+0x78>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80070a0:	4a01      	ldr	r2, [pc, #4]	; (80070a8 <HAL_ADC_IRQHandler+0x274>)
 80070a2:	68d2      	ldr	r2, [r2, #12]
 80070a4:	e703      	b.n	8006eae <HAL_ADC_IRQHandler+0x7a>
}
 80070a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a8:	40022000 	.word	0x40022000

080070ac <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80070ac:	2300      	movs	r3, #0
{
 80070ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80070b0:	9301      	str	r3, [sp, #4]
{
 80070b2:	4605      	mov	r5, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80070b4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80070b8:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	f000 81c5 	beq.w	800744a <HAL_ADC_ConfigChannel+0x39e>
 80070c0:	2301      	movs	r3, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070c2:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 80070c4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070c8:	4620      	mov	r0, r4
 80070ca:	f7ff fe1b 	bl	8006d04 <LL_ADC_REG_IsConversionOngoing>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f040 81b6 	bne.w	8007440 <HAL_ADC_ConfigChannel+0x394>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80070d4:	680a      	ldr	r2, [r1, #0]
 80070d6:	f3c2 0013 	ubfx	r0, r2, #0, #20
 80070da:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80070de:	2800      	cmp	r0, #0
 80070e0:	d169      	bne.n	80071b6 <HAL_ADC_ConfigChannel+0x10a>
 80070e2:	408b      	lsls	r3, r1
 80070e4:	69e2      	ldr	r2, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80070e6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 80070ea:	271f      	movs	r7, #31
 80070ec:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80070ee:	6872      	ldr	r2, [r6, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80070f0:	0990      	lsrs	r0, r2, #6
  MODIFY_REG(*preg,
 80070f2:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80070f6:	61e3      	str	r3, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80070f8:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 80070fc:	4097      	lsls	r7, r2
 80070fe:	4091      	lsls	r1, r2
 8007100:	f85c 3000 	ldr.w	r3, [ip, r0]
 8007104:	ea23 0307 	bic.w	r3, r3, r7
 8007108:	430b      	orrs	r3, r1
 800710a:	f84c 3000 	str.w	r3, [ip, r0]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800710e:	4620      	mov	r0, r4
 8007110:	f7ff fdf8 	bl	8006d04 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007114:	68a3      	ldr	r3, [r4, #8]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	4318      	orrs	r0, r3
 800711c:	d13f      	bne.n	800719e <HAL_ADC_ConfigChannel+0xf2>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800711e:	68b2      	ldr	r2, [r6, #8]
 8007120:	4620      	mov	r0, r4
 8007122:	6831      	ldr	r1, [r6, #0]
 8007124:	f7ff fdda 	bl	8006cdc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007128:	4bb8      	ldr	r3, [pc, #736]	; (800740c <HAL_ADC_ConfigChannel+0x360>)
 800712a:	6972      	ldr	r2, [r6, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007136:	68e3      	ldr	r3, [r4, #12]
 8007138:	d146      	bne.n	80071c8 <HAL_ADC_ConfigChannel+0x11c>
 800713a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800713e:	005b      	lsls	r3, r3, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007140:	6937      	ldr	r7, [r6, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007142:	409a      	lsls	r2, r3
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007144:	6831      	ldr	r1, [r6, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007146:	2f04      	cmp	r7, #4
 8007148:	d046      	beq.n	80071d8 <HAL_ADC_ConfigChannel+0x12c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800714a:	f104 0060 	add.w	r0, r4, #96	; 0x60
    MODIFY_REG(*preg,
 800714e:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8007152:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 8007156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800715a:	430b      	orrs	r3, r1
 800715c:	4313      	orrs	r3, r2
 800715e:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007162:	7e72      	ldrb	r2, [r6, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007164:	6931      	ldr	r1, [r6, #16]
 8007166:	1e57      	subs	r7, r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007168:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800716c:	427a      	negs	r2, r7
 800716e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007172:	417a      	adcs	r2, r7
 8007174:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8007178:	f840 3021 	str.w	r3, [r0, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800717c:	7e33      	ldrb	r3, [r6, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800717e:	6931      	ldr	r1, [r6, #16]
 8007180:	f103 3cff 	add.w	ip, r3, #4294967295
 8007184:	6922      	ldr	r2, [r4, #16]
 8007186:	f001 011f 	and.w	r1, r1, #31
 800718a:	f1dc 0300 	rsbs	r3, ip, #0
 800718e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8007192:	eb43 030c 	adc.w	r3, r3, ip
 8007196:	02db      	lsls	r3, r3, #11
 8007198:	408b      	lsls	r3, r1
 800719a:	4313      	orrs	r3, r2
 800719c:	6123      	str	r3, [r4, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff fdac 	bl	8006cfc <LL_ADC_IsEnabled>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d03e      	beq.n	8007226 <HAL_ADC_ConfigChannel+0x17a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071a8:	2300      	movs	r3, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071aa:	2200      	movs	r2, #0
 80071ac:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	b003      	add	sp, #12
 80071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b6:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80071ba:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80071be:	2301      	movs	r3, #1
 80071c0:	f002 021f 	and.w	r2, r2, #31
 80071c4:	4093      	lsls	r3, r2
 80071c6:	e78d      	b.n	80070e4 <HAL_ADC_ConfigChannel+0x38>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80071c8:	f013 0f10 	tst.w	r3, #16
 80071cc:	68e3      	ldr	r3, [r4, #12]
 80071ce:	d0b4      	beq.n	800713a <HAL_ADC_ConfigChannel+0x8e>
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	e7b3      	b.n	8007140 <HAL_ADC_ConfigChannel+0x94>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80071d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80071da:	068a      	lsls	r2, r1, #26
 80071dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80071e0:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80071e4:	d103      	bne.n	80071ee <HAL_ADC_ConfigChannel+0x142>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80071e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80071e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071ec:	6623      	str	r3, [r4, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80071ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d103      	bne.n	8007200 <HAL_ADC_ConfigChannel+0x154>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80071f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071fe:	6663      	str	r3, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007200:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007202:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8007206:	429a      	cmp	r2, r3
 8007208:	d103      	bne.n	8007212 <HAL_ADC_ConfigChannel+0x166>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800720a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800720c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007210:	66a3      	str	r3, [r4, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007212:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007214:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8007218:	429a      	cmp	r2, r3
 800721a:	d1c0      	bne.n	800719e <HAL_ADC_ConfigChannel+0xf2>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800721c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800721e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007222:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007224:	e7bb      	b.n	800719e <HAL_ADC_ConfigChannel+0xf2>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007226:	68f7      	ldr	r7, [r6, #12]
 8007228:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800722a:	f007 0c18 	and.w	ip, r7, #24
 800722e:	4a78      	ldr	r2, [pc, #480]	; (8007410 <HAL_ADC_ConfigChannel+0x364>)
 8007230:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8007234:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8007238:	fa22 f20c 	lsr.w	r2, r2, ip
 800723c:	ea21 0100 	bic.w	r1, r1, r0
 8007240:	401a      	ands	r2, r3
 8007242:	430a      	orrs	r2, r1
 8007244:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007248:	4a72      	ldr	r2, [pc, #456]	; (8007414 <HAL_ADC_ConfigChannel+0x368>)
 800724a:	4297      	cmp	r7, r2
 800724c:	d145      	bne.n	80072da <HAL_ADC_ConfigChannel+0x22e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800724e:	b9d0      	cbnz	r0, 8007286 <HAL_ADC_ConfigChannel+0x1da>
 8007250:	0e9a      	lsrs	r2, r3, #26
 8007252:	2101      	movs	r1, #1
 8007254:	3201      	adds	r2, #1
 8007256:	f002 071f 	and.w	r7, r2, #31
 800725a:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800725c:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800725e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8007262:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007266:	d929      	bls.n	80072bc <HAL_ADC_ConfigChannel+0x210>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007268:	4311      	orrs	r1, r2
 800726a:	2800      	cmp	r0, #0
 800726c:	f040 808b 	bne.w	8007386 <HAL_ADC_ConfigChannel+0x2da>
 8007270:	0e9b      	lsrs	r3, r3, #26
 8007272:	3301      	adds	r3, #1
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800727c:	3b1e      	subs	r3, #30
 800727e:	051b      	lsls	r3, r3, #20
 8007280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007284:	e024      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007286:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800728a:	b132      	cbz	r2, 800729a <HAL_ADC_ConfigChannel+0x1ee>
  return __builtin_clz(value);
 800728c:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007290:	3201      	adds	r2, #1
 8007292:	f002 021f 	and.w	r2, r2, #31
 8007296:	2a09      	cmp	r2, #9
 8007298:	d863      	bhi.n	8007362 <HAL_ADC_ConfigChannel+0x2b6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800729a:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800729e:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80072a2:	3201      	adds	r2, #1
 80072a4:	0692      	lsls	r2, r2, #26
 80072a6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072aa:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 80072ae:	fab7 f787 	clz	r7, r7
 80072b2:	2101      	movs	r1, #1
 80072b4:	3701      	adds	r7, #1
 80072b6:	f007 071f 	and.w	r7, r7, #31
 80072ba:	40b9      	lsls	r1, r7
 80072bc:	4311      	orrs	r1, r2
 80072be:	2800      	cmp	r0, #0
 80072c0:	d14a      	bne.n	8007358 <HAL_ADC_ConfigChannel+0x2ac>
 80072c2:	0e9b      	lsrs	r3, r3, #26
 80072c4:	3301      	adds	r3, #1
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80072ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072d0:	4319      	orrs	r1, r3
 80072d2:	68b2      	ldr	r2, [r6, #8]
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7ff fd01 	bl	8006cdc <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80072da:	6832      	ldr	r2, [r6, #0]
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f6bf af63 	bge.w	80071a8 <HAL_ADC_ConfigChannel+0xfc>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80072e2:	494d      	ldr	r1, [pc, #308]	; (8007418 <HAL_ADC_ConfigChannel+0x36c>)
 80072e4:	428c      	cmp	r4, r1
 80072e6:	d05b      	beq.n	80073a0 <HAL_ADC_ConfigChannel+0x2f4>
 80072e8:	4e4c      	ldr	r6, [pc, #304]	; (800741c <HAL_ADC_ConfigChannel+0x370>)
 80072ea:	4b4d      	ldr	r3, [pc, #308]	; (8007420 <HAL_ADC_ConfigChannel+0x374>)
 80072ec:	484d      	ldr	r0, [pc, #308]	; (8007424 <HAL_ADC_ConfigChannel+0x378>)
 80072ee:	42b4      	cmp	r4, r6
 80072f0:	bf18      	it	ne
 80072f2:	4603      	movne	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072f4:	428c      	cmp	r4, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	d002      	beq.n	8007300 <HAL_ADC_ConfigChannel+0x254>
 80072fa:	4948      	ldr	r1, [pc, #288]	; (800741c <HAL_ADC_ConfigChannel+0x370>)
 80072fc:	428c      	cmp	r4, r1
 80072fe:	d151      	bne.n	80073a4 <HAL_ADC_ConfigChannel+0x2f8>
 8007300:	4845      	ldr	r0, [pc, #276]	; (8007418 <HAL_ADC_ConfigChannel+0x36c>)
 8007302:	f7ff fcfb 	bl	8006cfc <LL_ADC_IsEnabled>
 8007306:	4601      	mov	r1, r0
 8007308:	4844      	ldr	r0, [pc, #272]	; (800741c <HAL_ADC_ConfigChannel+0x370>)
 800730a:	f7ff fcf7 	bl	8006cfc <LL_ADC_IsEnabled>
 800730e:	4308      	orrs	r0, r1
 8007310:	d14d      	bne.n	80073ae <HAL_ADC_ConfigChannel+0x302>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007312:	4845      	ldr	r0, [pc, #276]	; (8007428 <HAL_ADC_ConfigChannel+0x37c>)
 8007314:	f003 71e0 	and.w	r1, r3, #29360128	; 0x1c00000
 8007318:	4282      	cmp	r2, r0
 800731a:	d14e      	bne.n	80073ba <HAL_ADC_ConfigChannel+0x30e>
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	f53f af43 	bmi.w	80071a8 <HAL_ADC_ConfigChannel+0xfc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007322:	4b42      	ldr	r3, [pc, #264]	; (800742c <HAL_ADC_ConfigChannel+0x380>)
 8007324:	429c      	cmp	r4, r3
 8007326:	f47f af3f 	bne.w	80071a8 <HAL_ADC_ConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800732a:	4a3e      	ldr	r2, [pc, #248]	; (8007424 <HAL_ADC_ConfigChannel+0x378>)
 800732c:	6893      	ldr	r3, [r2, #8]
 800732e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8007332:	430b      	orrs	r3, r1
 8007334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007338:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800733a:	4b3d      	ldr	r3, [pc, #244]	; (8007430 <HAL_ADC_ConfigChannel+0x384>)
 800733c:	4a3d      	ldr	r2, [pc, #244]	; (8007434 <HAL_ADC_ConfigChannel+0x388>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	fbb3 f3f2 	udiv	r3, r3, r2
 8007344:	3301      	adds	r3, #1
 8007346:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8007348:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 800734a:	9b01      	ldr	r3, [sp, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f43f af2b 	beq.w	80071a8 <HAL_ADC_ConfigChannel+0xfc>
                wait_loop_index--;
 8007352:	9b01      	ldr	r3, [sp, #4]
 8007354:	3b01      	subs	r3, #1
 8007356:	e7f7      	b.n	8007348 <HAL_ADC_ConfigChannel+0x29c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007358:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800735c:	fab3 f383 	clz	r3, r3
 8007360:	e7b0      	b.n	80072c4 <HAL_ADC_ConfigChannel+0x218>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007362:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8007366:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800736a:	3201      	adds	r2, #1
 800736c:	0692      	lsls	r2, r2, #26
 800736e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007372:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8007376:	fab7 f787 	clz	r7, r7
 800737a:	2101      	movs	r1, #1
 800737c:	3701      	adds	r7, #1
 800737e:	f007 071f 	and.w	r7, r7, #31
 8007382:	40b9      	lsls	r1, r7
 8007384:	e770      	b.n	8007268 <HAL_ADC_ConfigChannel+0x1bc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007386:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800738a:	fab2 f282 	clz	r2, r2
 800738e:	2303      	movs	r3, #3
 8007390:	f06f 001d 	mvn.w	r0, #29
 8007394:	3201      	adds	r2, #1
 8007396:	f002 021f 	and.w	r2, r2, #31
 800739a:	fb13 0302 	smlabb	r3, r3, r2, r0
 800739e:	e76e      	b.n	800727e <HAL_ADC_ConfigChannel+0x1d2>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80073a0:	4b1f      	ldr	r3, [pc, #124]	; (8007420 <HAL_ADC_ConfigChannel+0x374>)
 80073a2:	e7a7      	b.n	80072f4 <HAL_ADC_ConfigChannel+0x248>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073a4:	4821      	ldr	r0, [pc, #132]	; (800742c <HAL_ADC_ConfigChannel+0x380>)
 80073a6:	f7ff fca9 	bl	8006cfc <LL_ADC_IsEnabled>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d0b1      	beq.n	8007312 <HAL_ADC_ConfigChannel+0x266>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073ae:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80073b0:	f043 0320 	orr.w	r3, r3, #32
 80073b4:	656b      	str	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e6f7      	b.n	80071aa <HAL_ADC_ConfigChannel+0xfe>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80073ba:	481f      	ldr	r0, [pc, #124]	; (8007438 <HAL_ADC_ConfigChannel+0x38c>)
 80073bc:	4282      	cmp	r2, r0
 80073be:	d110      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0x336>
 80073c0:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 80073c4:	f47f aef0 	bne.w	80071a8 <HAL_ADC_ConfigChannel+0xfc>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073c8:	4a18      	ldr	r2, [pc, #96]	; (800742c <HAL_ADC_ConfigChannel+0x380>)
 80073ca:	4294      	cmp	r4, r2
 80073cc:	f47f aeec 	bne.w	80071a8 <HAL_ADC_ConfigChannel+0xfc>
 80073d0:	4814      	ldr	r0, [pc, #80]	; (8007424 <HAL_ADC_ConfigChannel+0x378>)
 80073d2:	6882      	ldr	r2, [r0, #8]
 80073d4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80073d8:	430a      	orrs	r2, r1
 80073da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80073de:	6082      	str	r2, [r0, #8]
}
 80073e0:	e6e3      	b.n	80071aa <HAL_ADC_ConfigChannel+0xfe>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80073e2:	4816      	ldr	r0, [pc, #88]	; (800743c <HAL_ADC_ConfigChannel+0x390>)
 80073e4:	4282      	cmp	r2, r0
 80073e6:	f47f aedf 	bne.w	80071a8 <HAL_ADC_ConfigChannel+0xfc>
 80073ea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80073ee:	f47f aedb 	bne.w	80071a8 <HAL_ADC_ConfigChannel+0xfc>
            if (ADC_VREFINT_INSTANCE(hadc))
 80073f2:	4a0e      	ldr	r2, [pc, #56]	; (800742c <HAL_ADC_ConfigChannel+0x380>)
 80073f4:	4294      	cmp	r4, r2
 80073f6:	f47f aed7 	bne.w	80071a8 <HAL_ADC_ConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80073fa:	480a      	ldr	r0, [pc, #40]	; (8007424 <HAL_ADC_ConfigChannel+0x378>)
 80073fc:	6882      	ldr	r2, [r0, #8]
 80073fe:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8007402:	430a      	orrs	r2, r1
 8007404:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007408:	e7e9      	b.n	80073de <HAL_ADC_ConfigChannel+0x332>
 800740a:	bf00      	nop
 800740c:	5c001000 	.word	0x5c001000
 8007410:	000fffff 	.word	0x000fffff
 8007414:	47ff0000 	.word	0x47ff0000
 8007418:	40022000 	.word	0x40022000
 800741c:	40022100 	.word	0x40022100
 8007420:	40022300 	.word	0x40022300
 8007424:	58026300 	.word	0x58026300
 8007428:	cb840000 	.word	0xcb840000
 800742c:	58026000 	.word	0x58026000
 8007430:	24000060 	.word	0x24000060
 8007434:	00030d40 	.word	0x00030d40
 8007438:	c7520000 	.word	0xc7520000
 800743c:	cfb80000 	.word	0xcfb80000
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007440:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8007442:	f042 0220 	orr.w	r2, r2, #32
 8007446:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007448:	e6af      	b.n	80071aa <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 800744a:	2302      	movs	r3, #2
 800744c:	e6b0      	b.n	80071b0 <HAL_ADC_ConfigChannel+0x104>
 800744e:	bf00      	nop

08007450 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007450:	6802      	ldr	r2, [r0, #0]
{
 8007452:	b570      	push	{r4, r5, r6, lr}
 8007454:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007456:	4610      	mov	r0, r2
 8007458:	f7ff fc50 	bl	8006cfc <LL_ADC_IsEnabled>
 800745c:	b108      	cbz	r0, 8007462 <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800745e:	2000      	movs	r0, #0
}
 8007460:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007462:	6891      	ldr	r1, [r2, #8]
 8007464:	4b22      	ldr	r3, [pc, #136]	; (80074f0 <ADC_Enable+0xa0>)
 8007466:	4219      	tst	r1, r3
 8007468:	d009      	beq.n	800747e <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800746a:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 800746c:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800746e:	f043 0310 	orr.w	r3, r3, #16
 8007472:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007476:	f043 0301 	orr.w	r3, r3, #1
 800747a:	65a3      	str	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 800747c:	e7f0      	b.n	8007460 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 800747e:	6893      	ldr	r3, [r2, #8]
 8007480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800748e:	f7ff fbf5 	bl	8006c7c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	4b17      	ldr	r3, [pc, #92]	; (80074f4 <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8007496:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007498:	4917      	ldr	r1, [pc, #92]	; (80074f8 <ADC_Enable+0xa8>)
 800749a:	429a      	cmp	r2, r3
 800749c:	d00e      	beq.n	80074bc <ADC_Enable+0x6c>
 800749e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80074a2:	4816      	ldr	r0, [pc, #88]	; (80074fc <ADC_Enable+0xac>)
 80074a4:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 80074a8:	428a      	cmp	r2, r1
 80074aa:	bf08      	it	eq
 80074ac:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80074ae:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	d101      	bne.n	80074b8 <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80074b4:	06db      	lsls	r3, r3, #27
 80074b6:	d1d2      	bne.n	800745e <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 80074b8:	4e11      	ldr	r6, [pc, #68]	; (8007500 <ADC_Enable+0xb0>)
 80074ba:	e013      	b.n	80074e4 <ADC_Enable+0x94>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80074bc:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <ADC_Enable+0xac>)
 80074be:	e7f6      	b.n	80074ae <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7ff fc1b 	bl	8006cfc <LL_ADC_IsEnabled>
 80074c6:	b920      	cbnz	r0, 80074d2 <ADC_Enable+0x82>
 80074c8:	6893      	ldr	r3, [r2, #8]
 80074ca:	4033      	ands	r3, r6
 80074cc:	f043 0301 	orr.w	r3, r3, #1
 80074d0:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80074d2:	f7ff fbd3 	bl	8006c7c <HAL_GetTick>
 80074d6:	1b40      	subs	r0, r0, r5
 80074d8:	2802      	cmp	r0, #2
 80074da:	d903      	bls.n	80074e4 <ADC_Enable+0x94>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	07d8      	lsls	r0, r3, #31
 80074e2:	d5c2      	bpl.n	800746a <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80074e4:	6822      	ldr	r2, [r4, #0]
 80074e6:	6813      	ldr	r3, [r2, #0]
 80074e8:	07d9      	lsls	r1, r3, #31
 80074ea:	d5e9      	bpl.n	80074c0 <ADC_Enable+0x70>
 80074ec:	e7b7      	b.n	800745e <ADC_Enable+0xe>
 80074ee:	bf00      	nop
 80074f0:	8000003f 	.word	0x8000003f
 80074f4:	40022000 	.word	0x40022000
 80074f8:	40022100 	.word	0x40022100
 80074fc:	40022300 	.word	0x40022300
 8007500:	7fffffc0 	.word	0x7fffffc0

08007504 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007504:	4b3a      	ldr	r3, [pc, #232]	; (80075f0 <HAL_ADC_Start+0xec>)
{
 8007506:	b570      	push	{r4, r5, r6, lr}
 8007508:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	4298      	cmp	r0, r3
 800750e:	d055      	beq.n	80075bc <HAL_ADC_Start+0xb8>
 8007510:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8007514:	4937      	ldr	r1, [pc, #220]	; (80075f4 <HAL_ADC_Start+0xf0>)
 8007516:	4a38      	ldr	r2, [pc, #224]	; (80075f8 <HAL_ADC_Start+0xf4>)
 8007518:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 800751c:	4288      	cmp	r0, r1
 800751e:	bf08      	it	eq
 8007520:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007522:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007524:	f7ff fbee 	bl	8006d04 <LL_ADC_REG_IsConversionOngoing>
 8007528:	4605      	mov	r5, r0
 800752a:	2800      	cmp	r0, #0
 800752c:	d159      	bne.n	80075e2 <HAL_ADC_Start+0xde>
    __HAL_LOCK(hadc);
 800752e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007532:	2b01      	cmp	r3, #1
 8007534:	d055      	beq.n	80075e2 <HAL_ADC_Start+0xde>
 8007536:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8007538:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800753a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800753e:	f7ff ff87 	bl	8007450 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007542:	2800      	cmp	r0, #0
 8007544:	d14a      	bne.n	80075dc <HAL_ADC_Start+0xd8>
      ADC_STATE_CLR_SET(hadc->State,
 8007546:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007548:	f006 011f 	and.w	r1, r6, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800754c:	4a29      	ldr	r2, [pc, #164]	; (80075f4 <HAL_ADC_Start+0xf0>)
      ADC_STATE_CLR_SET(hadc->State,
 800754e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007552:	f023 0301 	bic.w	r3, r3, #1
 8007556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755a:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	4293      	cmp	r3, r2
 8007560:	d041      	beq.n	80075e6 <HAL_ADC_Start+0xe2>
 8007562:	461a      	mov	r2, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007564:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8007566:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 800756a:	6565      	str	r5, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800756c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800756e:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 8007572:	d002      	beq.n	800757a <HAL_ADC_Start+0x76>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007574:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8007576:	f025 0506 	bic.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800757a:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800757c:	251c      	movs	r5, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800757e:	4293      	cmp	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007580:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8007582:	f04f 0500 	mov.w	r5, #0
 8007586:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800758a:	d005      	beq.n	8007598 <HAL_ADC_Start+0x94>
 800758c:	f240 2521 	movw	r5, #545	; 0x221
 8007590:	fa25 f101 	lsr.w	r1, r5, r1
 8007594:	07c9      	lsls	r1, r1, #31
 8007596:	d513      	bpl.n	80075c0 <HAL_ADC_Start+0xbc>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	0192      	lsls	r2, r2, #6
 800759c:	d505      	bpl.n	80075aa <HAL_ADC_Start+0xa6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800759e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80075a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80075a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075a8:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80075b0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80075b4:	f042 0204 	orr.w	r2, r2, #4
 80075b8:	609a      	str	r2, [r3, #8]
}
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075bc:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <HAL_ADC_Start+0xf4>)
 80075be:	e7b0      	b.n	8007522 <HAL_ADC_Start+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80075c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075c6:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80075c8:	68d3      	ldr	r3, [r2, #12]
 80075ca:	019b      	lsls	r3, r3, #6
 80075cc:	d5f5      	bpl.n	80075ba <HAL_ADC_Start+0xb6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80075ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80075d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075d8:	6563      	str	r3, [r4, #84]	; 0x54
 80075da:	e7ee      	b.n	80075ba <HAL_ADC_Start+0xb6>
      __HAL_UNLOCK(hadc);
 80075dc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80075e0:	e7eb      	b.n	80075ba <HAL_ADC_Start+0xb6>
    tmp_hal_status = HAL_BUSY;
 80075e2:	2002      	movs	r0, #2
 80075e4:	e7e9      	b.n	80075ba <HAL_ADC_Start+0xb6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80075e6:	4a02      	ldr	r2, [pc, #8]	; (80075f0 <HAL_ADC_Start+0xec>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80075e8:	2900      	cmp	r1, #0
 80075ea:	d0bb      	beq.n	8007564 <HAL_ADC_Start+0x60>
 80075ec:	e7be      	b.n	800756c <HAL_ADC_Start+0x68>
 80075ee:	bf00      	nop
 80075f0:	40022000 	.word	0x40022000
 80075f4:	40022100 	.word	0x40022100
 80075f8:	40022300 	.word	0x40022300

080075fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80075fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80075fe:	4a43      	ldr	r2, [pc, #268]	; (800770c <ADC_ConfigureBoostMode+0x110>)
{
 8007600:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007602:	6803      	ldr	r3, [r0, #0]
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <ADC_ConfigureBoostMode+0x14>
 8007608:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800760c:	4293      	cmp	r3, r2
 800760e:	d125      	bne.n	800765c <ADC_ConfigureBoostMode+0x60>
 8007610:	4b3f      	ldr	r3, [pc, #252]	; (8007710 <ADC_ConfigureBoostMode+0x114>)
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8007618:	bf14      	ite	ne
 800761a:	2301      	movne	r3, #1
 800761c:	2300      	moveq	r3, #0
 800761e:	b9fb      	cbnz	r3, 8007660 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007620:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007624:	2100      	movs	r1, #0
 8007626:	f003 fdbb 	bl	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800762a:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800762c:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 800762e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007632:	d04a      	beq.n	80076ca <ADC_ConfigureBoostMode+0xce>
 8007634:	d83f      	bhi.n	80076b6 <ADC_ConfigureBoostMode+0xba>
 8007636:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800763a:	d044      	beq.n	80076c6 <ADC_ConfigureBoostMode+0xca>
 800763c:	d836      	bhi.n	80076ac <ADC_ConfigureBoostMode+0xb0>
 800763e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007642:	d008      	beq.n	8007656 <ADC_ConfigureBoostMode+0x5a>
 8007644:	d82c      	bhi.n	80076a0 <ADC_ConfigureBoostMode+0xa4>
 8007646:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800764a:	d004      	beq.n	8007656 <ADC_ConfigureBoostMode+0x5a>
 800764c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007650:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8007654:	d116      	bne.n	8007684 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007656:	0c9b      	lsrs	r3, r3, #18
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	e00f      	b.n	800767c <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800765c:	4b2d      	ldr	r3, [pc, #180]	; (8007714 <ADC_ConfigureBoostMode+0x118>)
 800765e:	e7d8      	b.n	8007612 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8007660:	f002 fd1a 	bl	800a098 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8007664:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8007666:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8007668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800766c:	d005      	beq.n	800767a <ADC_ConfigureBoostMode+0x7e>
 800766e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007672:	d006      	beq.n	8007682 <ADC_ConfigureBoostMode+0x86>
 8007674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007678:	d104      	bne.n	8007684 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800767a:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800767c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8007680:	e000      	b.n	8007684 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8007682:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007684:	f7ff fb12 	bl	8006cac <HAL_GetREVID>
 8007688:	f241 0303 	movw	r3, #4099	; 0x1003
 800768c:	4298      	cmp	r0, r3
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	d823      	bhi.n	80076da <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8007692:	4a21      	ldr	r2, [pc, #132]	; (8007718 <ADC_ConfigureBoostMode+0x11c>)
 8007694:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007696:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8007698:	d91b      	bls.n	80076d2 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800769a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800769e:	e01a      	b.n	80076d6 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 80076a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80076a4:	d0d7      	beq.n	8007656 <ADC_ConfigureBoostMode+0x5a>
 80076a6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80076aa:	e7d3      	b.n	8007654 <ADC_ConfigureBoostMode+0x58>
 80076ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076b0:	d1e8      	bne.n	8007684 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 80076b2:	0944      	lsrs	r4, r0, #5
        break;
 80076b4:	e7e6      	b.n	8007684 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 80076b6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80076ba:	d008      	beq.n	80076ce <ADC_ConfigureBoostMode+0xd2>
 80076bc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80076c0:	d1e0      	bne.n	8007684 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 80076c2:	0a04      	lsrs	r4, r0, #8
        break;
 80076c4:	e7de      	b.n	8007684 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 80076c6:	0904      	lsrs	r4, r0, #4
        break;
 80076c8:	e7dc      	b.n	8007684 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 80076ca:	0984      	lsrs	r4, r0, #6
        break;
 80076cc:	e7da      	b.n	8007684 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 80076ce:	09c4      	lsrs	r4, r0, #7
        break;
 80076d0:	e7d8      	b.n	8007684 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80076d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80076d6:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80076d8:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 80076da:	4a10      	ldr	r2, [pc, #64]	; (800771c <ADC_ConfigureBoostMode+0x120>)
 80076dc:	4294      	cmp	r4, r2
 80076de:	d803      	bhi.n	80076e8 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80076e6:	e7f6      	b.n	80076d6 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 80076e8:	4a0d      	ldr	r2, [pc, #52]	; (8007720 <ADC_ConfigureBoostMode+0x124>)
 80076ea:	4294      	cmp	r4, r2
 80076ec:	d803      	bhi.n	80076f6 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80076f4:	e7d1      	b.n	800769a <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 80076f6:	4a0b      	ldr	r2, [pc, #44]	; (8007724 <ADC_ConfigureBoostMode+0x128>)
 80076f8:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	bf96      	itet	ls
 80076fe:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007702:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007706:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800770a:	e7e4      	b.n	80076d6 <ADC_ConfigureBoostMode+0xda>
 800770c:	40022000 	.word	0x40022000
 8007710:	40022300 	.word	0x40022300
 8007714:	58026300 	.word	0x58026300
 8007718:	01312d00 	.word	0x01312d00
 800771c:	00bebc21 	.word	0x00bebc21
 8007720:	017d7841 	.word	0x017d7841
 8007724:	02faf081 	.word	0x02faf081

08007728 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8007728:	2300      	movs	r3, #0
{
 800772a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 800772c:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800772e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8007730:	2800      	cmp	r0, #0
 8007732:	f000 80f0 	beq.w	8007916 <HAL_ADC_Init+0x1ee>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007736:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8007738:	b925      	cbnz	r5, 8007744 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 800773a:	f7fa faf9 	bl	8001d30 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800773e:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8007740:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007744:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	0090      	lsls	r0, r2, #2
 800774a:	d505      	bpl.n	8007758 <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8007752:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007756:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	00d1      	lsls	r1, r2, #3
 800775c:	f140 809d 	bpl.w	800789a <HAL_ADC_Init+0x172>
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	00d2      	lsls	r2, r2, #3
 8007764:	f100 80af 	bmi.w	80078c6 <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007768:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800776a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800776c:	f042 0210 	orr.w	r2, r2, #16
 8007770:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007772:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007774:	f042 0201 	orr.w	r2, r2, #1
 8007778:	65a2      	str	r2, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fac2 	bl	8006d04 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007780:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007782:	f002 0210 	and.w	r2, r2, #16
 8007786:	4310      	orrs	r0, r2
 8007788:	f040 80c1 	bne.w	800790e <HAL_ADC_Init+0x1e6>
    ADC_STATE_CLR_SET(hadc->State,
 800778c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800778e:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 8007790:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8007794:	f042 0202 	orr.w	r2, r2, #2
 8007798:	6562      	str	r2, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800779a:	f7ff faaf 	bl	8006cfc <LL_ADC_IsEnabled>
 800779e:	b980      	cbnz	r0, 80077c2 <HAL_ADC_Init+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80077a0:	4e5e      	ldr	r6, [pc, #376]	; (800791c <HAL_ADC_Init+0x1f4>)
 80077a2:	495f      	ldr	r1, [pc, #380]	; (8007920 <HAL_ADC_Init+0x1f8>)
 80077a4:	42b3      	cmp	r3, r6
 80077a6:	d002      	beq.n	80077ae <HAL_ADC_Init+0x86>
 80077a8:	428b      	cmp	r3, r1
 80077aa:	f040 808e 	bne.w	80078ca <HAL_ADC_Init+0x1a2>
 80077ae:	485b      	ldr	r0, [pc, #364]	; (800791c <HAL_ADC_Init+0x1f4>)
 80077b0:	f7ff faa4 	bl	8006cfc <LL_ADC_IsEnabled>
 80077b4:	4602      	mov	r2, r0
 80077b6:	485a      	ldr	r0, [pc, #360]	; (8007920 <HAL_ADC_Init+0x1f8>)
 80077b8:	f7ff faa0 	bl	8006cfc <LL_ADC_IsEnabled>
 80077bc:	4310      	orrs	r0, r2
 80077be:	f000 8092 	beq.w	80078e6 <HAL_ADC_Init+0x1be>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80077c2:	f7ff fa73 	bl	8006cac <HAL_GetREVID>
 80077c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80077ca:	7f21      	ldrb	r1, [r4, #28]
 80077cc:	4298      	cmp	r0, r3
 80077ce:	7d62      	ldrb	r2, [r4, #21]
 80077d0:	68a0      	ldr	r0, [r4, #8]
 80077d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80077d4:	f240 808d 	bls.w	80078f2 <HAL_ADC_Init+0x1ca>
 80077d8:	2810      	cmp	r0, #16
 80077da:	f040 808a 	bne.w	80078f2 <HAL_ADC_Init+0x1ca>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80077de:	0352      	lsls	r2, r2, #13
 80077e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80077e4:	431a      	orrs	r2, r3
 80077e6:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80077ea:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80077ec:	bf02      	ittt	eq
 80077ee:	6a22      	ldreq	r2, [r4, #32]
 80077f0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80077f4:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80077f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80077fa:	b122      	cbz	r2, 8007806 <HAL_ADC_Init+0xde>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80077fc:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007800:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007802:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007804:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	4946      	ldr	r1, [pc, #280]	; (8007924 <HAL_ADC_Init+0x1fc>)
 800780a:	68d0      	ldr	r0, [r2, #12]
 800780c:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800780e:	4610      	mov	r0, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007810:	4319      	orrs	r1, r3
 8007812:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007814:	f7ff fa76 	bl	8006d04 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007818:	6893      	ldr	r3, [r2, #8]
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	4318      	orrs	r0, r3
 8007820:	d127      	bne.n	8007872 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007822:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007824:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8007832:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007834:	430b      	orrs	r3, r1
 8007836:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8007838:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800783c:	2b01      	cmp	r3, #1
 800783e:	d15e      	bne.n	80078fe <HAL_ADC_Init+0x1d6>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007840:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007842:	6910      	ldr	r0, [r2, #16]
 8007844:	1e59      	subs	r1, r3, #1
 8007846:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	; 0x40
 800784a:	4333      	orrs	r3, r6
 800784c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007850:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007852:	430b      	orrs	r3, r1
 8007854:	4934      	ldr	r1, [pc, #208]	; (8007928 <HAL_ADC_Init+0x200>)
 8007856:	4001      	ands	r1, r0
 8007858:	430b      	orrs	r3, r1
 800785a:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800785e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8007860:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007862:	6913      	ldr	r3, [r2, #16]
 8007864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007866:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800786a:	430b      	orrs	r3, r1
 800786c:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800786e:	f7ff fec5 	bl	80075fc <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007872:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007874:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007876:	2b01      	cmp	r3, #1
 8007878:	d145      	bne.n	8007906 <HAL_ADC_Init+0x1de>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800787a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800787c:	69a3      	ldr	r3, [r4, #24]
 800787e:	f021 010f 	bic.w	r1, r1, #15
 8007882:	3b01      	subs	r3, #1
 8007884:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007886:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007888:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800788a:	f023 0303 	bic.w	r3, r3, #3
 800788e:	f043 0301 	orr.w	r3, r3, #1
 8007892:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007894:	4628      	mov	r0, r5
 8007896:	b002      	add	sp, #8
 8007898:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800789a:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800789c:	4923      	ldr	r1, [pc, #140]	; (800792c <HAL_ADC_Init+0x204>)
 800789e:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80078a2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80078a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	4a20      	ldr	r2, [pc, #128]	; (8007930 <HAL_ADC_Init+0x208>)
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	fbb2 f2f1 	udiv	r2, r2, r1
 80078b4:	3201      	adds	r2, #1
      wait_loop_index--;
 80078b6:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 80078b8:	9a01      	ldr	r2, [sp, #4]
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	f43f af50 	beq.w	8007760 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80078c0:	9a01      	ldr	r2, [sp, #4]
 80078c2:	3a01      	subs	r2, #1
 80078c4:	e7f7      	b.n	80078b6 <HAL_ADC_Init+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078c6:	2500      	movs	r5, #0
 80078c8:	e757      	b.n	800777a <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078ca:	481a      	ldr	r0, [pc, #104]	; (8007934 <HAL_ADC_Init+0x20c>)
 80078cc:	f7ff fa16 	bl	8006cfc <LL_ADC_IsEnabled>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	f47f af76 	bne.w	80077c2 <HAL_ADC_Init+0x9a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80078d6:	4a18      	ldr	r2, [pc, #96]	; (8007938 <HAL_ADC_Init+0x210>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80078d8:	6893      	ldr	r3, [r2, #8]
 80078da:	6861      	ldr	r1, [r4, #4]
 80078dc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6093      	str	r3, [r2, #8]
}
 80078e4:	e76d      	b.n	80077c2 <HAL_ADC_Init+0x9a>
 80078e6:	42b3      	cmp	r3, r6
 80078e8:	d001      	beq.n	80078ee <HAL_ADC_Init+0x1c6>
 80078ea:	428b      	cmp	r3, r1
 80078ec:	d1f3      	bne.n	80078d6 <HAL_ADC_Init+0x1ae>
 80078ee:	4a13      	ldr	r2, [pc, #76]	; (800793c <HAL_ADC_Init+0x214>)
 80078f0:	e7f2      	b.n	80078d8 <HAL_ADC_Init+0x1b0>
                  hadc->Init.Overrun                                                    |
 80078f2:	4303      	orrs	r3, r0
 80078f4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80078f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80078fc:	e775      	b.n	80077ea <HAL_ADC_Init+0xc2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80078fe:	6913      	ldr	r3, [r2, #16]
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	e7ab      	b.n	800785e <HAL_ADC_Init+0x136>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007906:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007908:	f023 030f 	bic.w	r3, r3, #15
 800790c:	e7bb      	b.n	8007886 <HAL_ADC_Init+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800790e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007910:	f043 0310 	orr.w	r3, r3, #16
 8007914:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8007916:	2501      	movs	r5, #1
 8007918:	e7bc      	b.n	8007894 <HAL_ADC_Init+0x16c>
 800791a:	bf00      	nop
 800791c:	40022000 	.word	0x40022000
 8007920:	40022100 	.word	0x40022100
 8007924:	fff0c003 	.word	0xfff0c003
 8007928:	fc00f81e 	.word	0xfc00f81e
 800792c:	00030d40 	.word	0x00030d40
 8007930:	24000060 	.word	0x24000060
 8007934:	58026000 	.word	0x58026000
 8007938:	58026300 	.word	0x58026300
 800793c:	40022300 	.word	0x40022300

08007940 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007940:	6880      	ldr	r0, [r0, #8]
}
 8007942:	f000 0001 	and.w	r0, r0, #1
 8007946:	4770      	bx	lr

08007948 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007948:	6880      	ldr	r0, [r0, #8]
}
 800794a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800794e:	4770      	bx	lr

08007950 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007950:	4770      	bx	lr

08007952 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8007952:	4770      	bx	lr

08007954 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8007954:	4770      	bx	lr

08007956 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8007956:	4770      	bx	lr

08007958 <HAL_ADCEx_EndOfSamplingCallback>:
 8007958:	4770      	bx	lr
	...

0800795c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800795c:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800795e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8007962:	b09a      	sub	sp, #104	; 0x68
 8007964:	4602      	mov	r2, r0
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007966:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8007968:	2b01      	cmp	r3, #1
 800796a:	d052      	beq.n	8007a12 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 800796c:	2301      	movs	r3, #1

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800796e:	4c2a      	ldr	r4, [pc, #168]	; (8007a18 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  __HAL_LOCK(hadc);
 8007970:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007974:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007976:	6816      	ldr	r6, [r2, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007978:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800797a:	42a6      	cmp	r6, r4
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800797c:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800797e:	d10d      	bne.n	800799c <HAL_ADCEx_MultiModeConfigChannel+0x40>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007980:	4826      	ldr	r0, [pc, #152]	; (8007a1c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8007982:	f7ff ffe1 	bl	8007948 <LL_ADC_REG_IsConversionOngoing>
 8007986:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ffdd 	bl	8007948 <LL_ADC_REG_IsConversionOngoing>
 800798e:	4320      	orrs	r0, r4
 8007990:	d00d      	beq.n	80079ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007992:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007994:	f041 0120 	orr.w	r1, r1, #32
 8007998:	6551      	str	r1, [r2, #84]	; 0x54
 800799a:	e027      	b.n	80079ec <HAL_ADCEx_MultiModeConfigChannel+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800799c:	6d51      	ldr	r1, [r2, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800799e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    return HAL_ERROR;
 80079a2:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079a4:	f041 0120 	orr.w	r1, r1, #32
 80079a8:	6551      	str	r1, [r2, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80079aa:	b01a      	add	sp, #104	; 0x68
 80079ac:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80079ae:	4c1c      	ldr	r4, [pc, #112]	; (8007a20 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80079b0:	68a3      	ldr	r3, [r4, #8]
 80079b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80079b6:	b1dd      	cbz	r5, 80079f0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80079b8:	6848      	ldr	r0, [r1, #4]
 80079ba:	4303      	orrs	r3, r0
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80079bc:	4630      	mov	r0, r6
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80079be:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80079c0:	f7ff ffbe 	bl	8007940 <LL_ADC_IsEnabled>
 80079c4:	4603      	mov	r3, r0
 80079c6:	4815      	ldr	r0, [pc, #84]	; (8007a1c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80079c8:	f7ff ffba 	bl	8007940 <LL_ADC_IsEnabled>
 80079cc:	4303      	orrs	r3, r0
 80079ce:	d004      	beq.n	80079da <HAL_ADCEx_MultiModeConfigChannel+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079d0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80079d2:	2300      	movs	r3, #0
 80079d4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 80079d8:	e7e7      	b.n	80079aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
        MODIFY_REG(tmpADC_Common->CCR,
 80079da:	6889      	ldr	r1, [r1, #8]
 80079dc:	68a0      	ldr	r0, [r4, #8]
 80079de:	430d      	orrs	r5, r1
 80079e0:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80079e4:	f021 010f 	bic.w	r1, r1, #15
 80079e8:	430d      	orrs	r5, r1
 80079ea:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 80079ec:	4618      	mov	r0, r3
 80079ee:	e7f0      	b.n	80079d2 <HAL_ADCEx_MultiModeConfigChannel+0x76>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80079f0:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80079f2:	4630      	mov	r0, r6
 80079f4:	f7ff ffa4 	bl	8007940 <LL_ADC_IsEnabled>
 80079f8:	4603      	mov	r3, r0
 80079fa:	4808      	ldr	r0, [pc, #32]	; (8007a1c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80079fc:	f7ff ffa0 	bl	8007940 <LL_ADC_IsEnabled>
 8007a00:	4303      	orrs	r3, r0
 8007a02:	d1e5      	bne.n	80079d0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007a04:	68a1      	ldr	r1, [r4, #8]
 8007a06:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8007a0a:	f021 010f 	bic.w	r1, r1, #15
 8007a0e:	60a1      	str	r1, [r4, #8]
 8007a10:	e7ec      	b.n	80079ec <HAL_ADCEx_MultiModeConfigChannel+0x90>
  __HAL_LOCK(hadc);
 8007a12:	2002      	movs	r0, #2
 8007a14:	e7c9      	b.n	80079aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007a16:	bf00      	nop
 8007a18:	40022000 	.word	0x40022000
 8007a1c:	40022100 	.word	0x40022100
 8007a20:	40022300 	.word	0x40022300

08007a24 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a24:	4907      	ldr	r1, [pc, #28]	; (8007a44 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a26:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a28:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a32:	0412      	lsls	r2, r2, #16
 8007a34:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007a40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007a42:	4770      	bx	lr
 8007a44:	e000ed00 	.word	0xe000ed00

08007a48 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a48:	4b16      	ldr	r3, [pc, #88]	; (8007aa4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a4a:	b530      	push	{r4, r5, lr}
 8007a4c:	68dc      	ldr	r4, [r3, #12]
 8007a4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a52:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a56:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	bf28      	it	cs
 8007a5c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a5e:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a60:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a64:	bf8c      	ite	hi
 8007a66:	3c03      	subhi	r4, #3
 8007a68:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a6a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8007a6e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a70:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a74:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a78:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a7c:	fa03 f304 	lsl.w	r3, r3, r4
 8007a80:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a84:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007a88:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8007a8a:	db06      	blt.n	8007a9a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a8c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007a90:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007a94:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007a98:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a9a:	f000 000f 	and.w	r0, r0, #15
 8007a9e:	4a02      	ldr	r2, [pc, #8]	; (8007aa8 <HAL_NVIC_SetPriority+0x60>)
 8007aa0:	5413      	strb	r3, [r2, r0]
 8007aa2:	e7f9      	b.n	8007a98 <HAL_NVIC_SetPriority+0x50>
 8007aa4:	e000ed00 	.word	0xe000ed00
 8007aa8:	e000ed14 	.word	0xe000ed14

08007aac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007aac:	2800      	cmp	r0, #0
 8007aae:	db07      	blt.n	8007ac0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	0941      	lsrs	r1, r0, #5
 8007ab4:	f000 001f 	and.w	r0, r0, #31
 8007ab8:	4a02      	ldr	r2, [pc, #8]	; (8007ac4 <HAL_NVIC_EnableIRQ+0x18>)
 8007aba:	4083      	lsls	r3, r0
 8007abc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	e000e100 	.word	0xe000e100

08007ac8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	db0c      	blt.n	8007ae6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007acc:	0943      	lsrs	r3, r0, #5
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f000 001f 	and.w	r0, r0, #31
 8007ad4:	4904      	ldr	r1, [pc, #16]	; (8007ae8 <HAL_NVIC_DisableIRQ+0x20>)
 8007ad6:	3320      	adds	r3, #32
 8007ad8:	4082      	lsls	r2, r0
 8007ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ade:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007ae2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007ae6:	4770      	bx	lr
 8007ae8:	e000e100 	.word	0xe000e100

08007aec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007aec:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007aee:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8007c6c <DMA_SetConfig+0x180>
 8007af2:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007af4:	6d87      	ldr	r7, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007af6:	4564      	cmp	r4, ip
 8007af8:	d045      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007afa:	4d59      	ldr	r5, [pc, #356]	; (8007c60 <DMA_SetConfig+0x174>)
 8007afc:	42ac      	cmp	r4, r5
 8007afe:	d042      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b00:	3518      	adds	r5, #24
 8007b02:	42ac      	cmp	r4, r5
 8007b04:	d03f      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b06:	3518      	adds	r5, #24
 8007b08:	42ac      	cmp	r4, r5
 8007b0a:	d03c      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b0c:	3518      	adds	r5, #24
 8007b0e:	42ac      	cmp	r4, r5
 8007b10:	d039      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b12:	3518      	adds	r5, #24
 8007b14:	42ac      	cmp	r4, r5
 8007b16:	d036      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b18:	3518      	adds	r5, #24
 8007b1a:	42ac      	cmp	r4, r5
 8007b1c:	d033      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b1e:	3518      	adds	r5, #24
 8007b20:	42ac      	cmp	r4, r5
 8007b22:	d030      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b24:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8007b28:	42ac      	cmp	r4, r5
 8007b2a:	d02c      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b2c:	3518      	adds	r5, #24
 8007b2e:	42ac      	cmp	r4, r5
 8007b30:	d029      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b32:	3518      	adds	r5, #24
 8007b34:	42ac      	cmp	r4, r5
 8007b36:	d026      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b38:	3518      	adds	r5, #24
 8007b3a:	42ac      	cmp	r4, r5
 8007b3c:	d023      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b3e:	3518      	adds	r5, #24
 8007b40:	42ac      	cmp	r4, r5
 8007b42:	d020      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b44:	3518      	adds	r5, #24
 8007b46:	42ac      	cmp	r4, r5
 8007b48:	d01d      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b4a:	3518      	adds	r5, #24
 8007b4c:	42ac      	cmp	r4, r5
 8007b4e:	d01a      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b50:	3518      	adds	r5, #24
 8007b52:	42ac      	cmp	r4, r5
 8007b54:	d017      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b56:	4d43      	ldr	r5, [pc, #268]	; (8007c64 <DMA_SetConfig+0x178>)
 8007b58:	42ac      	cmp	r4, r5
 8007b5a:	d014      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b5c:	3514      	adds	r5, #20
 8007b5e:	42ac      	cmp	r4, r5
 8007b60:	d011      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b62:	3514      	adds	r5, #20
 8007b64:	42ac      	cmp	r4, r5
 8007b66:	d00e      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b68:	3514      	adds	r5, #20
 8007b6a:	42ac      	cmp	r4, r5
 8007b6c:	d00b      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b6e:	3514      	adds	r5, #20
 8007b70:	42ac      	cmp	r4, r5
 8007b72:	d008      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b74:	3514      	adds	r5, #20
 8007b76:	42ac      	cmp	r4, r5
 8007b78:	d005      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b7a:	3514      	adds	r5, #20
 8007b7c:	42ac      	cmp	r4, r5
 8007b7e:	d002      	beq.n	8007b86 <DMA_SetConfig+0x9a>
 8007b80:	3514      	adds	r5, #20
 8007b82:	42ac      	cmp	r4, r5
 8007b84:	d167      	bne.n	8007c56 <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b86:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	; 0x64
 8007b8a:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007b8c:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8007b8e:	b115      	cbz	r5, 8007b96 <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b90:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	; 0x70
 8007b94:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b96:	4564      	cmp	r4, ip
 8007b98:	d037      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007b9a:	4d31      	ldr	r5, [pc, #196]	; (8007c60 <DMA_SetConfig+0x174>)
 8007b9c:	42ac      	cmp	r4, r5
 8007b9e:	d034      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007ba0:	3518      	adds	r5, #24
 8007ba2:	42ac      	cmp	r4, r5
 8007ba4:	d031      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007ba6:	3518      	adds	r5, #24
 8007ba8:	42ac      	cmp	r4, r5
 8007baa:	d02e      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bac:	3518      	adds	r5, #24
 8007bae:	42ac      	cmp	r4, r5
 8007bb0:	d02b      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bb2:	3518      	adds	r5, #24
 8007bb4:	42ac      	cmp	r4, r5
 8007bb6:	d028      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bb8:	3518      	adds	r5, #24
 8007bba:	42ac      	cmp	r4, r5
 8007bbc:	d025      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bbe:	3518      	adds	r5, #24
 8007bc0:	42ac      	cmp	r4, r5
 8007bc2:	d022      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bc4:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8007bc8:	42ac      	cmp	r4, r5
 8007bca:	d01e      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bcc:	3518      	adds	r5, #24
 8007bce:	42ac      	cmp	r4, r5
 8007bd0:	d01b      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bd2:	3518      	adds	r5, #24
 8007bd4:	42ac      	cmp	r4, r5
 8007bd6:	d018      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bd8:	3518      	adds	r5, #24
 8007bda:	42ac      	cmp	r4, r5
 8007bdc:	d015      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bde:	3518      	adds	r5, #24
 8007be0:	42ac      	cmp	r4, r5
 8007be2:	d012      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007be4:	3518      	adds	r5, #24
 8007be6:	42ac      	cmp	r4, r5
 8007be8:	d00f      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bea:	3518      	adds	r5, #24
 8007bec:	42ac      	cmp	r4, r5
 8007bee:	d00c      	beq.n	8007c0a <DMA_SetConfig+0x11e>
 8007bf0:	3518      	adds	r5, #24
 8007bf2:	42ac      	cmp	r4, r5
 8007bf4:	d009      	beq.n	8007c0a <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007bf6:	4d1b      	ldr	r5, [pc, #108]	; (8007c64 <DMA_SetConfig+0x178>)
 8007bf8:	42ac      	cmp	r4, r5
 8007bfa:	d117      	bne.n	8007c2c <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007bfc:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8007bfe:	f005 061f 	and.w	r6, r5, #31
 8007c02:	2501      	movs	r5, #1
 8007c04:	40b5      	lsls	r5, r6
 8007c06:	607d      	str	r5, [r7, #4]
 8007c08:	e009      	b.n	8007c1e <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c0a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8007c0c:	f005 061f 	and.w	r6, r5, #31
 8007c10:	253f      	movs	r5, #63	; 0x3f
 8007c12:	40b5      	lsls	r5, r6
 8007c14:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c16:	6825      	ldr	r5, [r4, #0]
 8007c18:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8007c1c:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007c1e:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c20:	6883      	ldr	r3, [r0, #8]
 8007c22:	2b40      	cmp	r3, #64	; 0x40
 8007c24:	d118      	bne.n	8007c58 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007c26:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007c28:	60e1      	str	r1, [r4, #12]
 8007c2a:	e014      	b.n	8007c56 <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c2c:	4d0e      	ldr	r5, [pc, #56]	; (8007c68 <DMA_SetConfig+0x17c>)
 8007c2e:	42ac      	cmp	r4, r5
 8007c30:	d0e4      	beq.n	8007bfc <DMA_SetConfig+0x110>
 8007c32:	3514      	adds	r5, #20
 8007c34:	42ac      	cmp	r4, r5
 8007c36:	d0e1      	beq.n	8007bfc <DMA_SetConfig+0x110>
 8007c38:	3514      	adds	r5, #20
 8007c3a:	42ac      	cmp	r4, r5
 8007c3c:	d0de      	beq.n	8007bfc <DMA_SetConfig+0x110>
 8007c3e:	3514      	adds	r5, #20
 8007c40:	42ac      	cmp	r4, r5
 8007c42:	d0db      	beq.n	8007bfc <DMA_SetConfig+0x110>
 8007c44:	3514      	adds	r5, #20
 8007c46:	42ac      	cmp	r4, r5
 8007c48:	d0d8      	beq.n	8007bfc <DMA_SetConfig+0x110>
 8007c4a:	3514      	adds	r5, #20
 8007c4c:	42ac      	cmp	r4, r5
 8007c4e:	d0d5      	beq.n	8007bfc <DMA_SetConfig+0x110>
 8007c50:	3514      	adds	r5, #20
 8007c52:	42ac      	cmp	r4, r5
 8007c54:	d0d2      	beq.n	8007bfc <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007c58:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007c5a:	60e2      	str	r2, [r4, #12]
}
 8007c5c:	e7fb      	b.n	8007c56 <DMA_SetConfig+0x16a>
 8007c5e:	bf00      	nop
 8007c60:	40020028 	.word	0x40020028
 8007c64:	58025408 	.word	0x58025408
 8007c68:	5802541c 	.word	0x5802541c
 8007c6c:	40020010 	.word	0x40020010

08007c70 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c70:	6803      	ldr	r3, [r0, #0]
 8007c72:	4a23      	ldr	r2, [pc, #140]	; (8007d00 <DMA_CalcBaseAndBitshift+0x90>)
 8007c74:	4293      	cmp	r3, r2
{
 8007c76:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c78:	d032      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007c7a:	3218      	adds	r2, #24
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d02f      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007c80:	3218      	adds	r2, #24
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d02c      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007c86:	3218      	adds	r2, #24
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d029      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007c8c:	3218      	adds	r2, #24
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d026      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007c92:	3218      	adds	r2, #24
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d023      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007c98:	3218      	adds	r2, #24
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d020      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007c9e:	3218      	adds	r2, #24
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d01d      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007ca4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d019      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007cac:	3218      	adds	r2, #24
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d016      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007cb2:	3218      	adds	r2, #24
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d013      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007cb8:	3218      	adds	r2, #24
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d010      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007cbe:	3218      	adds	r2, #24
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d00d      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007cc4:	3218      	adds	r2, #24
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00a      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007cca:	3218      	adds	r2, #24
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d007      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
 8007cd0:	3218      	adds	r2, #24
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d004      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007cda:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007ce4:	4c07      	ldr	r4, [pc, #28]	; (8007d04 <DMA_CalcBaseAndBitshift+0x94>)
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007ce6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007cea:	3a10      	subs	r2, #16
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007cec:	f023 0303 	bic.w	r3, r3, #3
    if (stream_number > 3U)
 8007cf0:	2a5f      	cmp	r2, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007cf2:	fbb2 f1f1 	udiv	r1, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007cf6:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007cf8:	bf88      	it	hi
 8007cfa:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007cfc:	65c1      	str	r1, [r0, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007cfe:	e7ec      	b.n	8007cda <DMA_CalcBaseAndBitshift+0x6a>
 8007d00:	40020010 	.word	0x40020010
 8007d04:	08015d6c 	.word	0x08015d6c

08007d08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007d08:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d0a:	4921      	ldr	r1, [pc, #132]	; (8007d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d0c:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d0e:	428a      	cmp	r2, r1
 8007d10:	d028      	beq.n	8007d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8007d12:	3114      	adds	r1, #20
 8007d14:	428a      	cmp	r2, r1
 8007d16:	d025      	beq.n	8007d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8007d18:	3114      	adds	r1, #20
 8007d1a:	428a      	cmp	r2, r1
 8007d1c:	d022      	beq.n	8007d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8007d1e:	3114      	adds	r1, #20
 8007d20:	428a      	cmp	r2, r1
 8007d22:	d01f      	beq.n	8007d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8007d24:	3114      	adds	r1, #20
 8007d26:	428a      	cmp	r2, r1
 8007d28:	d01c      	beq.n	8007d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8007d2a:	3114      	adds	r1, #20
 8007d2c:	428a      	cmp	r2, r1
 8007d2e:	d019      	beq.n	8007d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8007d30:	3114      	adds	r1, #20
 8007d32:	428a      	cmp	r2, r1
 8007d34:	d016      	beq.n	8007d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8007d36:	3114      	adds	r1, #20
 8007d38:	428a      	cmp	r2, r1
 8007d3a:	d013      	beq.n	8007d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d3c:	2118      	movs	r1, #24
 8007d3e:	3b10      	subs	r3, #16
 8007d40:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007d44:	4913      	ldr	r1, [pc, #76]	; (8007d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8007d46:	4411      	add	r1, r2
 8007d48:	29a8      	cmp	r1, #168	; 0xa8
 8007d4a:	d91e      	bls.n	8007d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x82>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007d4c:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d50:	2101      	movs	r1, #1
 8007d52:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007d56:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5e:	490e      	ldr	r1, [pc, #56]	; (8007d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007d60:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d62:	e00e      	b.n	8007d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007d64:	2214      	movs	r2, #20
 8007d66:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d68:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007d6a:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007d6e:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d72:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007d76:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7e:	4907      	ldr	r1, [pc, #28]	; (8007d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007d80:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d82:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007d84:	e9c0 2118 	strd	r2, r1, [r0, #96]	; 0x60
  }
}
 8007d88:	4770      	bx	lr
      stream_number += 8U;
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	e7de      	b.n	8007d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8007d8e:	bf00      	nop
 8007d90:	58025408 	.word	0x58025408
 8007d94:	bffdfbf0 	.word	0xbffdfbf0
 8007d98:	40020880 	.word	0x40020880
 8007d9c:	58025880 	.word	0x58025880

08007da0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007da0:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007da2:	1e51      	subs	r1, r2, #1
 8007da4:	2907      	cmp	r1, #7
{
 8007da6:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007da8:	d821      	bhi.n	8007dee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007daa:	6803      	ldr	r3, [r0, #0]
 8007dac:	4c13      	ldr	r4, [pc, #76]	; (8007dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	d01e      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007db2:	3414      	adds	r4, #20
 8007db4:	42a3      	cmp	r3, r4
 8007db6:	d01b      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007db8:	3414      	adds	r4, #20
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	d018      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007dbe:	3414      	adds	r4, #20
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	d015      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007dc4:	3414      	adds	r4, #20
 8007dc6:	42a3      	cmp	r3, r4
 8007dc8:	d012      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007dca:	3414      	adds	r4, #20
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d00f      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007dd0:	3414      	adds	r4, #20
 8007dd2:	42a3      	cmp	r3, r4
 8007dd4:	d00c      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8007dd6:	3414      	adds	r4, #20
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d009      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8007dde:	4413      	add	r3, r2
 8007de0:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8007de2:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007de4:	e9c0 321b 	strd	r3, r2, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007de8:	2301      	movs	r3, #1
 8007dea:	408b      	lsls	r3, r1
 8007dec:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8007dee:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8007df2:	4413      	add	r3, r2
 8007df4:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8007df6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007df8:	e7f4      	b.n	8007de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 8007dfa:	bf00      	nop
 8007dfc:	58025408 	.word	0x58025408
 8007e00:	1000823f 	.word	0x1000823f
 8007e04:	40020940 	.word	0x40020940
 8007e08:	1600963f 	.word	0x1600963f
 8007e0c:	58025940 	.word	0x58025940

08007e10 <HAL_DMA_Init>:
{
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007e14:	f7fe ff32 	bl	8006c7c <HAL_GetTick>
 8007e18:	4606      	mov	r6, r0
  if(hdma == NULL)
 8007e1a:	2c00      	cmp	r4, #0
 8007e1c:	f000 80cc 	beq.w	8007fb8 <HAL_DMA_Init+0x1a8>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	4d73      	ldr	r5, [pc, #460]	; (8007ff0 <HAL_DMA_Init+0x1e0>)
 8007e24:	42ab      	cmp	r3, r5
 8007e26:	d06a      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e28:	4a72      	ldr	r2, [pc, #456]	; (8007ff4 <HAL_DMA_Init+0x1e4>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d067      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e2e:	3218      	adds	r2, #24
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d064      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e34:	3218      	adds	r2, #24
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d061      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e3a:	3218      	adds	r2, #24
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d05e      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e40:	3218      	adds	r2, #24
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d05b      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e46:	3218      	adds	r2, #24
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d058      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e4c:	3218      	adds	r2, #24
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d055      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e52:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d051      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e5a:	3218      	adds	r2, #24
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d04e      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e60:	3218      	adds	r2, #24
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d04b      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e66:	3218      	adds	r2, #24
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d048      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e6c:	3218      	adds	r2, #24
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d045      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e72:	3218      	adds	r2, #24
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d042      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e78:	3218      	adds	r2, #24
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d03f      	beq.n	8007efe <HAL_DMA_Init+0xee>
 8007e7e:	3218      	adds	r2, #24
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d03c      	beq.n	8007efe <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007e84:	4a5c      	ldr	r2, [pc, #368]	; (8007ff8 <HAL_DMA_Init+0x1e8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	f040 8137 	bne.w	80080fa <HAL_DMA_Init+0x2ea>
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e8c:	2202      	movs	r2, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e8e:	68a1      	ldr	r1, [r4, #8]
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e90:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007e94:	2200      	movs	r2, #0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e96:	2940      	cmp	r1, #64	; 0x40
    __HAL_UNLOCK(hdma);
 8007e98:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007e9c:	6818      	ldr	r0, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007e9e:	f420 30ff 	bic.w	r0, r0, #130560	; 0x1fe00
 8007ea2:	f420 70f8 	bic.w	r0, r0, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ea6:	f000 8146 	beq.w	8008136 <HAL_DMA_Init+0x326>
 8007eaa:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
 8007eae:	4251      	negs	r1, r2
 8007eb0:	4151      	adcs	r1, r2
 8007eb2:	0389      	lsls	r1, r1, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007eb4:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8007eb8:	08d2      	lsrs	r2, r2, #3
 8007eba:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ebe:	6966      	ldr	r6, [r4, #20]
 8007ec0:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007ec4:	69a6      	ldr	r6, [r4, #24]
 8007ec6:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007eca:	69e6      	ldr	r6, [r4, #28]
 8007ecc:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007ed0:	6a26      	ldr	r6, [r4, #32]
 8007ed2:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8007ed6:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ed8:	4620      	mov	r0, r4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007eda:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007edc:	4a47      	ldr	r2, [pc, #284]	; (8007ffc <HAL_DMA_Init+0x1ec>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007ede:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007ee0:	441a      	add	r2, r3
 8007ee2:	2314      	movs	r3, #20
 8007ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ee8:	0092      	lsls	r2, r2, #2
 8007eea:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007eec:	f7ff fec0 	bl	8007c70 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ef0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007ef2:	f003 021f 	and.w	r2, r3, #31
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4093      	lsls	r3, r2
 8007efa:	6043      	str	r3, [r0, #4]
 8007efc:	e094      	b.n	8008028 <HAL_DMA_Init+0x218>
    hdma->State = HAL_DMA_STATE_BUSY;
 8007efe:	2202      	movs	r2, #2
 8007f00:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007f04:	2200      	movs	r2, #0
 8007f06:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	6813      	ldr	r3, [r2, #0]
 8007f16:	07df      	lsls	r7, r3, #31
 8007f18:	d444      	bmi.n	8007fa4 <HAL_DMA_Init+0x194>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007f1a:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f1c:	4838      	ldr	r0, [pc, #224]	; (8008000 <HAL_DMA_Init+0x1f0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f1e:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f20:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 8007f22:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8007f26:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f28:	6926      	ldr	r6, [r4, #16]
 8007f2a:	4333      	orrs	r3, r6
 8007f2c:	6966      	ldr	r6, [r4, #20]
 8007f2e:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f30:	69e6      	ldr	r6, [r4, #28]
 8007f32:	430b      	orrs	r3, r1
 8007f34:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 8007f36:	6a26      	ldr	r6, [r4, #32]
 8007f38:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f3a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f3c:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8007f3e:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f42:	bf02      	ittt	eq
 8007f44:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	; 0x2c
 8007f48:	4338      	orreq	r0, r7
 8007f4a:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007f4c:	482d      	ldr	r0, [pc, #180]	; (8008004 <HAL_DMA_Init+0x1f4>)
 8007f4e:	6800      	ldr	r0, [r0, #0]
 8007f50:	0c00      	lsrs	r0, r0, #16
 8007f52:	0400      	lsls	r0, r0, #16
 8007f54:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8007f58:	d30e      	bcc.n	8007f78 <HAL_DMA_Init+0x168>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007f5a:	6860      	ldr	r0, [r4, #4]
 8007f5c:	f1a0 0729 	sub.w	r7, r0, #41	; 0x29
 8007f60:	2f05      	cmp	r7, #5
 8007f62:	d907      	bls.n	8007f74 <HAL_DMA_Init+0x164>
 8007f64:	383f      	subs	r0, #63	; 0x3f
 8007f66:	2813      	cmp	r0, #19
 8007f68:	d806      	bhi.n	8007f78 <HAL_DMA_Init+0x168>
 8007f6a:	4f27      	ldr	r7, [pc, #156]	; (8008008 <HAL_DMA_Init+0x1f8>)
 8007f6c:	fa27 f000 	lsr.w	r0, r7, r0
 8007f70:	07c0      	lsls	r0, r0, #31
 8007f72:	d501      	bpl.n	8007f78 <HAL_DMA_Init+0x168>
        registerValue |= DMA_SxCR_TRBUFF;
 8007f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007f78:	6013      	str	r3, [r2, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f7a:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007f7c:	6953      	ldr	r3, [r2, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f7e:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8007f82:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f86:	d145      	bne.n	8008014 <HAL_DMA_Init+0x204>
      registerValue |= hdma->Init.FIFOThreshold;
 8007f88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8007f8c:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f8e:	2e00      	cmp	r6, #0
 8007f90:	d040      	beq.n	8008014 <HAL_DMA_Init+0x204>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f92:	b999      	cbnz	r1, 8007fbc <HAL_DMA_Init+0x1ac>
    switch (hdma->Init.FIFOThreshold)
 8007f94:	2801      	cmp	r0, #1
 8007f96:	d021      	beq.n	8007fdc <HAL_DMA_Init+0x1cc>
 8007f98:	f030 0102 	bics.w	r1, r0, #2
 8007f9c:	d13a      	bne.n	8008014 <HAL_DMA_Init+0x204>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f9e:	01f1      	lsls	r1, r6, #7
 8007fa0:	d538      	bpl.n	8008014 <HAL_DMA_Init+0x204>
 8007fa2:	e01e      	b.n	8007fe2 <HAL_DMA_Init+0x1d2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fa4:	f7fe fe6a 	bl	8006c7c <HAL_GetTick>
 8007fa8:	1b80      	subs	r0, r0, r6
 8007faa:	2805      	cmp	r0, #5
 8007fac:	d9b1      	bls.n	8007f12 <HAL_DMA_Init+0x102>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fae:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007fb0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8007fb8:	2001      	movs	r0, #1
 8007fba:	e017      	b.n	8007fec <HAL_DMA_Init+0x1dc>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fbc:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007fc0:	d124      	bne.n	800800c <HAL_DMA_Init+0x1fc>
    switch (hdma->Init.FIFOThreshold)
 8007fc2:	2803      	cmp	r0, #3
 8007fc4:	d826      	bhi.n	8008014 <HAL_DMA_Init+0x204>
 8007fc6:	a101      	add	r1, pc, #4	; (adr r1, 8007fcc <HAL_DMA_Init+0x1bc>)
 8007fc8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8007fcc:	08007fe3 	.word	0x08007fe3
 8007fd0:	08007f9f 	.word	0x08007f9f
 8007fd4:	08007fe3 	.word	0x08007fe3
 8007fd8:	08007fdd 	.word	0x08007fdd
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fdc:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8007fe0:	d118      	bne.n	8008014 <HAL_DMA_Init+0x204>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007fe2:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8007fe4:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007fe6:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8007fe8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8007fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40020010 	.word	0x40020010
 8007ff4:	40020028 	.word	0x40020028
 8007ff8:	58025408 	.word	0x58025408
 8007ffc:	a7fdabf8 	.word	0xa7fdabf8
 8008000:	fe10803f 	.word	0xfe10803f
 8008004:	5c001000 	.word	0x5c001000
 8008008:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 800800c:	2802      	cmp	r0, #2
 800800e:	d9e8      	bls.n	8007fe2 <HAL_DMA_Init+0x1d2>
 8008010:	2803      	cmp	r0, #3
 8008012:	d0c4      	beq.n	8007f9e <HAL_DMA_Init+0x18e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008014:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008016:	4620      	mov	r0, r4
 8008018:	f7ff fe2a 	bl	8007c70 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800801c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800801e:	f003 021f 	and.w	r2, r3, #31
 8008022:	233f      	movs	r3, #63	; 0x3f
 8008024:	4093      	lsls	r3, r2
 8008026:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	42ab      	cmp	r3, r5
 800802c:	d045      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 800802e:	4a45      	ldr	r2, [pc, #276]	; (8008144 <HAL_DMA_Init+0x334>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d042      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008034:	3218      	adds	r2, #24
 8008036:	4293      	cmp	r3, r2
 8008038:	d03f      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 800803a:	3218      	adds	r2, #24
 800803c:	4293      	cmp	r3, r2
 800803e:	d03c      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008040:	3218      	adds	r2, #24
 8008042:	4293      	cmp	r3, r2
 8008044:	d039      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008046:	3218      	adds	r2, #24
 8008048:	4293      	cmp	r3, r2
 800804a:	d036      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 800804c:	3218      	adds	r2, #24
 800804e:	4293      	cmp	r3, r2
 8008050:	d033      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008052:	3218      	adds	r2, #24
 8008054:	4293      	cmp	r3, r2
 8008056:	d030      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008058:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800805c:	4293      	cmp	r3, r2
 800805e:	d02c      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008060:	3218      	adds	r2, #24
 8008062:	4293      	cmp	r3, r2
 8008064:	d029      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008066:	3218      	adds	r2, #24
 8008068:	4293      	cmp	r3, r2
 800806a:	d026      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 800806c:	3218      	adds	r2, #24
 800806e:	4293      	cmp	r3, r2
 8008070:	d023      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008072:	3218      	adds	r2, #24
 8008074:	4293      	cmp	r3, r2
 8008076:	d020      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008078:	3218      	adds	r2, #24
 800807a:	4293      	cmp	r3, r2
 800807c:	d01d      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 800807e:	3218      	adds	r2, #24
 8008080:	4293      	cmp	r3, r2
 8008082:	d01a      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008084:	3218      	adds	r2, #24
 8008086:	4293      	cmp	r3, r2
 8008088:	d017      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 800808a:	4a2f      	ldr	r2, [pc, #188]	; (8008148 <HAL_DMA_Init+0x338>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d014      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008090:	3214      	adds	r2, #20
 8008092:	4293      	cmp	r3, r2
 8008094:	d011      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 8008096:	3214      	adds	r2, #20
 8008098:	4293      	cmp	r3, r2
 800809a:	d00e      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 800809c:	3214      	adds	r2, #20
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00b      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 80080a2:	3214      	adds	r2, #20
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d008      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 80080a8:	3214      	adds	r2, #20
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d005      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 80080ae:	3214      	adds	r2, #20
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d002      	beq.n	80080ba <HAL_DMA_Init+0x2aa>
 80080b4:	3214      	adds	r2, #20
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d119      	bne.n	80080ee <HAL_DMA_Init+0x2de>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80080ba:	4620      	mov	r0, r4
 80080bc:	2500      	movs	r5, #0
 80080be:	f7ff fe23 	bl	8007d08 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80080c2:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80080c4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80080c6:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80080c8:	bf04      	itt	eq
 80080ca:	2300      	moveq	r3, #0
 80080cc:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80080ce:	6863      	ldr	r3, [r4, #4]
 80080d0:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80080d2:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80080d4:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80080d6:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080d8:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 80080dc:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80080de:	d82c      	bhi.n	800813a <HAL_DMA_Init+0x32a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80080e0:	f7ff fe5e 	bl	8007da0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80080e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80080e6:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080e8:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80080ec:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080ee:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80080f0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080f2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80080f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80080f8:	e778      	b.n	8007fec <HAL_DMA_Init+0x1dc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80080fa:	4a14      	ldr	r2, [pc, #80]	; (800814c <HAL_DMA_Init+0x33c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	f43f aec5 	beq.w	8007e8c <HAL_DMA_Init+0x7c>
 8008102:	3214      	adds	r2, #20
 8008104:	4293      	cmp	r3, r2
 8008106:	f43f aec1 	beq.w	8007e8c <HAL_DMA_Init+0x7c>
 800810a:	3214      	adds	r2, #20
 800810c:	4293      	cmp	r3, r2
 800810e:	f43f aebd 	beq.w	8007e8c <HAL_DMA_Init+0x7c>
 8008112:	3214      	adds	r2, #20
 8008114:	4293      	cmp	r3, r2
 8008116:	f43f aeb9 	beq.w	8007e8c <HAL_DMA_Init+0x7c>
 800811a:	3214      	adds	r2, #20
 800811c:	4293      	cmp	r3, r2
 800811e:	f43f aeb5 	beq.w	8007e8c <HAL_DMA_Init+0x7c>
 8008122:	3214      	adds	r2, #20
 8008124:	4293      	cmp	r3, r2
 8008126:	f43f aeb1 	beq.w	8007e8c <HAL_DMA_Init+0x7c>
 800812a:	3214      	adds	r2, #20
 800812c:	4293      	cmp	r3, r2
 800812e:	f43f aead 	beq.w	8007e8c <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008132:	2340      	movs	r3, #64	; 0x40
 8008134:	e73c      	b.n	8007fb0 <HAL_DMA_Init+0x1a0>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008136:	2110      	movs	r1, #16
 8008138:	e6bc      	b.n	8007eb4 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 800813a:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800813e:	6765      	str	r5, [r4, #116]	; 0x74
 8008140:	e7d5      	b.n	80080ee <HAL_DMA_Init+0x2de>
 8008142:	bf00      	nop
 8008144:	40020028 	.word	0x40020028
 8008148:	58025408 	.word	0x58025408
 800814c:	5802541c 	.word	0x5802541c

08008150 <HAL_DMA_Start_IT>:
{
 8008150:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8008152:	2800      	cmp	r0, #0
 8008154:	f000 810a 	beq.w	800836c <HAL_DMA_Start_IT+0x21c>
  __HAL_LOCK(hdma);
 8008158:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800815c:	2c01      	cmp	r4, #1
 800815e:	f000 8107 	beq.w	8008370 <HAL_DMA_Start_IT+0x220>
 8008162:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8008164:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
 8008168:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800816a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800816e:	f04f 0500 	mov.w	r5, #0
 8008172:	f040 80f6 	bne.w	8008362 <HAL_DMA_Start_IT+0x212>
    hdma->State = HAL_DMA_STATE_BUSY;
 8008176:	2402      	movs	r4, #2
 8008178:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800817c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800817e:	6545      	str	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8008180:	4d7c      	ldr	r5, [pc, #496]	; (8008374 <HAL_DMA_Start_IT+0x224>)
 8008182:	42ac      	cmp	r4, r5
 8008184:	d01e      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 8008186:	4e7c      	ldr	r6, [pc, #496]	; (8008378 <HAL_DMA_Start_IT+0x228>)
 8008188:	42b4      	cmp	r4, r6
 800818a:	d01b      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 800818c:	3618      	adds	r6, #24
 800818e:	42b4      	cmp	r4, r6
 8008190:	d018      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 8008192:	3618      	adds	r6, #24
 8008194:	42b4      	cmp	r4, r6
 8008196:	d015      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 8008198:	3618      	adds	r6, #24
 800819a:	42b4      	cmp	r4, r6
 800819c:	d012      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 800819e:	3618      	adds	r6, #24
 80081a0:	42b4      	cmp	r4, r6
 80081a2:	d00f      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 80081a4:	3618      	adds	r6, #24
 80081a6:	42b4      	cmp	r4, r6
 80081a8:	d00c      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 80081aa:	3618      	adds	r6, #24
 80081ac:	42b4      	cmp	r4, r6
 80081ae:	d009      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 80081b0:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80081b4:	42b4      	cmp	r4, r6
 80081b6:	d005      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 80081b8:	3618      	adds	r6, #24
 80081ba:	42b4      	cmp	r4, r6
 80081bc:	d002      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 80081be:	3618      	adds	r6, #24
 80081c0:	42b4      	cmp	r4, r6
 80081c2:	d0ff      	beq.n	80081c4 <HAL_DMA_Start_IT+0x74>
 80081c4:	6826      	ldr	r6, [r4, #0]
 80081c6:	f026 0601 	bic.w	r6, r6, #1
 80081ca:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081cc:	f7ff fc8e 	bl	8007aec <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081d0:	42ac      	cmp	r4, r5
 80081d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80081d4:	d053      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 80081d6:	4b68      	ldr	r3, [pc, #416]	; (8008378 <HAL_DMA_Start_IT+0x228>)
 80081d8:	429c      	cmp	r4, r3
 80081da:	d050      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 80081dc:	3318      	adds	r3, #24
 80081de:	429c      	cmp	r4, r3
 80081e0:	d04d      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 80081e2:	3318      	adds	r3, #24
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d04a      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 80081e8:	3318      	adds	r3, #24
 80081ea:	429c      	cmp	r4, r3
 80081ec:	d047      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 80081ee:	3318      	adds	r3, #24
 80081f0:	429c      	cmp	r4, r3
 80081f2:	d044      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 80081f4:	3318      	adds	r3, #24
 80081f6:	429c      	cmp	r4, r3
 80081f8:	d041      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 80081fa:	3318      	adds	r3, #24
 80081fc:	429c      	cmp	r4, r3
 80081fe:	d03e      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 8008200:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008204:	429c      	cmp	r4, r3
 8008206:	d03a      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 8008208:	3318      	adds	r3, #24
 800820a:	429c      	cmp	r4, r3
 800820c:	d037      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 800820e:	3318      	adds	r3, #24
 8008210:	429c      	cmp	r4, r3
 8008212:	d034      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 8008214:	3318      	adds	r3, #24
 8008216:	429c      	cmp	r4, r3
 8008218:	d031      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 800821a:	3318      	adds	r3, #24
 800821c:	429c      	cmp	r4, r3
 800821e:	d02e      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 8008220:	3318      	adds	r3, #24
 8008222:	429c      	cmp	r4, r3
 8008224:	d02b      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 8008226:	3318      	adds	r3, #24
 8008228:	429c      	cmp	r4, r3
 800822a:	d028      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
 800822c:	3318      	adds	r3, #24
 800822e:	429c      	cmp	r4, r3
 8008230:	d025      	beq.n	800827e <HAL_DMA_Start_IT+0x12e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	f023 030e 	bic.w	r3, r3, #14
 8008238:	f043 030a 	orr.w	r3, r3, #10
 800823c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800823e:	2a00      	cmp	r2, #0
 8008240:	d156      	bne.n	80082f0 <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008242:	4b4e      	ldr	r3, [pc, #312]	; (800837c <HAL_DMA_Start_IT+0x22c>)
 8008244:	429c      	cmp	r4, r3
 8008246:	d027      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008248:	4b4d      	ldr	r3, [pc, #308]	; (8008380 <HAL_DMA_Start_IT+0x230>)
 800824a:	429c      	cmp	r4, r3
 800824c:	d024      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 800824e:	3314      	adds	r3, #20
 8008250:	429c      	cmp	r4, r3
 8008252:	d021      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008254:	3314      	adds	r3, #20
 8008256:	429c      	cmp	r4, r3
 8008258:	d01e      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 800825a:	3314      	adds	r3, #20
 800825c:	429c      	cmp	r4, r3
 800825e:	d01b      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008260:	3314      	adds	r3, #20
 8008262:	429c      	cmp	r4, r3
 8008264:	d018      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008266:	3314      	adds	r3, #20
 8008268:	429c      	cmp	r4, r3
 800826a:	d015      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 800826c:	3314      	adds	r3, #20
 800826e:	429c      	cmp	r4, r3
 8008270:	d012      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 8008272:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008274:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	6023      	str	r3, [r4, #0]
}
 800827c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	f023 031e 	bic.w	r3, r3, #30
 8008284:	f043 0316 	orr.w	r3, r3, #22
 8008288:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800828a:	b11a      	cbz	r2, 8008294 <HAL_DMA_Start_IT+0x144>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	f043 0308 	orr.w	r3, r3, #8
 8008292:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008294:	42ac      	cmp	r4, r5
 8008296:	d130      	bne.n	80082fa <HAL_DMA_Start_IT+0x1aa>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008298:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	03d2      	lsls	r2, r2, #15
 800829e:	d45b      	bmi.n	8008358 <HAL_DMA_Start_IT+0x208>
      if(hdma->DMAmuxRequestGen != 0U)
 80082a0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80082a2:	b11b      	cbz	r3, 80082ac <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082aa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80082ac:	42ac      	cmp	r4, r5
 80082ae:	d0e0      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082b0:	4b31      	ldr	r3, [pc, #196]	; (8008378 <HAL_DMA_Start_IT+0x228>)
 80082b2:	429c      	cmp	r4, r3
 80082b4:	d0dd      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082b6:	3318      	adds	r3, #24
 80082b8:	429c      	cmp	r4, r3
 80082ba:	d0da      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082bc:	3318      	adds	r3, #24
 80082be:	429c      	cmp	r4, r3
 80082c0:	d0d7      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082c2:	3318      	adds	r3, #24
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d0d4      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082c8:	3318      	adds	r3, #24
 80082ca:	429c      	cmp	r4, r3
 80082cc:	d0d1      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082ce:	3318      	adds	r3, #24
 80082d0:	429c      	cmp	r4, r3
 80082d2:	d0ce      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082d4:	3318      	adds	r3, #24
 80082d6:	429c      	cmp	r4, r3
 80082d8:	d0cb      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082de:	429c      	cmp	r4, r3
 80082e0:	d0c7      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082e2:	3318      	adds	r3, #24
 80082e4:	429c      	cmp	r4, r3
 80082e6:	d0c4      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082e8:	3318      	adds	r3, #24
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d0c1      	beq.n	8008272 <HAL_DMA_Start_IT+0x122>
 80082ee:	e7c0      	b.n	8008272 <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	f043 0304 	orr.w	r3, r3, #4
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	e7a3      	b.n	8008242 <HAL_DMA_Start_IT+0xf2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80082fa:	4b1f      	ldr	r3, [pc, #124]	; (8008378 <HAL_DMA_Start_IT+0x228>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	d0cb      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008300:	3318      	adds	r3, #24
 8008302:	429c      	cmp	r4, r3
 8008304:	d0c8      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008306:	3318      	adds	r3, #24
 8008308:	429c      	cmp	r4, r3
 800830a:	d0c5      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 800830c:	3318      	adds	r3, #24
 800830e:	429c      	cmp	r4, r3
 8008310:	d0c2      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008312:	3318      	adds	r3, #24
 8008314:	429c      	cmp	r4, r3
 8008316:	d0bf      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008318:	3318      	adds	r3, #24
 800831a:	429c      	cmp	r4, r3
 800831c:	d0bc      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 800831e:	3318      	adds	r3, #24
 8008320:	429c      	cmp	r4, r3
 8008322:	d0b9      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008324:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008328:	429c      	cmp	r4, r3
 800832a:	d0b5      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 800832c:	3318      	adds	r3, #24
 800832e:	429c      	cmp	r4, r3
 8008330:	d0b2      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008332:	3318      	adds	r3, #24
 8008334:	429c      	cmp	r4, r3
 8008336:	d0af      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008338:	3318      	adds	r3, #24
 800833a:	429c      	cmp	r4, r3
 800833c:	d0ac      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 800833e:	3318      	adds	r3, #24
 8008340:	429c      	cmp	r4, r3
 8008342:	d0a9      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008344:	3318      	adds	r3, #24
 8008346:	429c      	cmp	r4, r3
 8008348:	d0a6      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 800834a:	3318      	adds	r3, #24
 800834c:	429c      	cmp	r4, r3
 800834e:	d0a3      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008350:	3318      	adds	r3, #24
 8008352:	429c      	cmp	r4, r3
 8008354:	d0a0      	beq.n	8008298 <HAL_DMA_Start_IT+0x148>
 8008356:	e774      	b.n	8008242 <HAL_DMA_Start_IT+0xf2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	e79e      	b.n	80082a0 <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008362:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8008366:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800836a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800836c:	2001      	movs	r0, #1
 800836e:	e785      	b.n	800827c <HAL_DMA_Start_IT+0x12c>
  __HAL_LOCK(hdma);
 8008370:	2002      	movs	r0, #2
 8008372:	e783      	b.n	800827c <HAL_DMA_Start_IT+0x12c>
 8008374:	40020010 	.word	0x40020010
 8008378:	40020028 	.word	0x40020028
 800837c:	58025408 	.word	0x58025408
 8008380:	5802541c 	.word	0x5802541c

08008384 <HAL_DMA_Abort>:
{
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8008388:	f7fe fc78 	bl	8006c7c <HAL_GetTick>
 800838c:	4607      	mov	r7, r0
  if(hdma == NULL)
 800838e:	b145      	cbz	r5, 80083a2 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008390:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8008394:	2b02      	cmp	r3, #2
 8008396:	d006      	beq.n	80083a6 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008398:	2380      	movs	r3, #128	; 0x80
 800839a:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800839c:	2300      	movs	r3, #0
 800839e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 80083a2:	2001      	movs	r0, #1
 80083a4:	e153      	b.n	800864e <HAL_DMA_Abort+0x2ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083a6:	682c      	ldr	r4, [r5, #0]
 80083a8:	4ea9      	ldr	r6, [pc, #676]	; (8008650 <HAL_DMA_Abort+0x2cc>)
 80083aa:	42b4      	cmp	r4, r6
 80083ac:	d04a      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083ae:	4ba9      	ldr	r3, [pc, #676]	; (8008654 <HAL_DMA_Abort+0x2d0>)
 80083b0:	429c      	cmp	r4, r3
 80083b2:	d047      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083b4:	3318      	adds	r3, #24
 80083b6:	429c      	cmp	r4, r3
 80083b8:	d044      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083ba:	3318      	adds	r3, #24
 80083bc:	429c      	cmp	r4, r3
 80083be:	d041      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083c0:	3318      	adds	r3, #24
 80083c2:	429c      	cmp	r4, r3
 80083c4:	d03e      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083c6:	3318      	adds	r3, #24
 80083c8:	429c      	cmp	r4, r3
 80083ca:	d03b      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083cc:	3318      	adds	r3, #24
 80083ce:	429c      	cmp	r4, r3
 80083d0:	d038      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083d2:	3318      	adds	r3, #24
 80083d4:	429c      	cmp	r4, r3
 80083d6:	d035      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80083dc:	429c      	cmp	r4, r3
 80083de:	d031      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083e0:	3318      	adds	r3, #24
 80083e2:	429c      	cmp	r4, r3
 80083e4:	d02e      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083e6:	3318      	adds	r3, #24
 80083e8:	429c      	cmp	r4, r3
 80083ea:	d02b      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083ec:	3318      	adds	r3, #24
 80083ee:	429c      	cmp	r4, r3
 80083f0:	d028      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083f2:	3318      	adds	r3, #24
 80083f4:	429c      	cmp	r4, r3
 80083f6:	d025      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083f8:	3318      	adds	r3, #24
 80083fa:	429c      	cmp	r4, r3
 80083fc:	d022      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 80083fe:	3318      	adds	r3, #24
 8008400:	429c      	cmp	r4, r3
 8008402:	d01f      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
 8008404:	3318      	adds	r3, #24
 8008406:	429c      	cmp	r4, r3
 8008408:	d01c      	beq.n	8008444 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	f023 030e 	bic.w	r3, r3, #14
 8008410:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008412:	4b91      	ldr	r3, [pc, #580]	; (8008658 <HAL_DMA_Abort+0x2d4>)
 8008414:	429c      	cmp	r4, r3
 8008416:	d01f      	beq.n	8008458 <HAL_DMA_Abort+0xd4>
 8008418:	3314      	adds	r3, #20
 800841a:	429c      	cmp	r4, r3
 800841c:	d01c      	beq.n	8008458 <HAL_DMA_Abort+0xd4>
 800841e:	3314      	adds	r3, #20
 8008420:	429c      	cmp	r4, r3
 8008422:	d019      	beq.n	8008458 <HAL_DMA_Abort+0xd4>
 8008424:	3314      	adds	r3, #20
 8008426:	429c      	cmp	r4, r3
 8008428:	d016      	beq.n	8008458 <HAL_DMA_Abort+0xd4>
 800842a:	3314      	adds	r3, #20
 800842c:	429c      	cmp	r4, r3
 800842e:	d013      	beq.n	8008458 <HAL_DMA_Abort+0xd4>
 8008430:	3314      	adds	r3, #20
 8008432:	429c      	cmp	r4, r3
 8008434:	d010      	beq.n	8008458 <HAL_DMA_Abort+0xd4>
 8008436:	3314      	adds	r3, #20
 8008438:	429c      	cmp	r4, r3
 800843a:	d00d      	beq.n	8008458 <HAL_DMA_Abort+0xd4>
 800843c:	3314      	adds	r3, #20
 800843e:	429c      	cmp	r4, r3
 8008440:	d112      	bne.n	8008468 <HAL_DMA_Abort+0xe4>
 8008442:	e009      	b.n	8008458 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008444:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008446:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008448:	f023 031e 	bic.w	r3, r3, #30
 800844c:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800844e:	6963      	ldr	r3, [r4, #20]
 8008450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008454:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008456:	d176      	bne.n	8008546 <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008458:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    __HAL_DMA_DISABLE(hdma);
 800845a:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800845c:	6813      	ldr	r3, [r2, #0]
 800845e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008462:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008464:	f040 80ab 	bne.w	80085be <HAL_DMA_Abort+0x23a>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	f023 0301 	bic.w	r3, r3, #1
 800846e:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	07db      	lsls	r3, r3, #31
 8008474:	f100 80cd 	bmi.w	8008612 <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008478:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800847a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800847c:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800847e:	6da8      	ldr	r0, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008480:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008484:	f000 80d1 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 8008488:	4972      	ldr	r1, [pc, #456]	; (8008654 <HAL_DMA_Abort+0x2d0>)
 800848a:	428b      	cmp	r3, r1
 800848c:	f000 80cd 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 8008490:	3118      	adds	r1, #24
 8008492:	428b      	cmp	r3, r1
 8008494:	f000 80c9 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 8008498:	3118      	adds	r1, #24
 800849a:	428b      	cmp	r3, r1
 800849c:	f000 80c5 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084a0:	3118      	adds	r1, #24
 80084a2:	428b      	cmp	r3, r1
 80084a4:	f000 80c1 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084a8:	3118      	adds	r1, #24
 80084aa:	428b      	cmp	r3, r1
 80084ac:	f000 80bd 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084b0:	3118      	adds	r1, #24
 80084b2:	428b      	cmp	r3, r1
 80084b4:	f000 80b9 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084b8:	3118      	adds	r1, #24
 80084ba:	428b      	cmp	r3, r1
 80084bc:	f000 80b5 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084c0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80084c4:	428b      	cmp	r3, r1
 80084c6:	f000 80b0 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084ca:	3118      	adds	r1, #24
 80084cc:	428b      	cmp	r3, r1
 80084ce:	f000 80ac 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084d2:	3118      	adds	r1, #24
 80084d4:	428b      	cmp	r3, r1
 80084d6:	f000 80a8 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084da:	3118      	adds	r1, #24
 80084dc:	428b      	cmp	r3, r1
 80084de:	f000 80a4 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084e2:	3118      	adds	r1, #24
 80084e4:	428b      	cmp	r3, r1
 80084e6:	f000 80a0 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084ea:	3118      	adds	r1, #24
 80084ec:	428b      	cmp	r3, r1
 80084ee:	f000 809c 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084f2:	3118      	adds	r1, #24
 80084f4:	428b      	cmp	r3, r1
 80084f6:	f000 8098 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
 80084fa:	3118      	adds	r1, #24
 80084fc:	428b      	cmp	r3, r1
 80084fe:	f000 8094 	beq.w	800862a <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008502:	2101      	movs	r1, #1
 8008504:	fa01 f202 	lsl.w	r2, r1, r2
 8008508:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800850a:	4a53      	ldr	r2, [pc, #332]	; (8008658 <HAL_DMA_Abort+0x2d4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	f000 8092 	beq.w	8008636 <HAL_DMA_Abort+0x2b2>
 8008512:	3214      	adds	r2, #20
 8008514:	4293      	cmp	r3, r2
 8008516:	f000 808e 	beq.w	8008636 <HAL_DMA_Abort+0x2b2>
 800851a:	3214      	adds	r2, #20
 800851c:	4293      	cmp	r3, r2
 800851e:	f000 808a 	beq.w	8008636 <HAL_DMA_Abort+0x2b2>
 8008522:	3214      	adds	r2, #20
 8008524:	4293      	cmp	r3, r2
 8008526:	f000 8086 	beq.w	8008636 <HAL_DMA_Abort+0x2b2>
 800852a:	3214      	adds	r2, #20
 800852c:	4293      	cmp	r3, r2
 800852e:	f000 8082 	beq.w	8008636 <HAL_DMA_Abort+0x2b2>
 8008532:	3214      	adds	r2, #20
 8008534:	4293      	cmp	r3, r2
 8008536:	d07e      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 8008538:	3214      	adds	r2, #20
 800853a:	4293      	cmp	r3, r2
 800853c:	d07b      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 800853e:	3214      	adds	r2, #20
 8008540:	4293      	cmp	r3, r2
 8008542:	d17e      	bne.n	8008642 <HAL_DMA_Abort+0x2be>
 8008544:	e077      	b.n	8008636 <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008546:	4b43      	ldr	r3, [pc, #268]	; (8008654 <HAL_DMA_Abort+0x2d0>)
 8008548:	429c      	cmp	r4, r3
 800854a:	d085      	beq.n	8008458 <HAL_DMA_Abort+0xd4>
 800854c:	3318      	adds	r3, #24
 800854e:	429c      	cmp	r4, r3
 8008550:	d082      	beq.n	8008458 <HAL_DMA_Abort+0xd4>
 8008552:	3318      	adds	r3, #24
 8008554:	429c      	cmp	r4, r3
 8008556:	f43f af7f 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 800855a:	3318      	adds	r3, #24
 800855c:	429c      	cmp	r4, r3
 800855e:	f43f af7b 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 8008562:	3318      	adds	r3, #24
 8008564:	429c      	cmp	r4, r3
 8008566:	f43f af77 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 800856a:	3318      	adds	r3, #24
 800856c:	429c      	cmp	r4, r3
 800856e:	f43f af73 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 8008572:	3318      	adds	r3, #24
 8008574:	429c      	cmp	r4, r3
 8008576:	f43f af6f 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 800857a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800857e:	429c      	cmp	r4, r3
 8008580:	f43f af6a 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 8008584:	3318      	adds	r3, #24
 8008586:	429c      	cmp	r4, r3
 8008588:	f43f af66 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 800858c:	3318      	adds	r3, #24
 800858e:	429c      	cmp	r4, r3
 8008590:	f43f af62 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 8008594:	3318      	adds	r3, #24
 8008596:	429c      	cmp	r4, r3
 8008598:	f43f af5e 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 800859c:	3318      	adds	r3, #24
 800859e:	429c      	cmp	r4, r3
 80085a0:	f43f af5a 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 80085a4:	3318      	adds	r3, #24
 80085a6:	429c      	cmp	r4, r3
 80085a8:	f43f af56 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 80085ac:	3318      	adds	r3, #24
 80085ae:	429c      	cmp	r4, r3
 80085b0:	f43f af52 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 80085b4:	3318      	adds	r3, #24
 80085b6:	429c      	cmp	r4, r3
 80085b8:	f43f af4e 	beq.w	8008458 <HAL_DMA_Abort+0xd4>
 80085bc:	e729      	b.n	8008412 <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 80085be:	4b25      	ldr	r3, [pc, #148]	; (8008654 <HAL_DMA_Abort+0x2d0>)
 80085c0:	429c      	cmp	r4, r3
 80085c2:	f43f af51 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 80085c6:	3318      	adds	r3, #24
 80085c8:	429c      	cmp	r4, r3
 80085ca:	f43f af4d 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 80085ce:	3318      	adds	r3, #24
 80085d0:	429c      	cmp	r4, r3
 80085d2:	f43f af49 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 80085d6:	3318      	adds	r3, #24
 80085d8:	429c      	cmp	r4, r3
 80085da:	f43f af45 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 80085de:	3318      	adds	r3, #24
 80085e0:	429c      	cmp	r4, r3
 80085e2:	f43f af41 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 80085e6:	3318      	adds	r3, #24
 80085e8:	429c      	cmp	r4, r3
 80085ea:	f43f af3d 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 80085ee:	3318      	adds	r3, #24
 80085f0:	429c      	cmp	r4, r3
 80085f2:	f43f af39 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 80085f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80085fa:	429c      	cmp	r4, r3
 80085fc:	f43f af34 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 8008600:	3318      	adds	r3, #24
 8008602:	429c      	cmp	r4, r3
 8008604:	f43f af30 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 8008608:	3318      	adds	r3, #24
 800860a:	429c      	cmp	r4, r3
 800860c:	f43f af2c 	beq.w	8008468 <HAL_DMA_Abort+0xe4>
 8008610:	e72a      	b.n	8008468 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008612:	f7fe fb33 	bl	8006c7c <HAL_GetTick>
 8008616:	1bc0      	subs	r0, r0, r7
 8008618:	2805      	cmp	r0, #5
 800861a:	f67f af29 	bls.w	8008470 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800861e:	2320      	movs	r3, #32
 8008620:	656b      	str	r3, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8008622:	2303      	movs	r3, #3
 8008624:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8008628:	e6b8      	b.n	800839c <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800862a:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800862c:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800862e:	fa01 f202 	lsl.w	r2, r1, r2
 8008632:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008634:	d112      	bne.n	800865c <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008636:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 800863a:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800863c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d13b      	bne.n	80086ba <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 8008642:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8008644:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8008646:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800864a:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 800864e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008650:	40020010 	.word	0x40020010
 8008654:	40020028 	.word	0x40020028
 8008658:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800865c:	4a1b      	ldr	r2, [pc, #108]	; (80086cc <HAL_DMA_Abort+0x348>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d0e9      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 8008662:	3218      	adds	r2, #24
 8008664:	4293      	cmp	r3, r2
 8008666:	d0e6      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 8008668:	3218      	adds	r2, #24
 800866a:	4293      	cmp	r3, r2
 800866c:	d0e3      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 800866e:	3218      	adds	r2, #24
 8008670:	4293      	cmp	r3, r2
 8008672:	d0e0      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 8008674:	3218      	adds	r2, #24
 8008676:	4293      	cmp	r3, r2
 8008678:	d0dd      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 800867a:	3218      	adds	r2, #24
 800867c:	4293      	cmp	r3, r2
 800867e:	d0da      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 8008680:	3218      	adds	r2, #24
 8008682:	4293      	cmp	r3, r2
 8008684:	d0d7      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 8008686:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800868a:	4293      	cmp	r3, r2
 800868c:	d0d3      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 800868e:	3218      	adds	r2, #24
 8008690:	4293      	cmp	r3, r2
 8008692:	d0d0      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 8008694:	3218      	adds	r2, #24
 8008696:	4293      	cmp	r3, r2
 8008698:	d0cd      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 800869a:	3218      	adds	r2, #24
 800869c:	4293      	cmp	r3, r2
 800869e:	d0ca      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 80086a0:	3218      	adds	r2, #24
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d0c7      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 80086a6:	3218      	adds	r2, #24
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d0c4      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 80086ac:	3218      	adds	r2, #24
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d0c1      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 80086b2:	3218      	adds	r2, #24
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d0be      	beq.n	8008636 <HAL_DMA_Abort+0x2b2>
 80086b8:	e727      	b.n	800850a <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086c0:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086c2:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 80086c6:	605a      	str	r2, [r3, #4]
 80086c8:	e7bb      	b.n	8008642 <HAL_DMA_Abort+0x2be>
 80086ca:	bf00      	nop
 80086cc:	40020028 	.word	0x40020028

080086d0 <HAL_DMA_Abort_IT>:
{
 80086d0:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80086d2:	b128      	cbz	r0, 80086e0 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086d4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d003      	beq.n	80086e4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086dc:	2380      	movs	r3, #128	; 0x80
 80086de:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80086e0:	2001      	movs	r0, #1
 80086e2:	e05d      	b.n	80087a0 <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086e4:	6803      	ldr	r3, [r0, #0]
 80086e6:	4a3f      	ldr	r2, [pc, #252]	; (80087e4 <HAL_DMA_Abort_IT+0x114>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d051      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 80086ec:	3218      	adds	r2, #24
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d04e      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 80086f2:	3218      	adds	r2, #24
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d04b      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 80086f8:	3218      	adds	r2, #24
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d048      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 80086fe:	3218      	adds	r2, #24
 8008700:	4293      	cmp	r3, r2
 8008702:	d045      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 8008704:	3218      	adds	r2, #24
 8008706:	4293      	cmp	r3, r2
 8008708:	d042      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 800870a:	3218      	adds	r2, #24
 800870c:	4293      	cmp	r3, r2
 800870e:	d03f      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 8008710:	3218      	adds	r2, #24
 8008712:	4293      	cmp	r3, r2
 8008714:	d03c      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 8008716:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800871a:	4293      	cmp	r3, r2
 800871c:	d038      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 800871e:	3218      	adds	r2, #24
 8008720:	4293      	cmp	r3, r2
 8008722:	d035      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 8008724:	3218      	adds	r2, #24
 8008726:	4293      	cmp	r3, r2
 8008728:	d032      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 800872a:	3218      	adds	r2, #24
 800872c:	4293      	cmp	r3, r2
 800872e:	d02f      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 8008730:	3218      	adds	r2, #24
 8008732:	4293      	cmp	r3, r2
 8008734:	d02c      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 8008736:	3218      	adds	r2, #24
 8008738:	4293      	cmp	r3, r2
 800873a:	d029      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 800873c:	3218      	adds	r2, #24
 800873e:	4293      	cmp	r3, r2
 8008740:	d026      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
 8008742:	3218      	adds	r2, #24
 8008744:	4293      	cmp	r3, r2
 8008746:	d023      	beq.n	8008790 <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	f022 020e 	bic.w	r2, r2, #14
 800874e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	f022 0201 	bic.w	r2, r2, #1
 8008756:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008758:	4a23      	ldr	r2, [pc, #140]	; (80087e8 <HAL_DMA_Abort_IT+0x118>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d121      	bne.n	80087a2 <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800875e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8008760:	6813      	ldr	r3, [r2, #0]
 8008762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008766:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008768:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 800876c:	f003 021f 	and.w	r2, r3, #31
 8008770:	2301      	movs	r3, #1
 8008772:	4093      	lsls	r3, r2
 8008774:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008776:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 800877a:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800877c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800877e:	b32b      	cbz	r3, 80087cc <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008786:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008788:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	e01d      	b.n	80087cc <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8008790:	2204      	movs	r2, #4
 8008792:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800879e:	2000      	movs	r0, #0
}
 80087a0:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087a2:	4a12      	ldr	r2, [pc, #72]	; (80087ec <HAL_DMA_Abort_IT+0x11c>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d0da      	beq.n	800875e <HAL_DMA_Abort_IT+0x8e>
 80087a8:	3214      	adds	r2, #20
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d0d7      	beq.n	800875e <HAL_DMA_Abort_IT+0x8e>
 80087ae:	3214      	adds	r2, #20
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d0d4      	beq.n	800875e <HAL_DMA_Abort_IT+0x8e>
 80087b4:	3214      	adds	r2, #20
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d0d1      	beq.n	800875e <HAL_DMA_Abort_IT+0x8e>
 80087ba:	3214      	adds	r2, #20
 80087bc:	4293      	cmp	r3, r2
 80087be:	d0ce      	beq.n	800875e <HAL_DMA_Abort_IT+0x8e>
 80087c0:	3214      	adds	r2, #20
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d0cb      	beq.n	800875e <HAL_DMA_Abort_IT+0x8e>
 80087c6:	3214      	adds	r2, #20
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d0c8      	beq.n	800875e <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 80087cc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80087ce:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80087d0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80087d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80087d6:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80087da:	b10b      	cbz	r3, 80087e0 <HAL_DMA_Abort_IT+0x110>
        hdma->XferAbortCallback(hdma);
 80087dc:	4798      	blx	r3
 80087de:	e7de      	b.n	800879e <HAL_DMA_Abort_IT+0xce>
  return HAL_OK;
 80087e0:	4618      	mov	r0, r3
 80087e2:	e7dd      	b.n	80087a0 <HAL_DMA_Abort_IT+0xd0>
 80087e4:	40020010 	.word	0x40020010
 80087e8:	58025408 	.word	0x58025408
 80087ec:	5802541c 	.word	0x5802541c

080087f0 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 80087f0:	2300      	movs	r3, #0
{
 80087f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 80087f6:	9301      	str	r3, [sp, #4]
{
 80087f8:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80087fa:	4b84      	ldr	r3, [pc, #528]	; (8008a0c <HAL_DMA_IRQHandler+0x21c>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80087fc:	4f84      	ldr	r7, [pc, #528]	; (8008a10 <HAL_DMA_IRQHandler+0x220>)
  uint32_t timeout = SystemCoreClock / 9600U;
 80087fe:	681e      	ldr	r6, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008800:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008802:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008804:	42bb      	cmp	r3, r7
  tmpisr_dma  = regs_dma->ISR;
 8008806:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 800880a:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800880e:	d047      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008810:	4a80      	ldr	r2, [pc, #512]	; (8008a14 <HAL_DMA_IRQHandler+0x224>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d044      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008816:	3218      	adds	r2, #24
 8008818:	4293      	cmp	r3, r2
 800881a:	d041      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 800881c:	3218      	adds	r2, #24
 800881e:	4293      	cmp	r3, r2
 8008820:	d03e      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008822:	3218      	adds	r2, #24
 8008824:	4293      	cmp	r3, r2
 8008826:	d03b      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008828:	3218      	adds	r2, #24
 800882a:	4293      	cmp	r3, r2
 800882c:	d038      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 800882e:	3218      	adds	r2, #24
 8008830:	4293      	cmp	r3, r2
 8008832:	d035      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008834:	3218      	adds	r2, #24
 8008836:	4293      	cmp	r3, r2
 8008838:	d032      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 800883a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800883e:	4293      	cmp	r3, r2
 8008840:	d02e      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008842:	3218      	adds	r2, #24
 8008844:	4293      	cmp	r3, r2
 8008846:	d02b      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008848:	3218      	adds	r2, #24
 800884a:	4293      	cmp	r3, r2
 800884c:	d028      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 800884e:	3218      	adds	r2, #24
 8008850:	4293      	cmp	r3, r2
 8008852:	d025      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008854:	3218      	adds	r2, #24
 8008856:	4293      	cmp	r3, r2
 8008858:	d022      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 800885a:	3218      	adds	r2, #24
 800885c:	4293      	cmp	r3, r2
 800885e:	d01f      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008860:	3218      	adds	r2, #24
 8008862:	4293      	cmp	r3, r2
 8008864:	d01c      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
 8008866:	3218      	adds	r2, #24
 8008868:	4293      	cmp	r3, r2
 800886a:	d019      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800886c:	4a6a      	ldr	r2, [pc, #424]	; (8008a18 <HAL_DMA_IRQHandler+0x228>)
 800886e:	4293      	cmp	r3, r2
 8008870:	f040 8134 	bne.w	8008adc <HAL_DMA_IRQHandler+0x2ec>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008874:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008876:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008878:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800887a:	f001 011f 	and.w	r1, r1, #31
 800887e:	4088      	lsls	r0, r1
 8008880:	ea10 0f0c 	tst.w	r0, ip
 8008884:	f000 8151 	beq.w	8008b2a <HAL_DMA_IRQHandler+0x33a>
 8008888:	0756      	lsls	r6, r2, #29
 800888a:	f140 814e 	bpl.w	8008b2a <HAL_DMA_IRQHandler+0x33a>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800888e:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008890:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008892:	f140 8142 	bpl.w	8008b1a <HAL_DMA_IRQHandler+0x32a>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008896:	03d3      	lsls	r3, r2, #15
 8008898:	f100 8145 	bmi.w	8008b26 <HAL_DMA_IRQHandler+0x336>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800889c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800889e:	e0a0      	b.n	80089e2 <HAL_DMA_IRQHandler+0x1f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80088a2:	2108      	movs	r1, #8
 80088a4:	f002 021f 	and.w	r2, r2, #31
 80088a8:	4091      	lsls	r1, r2
 80088aa:	ea11 0f08 	tst.w	r1, r8
 80088ae:	d00b      	beq.n	80088c8 <HAL_DMA_IRQHandler+0xd8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	0740      	lsls	r0, r0, #29
 80088b4:	d508      	bpl.n	80088c8 <HAL_DMA_IRQHandler+0xd8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80088b6:	6818      	ldr	r0, [r3, #0]
 80088b8:	f020 0004 	bic.w	r0, r0, #4
 80088bc:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088be:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80088c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80088c2:	f041 0101 	orr.w	r1, r1, #1
 80088c6:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088c8:	fa28 f102 	lsr.w	r1, r8, r2
 80088cc:	07c8      	lsls	r0, r1, #31
 80088ce:	d509      	bpl.n	80088e4 <HAL_DMA_IRQHandler+0xf4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80088d0:	6959      	ldr	r1, [r3, #20]
 80088d2:	0609      	lsls	r1, r1, #24
 80088d4:	d506      	bpl.n	80088e4 <HAL_DMA_IRQHandler+0xf4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088d6:	2101      	movs	r1, #1
 80088d8:	4091      	lsls	r1, r2
 80088da:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80088dc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80088de:	f041 0102 	orr.w	r1, r1, #2
 80088e2:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088e4:	2104      	movs	r1, #4
 80088e6:	4091      	lsls	r1, r2
 80088e8:	ea11 0f08 	tst.w	r1, r8
 80088ec:	d007      	beq.n	80088fe <HAL_DMA_IRQHandler+0x10e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	0780      	lsls	r0, r0, #30
 80088f2:	d504      	bpl.n	80088fe <HAL_DMA_IRQHandler+0x10e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088f4:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088f6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80088f8:	f041 0104 	orr.w	r1, r1, #4
 80088fc:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088fe:	2110      	movs	r1, #16
 8008900:	fa01 f202 	lsl.w	r2, r1, r2
 8008904:	ea12 0f08 	tst.w	r2, r8
 8008908:	d00f      	beq.n	800892a <HAL_DMA_IRQHandler+0x13a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800890a:	6819      	ldr	r1, [r3, #0]
 800890c:	0709      	lsls	r1, r1, #28
 800890e:	d50c      	bpl.n	800892a <HAL_DMA_IRQHandler+0x13a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008910:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	0350      	lsls	r0, r2, #13
 8008916:	d56c      	bpl.n	80089f2 <HAL_DMA_IRQHandler+0x202>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	0319      	lsls	r1, r3, #12
 800891c:	d401      	bmi.n	8008922 <HAL_DMA_IRQHandler+0x132>
          if(hdma->XferHalfCpltCallback != NULL)
 800891e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008920:	e000      	b.n	8008924 <HAL_DMA_IRQHandler+0x134>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008922:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8008924:	b10b      	cbz	r3, 800892a <HAL_DMA_IRQHandler+0x13a>
            hdma->XferHalfCpltCallback(hdma);
 8008926:	4620      	mov	r0, r4
 8008928:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800892a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800892c:	2120      	movs	r1, #32
 800892e:	f002 021f 	and.w	r2, r2, #31
 8008932:	4091      	lsls	r1, r2
 8008934:	ea11 0f08 	tst.w	r1, r8
 8008938:	d07a      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x240>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	42bb      	cmp	r3, r7
 800893e:	d02d      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008940:	4834      	ldr	r0, [pc, #208]	; (8008a14 <HAL_DMA_IRQHandler+0x224>)
 8008942:	4283      	cmp	r3, r0
 8008944:	d02a      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008946:	3018      	adds	r0, #24
 8008948:	4283      	cmp	r3, r0
 800894a:	d027      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 800894c:	3018      	adds	r0, #24
 800894e:	4283      	cmp	r3, r0
 8008950:	d024      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008952:	3018      	adds	r0, #24
 8008954:	4283      	cmp	r3, r0
 8008956:	d021      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008958:	3018      	adds	r0, #24
 800895a:	4283      	cmp	r3, r0
 800895c:	d01e      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 800895e:	3018      	adds	r0, #24
 8008960:	4283      	cmp	r3, r0
 8008962:	d01b      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008964:	3018      	adds	r0, #24
 8008966:	4283      	cmp	r3, r0
 8008968:	d018      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 800896a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800896e:	4283      	cmp	r3, r0
 8008970:	d014      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008972:	3018      	adds	r0, #24
 8008974:	4283      	cmp	r3, r0
 8008976:	d011      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008978:	3018      	adds	r0, #24
 800897a:	4283      	cmp	r3, r0
 800897c:	d00e      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 800897e:	3018      	adds	r0, #24
 8008980:	4283      	cmp	r3, r0
 8008982:	d00b      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008984:	3018      	adds	r0, #24
 8008986:	4283      	cmp	r3, r0
 8008988:	d008      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 800898a:	3018      	adds	r0, #24
 800898c:	4283      	cmp	r3, r0
 800898e:	d005      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008990:	3018      	adds	r0, #24
 8008992:	4283      	cmp	r3, r0
 8008994:	d002      	beq.n	800899c <HAL_DMA_IRQHandler+0x1ac>
 8008996:	3018      	adds	r0, #24
 8008998:	4283      	cmp	r3, r0
 800899a:	d132      	bne.n	8008a02 <HAL_DMA_IRQHandler+0x212>
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	f010 0f10 	tst.w	r0, #16
 80089a2:	d045      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x240>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089a4:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80089a6:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 80089aa:	2904      	cmp	r1, #4
 80089ac:	d136      	bne.n	8008a1c <HAL_DMA_IRQHandler+0x22c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80089ae:	6819      	ldr	r1, [r3, #0]
 80089b0:	f021 0116 	bic.w	r1, r1, #22
 80089b4:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80089b6:	6959      	ldr	r1, [r3, #20]
 80089b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089bc:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80089c0:	b909      	cbnz	r1, 80089c6 <HAL_DMA_IRQHandler+0x1d6>
 80089c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80089c4:	b119      	cbz	r1, 80089ce <HAL_DMA_IRQHandler+0x1de>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80089c6:	6819      	ldr	r1, [r3, #0]
 80089c8:	f021 0108 	bic.w	r1, r1, #8
 80089cc:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80089ce:	233f      	movs	r3, #63	; 0x3f
 80089d0:	4093      	lsls	r3, r2
 80089d2:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80089da:	2300      	movs	r3, #0
 80089dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80089e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 8096 	beq.w	8008b14 <HAL_DMA_IRQHandler+0x324>
        hdma->XferErrorCallback(hdma);
 80089e8:	4620      	mov	r0, r4
}
 80089ea:	b002      	add	sp, #8
 80089ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80089f0:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	05d2      	lsls	r2, r2, #23
 80089f6:	d492      	bmi.n	800891e <HAL_DMA_IRQHandler+0x12e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	f022 0208 	bic.w	r2, r2, #8
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	e78d      	b.n	800891e <HAL_DMA_IRQHandler+0x12e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	f010 0f02 	tst.w	r0, #2
 8008a08:	e7cb      	b.n	80089a2 <HAL_DMA_IRQHandler+0x1b2>
 8008a0a:	bf00      	nop
 8008a0c:	24000060 	.word	0x24000060
 8008a10:	40020010 	.word	0x40020010
 8008a14:	40020028 	.word	0x40020028
 8008a18:	58025408 	.word	0x58025408
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	0355      	lsls	r5, r2, #13
 8008a20:	d54d      	bpl.n	8008abe <HAL_DMA_IRQHandler+0x2ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	0318      	lsls	r0, r3, #12
 8008a26:	d457      	bmi.n	8008ad8 <HAL_DMA_IRQHandler+0x2e8>
            if(hdma->XferM1CpltCallback != NULL)
 8008a28:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 8008a2a:	b10b      	cbz	r3, 8008a30 <HAL_DMA_IRQHandler+0x240>
            hdma->XferCpltCallback(hdma);
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d06e      	beq.n	8008b14 <HAL_DMA_IRQHandler+0x324>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008a36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a38:	07d9      	lsls	r1, r3, #31
 8008a3a:	d53e      	bpl.n	8008aba <HAL_DMA_IRQHandler+0x2ca>
        hdma->State = HAL_DMA_STATE_ABORT;
 8008a3c:	2304      	movs	r3, #4
 8008a3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	42bb      	cmp	r3, r7
 8008a46:	d01e      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a48:	4a4e      	ldr	r2, [pc, #312]	; (8008b84 <HAL_DMA_IRQHandler+0x394>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d01b      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a4e:	3218      	adds	r2, #24
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d018      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a54:	3218      	adds	r2, #24
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d015      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a5a:	3218      	adds	r2, #24
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d012      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a60:	3218      	adds	r2, #24
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d00f      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a66:	3218      	adds	r2, #24
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00c      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a6c:	3218      	adds	r2, #24
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d009      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a72:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d005      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a7a:	3218      	adds	r2, #24
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d002      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a80:	3218      	adds	r2, #24
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d0ff      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x296>
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008a8e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008a92:	fbb6 f6f2 	udiv	r6, r6, r2
          if (++count > timeout)
 8008a96:	9a01      	ldr	r2, [sp, #4]
 8008a98:	3201      	adds	r2, #1
 8008a9a:	42b2      	cmp	r2, r6
 8008a9c:	9201      	str	r2, [sp, #4]
 8008a9e:	d802      	bhi.n	8008aa6 <HAL_DMA_IRQHandler+0x2b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	07d2      	lsls	r2, r2, #31
 8008aa4:	d4f7      	bmi.n	8008a96 <HAL_DMA_IRQHandler+0x2a6>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8008aaa:	bf4c      	ite	mi
 8008aac:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8008aae:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8008ab0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8008aba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008abc:	e791      	b.n	80089e2 <HAL_DMA_IRQHandler+0x1f2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8008ac4:	d108      	bne.n	8008ad8 <HAL_DMA_IRQHandler+0x2e8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ac6:	6819      	ldr	r1, [r3, #0]
 8008ac8:	f021 0110 	bic.w	r1, r1, #16
 8008acc:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8008ace:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8008ad0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8008ad4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8008ad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ada:	e7a6      	b.n	8008a2a <HAL_DMA_IRQHandler+0x23a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008adc:	4a2a      	ldr	r2, [pc, #168]	; (8008b88 <HAL_DMA_IRQHandler+0x398>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	f43f aec8 	beq.w	8008874 <HAL_DMA_IRQHandler+0x84>
 8008ae4:	3214      	adds	r2, #20
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	f43f aec4 	beq.w	8008874 <HAL_DMA_IRQHandler+0x84>
 8008aec:	3214      	adds	r2, #20
 8008aee:	4293      	cmp	r3, r2
 8008af0:	f43f aec0 	beq.w	8008874 <HAL_DMA_IRQHandler+0x84>
 8008af4:	3214      	adds	r2, #20
 8008af6:	4293      	cmp	r3, r2
 8008af8:	f43f aebc 	beq.w	8008874 <HAL_DMA_IRQHandler+0x84>
 8008afc:	3214      	adds	r2, #20
 8008afe:	4293      	cmp	r3, r2
 8008b00:	f43f aeb8 	beq.w	8008874 <HAL_DMA_IRQHandler+0x84>
 8008b04:	3214      	adds	r2, #20
 8008b06:	4293      	cmp	r3, r2
 8008b08:	f43f aeb4 	beq.w	8008874 <HAL_DMA_IRQHandler+0x84>
 8008b0c:	3214      	adds	r2, #20
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	f43f aeb0 	beq.w	8008874 <HAL_DMA_IRQHandler+0x84>
}
 8008b14:	b002      	add	sp, #8
 8008b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008b1a:	0697      	lsls	r7, r2, #26
 8008b1c:	d403      	bmi.n	8008b26 <HAL_DMA_IRQHandler+0x336>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	f022 0204 	bic.w	r2, r2, #4
 8008b24:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8008b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b28:	e75b      	b.n	80089e2 <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008b2a:	2002      	movs	r0, #2
 8008b2c:	4088      	lsls	r0, r1
 8008b2e:	ea10 0f0c 	tst.w	r0, ip
 8008b32:	d016      	beq.n	8008b62 <HAL_DMA_IRQHandler+0x372>
 8008b34:	0796      	lsls	r6, r2, #30
 8008b36:	d514      	bpl.n	8008b62 <HAL_DMA_IRQHandler+0x372>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008b38:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b3a:	0410      	lsls	r0, r2, #16
 8008b3c:	d503      	bpl.n	8008b46 <HAL_DMA_IRQHandler+0x356>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008b3e:	03d1      	lsls	r1, r2, #15
 8008b40:	d40d      	bmi.n	8008b5e <HAL_DMA_IRQHandler+0x36e>
          if(hdma->XferM1CpltCallback != NULL)
 8008b42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008b44:	e74d      	b.n	80089e2 <HAL_DMA_IRQHandler+0x1f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008b46:	f012 0220 	ands.w	r2, r2, #32
 8008b4a:	d108      	bne.n	8008b5e <HAL_DMA_IRQHandler+0x36e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	f021 010a 	bic.w	r1, r1, #10
 8008b52:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008b54:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8008b56:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8008b5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8008b5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b60:	e73f      	b.n	80089e2 <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008b62:	2008      	movs	r0, #8
 8008b64:	4088      	lsls	r0, r1
 8008b66:	ea10 0f0c 	tst.w	r0, ip
 8008b6a:	d0d3      	beq.n	8008b14 <HAL_DMA_IRQHandler+0x324>
 8008b6c:	0712      	lsls	r2, r2, #28
 8008b6e:	d5d1      	bpl.n	8008b14 <HAL_DMA_IRQHandler+0x324>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	f022 020e 	bic.w	r2, r2, #14
 8008b76:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b78:	2301      	movs	r3, #1
 8008b7a:	fa03 f101 	lsl.w	r1, r3, r1
 8008b7e:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008b80:	6563      	str	r3, [r4, #84]	; 0x54
 8008b82:	e795      	b.n	8008ab0 <HAL_DMA_IRQHandler+0x2c0>
 8008b84:	40020028 	.word	0x40020028
 8008b88:	5802541c 	.word	0x5802541c

08008b8c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8008b8c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8008b8e:	4770      	bx	lr

08008b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008b94:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b96:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8008d60 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b9a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b9e:	680a      	ldr	r2, [r1, #0]
 8008ba0:	fa32 f503 	lsrs.w	r5, r2, r3
 8008ba4:	d102      	bne.n	8008bac <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8008ba6:	b003      	add	sp, #12
 8008ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bac:	f04f 0e01 	mov.w	lr, #1
 8008bb0:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8008bb4:	ea1e 0202 	ands.w	r2, lr, r2
 8008bb8:	f000 80bc 	beq.w	8008d34 <HAL_GPIO_Init+0x1a4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bbc:	684e      	ldr	r6, [r1, #4]
 8008bbe:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bc2:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bc6:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bca:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bce:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bd0:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bd4:	2f01      	cmp	r7, #1
 8008bd6:	d834      	bhi.n	8008c42 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8008bd8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bda:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bde:	68cf      	ldr	r7, [r1, #12]
 8008be0:	fa07 f708 	lsl.w	r7, r7, r8
 8008be4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8008be8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008bea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bf0:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8008bf4:	409f      	lsls	r7, r3
 8008bf6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8008bfa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8008bfc:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bfe:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c00:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c04:	688f      	ldr	r7, [r1, #8]
 8008c06:	fa07 f708 	lsl.w	r7, r7, r8
 8008c0a:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8008c0e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c10:	d119      	bne.n	8008c46 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8008c12:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c16:	f003 0b07 	and.w	fp, r3, #7
 8008c1a:	f04f 0e0f 	mov.w	lr, #15
 8008c1e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8008c22:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8008c26:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c2a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8008c2e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c32:	690f      	ldr	r7, [r1, #16]
 8008c34:	fa07 f70b 	lsl.w	r7, r7, fp
 8008c38:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8008c3c:	f8ca 7020 	str.w	r7, [sl, #32]
 8008c40:	e001      	b.n	8008c46 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c42:	2d03      	cmp	r5, #3
 8008c44:	d1da      	bne.n	8008bfc <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8008c46:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c48:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c4c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c50:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c54:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8008c58:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c5a:	d06b      	beq.n	8008d34 <HAL_GPIO_Init+0x1a4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c5c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8008c60:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c64:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c68:	f045 0502 	orr.w	r5, r5, #2
 8008c6c:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c70:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c74:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8008c78:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8008c7c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8008c80:	f005 0502 	and.w	r5, r5, #2
 8008c84:	9501      	str	r5, [sp, #4]
 8008c86:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c88:	250f      	movs	r5, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8008c8a:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c8e:	fa05 f50c 	lsl.w	r5, r5, ip
 8008c92:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c96:	4d31      	ldr	r5, [pc, #196]	; (8008d5c <HAL_GPIO_Init+0x1cc>)
 8008c98:	42a8      	cmp	r0, r5
 8008c9a:	d04d      	beq.n	8008d38 <HAL_GPIO_Init+0x1a8>
 8008c9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ca0:	42a8      	cmp	r0, r5
 8008ca2:	d04b      	beq.n	8008d3c <HAL_GPIO_Init+0x1ac>
 8008ca4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ca8:	42a8      	cmp	r0, r5
 8008caa:	d049      	beq.n	8008d40 <HAL_GPIO_Init+0x1b0>
 8008cac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008cb0:	42a8      	cmp	r0, r5
 8008cb2:	d047      	beq.n	8008d44 <HAL_GPIO_Init+0x1b4>
 8008cb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008cb8:	42a8      	cmp	r0, r5
 8008cba:	d045      	beq.n	8008d48 <HAL_GPIO_Init+0x1b8>
 8008cbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008cc0:	42a8      	cmp	r0, r5
 8008cc2:	d043      	beq.n	8008d4c <HAL_GPIO_Init+0x1bc>
 8008cc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008cc8:	42a8      	cmp	r0, r5
 8008cca:	d041      	beq.n	8008d50 <HAL_GPIO_Init+0x1c0>
 8008ccc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008cd0:	42a8      	cmp	r0, r5
 8008cd2:	d03f      	beq.n	8008d54 <HAL_GPIO_Init+0x1c4>
 8008cd4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008cd8:	42a8      	cmp	r0, r5
 8008cda:	d03d      	beq.n	8008d58 <HAL_GPIO_Init+0x1c8>
 8008cdc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ce0:	42a8      	cmp	r0, r5
 8008ce2:	bf0c      	ite	eq
 8008ce4:	2509      	moveq	r5, #9
 8008ce6:	250a      	movne	r5, #10
 8008ce8:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cec:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008cf0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cf4:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8008cf6:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8008cfa:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8008cfc:	bf0c      	ite	eq
 8008cfe:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8008d00:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d02:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8008d06:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8008d08:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8008d0a:	bf0c      	ite	eq
 8008d0c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8008d0e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d10:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8008d14:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8008d16:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8008d1a:	bf0c      	ite	eq
 8008d1c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8008d1e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d20:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8008d22:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8008d26:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8008d2a:	bf54      	ite	pl
 8008d2c:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8008d2e:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8008d30:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8008d34:	3301      	adds	r3, #1
 8008d36:	e732      	b.n	8008b9e <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d38:	2500      	movs	r5, #0
 8008d3a:	e7d5      	b.n	8008ce8 <HAL_GPIO_Init+0x158>
 8008d3c:	2501      	movs	r5, #1
 8008d3e:	e7d3      	b.n	8008ce8 <HAL_GPIO_Init+0x158>
 8008d40:	2502      	movs	r5, #2
 8008d42:	e7d1      	b.n	8008ce8 <HAL_GPIO_Init+0x158>
 8008d44:	2503      	movs	r5, #3
 8008d46:	e7cf      	b.n	8008ce8 <HAL_GPIO_Init+0x158>
 8008d48:	2504      	movs	r5, #4
 8008d4a:	e7cd      	b.n	8008ce8 <HAL_GPIO_Init+0x158>
 8008d4c:	2505      	movs	r5, #5
 8008d4e:	e7cb      	b.n	8008ce8 <HAL_GPIO_Init+0x158>
 8008d50:	2506      	movs	r5, #6
 8008d52:	e7c9      	b.n	8008ce8 <HAL_GPIO_Init+0x158>
 8008d54:	2507      	movs	r5, #7
 8008d56:	e7c7      	b.n	8008ce8 <HAL_GPIO_Init+0x158>
 8008d58:	2508      	movs	r5, #8
 8008d5a:	e7c5      	b.n	8008ce8 <HAL_GPIO_Init+0x158>
 8008d5c:	58020000 	.word	0x58020000
 8008d60:	58024400 	.word	0x58024400

08008d64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008d68:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008d6a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8008e94 <HAL_GPIO_DeInit+0x130>
 8008d6e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008e98 <HAL_GPIO_DeInit+0x134>
 8008d72:	f8df a128 	ldr.w	sl, [pc, #296]	; 8008e9c <HAL_GPIO_DeInit+0x138>
 8008d76:	f8df b128 	ldr.w	fp, [pc, #296]	; 8008ea0 <HAL_GPIO_DeInit+0x13c>
  while ((GPIO_Pin >> position) != 0x00U)
 8008d7a:	fa31 f302 	lsrs.w	r3, r1, r2
 8008d7e:	d101      	bne.n	8008d84 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008d84:	2301      	movs	r3, #1
 8008d86:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 8008d8a:	ea1c 0601 	ands.w	r6, ip, r1
 8008d8e:	d06b      	beq.n	8008e68 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008d90:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008d94:	f002 0703 	and.w	r7, r2, #3
 8008d98:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008d9a:	4b3d      	ldr	r3, [pc, #244]	; (8008e90 <HAL_GPIO_DeInit+0x12c>)
 8008d9c:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008da0:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008da2:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008da4:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008da8:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008dac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008db0:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008db4:	d05a      	beq.n	8008e6c <HAL_GPIO_DeInit+0x108>
 8008db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dba:	4298      	cmp	r0, r3
 8008dbc:	d058      	beq.n	8008e70 <HAL_GPIO_DeInit+0x10c>
 8008dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dc2:	4298      	cmp	r0, r3
 8008dc4:	d056      	beq.n	8008e74 <HAL_GPIO_DeInit+0x110>
 8008dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dca:	4298      	cmp	r0, r3
 8008dcc:	d054      	beq.n	8008e78 <HAL_GPIO_DeInit+0x114>
 8008dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dd2:	4298      	cmp	r0, r3
 8008dd4:	d052      	beq.n	8008e7c <HAL_GPIO_DeInit+0x118>
 8008dd6:	4540      	cmp	r0, r8
 8008dd8:	d052      	beq.n	8008e80 <HAL_GPIO_DeInit+0x11c>
 8008dda:	4548      	cmp	r0, r9
 8008ddc:	d052      	beq.n	8008e84 <HAL_GPIO_DeInit+0x120>
 8008dde:	4550      	cmp	r0, sl
 8008de0:	d052      	beq.n	8008e88 <HAL_GPIO_DeInit+0x124>
 8008de2:	4558      	cmp	r0, fp
 8008de4:	d052      	beq.n	8008e8c <HAL_GPIO_DeInit+0x128>
 8008de6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8008dea:	4298      	cmp	r0, r3
 8008dec:	bf0c      	ite	eq
 8008dee:	2309      	moveq	r3, #9
 8008df0:	230a      	movne	r3, #10
 8008df2:	40bb      	lsls	r3, r7
 8008df4:	4573      	cmp	r3, lr
 8008df6:	d119      	bne.n	8008e2c <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dfc:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8008e00:	ea27 0706 	bic.w	r7, r7, r6
 8008e04:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008e08:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8008e0c:	ea27 0706 	bic.w	r7, r7, r6
 8008e10:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8008e14:	685f      	ldr	r7, [r3, #4]
 8008e16:	ea27 0706 	bic.w	r7, r7, r6
 8008e1a:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008e1c:	681f      	ldr	r7, [r3, #0]
 8008e1e:	ea27 0706 	bic.w	r7, r7, r6
 8008e22:	601f      	str	r7, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008e24:	68a3      	ldr	r3, [r4, #8]
 8008e26:	ea23 0305 	bic.w	r3, r3, r5
 8008e2a:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008e2c:	0055      	lsls	r5, r2, #1
 8008e2e:	2303      	movs	r3, #3
 8008e30:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008e32:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008e36:	40ab      	lsls	r3, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008e38:	260f      	movs	r6, #15
 8008e3a:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008e3c:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008e3e:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008e40:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008e42:	08d4      	lsrs	r4, r2, #3
 8008e44:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008e48:	6a25      	ldr	r5, [r4, #32]
 8008e4a:	ea25 0506 	bic.w	r5, r5, r6
 8008e4e:	6225      	str	r5, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e50:	68c4      	ldr	r4, [r0, #12]
 8008e52:	ea24 0403 	bic.w	r4, r4, r3
 8008e56:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e58:	6844      	ldr	r4, [r0, #4]
 8008e5a:	ea24 040c 	bic.w	r4, r4, ip
 8008e5e:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008e60:	6884      	ldr	r4, [r0, #8]
 8008e62:	ea24 0303 	bic.w	r3, r4, r3
 8008e66:	6083      	str	r3, [r0, #8]
    position++;
 8008e68:	3201      	adds	r2, #1
 8008e6a:	e786      	b.n	8008d7a <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	e7c0      	b.n	8008df2 <HAL_GPIO_DeInit+0x8e>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e7be      	b.n	8008df2 <HAL_GPIO_DeInit+0x8e>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e7bc      	b.n	8008df2 <HAL_GPIO_DeInit+0x8e>
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e7ba      	b.n	8008df2 <HAL_GPIO_DeInit+0x8e>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	e7b8      	b.n	8008df2 <HAL_GPIO_DeInit+0x8e>
 8008e80:	2305      	movs	r3, #5
 8008e82:	e7b6      	b.n	8008df2 <HAL_GPIO_DeInit+0x8e>
 8008e84:	2306      	movs	r3, #6
 8008e86:	e7b4      	b.n	8008df2 <HAL_GPIO_DeInit+0x8e>
 8008e88:	2307      	movs	r3, #7
 8008e8a:	e7b2      	b.n	8008df2 <HAL_GPIO_DeInit+0x8e>
 8008e8c:	2308      	movs	r3, #8
 8008e8e:	e7b0      	b.n	8008df2 <HAL_GPIO_DeInit+0x8e>
 8008e90:	58020000 	.word	0x58020000
 8008e94:	58021400 	.word	0x58021400
 8008e98:	58021800 	.word	0x58021800
 8008e9c:	58021c00 	.word	0x58021c00
 8008ea0:	58022000 	.word	0x58022000

08008ea4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008ea4:	6903      	ldr	r3, [r0, #16]
 8008ea6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008ea8:	bf14      	ite	ne
 8008eaa:	2001      	movne	r0, #1
 8008eac:	2000      	moveq	r0, #0
 8008eae:	4770      	bx	lr

08008eb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008eb0:	b10a      	cbz	r2, 8008eb6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008eb2:	6181      	str	r1, [r0, #24]
  }
}
 8008eb4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008eb6:	0409      	lsls	r1, r1, #16
 8008eb8:	e7fb      	b.n	8008eb2 <HAL_GPIO_WritePin+0x2>

08008eba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008ebe:	4606      	mov	r6, r0
{
 8008ec0:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d043      	beq.n	8008f4e <HAL_HCD_Init+0x94>
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008ec6:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
  USBx = hhcd->Instance;
 8008eca:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008ecc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008ed0:	b91b      	cbnz	r3, 8008eda <HAL_HCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8008ed2:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8008ed6:	f7fd fe13 	bl	8006b00 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008eda:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8008edc:	466d      	mov	r5, sp
 8008ede:	f106 0804 	add.w	r8, r6, #4

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8008ee2:	4637      	mov	r7, r6
  hhcd->State = HAL_HCD_STATE_BUSY;
 8008ee4:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008ee8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8008eea:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008eec:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8008ef0:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8008ef4:	bf08      	it	eq
 8008ef6:	60f3      	streq	r3, [r6, #12]
  __HAL_HCD_DISABLE(hhcd);
 8008ef8:	f004 fed0 	bl	800dc9c <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8008efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008f08:	e885 0003 	stmia.w	r5, {r0, r1}
 8008f0c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8008f10:	6830      	ldr	r0, [r6, #0]
 8008f12:	f004 fe79 	bl	800dc08 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8008f16:	f857 0b10 	ldr.w	r0, [r7], #16
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	f004 fec4 	bl	800dca8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8008f20:	46ec      	mov	ip, sp
 8008f22:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008f24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008f28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008f2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008f2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008f32:	e885 0003 	stmia.w	r5, {r0, r1}
 8008f36:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8008f3a:	6830      	ldr	r0, [r6, #0]
 8008f3c:	f004 ff2c 	bl	800dd98 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8008f40:	2301      	movs	r3, #1

  return HAL_OK;
 8008f42:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8008f44:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
}
 8008f48:	b00a      	add	sp, #40	; 0x28
 8008f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8008f4e:	2001      	movs	r0, #1
 8008f50:	e7fa      	b.n	8008f48 <HAL_HCD_Init+0x8e>

08008f52 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008f52:	b128      	cbz	r0, 8008f60 <HAL_MDMA_Abort_IT+0xe>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008f54:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d003      	beq.n	8008f64 <HAL_MDMA_Abort_IT+0x12>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008f5c:	2380      	movs	r3, #128	; 0x80
 8008f5e:	6683      	str	r3, [r0, #104]	; 0x68
    return HAL_ERROR;
 8008f60:	2001      	movs	r0, #1
    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
  }

  return HAL_OK;
}
 8008f62:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8008f64:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008f66:	2304      	movs	r3, #4
 8008f68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  return HAL_OK;
 8008f6c:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8008f6e:	68d3      	ldr	r3, [r2, #12]
 8008f70:	f023 0301 	bic.w	r3, r3, #1
 8008f74:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8008f76:	4770      	bx	lr

08008f78 <HAL_PWR_EnableBkUpAccess>:
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008f78:	4a02      	ldr	r2, [pc, #8]	; (8008f84 <HAL_PWR_EnableBkUpAccess+0xc>)
 8008f7a:	6813      	ldr	r3, [r2, #0]
 8008f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f80:	6013      	str	r3, [r2, #0]
}
 8008f82:	4770      	bx	lr
 8008f84:	58024800 	.word	0x58024800

08008f88 <HAL_PWR_DisableBkUpAccess>:
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
 8008f88:	4a02      	ldr	r2, [pc, #8]	; (8008f94 <HAL_PWR_DisableBkUpAccess+0xc>)
 8008f8a:	6813      	ldr	r3, [r2, #0]
 8008f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f90:	6013      	str	r3, [r2, #0]
}
 8008f92:	4770      	bx	lr
 8008f94:	58024800 	.word	0x58024800

08008f98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008f98:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008f9a:	4c10      	ldr	r4, [pc, #64]	; (8008fdc <HAL_PWREx_ConfigSupply+0x44>)
 8008f9c:	68e3      	ldr	r3, [r4, #12]
 8008f9e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008fa2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008fa4:	d105      	bne.n	8008fb2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008fa6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008faa:	1a18      	subs	r0, r3, r0
 8008fac:	bf18      	it	ne
 8008fae:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008fb0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008fb2:	f023 0307 	bic.w	r3, r3, #7
 8008fb6:	4318      	orrs	r0, r3
 8008fb8:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8008fba:	f7fd fe5f 	bl	8006c7c <HAL_GetTick>
 8008fbe:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	049b      	lsls	r3, r3, #18
 8008fc4:	d501      	bpl.n	8008fca <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e7f2      	b.n	8008fb0 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008fca:	f7fd fe57 	bl	8006c7c <HAL_GetTick>
 8008fce:	1b40      	subs	r0, r0, r5
 8008fd0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008fd4:	d9f4      	bls.n	8008fc0 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	e7ea      	b.n	8008fb0 <HAL_PWREx_ConfigSupply+0x18>
 8008fda:	bf00      	nop
 8008fdc:	58024800 	.word	0x58024800

08008fe0 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008fe0:	4a02      	ldr	r2, [pc, #8]	; (8008fec <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8008fe2:	68d3      	ldr	r3, [r2, #12]
 8008fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fe8:	60d3      	str	r3, [r2, #12]
}
 8008fea:	4770      	bx	lr
 8008fec:	58024800 	.word	0x58024800

08008ff0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008ff4:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8008ff6:	b136      	cbz	r6, 8009006 <QSPI_Config+0x16>
 8008ff8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8008ffc:	d003      	beq.n	8009006 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008ffe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009000:	6804      	ldr	r4, [r0, #0]
 8009002:	3b01      	subs	r3, #1
 8009004:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009006:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800900a:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800900e:	f1ba 0f00 	cmp.w	sl, #0
 8009012:	d04c      	beq.n	80090ae <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009014:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009016:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009018:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800901c:	ea4a 0406 	orr.w	r4, sl, r6
 8009020:	680b      	ldr	r3, [r1, #0]
 8009022:	f8d1 8034 	ldr.w	r8, [r1, #52]	; 0x34
 8009026:	ea44 0a02 	orr.w	sl, r4, r2
 800902a:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800902e:	f1be 0f00 	cmp.w	lr, #0
 8009032:	d024      	beq.n	800907e <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009034:	688e      	ldr	r6, [r1, #8]
 8009036:	ea4a 040e 	orr.w	r4, sl, lr
 800903a:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800903c:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800903e:	b19f      	cbz	r7, 8009068 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009040:	433b      	orrs	r3, r7
 8009042:	4303      	orrs	r3, r0
 8009044:	68c8      	ldr	r0, [r1, #12]
 8009046:	ea43 0309 	orr.w	r3, r3, r9
 800904a:	ea43 0308 	orr.w	r3, r3, r8
 800904e:	4333      	orrs	r3, r6
 8009050:	4303      	orrs	r3, r0
 8009052:	ea43 030c 	orr.w	r3, r3, ip
 8009056:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009058:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800905c:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800905e:	d001      	beq.n	8009064 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009060:	684b      	ldr	r3, [r1, #4]
 8009062:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009068:	4303      	orrs	r3, r0
 800906a:	ea43 0309 	orr.w	r3, r3, r9
 800906e:	ea43 0308 	orr.w	r3, r3, r8
 8009072:	4333      	orrs	r3, r6
 8009074:	ea43 030c 	orr.w	r3, r3, ip
 8009078:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800907a:	616b      	str	r3, [r5, #20]
 800907c:	e7f2      	b.n	8009064 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800907e:	b167      	cbz	r7, 800909a <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009080:	433b      	orrs	r3, r7
 8009082:	4303      	orrs	r3, r0
 8009084:	68c8      	ldr	r0, [r1, #12]
 8009086:	ea43 0309 	orr.w	r3, r3, r9
 800908a:	ea43 0308 	orr.w	r3, r3, r8
 800908e:	4303      	orrs	r3, r0
 8009090:	ea43 030c 	orr.w	r3, r3, ip
 8009094:	ea43 030a 	orr.w	r3, r3, sl
 8009098:	e7de      	b.n	8009058 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800909a:	4303      	orrs	r3, r0
 800909c:	ea43 0309 	orr.w	r3, r3, r9
 80090a0:	ea43 0408 	orr.w	r4, r3, r8
 80090a4:	ea44 030c 	orr.w	r3, r4, ip
 80090a8:	ea43 030a 	orr.w	r3, r3, sl
 80090ac:	e7e5      	b.n	800907a <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80090ae:	f1be 0f00 	cmp.w	lr, #0
 80090b2:	d02c      	beq.n	800910e <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80090b4:	ea46 050e 	orr.w	r5, r6, lr
 80090b8:	688b      	ldr	r3, [r1, #8]
 80090ba:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090bc:	694e      	ldr	r6, [r1, #20]
 80090be:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80090c0:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090c2:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 80090c6:	04b6      	lsls	r6, r6, #18
 80090c8:	690b      	ldr	r3, [r1, #16]
 80090ca:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80090ce:	b1a7      	cbz	r7, 80090fa <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090d0:	433b      	orrs	r3, r7
 80090d2:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80090d4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090d8:	ea43 0308 	orr.w	r3, r3, r8
 80090dc:	ea43 030e 	orr.w	r3, r3, lr
 80090e0:	ea43 030c 	orr.w	r3, r3, ip
 80090e4:	ea43 0300 	orr.w	r3, r3, r0
 80090e8:	ea43 0306 	orr.w	r3, r3, r6
 80090ec:	ea43 0305 	orr.w	r3, r3, r5
 80090f0:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80090f2:	d0b7      	beq.n	8009064 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80090f4:	684b      	ldr	r3, [r1, #4]
 80090f6:	61a3      	str	r3, [r4, #24]
 80090f8:	e7b4      	b.n	8009064 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090fa:	ea43 0308 	orr.w	r3, r3, r8
 80090fe:	ea43 030e 	orr.w	r3, r3, lr
 8009102:	ea43 030c 	orr.w	r3, r3, ip
 8009106:	4333      	orrs	r3, r6
 8009108:	432b      	orrs	r3, r5
 800910a:	6163      	str	r3, [r4, #20]
 800910c:	e7aa      	b.n	8009064 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800910e:	b1d7      	cbz	r7, 8009146 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009110:	ea46 0307 	orr.w	r3, r6, r7
 8009114:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8009116:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009118:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800911c:	ea43 0302 	orr.w	r3, r3, r2
 8009120:	ea43 0304 	orr.w	r3, r3, r4
 8009124:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8009126:	ea43 0304 	orr.w	r3, r3, r4
 800912a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800912c:	ea43 0304 	orr.w	r3, r3, r4
 8009130:	68cc      	ldr	r4, [r1, #12]
 8009132:	ea43 0304 	orr.w	r3, r3, r4
 8009136:	694c      	ldr	r4, [r1, #20]
 8009138:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800913c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800913e:	d091      	beq.n	8009064 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009140:	684b      	ldr	r3, [r1, #4]
 8009142:	6183      	str	r3, [r0, #24]
 8009144:	e78e      	b.n	8009064 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8009146:	2e00      	cmp	r6, #0
 8009148:	d08c      	beq.n	8009064 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800914a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800914c:	6800      	ldr	r0, [r0, #0]
 800914e:	4333      	orrs	r3, r6
 8009150:	4313      	orrs	r3, r2
 8009152:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8009154:	4313      	orrs	r3, r2
 8009156:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8009158:	4313      	orrs	r3, r2
 800915a:	694a      	ldr	r2, [r1, #20]
 800915c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009160:	6143      	str	r3, [r0, #20]
}
 8009162:	e77f      	b.n	8009064 <QSPI_Config+0x74>

08009164 <QSPI_WaitFlagStateUntilTimeout>:
{
 8009164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800916c:	4604      	mov	r4, r0
 800916e:	460e      	mov	r6, r1
 8009170:	4615      	mov	r5, r2
 8009172:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009174:	6822      	ldr	r2, [r4, #0]
 8009176:	6893      	ldr	r3, [r2, #8]
 8009178:	4233      	tst	r3, r6
 800917a:	bf14      	ite	ne
 800917c:	2301      	movne	r3, #1
 800917e:	2300      	moveq	r3, #0
 8009180:	42ab      	cmp	r3, r5
 8009182:	d101      	bne.n	8009188 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8009184:	2000      	movs	r0, #0
 8009186:	e012      	b.n	80091ae <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8009188:	f1b8 3fff 	cmp.w	r8, #4294967295
 800918c:	d0f3      	beq.n	8009176 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800918e:	f7fd fd75 	bl	8006c7c <HAL_GetTick>
 8009192:	1bc0      	subs	r0, r0, r7
 8009194:	4540      	cmp	r0, r8
 8009196:	d802      	bhi.n	800919e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8009198:	f1b8 0f00 	cmp.w	r8, #0
 800919c:	d1ea      	bne.n	8009174 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800919e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80091a0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80091a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80091a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	6463      	str	r3, [r4, #68]	; 0x44
}
 80091ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080091b4 <HAL_QSPI_Init>:
{
 80091b4:	b530      	push	{r4, r5, lr}
 80091b6:	4604      	mov	r4, r0
 80091b8:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 80091ba:	f7fd fd5f 	bl	8006c7c <HAL_GetTick>
 80091be:	4603      	mov	r3, r0
  if(hqspi == NULL)
 80091c0:	2c00      	cmp	r4, #0
 80091c2:	d040      	beq.n	8009246 <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80091c4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80091c8:	b93a      	cbnz	r2, 80091da <HAL_QSPI_Init+0x26>
 80091ca:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 80091cc:	4620      	mov	r0, r4
 80091ce:	f7fc fb13 	bl	80057f8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80091d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80091da:	6820      	ldr	r0, [r4, #0]
 80091dc:	68a1      	ldr	r1, [r4, #8]
 80091de:	6802      	ldr	r2, [r0, #0]
 80091e0:	3901      	subs	r1, #1
 80091e2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80091e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80091ea:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80091ec:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80091ee:	4620      	mov	r0, r4
 80091f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80091f2:	9200      	str	r2, [sp, #0]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f7ff ffb5 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80091fa:	bb10      	cbnz	r0, 8009242 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80091fc:	6822      	ldr	r2, [r4, #0]
 80091fe:	69e5      	ldr	r5, [r4, #28]
 8009200:	68e3      	ldr	r3, [r4, #12]
 8009202:	6811      	ldr	r1, [r2, #0]
 8009204:	432b      	orrs	r3, r5
 8009206:	6a25      	ldr	r5, [r4, #32]
 8009208:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800920c:	432b      	orrs	r3, r5
 800920e:	6865      	ldr	r5, [r4, #4]
 8009210:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8009214:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009218:	430b      	orrs	r3, r1
 800921a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800921c:	6855      	ldr	r5, [r2, #4]
 800921e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009222:	430b      	orrs	r3, r1
 8009224:	6921      	ldr	r1, [r4, #16]
 8009226:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800922a:	4908      	ldr	r1, [pc, #32]	; (800924c <HAL_QSPI_Init+0x98>)
 800922c:	4029      	ands	r1, r5
 800922e:	430b      	orrs	r3, r1
 8009230:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8009232:	6813      	ldr	r3, [r2, #0]
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800923a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800923c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800923e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8009242:	b005      	add	sp, #20
 8009244:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8009246:	2001      	movs	r0, #1
 8009248:	e7fb      	b.n	8009242 <HAL_QSPI_Init+0x8e>
 800924a:	bf00      	nop
 800924c:	ffe0f8fe 	.word	0xffe0f8fe

08009250 <HAL_QSPI_DeInit>:
{
 8009250:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8009252:	4604      	mov	r4, r0
 8009254:	b158      	cbz	r0, 800926e <HAL_QSPI_DeInit+0x1e>
  __HAL_QSPI_DISABLE(hqspi);
 8009256:	6802      	ldr	r2, [r0, #0]
 8009258:	6813      	ldr	r3, [r2, #0]
 800925a:	f023 0301 	bic.w	r3, r3, #1
 800925e:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8009260:	f7fc fb50 	bl	8005904 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009264:	2000      	movs	r0, #0
 8009266:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8009268:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
}
 800926c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800926e:	2001      	movs	r0, #1
 8009270:	e7fc      	b.n	800926c <HAL_QSPI_DeInit+0x1c>

08009272 <HAL_QSPI_Command>:
{
 8009272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009276:	4604      	mov	r4, r0
 8009278:	b085      	sub	sp, #20
 800927a:	4617      	mov	r7, r2
 800927c:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800927e:	f7fd fcfd 	bl	8006c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009282:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009286:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009288:	2a01      	cmp	r2, #1
 800928a:	d033      	beq.n	80092f4 <HAL_QSPI_Command+0x82>
 800928c:	2201      	movs	r2, #1
 800928e:	2602      	movs	r6, #2
 8009290:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009294:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009298:	2a01      	cmp	r2, #1
 800929a:	fa5f f882 	uxtb.w	r8, r2
 800929e:	d127      	bne.n	80092f0 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80092a0:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80092a2:	9003      	str	r0, [sp, #12]
 80092a4:	2120      	movs	r1, #32
 80092a6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80092a8:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80092aa:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80092ac:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80092b0:	f7ff ff58 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80092b4:	4605      	mov	r5, r0
 80092b6:	b9a0      	cbnz	r0, 80092e2 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80092b8:	4602      	mov	r2, r0
 80092ba:	4649      	mov	r1, r9
 80092bc:	4620      	mov	r0, r4
 80092be:	f7ff fe97 	bl	8008ff0 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80092c2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	b94a      	cbnz	r2, 80092de <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80092ca:	4642      	mov	r2, r8
 80092cc:	4631      	mov	r1, r6
 80092ce:	4620      	mov	r0, r4
 80092d0:	9700      	str	r7, [sp, #0]
 80092d2:	f7ff ff47 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80092d6:	4605      	mov	r5, r0
 80092d8:	b918      	cbnz	r0, 80092e2 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80092de:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80092e2:	2300      	movs	r3, #0
 80092e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80092e8:	4628      	mov	r0, r5
 80092ea:	b005      	add	sp, #20
 80092ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80092f0:	4635      	mov	r5, r6
 80092f2:	e7f6      	b.n	80092e2 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 80092f4:	2502      	movs	r5, #2
 80092f6:	e7f7      	b.n	80092e8 <HAL_QSPI_Command+0x76>

080092f8 <HAL_QSPI_Transmit>:
{
 80092f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092fa:	4604      	mov	r4, r0
 80092fc:	b085      	sub	sp, #20
 80092fe:	4616      	mov	r6, r2
 8009300:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009302:	f7fd fcbb 	bl	8006c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009306:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800930a:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800930c:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800930e:	2a01      	cmp	r2, #1
 8009310:	d049      	beq.n	80093a6 <HAL_QSPI_Transmit+0xae>
 8009312:	2201      	movs	r2, #1
 8009314:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009318:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800931c:	2a01      	cmp	r2, #1
 800931e:	b2d0      	uxtb	r0, r2
 8009320:	d13f      	bne.n	80093a2 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009322:	2200      	movs	r2, #0
 8009324:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8009326:	2f00      	cmp	r7, #0
 8009328:	d036      	beq.n	8009398 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800932a:	2212      	movs	r2, #18
 800932c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009330:	692a      	ldr	r2, [r5, #16]
 8009332:	3201      	adds	r2, #1
 8009334:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009336:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8009338:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800933a:	3201      	adds	r2, #1
 800933c:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800933e:	696a      	ldr	r2, [r5, #20]
 8009340:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8009344:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8009346:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009348:	b98a      	cbnz	r2, 800936e <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800934a:	2201      	movs	r2, #1
 800934c:	2102      	movs	r1, #2
 800934e:	4620      	mov	r0, r4
 8009350:	9600      	str	r6, [sp, #0]
 8009352:	f7ff ff07 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009356:	b910      	cbnz	r0, 800935e <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	2202      	movs	r2, #2
 800935c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800935e:	2301      	movs	r3, #1
 8009360:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009364:	2300      	movs	r3, #0
 8009366:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800936a:	b005      	add	sp, #20
 800936c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800936e:	2201      	movs	r2, #1
 8009370:	2104      	movs	r1, #4
 8009372:	4620      	mov	r0, r4
 8009374:	9600      	str	r6, [sp, #0]
 8009376:	9303      	str	r3, [sp, #12]
 8009378:	f7ff fef4 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800937c:	2800      	cmp	r0, #0
 800937e:	d1ee      	bne.n	800935e <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009380:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8009382:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009384:	7812      	ldrb	r2, [r2, #0]
 8009386:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800938a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800938c:	3201      	adds	r2, #1
 800938e:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8009390:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009392:	3a01      	subs	r2, #1
 8009394:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009396:	e7d6      	b.n	8009346 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009398:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800939a:	f043 0308 	orr.w	r3, r3, #8
 800939e:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80093a0:	e7e0      	b.n	8009364 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 80093a2:	2002      	movs	r0, #2
 80093a4:	e7de      	b.n	8009364 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 80093a6:	2002      	movs	r0, #2
 80093a8:	e7df      	b.n	800936a <HAL_QSPI_Transmit+0x72>

080093aa <HAL_QSPI_Receive>:
{
 80093aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ac:	4604      	mov	r4, r0
 80093ae:	b085      	sub	sp, #20
 80093b0:	4616      	mov	r6, r2
 80093b2:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80093b4:	f7fd fc62 	bl	8006c7c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80093b8:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80093ba:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80093bc:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 80093c0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80093c4:	2a01      	cmp	r2, #1
 80093c6:	d04d      	beq.n	8009464 <HAL_QSPI_Receive+0xba>
 80093c8:	2201      	movs	r2, #1
 80093ca:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80093ce:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80093d2:	2a01      	cmp	r2, #1
 80093d4:	b2d0      	uxtb	r0, r2
 80093d6:	d143      	bne.n	8009460 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80093d8:	2200      	movs	r2, #0
 80093da:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80093dc:	2f00      	cmp	r7, #0
 80093de:	d03a      	beq.n	8009456 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80093e0:	2222      	movs	r2, #34	; 0x22
 80093e2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80093e6:	692a      	ldr	r2, [r5, #16]
 80093e8:	3201      	adds	r2, #1
 80093ea:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80093ec:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80093ee:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80093f0:	3201      	adds	r2, #1
 80093f2:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80093f4:	6969      	ldr	r1, [r5, #20]
 80093f6:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80093fa:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80093fe:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009400:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8009404:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009406:	b98a      	cbnz	r2, 800942c <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009408:	2201      	movs	r2, #1
 800940a:	2102      	movs	r1, #2
 800940c:	4620      	mov	r0, r4
 800940e:	9600      	str	r6, [sp, #0]
 8009410:	f7ff fea8 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8009414:	b910      	cbnz	r0, 800941c <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	2202      	movs	r2, #2
 800941a:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800941c:	2301      	movs	r3, #1
 800941e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009422:	2300      	movs	r3, #0
 8009424:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009428:	b005      	add	sp, #20
 800942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800942c:	2201      	movs	r2, #1
 800942e:	2106      	movs	r1, #6
 8009430:	4620      	mov	r0, r4
 8009432:	9600      	str	r6, [sp, #0]
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	f7ff fe95 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800943a:	2800      	cmp	r0, #0
 800943c:	d1ee      	bne.n	800941c <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800943e:	f895 1020 	ldrb.w	r1, [r5, #32]
 8009442:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8009444:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009446:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8009448:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800944a:	3201      	adds	r2, #1
 800944c:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800944e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009450:	3a01      	subs	r2, #1
 8009452:	63a2      	str	r2, [r4, #56]	; 0x38
 8009454:	e7d6      	b.n	8009404 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009456:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009458:	f043 0308 	orr.w	r3, r3, #8
 800945c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800945e:	e7e0      	b.n	8009422 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 8009460:	2002      	movs	r0, #2
 8009462:	e7de      	b.n	8009422 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 8009464:	2002      	movs	r0, #2
 8009466:	e7df      	b.n	8009428 <HAL_QSPI_Receive+0x7e>

08009468 <HAL_QSPI_AutoPolling>:
{
 8009468:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800946c:	4604      	mov	r4, r0
 800946e:	4615      	mov	r5, r2
 8009470:	461e      	mov	r6, r3
 8009472:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8009474:	f7fd fc02 	bl	8006c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009478:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800947c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800947e:	2a01      	cmp	r2, #1
 8009480:	d040      	beq.n	8009504 <HAL_QSPI_AutoPolling+0x9c>
 8009482:	2201      	movs	r2, #1
 8009484:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009488:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800948c:	2a01      	cmp	r2, #1
 800948e:	b2d7      	uxtb	r7, r2
 8009490:	d136      	bne.n	8009500 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009492:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009494:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009496:	9003      	str	r0, [sp, #12]
 8009498:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800949a:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800949c:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800949e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80094a2:	2120      	movs	r1, #32
 80094a4:	f7ff fe5e 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80094a8:	bb20      	cbnz	r0, 80094f4 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80094aa:	6821      	ldr	r1, [r4, #0]
 80094ac:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80094ae:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80094b0:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80094b2:	686a      	ldr	r2, [r5, #4]
 80094b4:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80094b6:	68aa      	ldr	r2, [r5, #8]
 80094b8:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80094ba:	680a      	ldr	r2, [r1, #0]
 80094bc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80094c0:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80094c2:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80094c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80094c8:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80094ca:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 80094cc:	68ea      	ldr	r2, [r5, #12]
 80094ce:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80094d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80094d6:	f7ff fd8b 	bl	8008ff0 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	463a      	mov	r2, r7
 80094de:	2108      	movs	r1, #8
 80094e0:	4620      	mov	r0, r4
 80094e2:	9600      	str	r6, [sp, #0]
 80094e4:	f7ff fe3e 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80094e8:	b920      	cbnz	r0, 80094f4 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	2208      	movs	r2, #8
 80094ee:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80094f0:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80094f4:	2300      	movs	r3, #0
 80094f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80094fa:	b004      	add	sp, #16
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8009500:	2002      	movs	r0, #2
 8009502:	e7f7      	b.n	80094f4 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8009504:	2002      	movs	r0, #2
 8009506:	e7f8      	b.n	80094fa <HAL_QSPI_AutoPolling+0x92>

08009508 <HAL_QSPI_MemoryMapped>:
{
 8009508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800950a:	4604      	mov	r4, r0
 800950c:	4616      	mov	r6, r2
 800950e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009510:	f7fd fbb4 	bl	8006c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009514:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009518:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800951a:	2a01      	cmp	r2, #1
 800951c:	d033      	beq.n	8009586 <HAL_QSPI_MemoryMapped+0x7e>
 800951e:	2201      	movs	r2, #1
 8009520:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009524:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009528:	2a01      	cmp	r2, #1
 800952a:	d12a      	bne.n	8009582 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800952c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800952e:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009530:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009532:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009534:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009538:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800953a:	9100      	str	r1, [sp, #0]
 800953c:	2120      	movs	r1, #32
 800953e:	f7ff fe11 	bl	8009164 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009542:	4605      	mov	r5, r0
 8009544:	b9b8      	cbnz	r0, 8009576 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	6872      	ldr	r2, [r6, #4]
 800954a:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800954c:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800954e:	f020 0008 	bic.w	r0, r0, #8
 8009552:	ea40 0002 	orr.w	r0, r0, r2
 8009556:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009558:	d107      	bne.n	800956a <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800955a:	6832      	ldr	r2, [r6, #0]
 800955c:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800955e:	2210      	movs	r2, #16
 8009560:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009568:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800956a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800956e:	4639      	mov	r1, r7
 8009570:	4620      	mov	r0, r4
 8009572:	f7ff fd3d 	bl	8008ff0 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8009576:	2300      	movs	r3, #0
 8009578:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800957c:	4628      	mov	r0, r5
 800957e:	b003      	add	sp, #12
 8009580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8009582:	2502      	movs	r5, #2
 8009584:	e7f7      	b.n	8009576 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8009586:	2502      	movs	r5, #2
 8009588:	e7f8      	b.n	800957c <HAL_QSPI_MemoryMapped+0x74>

0800958a <HAL_QSPI_ErrorCallback>:
 800958a:	4770      	bx	lr

0800958c <QSPI_DMAAbortCplt>:
{
 800958c:	b508      	push	{r3, lr}
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800958e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hqspi->RxXferCount = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	6383      	str	r3, [r0, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8009594:	62c3      	str	r3, [r0, #44]	; 0x2c
  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8009596:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800959a:	2b08      	cmp	r3, #8
 800959c:	d10b      	bne.n	80095b6 <QSPI_DMAAbortCplt+0x2a>
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800959e:	6803      	ldr	r3, [r0, #0]
 80095a0:	2202      	movs	r2, #2
 80095a2:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80095aa:	601a      	str	r2, [r3, #0]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	f042 0202 	orr.w	r2, r2, #2
 80095b2:	601a      	str	r2, [r3, #0]
}
 80095b4:	bd08      	pop	{r3, pc}
    hqspi->State = HAL_QSPI_STATE_READY;
 80095b6:	2301      	movs	r3, #1
 80095b8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80095bc:	f7ff ffe5 	bl	800958a <HAL_QSPI_ErrorCallback>
}
 80095c0:	e7f8      	b.n	80095b4 <QSPI_DMAAbortCplt+0x28>

080095c2 <HAL_QSPI_AbortCpltCallback>:
 80095c2:	4770      	bx	lr

080095c4 <HAL_QSPI_CmdCpltCallback>:
 80095c4:	4770      	bx	lr

080095c6 <HAL_QSPI_RxCpltCallback>:
 80095c6:	4770      	bx	lr

080095c8 <HAL_QSPI_TxCpltCallback>:
 80095c8:	4770      	bx	lr

080095ca <HAL_QSPI_FifoThresholdCallback>:
 80095ca:	4770      	bx	lr

080095cc <HAL_QSPI_StatusMatchCallback>:
 80095cc:	4770      	bx	lr

080095ce <HAL_QSPI_TimeOutCallback>:
 80095ce:	4770      	bx	lr

080095d0 <HAL_QSPI_IRQHandler>:
{
 80095d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80095d2:	6803      	ldr	r3, [r0, #0]
{
 80095d4:	4604      	mov	r4, r0
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80095d6:	6899      	ldr	r1, [r3, #8]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80095d8:	681a      	ldr	r2, [r3, #0]
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80095da:	0748      	lsls	r0, r1, #29
 80095dc:	d534      	bpl.n	8009648 <HAL_QSPI_IRQHandler+0x78>
 80095de:	0355      	lsls	r5, r2, #13
 80095e0:	d532      	bpl.n	8009648 <HAL_QSPI_IRQHandler+0x78>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80095e2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80095e6:	2a12      	cmp	r2, #18
 80095e8:	d114      	bne.n	8009614 <HAL_QSPI_IRQHandler+0x44>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80095ea:	6822      	ldr	r2, [r4, #0]
 80095ec:	6891      	ldr	r1, [r2, #8]
 80095ee:	0748      	lsls	r0, r1, #29
 80095f0:	d403      	bmi.n	80095fa <HAL_QSPI_IRQHandler+0x2a>
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7ff ffe9 	bl	80095ca <HAL_QSPI_FifoThresholdCallback>
}
 80095f8:	bd38      	pop	{r3, r4, r5, pc}
        if (hqspi->TxXferCount > 0U)
 80095fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80095fc:	b1f9      	cbz	r1, 800963e <HAL_QSPI_IRQHandler+0x6e>
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80095fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009600:	7812      	ldrb	r2, [r2, #0]
 8009602:	f883 2020 	strb.w	r2, [r3, #32]
          hqspi->pTxBuffPtr++;
 8009606:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009608:	3201      	adds	r2, #1
 800960a:	6262      	str	r2, [r4, #36]	; 0x24
          hqspi->TxXferCount--;
 800960c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800960e:	3a01      	subs	r2, #1
 8009610:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009612:	e7ea      	b.n	80095ea <HAL_QSPI_IRQHandler+0x1a>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8009614:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009618:	2a22      	cmp	r2, #34	; 0x22
 800961a:	d1ea      	bne.n	80095f2 <HAL_QSPI_IRQHandler+0x22>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800961c:	6822      	ldr	r2, [r4, #0]
 800961e:	6891      	ldr	r1, [r2, #8]
 8009620:	0749      	lsls	r1, r1, #29
 8009622:	d5e6      	bpl.n	80095f2 <HAL_QSPI_IRQHandler+0x22>
        if (hqspi->RxXferCount > 0U)
 8009624:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009626:	b151      	cbz	r1, 800963e <HAL_QSPI_IRQHandler+0x6e>
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009628:	f893 1020 	ldrb.w	r1, [r3, #32]
 800962c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800962e:	7011      	strb	r1, [r2, #0]
          hqspi->pRxBuffPtr++;
 8009630:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009632:	3201      	adds	r2, #1
 8009634:	6322      	str	r2, [r4, #48]	; 0x30
          hqspi->RxXferCount--;
 8009636:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009638:	3a01      	subs	r2, #1
 800963a:	63a2      	str	r2, [r4, #56]	; 0x38
 800963c:	e7ee      	b.n	800961c <HAL_QSPI_IRQHandler+0x4c>
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009644:	6013      	str	r3, [r2, #0]
          break;
 8009646:	e7d4      	b.n	80095f2 <HAL_QSPI_IRQHandler+0x22>
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8009648:	078d      	lsls	r5, r1, #30
 800964a:	d568      	bpl.n	800971e <HAL_QSPI_IRQHandler+0x14e>
 800964c:	0390      	lsls	r0, r2, #14
 800964e:	d566      	bpl.n	800971e <HAL_QSPI_IRQHandler+0x14e>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8009650:	2202      	movs	r2, #2
 8009652:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800965a:	601a      	str	r2, [r3, #0]
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800965c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009660:	2a12      	cmp	r2, #18
 8009662:	d113      	bne.n	800968c <HAL_QSPI_IRQHandler+0xbc>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	0751      	lsls	r1, r2, #29
 8009668:	d509      	bpl.n	800967e <HAL_QSPI_IRQHandler+0xae>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	f022 0204 	bic.w	r2, r2, #4
 8009670:	601a      	str	r2, [r3, #0]
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8009672:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	68d3      	ldr	r3, [r2, #12]
 8009678:	f023 0301 	bic.w	r3, r3, #1
 800967c:	60d3      	str	r3, [r2, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800967e:	2301      	movs	r3, #1
      HAL_QSPI_TxCpltCallback(hqspi);
 8009680:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
 8009682:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_TxCpltCallback(hqspi);
 8009686:	f7ff ff9f 	bl	80095c8 <HAL_QSPI_TxCpltCallback>
 800968a:	e7b5      	b.n	80095f8 <HAL_QSPI_IRQHandler+0x28>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800968c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009690:	2a22      	cmp	r2, #34	; 0x22
 8009692:	d126      	bne.n	80096e2 <HAL_QSPI_IRQHandler+0x112>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	0752      	lsls	r2, r2, #29
 8009698:	d51d      	bpl.n	80096d6 <HAL_QSPI_IRQHandler+0x106>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	f022 0204 	bic.w	r2, r2, #4
 80096a0:	601a      	str	r2, [r3, #0]
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 80096a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68d3      	ldr	r3, [r2, #12]
 80096a8:	f023 0301 	bic.w	r3, r3, #1
 80096ac:	60d3      	str	r3, [r2, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80096ae:	2301      	movs	r3, #1
      HAL_QSPI_RxCpltCallback(hqspi);
 80096b0:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
 80096b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_RxCpltCallback(hqspi);
 80096b6:	f7ff ff86 	bl	80095c6 <HAL_QSPI_RxCpltCallback>
 80096ba:	e79d      	b.n	80095f8 <HAL_QSPI_IRQHandler+0x28>
          if (hqspi->RxXferCount > 0U)
 80096bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80096be:	2a00      	cmp	r2, #0
 80096c0:	d0f5      	beq.n	80096ae <HAL_QSPI_IRQHandler+0xde>
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80096c2:	f893 1020 	ldrb.w	r1, [r3, #32]
 80096c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80096c8:	7011      	strb	r1, [r2, #0]
            hqspi->pRxBuffPtr++;
 80096ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80096cc:	3201      	adds	r2, #1
 80096ce:	6322      	str	r2, [r4, #48]	; 0x30
            hqspi->RxXferCount--;
 80096d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80096d2:	3a01      	subs	r2, #1
 80096d4:	63a2      	str	r2, [r4, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80096d6:	6822      	ldr	r2, [r4, #0]
 80096d8:	6892      	ldr	r2, [r2, #8]
 80096da:	f412 5f7c 	tst.w	r2, #16128	; 0x3f00
 80096de:	d1ed      	bne.n	80096bc <HAL_QSPI_IRQHandler+0xec>
 80096e0:	e7e5      	b.n	80096ae <HAL_QSPI_IRQHandler+0xde>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80096e2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80096e6:	2a02      	cmp	r2, #2
 80096e8:	d106      	bne.n	80096f8 <HAL_QSPI_IRQHandler+0x128>
      hqspi->State = HAL_QSPI_STATE_READY;
 80096ea:	2301      	movs	r3, #1
      HAL_QSPI_CmdCpltCallback(hqspi);
 80096ec:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
 80096ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_CmdCpltCallback(hqspi);
 80096f2:	f7ff ff67 	bl	80095c4 <HAL_QSPI_CmdCpltCallback>
 80096f6:	e77f      	b.n	80095f8 <HAL_QSPI_IRQHandler+0x28>
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80096f8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80096fc:	2a08      	cmp	r2, #8
 80096fe:	f47f af7b 	bne.w	80095f8 <HAL_QSPI_IRQHandler+0x28>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8009702:	695a      	ldr	r2, [r3, #20]
        HAL_QSPI_AbortCpltCallback(hqspi);
 8009704:	4620      	mov	r0, r4
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8009706:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800970a:	615a      	str	r2, [r3, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 800970c:	2301      	movs	r3, #1
 800970e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8009712:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009714:	2b00      	cmp	r3, #0
 8009716:	d13a      	bne.n	800978e <HAL_QSPI_IRQHandler+0x1be>
        HAL_QSPI_AbortCpltCallback(hqspi);
 8009718:	f7ff ff53 	bl	80095c2 <HAL_QSPI_AbortCpltCallback>
 800971c:	e76c      	b.n	80095f8 <HAL_QSPI_IRQHandler+0x28>
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800971e:	070d      	lsls	r5, r1, #28
 8009720:	d511      	bpl.n	8009746 <HAL_QSPI_IRQHandler+0x176>
 8009722:	0310      	lsls	r0, r2, #12
 8009724:	d50f      	bpl.n	8009746 <HAL_QSPI_IRQHandler+0x176>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8009726:	2208      	movs	r2, #8
 8009728:	60da      	str	r2, [r3, #12]
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	0255      	lsls	r5, r2, #9
 800972e:	d506      	bpl.n	800973e <HAL_QSPI_IRQHandler+0x16e>
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8009736:	601a      	str	r2, [r3, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009738:	2301      	movs	r3, #1
 800973a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_QSPI_StatusMatchCallback(hqspi);
 800973e:	4620      	mov	r0, r4
 8009740:	f7ff ff44 	bl	80095cc <HAL_QSPI_StatusMatchCallback>
 8009744:	e758      	b.n	80095f8 <HAL_QSPI_IRQHandler+0x28>
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8009746:	07c8      	lsls	r0, r1, #31
 8009748:	d524      	bpl.n	8009794 <HAL_QSPI_IRQHandler+0x1c4>
 800974a:	03d5      	lsls	r5, r2, #15
 800974c:	d522      	bpl.n	8009794 <HAL_QSPI_IRQHandler+0x1c4>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800974e:	2501      	movs	r5, #1
 8009750:	60dd      	str	r5, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009758:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800975a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800975c:	f042 0202 	orr.w	r2, r2, #2
 8009760:	6462      	str	r2, [r4, #68]	; 0x44
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	0750      	lsls	r0, r2, #29
 8009766:	d50f      	bpl.n	8009788 <HAL_QSPI_IRQHandler+0x1b8>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009768:	681a      	ldr	r2, [r3, #0]
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800976a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800976c:	f022 0204 	bic.w	r2, r2, #4
 8009770:	601a      	str	r2, [r3, #0]
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8009772:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <HAL_QSPI_IRQHandler+0x1dc>)
 8009774:	6583      	str	r3, [r0, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8009776:	f7ff fbec 	bl	8008f52 <HAL_MDMA_Abort_IT>
 800977a:	2800      	cmp	r0, #0
 800977c:	f43f af3c 	beq.w	80095f8 <HAL_QSPI_IRQHandler+0x28>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8009780:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009782:	f043 0304 	orr.w	r3, r3, #4
 8009786:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_QSPI_ErrorCallback(hqspi);
 8009788:	4620      	mov	r0, r4
        hqspi->State = HAL_QSPI_STATE_READY;
 800978a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        HAL_QSPI_ErrorCallback(hqspi);
 800978e:	f7ff fefc 	bl	800958a <HAL_QSPI_ErrorCallback>
 8009792:	e731      	b.n	80095f8 <HAL_QSPI_IRQHandler+0x28>
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8009794:	06c9      	lsls	r1, r1, #27
 8009796:	f57f af2f 	bpl.w	80095f8 <HAL_QSPI_IRQHandler+0x28>
 800979a:	02d2      	lsls	r2, r2, #11
 800979c:	f57f af2c 	bpl.w	80095f8 <HAL_QSPI_IRQHandler+0x28>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80097a0:	2210      	movs	r2, #16
    HAL_QSPI_TimeOutCallback(hqspi);
 80097a2:	4620      	mov	r0, r4
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80097a4:	60da      	str	r2, [r3, #12]
    HAL_QSPI_TimeOutCallback(hqspi);
 80097a6:	f7ff ff12 	bl	80095ce <HAL_QSPI_TimeOutCallback>
}
 80097aa:	e725      	b.n	80095f8 <HAL_QSPI_IRQHandler+0x28>
 80097ac:	0800958d 	.word	0x0800958d

080097b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097b2:	4604      	mov	r4, r0
 80097b4:	b908      	cbnz	r0, 80097ba <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80097b6:	2001      	movs	r0, #1
 80097b8:	e08c      	b.n	80098d4 <HAL_RCC_OscConfig+0x124>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097ba:	6803      	ldr	r3, [r0, #0]
 80097bc:	07d8      	lsls	r0, r3, #31
 80097be:	d45e      	bmi.n	800987e <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	0799      	lsls	r1, r3, #30
 80097c4:	f100 80ac 	bmi.w	8009920 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	06da      	lsls	r2, r3, #27
 80097cc:	d527      	bpl.n	800981e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097ce:	4a9c      	ldr	r2, [pc, #624]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
 80097d0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d007      	beq.n	80097ec <HAL_RCC_OscConfig+0x3c>
 80097dc:	2b18      	cmp	r3, #24
 80097de:	f040 8103 	bne.w	80099e8 <HAL_RCC_OscConfig+0x238>
 80097e2:	f001 0303 	and.w	r3, r1, #3
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	f040 80fe 	bne.w	80099e8 <HAL_RCC_OscConfig+0x238>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80097ec:	6813      	ldr	r3, [r2, #0]
 80097ee:	05db      	lsls	r3, r3, #23
 80097f0:	d502      	bpl.n	80097f8 <HAL_RCC_OscConfig+0x48>
 80097f2:	69e3      	ldr	r3, [r4, #28]
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d1de      	bne.n	80097b6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097f8:	f7fd fa58 	bl	8006cac <HAL_GetREVID>
 80097fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8009800:	6a21      	ldr	r1, [r4, #32]
 8009802:	4298      	cmp	r0, r3
 8009804:	4b8e      	ldr	r3, [pc, #568]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
 8009806:	f200 80e8 	bhi.w	80099da <HAL_RCC_OscConfig+0x22a>
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	2920      	cmp	r1, #32
 800980e:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8009812:	bf0c      	ite	eq
 8009814:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8009818:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800981c:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	0719      	lsls	r1, r3, #28
 8009822:	f100 8122 	bmi.w	8009a6a <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	069a      	lsls	r2, r3, #26
 800982a:	f100 8143 	bmi.w	8009ab4 <HAL_RCC_OscConfig+0x304>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	075d      	lsls	r5, r3, #29
 8009832:	d51e      	bpl.n	8009872 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8009834:	4d83      	ldr	r5, [pc, #524]	; (8009a44 <HAL_RCC_OscConfig+0x294>)
 8009836:	682b      	ldr	r3, [r5, #0]
 8009838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800983c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800983e:	f7fd fa1d 	bl	8006c7c <HAL_GetTick>
 8009842:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	05da      	lsls	r2, r3, #23
 8009848:	f140 8159 	bpl.w	8009afe <HAL_RCC_OscConfig+0x34e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800984c:	68a3      	ldr	r3, [r4, #8]
 800984e:	4d7c      	ldr	r5, [pc, #496]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
 8009850:	2b01      	cmp	r3, #1
 8009852:	f040 815b 	bne.w	8009b0c <HAL_RCC_OscConfig+0x35c>
 8009856:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009858:	f043 0301 	orr.w	r3, r3, #1
 800985c:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800985e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009862:	f7fd fa0b 	bl	8006c7c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009866:	4e76      	ldr	r6, [pc, #472]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8009868:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800986a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800986c:	079b      	lsls	r3, r3, #30
 800986e:	f140 8173 	bpl.w	8009b58 <HAL_RCC_OscConfig+0x3a8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009872:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009874:	2800      	cmp	r0, #0
 8009876:	f040 8176 	bne.w	8009b66 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800987a:	2000      	movs	r0, #0
 800987c:	e02a      	b.n	80098d4 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800987e:	4a70      	ldr	r2, [pc, #448]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
 8009880:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009882:	6a91      	ldr	r1, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009884:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009888:	2b10      	cmp	r3, #16
 800988a:	d005      	beq.n	8009898 <HAL_RCC_OscConfig+0xe8>
 800988c:	2b18      	cmp	r3, #24
 800988e:	d10a      	bne.n	80098a6 <HAL_RCC_OscConfig+0xf6>
 8009890:	f001 0303 	and.w	r3, r1, #3
 8009894:	2b02      	cmp	r3, #2
 8009896:	d106      	bne.n	80098a6 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009898:	6813      	ldr	r3, [r2, #0]
 800989a:	039a      	lsls	r2, r3, #14
 800989c:	d590      	bpl.n	80097c0 <HAL_RCC_OscConfig+0x10>
 800989e:	6863      	ldr	r3, [r4, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d18d      	bne.n	80097c0 <HAL_RCC_OscConfig+0x10>
 80098a4:	e787      	b.n	80097b6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098a6:	6863      	ldr	r3, [r4, #4]
 80098a8:	4d65      	ldr	r5, [pc, #404]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
 80098aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ae:	d112      	bne.n	80098d6 <HAL_RCC_OscConfig+0x126>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80098b8:	f7fd f9e0 	bl	8006c7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098bc:	4e60      	ldr	r6, [pc, #384]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80098be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098c0:	6833      	ldr	r3, [r6, #0]
 80098c2:	039b      	lsls	r3, r3, #14
 80098c4:	f53f af7c 	bmi.w	80097c0 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098c8:	f7fd f9d8 	bl	8006c7c <HAL_GetTick>
 80098cc:	1b40      	subs	r0, r0, r5
 80098ce:	2864      	cmp	r0, #100	; 0x64
 80098d0:	d9f6      	bls.n	80098c0 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 80098d2:	2003      	movs	r0, #3
}
 80098d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098d6:	b9a3      	cbnz	r3, 8009902 <HAL_RCC_OscConfig+0x152>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80098e8:	f7fd f9c8 	bl	8006c7c <HAL_GetTick>
 80098ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098ee:	682b      	ldr	r3, [r5, #0]
 80098f0:	039f      	lsls	r7, r3, #14
 80098f2:	f57f af65 	bpl.w	80097c0 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098f6:	f7fd f9c1 	bl	8006c7c <HAL_GetTick>
 80098fa:	1b80      	subs	r0, r0, r6
 80098fc:	2864      	cmp	r0, #100	; 0x64
 80098fe:	d9f6      	bls.n	80098ee <HAL_RCC_OscConfig+0x13e>
 8009900:	e7e7      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009906:	682b      	ldr	r3, [r5, #0]
 8009908:	d103      	bne.n	8009912 <HAL_RCC_OscConfig+0x162>
 800990a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800990e:	602b      	str	r3, [r5, #0]
 8009910:	e7ce      	b.n	80098b0 <HAL_RCC_OscConfig+0x100>
 8009912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009916:	602b      	str	r3, [r5, #0]
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800991e:	e7ca      	b.n	80098b6 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009920:	4947      	ldr	r1, [pc, #284]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
 8009922:	68e2      	ldr	r2, [r4, #12]
 8009924:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009926:	6a88      	ldr	r0, [r1, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009928:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800992c:	d003      	beq.n	8009936 <HAL_RCC_OscConfig+0x186>
 800992e:	2b18      	cmp	r3, #24
 8009930:	d12b      	bne.n	800998a <HAL_RCC_OscConfig+0x1da>
 8009932:	0780      	lsls	r0, r0, #30
 8009934:	d129      	bne.n	800998a <HAL_RCC_OscConfig+0x1da>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009936:	680b      	ldr	r3, [r1, #0]
 8009938:	075b      	lsls	r3, r3, #29
 800993a:	d502      	bpl.n	8009942 <HAL_RCC_OscConfig+0x192>
 800993c:	2a00      	cmp	r2, #0
 800993e:	f43f af3a 	beq.w	80097b6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009942:	4d3f      	ldr	r5, [pc, #252]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	f023 0319 	bic.w	r3, r3, #25
 800994a:	4313      	orrs	r3, r2
 800994c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800994e:	f7fd f995 	bl	8006c7c <HAL_GetTick>
 8009952:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	075f      	lsls	r7, r3, #29
 8009958:	d511      	bpl.n	800997e <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800995a:	f7fd f9a7 	bl	8006cac <HAL_GetREVID>
 800995e:	f241 0303 	movw	r3, #4099	; 0x1003
 8009962:	6922      	ldr	r2, [r4, #16]
 8009964:	4298      	cmp	r0, r3
 8009966:	686b      	ldr	r3, [r5, #4]
 8009968:	d822      	bhi.n	80099b0 <HAL_RCC_OscConfig+0x200>
 800996a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800996e:	2a40      	cmp	r2, #64	; 0x40
 8009970:	bf0c      	ite	eq
 8009972:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8009976:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800997a:	606b      	str	r3, [r5, #4]
 800997c:	e724      	b.n	80097c8 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800997e:	f7fd f97d 	bl	8006c7c <HAL_GetTick>
 8009982:	1b80      	subs	r0, r0, r6
 8009984:	2802      	cmp	r0, #2
 8009986:	d9e5      	bls.n	8009954 <HAL_RCC_OscConfig+0x1a4>
 8009988:	e7a3      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800998a:	4d2d      	ldr	r5, [pc, #180]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800998c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800998e:	b1a2      	cbz	r2, 80099ba <HAL_RCC_OscConfig+0x20a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009990:	f023 0319 	bic.w	r3, r3, #25
 8009994:	4313      	orrs	r3, r2
 8009996:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009998:	f7fd f970 	bl	8006c7c <HAL_GetTick>
 800999c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800999e:	682b      	ldr	r3, [r5, #0]
 80099a0:	0758      	lsls	r0, r3, #29
 80099a2:	d4da      	bmi.n	800995a <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099a4:	f7fd f96a 	bl	8006c7c <HAL_GetTick>
 80099a8:	1b80      	subs	r0, r0, r6
 80099aa:	2802      	cmp	r0, #2
 80099ac:	d9f7      	bls.n	800999e <HAL_RCC_OscConfig+0x1ee>
 80099ae:	e790      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80099b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80099b8:	e7df      	b.n	800997a <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_DISABLE();
 80099ba:	f023 0301 	bic.w	r3, r3, #1
 80099be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80099c0:	f7fd f95c 	bl	8006c7c <HAL_GetTick>
 80099c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099c6:	682b      	ldr	r3, [r5, #0]
 80099c8:	0759      	lsls	r1, r3, #29
 80099ca:	f57f aefd 	bpl.w	80097c8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ce:	f7fd f955 	bl	8006c7c <HAL_GetTick>
 80099d2:	1b80      	subs	r0, r0, r6
 80099d4:	2802      	cmp	r0, #2
 80099d6:	d9f6      	bls.n	80099c6 <HAL_RCC_OscConfig+0x216>
 80099d8:	e77b      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80099e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80099e4:	60da      	str	r2, [r3, #12]
 80099e6:	e71a      	b.n	800981e <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80099e8:	69e3      	ldr	r3, [r4, #28]
 80099ea:	4d15      	ldr	r5, [pc, #84]	; (8009a40 <HAL_RCC_OscConfig+0x290>)
 80099ec:	b363      	cbz	r3, 8009a48 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80099f6:	f7fd f941 	bl	8006c7c <HAL_GetTick>
 80099fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	05df      	lsls	r7, r3, #23
 8009a00:	d511      	bpl.n	8009a26 <HAL_RCC_OscConfig+0x276>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a02:	f7fd f953 	bl	8006cac <HAL_GetREVID>
 8009a06:	f241 0303 	movw	r3, #4099	; 0x1003
 8009a0a:	6a22      	ldr	r2, [r4, #32]
 8009a0c:	4298      	cmp	r0, r3
 8009a0e:	d810      	bhi.n	8009a32 <HAL_RCC_OscConfig+0x282>
 8009a10:	686b      	ldr	r3, [r5, #4]
 8009a12:	2a20      	cmp	r2, #32
 8009a14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a18:	bf0c      	ite	eq
 8009a1a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8009a1e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009a22:	606b      	str	r3, [r5, #4]
 8009a24:	e6fb      	b.n	800981e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a26:	f7fd f929 	bl	8006c7c <HAL_GetTick>
 8009a2a:	1b80      	subs	r0, r0, r6
 8009a2c:	2802      	cmp	r0, #2
 8009a2e:	d9e5      	bls.n	80099fc <HAL_RCC_OscConfig+0x24c>
 8009a30:	e74f      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a32:	68eb      	ldr	r3, [r5, #12]
 8009a34:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009a38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009a3c:	60eb      	str	r3, [r5, #12]
 8009a3e:	e6ee      	b.n	800981e <HAL_RCC_OscConfig+0x6e>
 8009a40:	58024400 	.word	0x58024400
 8009a44:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009a50:	f7fd f914 	bl	8006c7c <HAL_GetTick>
 8009a54:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a56:	682b      	ldr	r3, [r5, #0]
 8009a58:	05d8      	lsls	r0, r3, #23
 8009a5a:	f57f aee0 	bpl.w	800981e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a5e:	f7fd f90d 	bl	8006c7c <HAL_GetTick>
 8009a62:	1b80      	subs	r0, r0, r6
 8009a64:	2802      	cmp	r0, #2
 8009a66:	d9f6      	bls.n	8009a56 <HAL_RCC_OscConfig+0x2a6>
 8009a68:	e733      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a6a:	6963      	ldr	r3, [r4, #20]
 8009a6c:	4da5      	ldr	r5, [pc, #660]	; (8009d04 <HAL_RCC_OscConfig+0x554>)
 8009a6e:	b183      	cbz	r3, 8009a92 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8009a70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009a72:	f043 0301 	orr.w	r3, r3, #1
 8009a76:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009a78:	f7fd f900 	bl	8006c7c <HAL_GetTick>
 8009a7c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009a80:	079b      	lsls	r3, r3, #30
 8009a82:	f53f aed0 	bmi.w	8009826 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a86:	f7fd f8f9 	bl	8006c7c <HAL_GetTick>
 8009a8a:	1b80      	subs	r0, r0, r6
 8009a8c:	2802      	cmp	r0, #2
 8009a8e:	d9f6      	bls.n	8009a7e <HAL_RCC_OscConfig+0x2ce>
 8009a90:	e71f      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8009a92:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009a94:	f023 0301 	bic.w	r3, r3, #1
 8009a98:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009a9a:	f7fd f8ef 	bl	8006c7c <HAL_GetTick>
 8009a9e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009aa0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009aa2:	079f      	lsls	r7, r3, #30
 8009aa4:	f57f aebf 	bpl.w	8009826 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009aa8:	f7fd f8e8 	bl	8006c7c <HAL_GetTick>
 8009aac:	1b80      	subs	r0, r0, r6
 8009aae:	2802      	cmp	r0, #2
 8009ab0:	d9f6      	bls.n	8009aa0 <HAL_RCC_OscConfig+0x2f0>
 8009ab2:	e70e      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009ab4:	69a3      	ldr	r3, [r4, #24]
 8009ab6:	4d93      	ldr	r5, [pc, #588]	; (8009d04 <HAL_RCC_OscConfig+0x554>)
 8009ab8:	b183      	cbz	r3, 8009adc <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8009aba:	682b      	ldr	r3, [r5, #0]
 8009abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ac0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009ac2:	f7fd f8db 	bl	8006c7c <HAL_GetTick>
 8009ac6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	0498      	lsls	r0, r3, #18
 8009acc:	f53f aeaf 	bmi.w	800982e <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ad0:	f7fd f8d4 	bl	8006c7c <HAL_GetTick>
 8009ad4:	1b80      	subs	r0, r0, r6
 8009ad6:	2802      	cmp	r0, #2
 8009ad8:	d9f6      	bls.n	8009ac8 <HAL_RCC_OscConfig+0x318>
 8009ada:	e6fa      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ae2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009ae4:	f7fd f8ca 	bl	8006c7c <HAL_GetTick>
 8009ae8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009aea:	682b      	ldr	r3, [r5, #0]
 8009aec:	0499      	lsls	r1, r3, #18
 8009aee:	f57f ae9e 	bpl.w	800982e <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009af2:	f7fd f8c3 	bl	8006c7c <HAL_GetTick>
 8009af6:	1b80      	subs	r0, r0, r6
 8009af8:	2802      	cmp	r0, #2
 8009afa:	d9f6      	bls.n	8009aea <HAL_RCC_OscConfig+0x33a>
 8009afc:	e6e9      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009afe:	f7fd f8bd 	bl	8006c7c <HAL_GetTick>
 8009b02:	1b80      	subs	r0, r0, r6
 8009b04:	2864      	cmp	r0, #100	; 0x64
 8009b06:	f67f ae9d 	bls.w	8009844 <HAL_RCC_OscConfig+0x94>
 8009b0a:	e6e2      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b0c:	b9b3      	cbnz	r3, 8009b3c <HAL_RCC_OscConfig+0x38c>
 8009b0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b10:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b14:	f023 0301 	bic.w	r3, r3, #1
 8009b18:	672b      	str	r3, [r5, #112]	; 0x70
 8009b1a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009b1c:	f023 0304 	bic.w	r3, r3, #4
 8009b20:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8009b22:	f7fd f8ab 	bl	8006c7c <HAL_GetTick>
 8009b26:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009b2a:	0798      	lsls	r0, r3, #30
 8009b2c:	f57f aea1 	bpl.w	8009872 <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b30:	f7fd f8a4 	bl	8006c7c <HAL_GetTick>
 8009b34:	1b80      	subs	r0, r0, r6
 8009b36:	42b8      	cmp	r0, r7
 8009b38:	d9f6      	bls.n	8009b28 <HAL_RCC_OscConfig+0x378>
 8009b3a:	e6ca      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b3c:	2b05      	cmp	r3, #5
 8009b3e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009b40:	d103      	bne.n	8009b4a <HAL_RCC_OscConfig+0x39a>
 8009b42:	f043 0304 	orr.w	r3, r3, #4
 8009b46:	672b      	str	r3, [r5, #112]	; 0x70
 8009b48:	e685      	b.n	8009856 <HAL_RCC_OscConfig+0xa6>
 8009b4a:	f023 0301 	bic.w	r3, r3, #1
 8009b4e:	672b      	str	r3, [r5, #112]	; 0x70
 8009b50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009b52:	f023 0304 	bic.w	r3, r3, #4
 8009b56:	e681      	b.n	800985c <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b58:	f7fd f890 	bl	8006c7c <HAL_GetTick>
 8009b5c:	1b40      	subs	r0, r0, r5
 8009b5e:	42b8      	cmp	r0, r7
 8009b60:	f67f ae83 	bls.w	800986a <HAL_RCC_OscConfig+0xba>
 8009b64:	e6b5      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009b66:	4d67      	ldr	r5, [pc, #412]	; (8009d04 <HAL_RCC_OscConfig+0x554>)
 8009b68:	692b      	ldr	r3, [r5, #16]
 8009b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b6e:	2b18      	cmp	r3, #24
 8009b70:	d07a      	beq.n	8009c68 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8009b72:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b74:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b7a:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b7c:	d167      	bne.n	8009c4e <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 8009b7e:	f7fd f87d 	bl	8006c7c <HAL_GetTick>
 8009b82:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	0199      	lsls	r1, r3, #6
 8009b88:	d45b      	bmi.n	8009c42 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009b8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009b8e:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	4313      	orrs	r3, r2
 8009b98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b9a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009b9e:	62ab      	str	r3, [r5, #40]	; 0x28
 8009ba0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ba2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	3a01      	subs	r2, #1
 8009ba8:	025b      	lsls	r3, r3, #9
 8009baa:	0412      	lsls	r2, r2, #16
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009bb6:	3a01      	subs	r2, #1
 8009bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009bc0:	3a01      	subs	r2, #1
 8009bc2:	0612      	lsls	r2, r2, #24
 8009bc4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8009bcc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009bce:	f023 0301 	bic.w	r3, r3, #1
 8009bd2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bd4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009bd6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bdc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009be0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009be4:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009be6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009be8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009bea:	f023 030c 	bic.w	r3, r3, #12
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009bf2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009bf4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009bf6:	f023 0302 	bic.w	r3, r3, #2
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009bfe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c04:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c0c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009c0e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c14:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8009c16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009c18:	f043 0301 	orr.w	r3, r3, #1
 8009c1c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009c1e:	682b      	ldr	r3, [r5, #0]
 8009c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c24:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009c26:	f7fd f829 	bl	8006c7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c2a:	4d36      	ldr	r5, [pc, #216]	; (8009d04 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8009c2c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c2e:	682b      	ldr	r3, [r5, #0]
 8009c30:	019a      	lsls	r2, r3, #6
 8009c32:	f53f ae22 	bmi.w	800987a <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c36:	f7fd f821 	bl	8006c7c <HAL_GetTick>
 8009c3a:	1b00      	subs	r0, r0, r4
 8009c3c:	2802      	cmp	r0, #2
 8009c3e:	d9f6      	bls.n	8009c2e <HAL_RCC_OscConfig+0x47e>
 8009c40:	e647      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c42:	f7fd f81b 	bl	8006c7c <HAL_GetTick>
 8009c46:	1b80      	subs	r0, r0, r6
 8009c48:	2802      	cmp	r0, #2
 8009c4a:	d99b      	bls.n	8009b84 <HAL_RCC_OscConfig+0x3d4>
 8009c4c:	e641      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8009c4e:	f7fd f815 	bl	8006c7c <HAL_GetTick>
 8009c52:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	019b      	lsls	r3, r3, #6
 8009c58:	f57f ae0f 	bpl.w	800987a <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c5c:	f7fd f80e 	bl	8006c7c <HAL_GetTick>
 8009c60:	1b00      	subs	r0, r0, r4
 8009c62:	2802      	cmp	r0, #2
 8009c64:	d9f6      	bls.n	8009c54 <HAL_RCC_OscConfig+0x4a4>
 8009c66:	e634      	b.n	80098d2 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c68:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009c6a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009c6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c6e:	f43f ae31 	beq.w	80098d4 <HAL_RCC_OscConfig+0x124>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c72:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009c78:	4281      	cmp	r1, r0
 8009c7a:	f47f ad9c 	bne.w	80097b6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c7e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009c84:	428a      	cmp	r2, r1
 8009c86:	f47f ad96 	bne.w	80097b6 <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009c8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009c8c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8009c90:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c92:	4291      	cmp	r1, r2
 8009c94:	f47f ad8f 	bne.w	80097b6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009c98:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009c9a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8009c9e:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ca0:	4291      	cmp	r1, r2
 8009ca2:	f47f ad88 	bne.w	80097b6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ca6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ca8:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8009cac:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cae:	4291      	cmp	r1, r2
 8009cb0:	f47f ad81 	bne.w	80097b6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009cb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009cb6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009cba:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	f47f ad7a 	bne.w	80097b6 <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009cc2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009cc4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009cc6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	f43f add5 	beq.w	800987a <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009cd0:	4d0c      	ldr	r5, [pc, #48]	; (8009d04 <HAL_RCC_OscConfig+0x554>)
 8009cd2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009cd4:	f023 0301 	bic.w	r3, r3, #1
 8009cd8:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8009cda:	f7fc ffcf 	bl	8006c7c <HAL_GetTick>
 8009cde:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ce0:	f7fc ffcc 	bl	8006c7c <HAL_GetTick>
 8009ce4:	42b0      	cmp	r0, r6
 8009ce6:	d0fb      	beq.n	8009ce0 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ce8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009cea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009cec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cf0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009cf4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009cf8:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8009cfa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009cfc:	f043 0301 	orr.w	r3, r3, #1
 8009d00:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009d02:	e5ba      	b.n	800987a <HAL_RCC_OscConfig+0xca>
 8009d04:	58024400 	.word	0x58024400

08009d08 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d08:	4b49      	ldr	r3, [pc, #292]	; (8009e30 <HAL_RCC_GetSysClockFreq+0x128>)
 8009d0a:	691a      	ldr	r2, [r3, #16]
 8009d0c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8009d10:	2a10      	cmp	r2, #16
{
 8009d12:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d14:	f000 8088 	beq.w	8009e28 <HAL_RCC_GetSysClockFreq+0x120>
 8009d18:	2a18      	cmp	r2, #24
 8009d1a:	d00c      	beq.n	8009d36 <HAL_RCC_GetSysClockFreq+0x2e>
 8009d1c:	2a00      	cmp	r2, #0
 8009d1e:	f040 8085 	bne.w	8009e2c <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	4843      	ldr	r0, [pc, #268]	; (8009e34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009d26:	f012 0f20 	tst.w	r2, #32
 8009d2a:	d003      	beq.n	8009d34 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009d32:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8009d34:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d36:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009d38:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009d3a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 8009d3c:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009d40:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 8009d46:	d0f5      	beq.n	8009d34 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d48:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009d4c:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d50:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d54:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d58:	4362      	muls	r2, r4
 8009d5a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009d5e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d64:	ee06 2a90 	vmov	s13, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d68:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8009d6c:	d04e      	beq.n	8009e0c <HAL_RCC_GetSysClockFreq+0x104>
 8009d6e:	2902      	cmp	r1, #2
 8009d70:	d03e      	beq.n	8009df0 <HAL_RCC_GetSysClockFreq+0xe8>
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d14a      	bne.n	8009e0c <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	0692      	lsls	r2, r2, #26
 8009d7a:	d527      	bpl.n	8009dcc <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d7c:	6819      	ldr	r1, [r3, #0]
 8009d7e:	4a2d      	ldr	r2, [pc, #180]	; (8009e34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009d80:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d86:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8c:	ee07 2a90 	vmov	s15, r2
 8009d90:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009d94:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8009d98:	ee07 3a10 	vmov	s14, r3
 8009d9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009da0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009da4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009da8:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009dac:	4b20      	ldr	r3, [pc, #128]	; (8009e30 <HAL_RCC_GetSysClockFreq+0x128>)
 8009dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009db4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009db6:	ee07 3a10 	vmov	s14, r3
 8009dba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009dbe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009dc2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009dc6:	ee17 0a90 	vmov	r0, s15
 8009dca:	e7b3      	b.n	8009d34 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dde:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009de2:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009e38 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009de6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009dea:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8009dee:	e7dd      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e02:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009e06:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8009e3c <HAL_RCC_GetSysClockFreq+0x134>
 8009e0a:	e7ec      	b.n	8009de6 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009e22:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8009e40 <HAL_RCC_GetSysClockFreq+0x138>
 8009e26:	e7de      	b.n	8009de6 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e28:	4806      	ldr	r0, [pc, #24]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009e2a:	e783      	b.n	8009d34 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8009e2c:	4806      	ldr	r0, [pc, #24]	; (8009e48 <HAL_RCC_GetSysClockFreq+0x140>)
 8009e2e:	e781      	b.n	8009d34 <HAL_RCC_GetSysClockFreq+0x2c>
 8009e30:	58024400 	.word	0x58024400
 8009e34:	03d09000 	.word	0x03d09000
 8009e38:	4c742400 	.word	0x4c742400
 8009e3c:	4bbebc20 	.word	0x4bbebc20
 8009e40:	4a742400 	.word	0x4a742400
 8009e44:	017d7840 	.word	0x017d7840
 8009e48:	003d0900 	.word	0x003d0900

08009e4c <HAL_RCC_ClockConfig>:
{
 8009e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e50:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8009e52:	4604      	mov	r4, r0
 8009e54:	b910      	cbnz	r0, 8009e5c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8009e56:	2001      	movs	r0, #1
}
 8009e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e5c:	4a88      	ldr	r2, [pc, #544]	; (800a080 <HAL_RCC_ClockConfig+0x234>)
 8009e5e:	6813      	ldr	r3, [r2, #0]
 8009e60:	f003 030f 	and.w	r3, r3, #15
 8009e64:	428b      	cmp	r3, r1
 8009e66:	f0c0 8093 	bcc.w	8009f90 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	075f      	lsls	r7, r3, #29
 8009e6e:	f100 809b 	bmi.w	8009fa8 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e72:	071e      	lsls	r6, r3, #28
 8009e74:	d50b      	bpl.n	8009e8e <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e76:	4983      	ldr	r1, [pc, #524]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009e78:	6960      	ldr	r0, [r4, #20]
 8009e7a:	69ca      	ldr	r2, [r1, #28]
 8009e7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009e80:	4290      	cmp	r0, r2
 8009e82:	d904      	bls.n	8009e8e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e84:	69ca      	ldr	r2, [r1, #28]
 8009e86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e8a:	4302      	orrs	r2, r0
 8009e8c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e8e:	06d8      	lsls	r0, r3, #27
 8009e90:	d50b      	bpl.n	8009eaa <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e92:	497c      	ldr	r1, [pc, #496]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009e94:	69a0      	ldr	r0, [r4, #24]
 8009e96:	69ca      	ldr	r2, [r1, #28]
 8009e98:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009e9c:	4290      	cmp	r0, r2
 8009e9e:	d904      	bls.n	8009eaa <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ea0:	69ca      	ldr	r2, [r1, #28]
 8009ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009ea6:	4302      	orrs	r2, r0
 8009ea8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009eaa:	0699      	lsls	r1, r3, #26
 8009eac:	d50b      	bpl.n	8009ec6 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009eae:	4975      	ldr	r1, [pc, #468]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009eb0:	69e0      	ldr	r0, [r4, #28]
 8009eb2:	6a0a      	ldr	r2, [r1, #32]
 8009eb4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009eb8:	4290      	cmp	r0, r2
 8009eba:	d904      	bls.n	8009ec6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009ebc:	6a0a      	ldr	r2, [r1, #32]
 8009ebe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ec2:	4302      	orrs	r2, r0
 8009ec4:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ec6:	079a      	lsls	r2, r3, #30
 8009ec8:	d50b      	bpl.n	8009ee2 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009eca:	496e      	ldr	r1, [pc, #440]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009ecc:	68e0      	ldr	r0, [r4, #12]
 8009ece:	698a      	ldr	r2, [r1, #24]
 8009ed0:	f002 020f 	and.w	r2, r2, #15
 8009ed4:	4290      	cmp	r0, r2
 8009ed6:	d904      	bls.n	8009ee2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ed8:	698a      	ldr	r2, [r1, #24]
 8009eda:	f022 020f 	bic.w	r2, r2, #15
 8009ede:	4302      	orrs	r2, r0
 8009ee0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ee2:	07df      	lsls	r7, r3, #31
 8009ee4:	d46e      	bmi.n	8009fc4 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	079e      	lsls	r6, r3, #30
 8009eea:	f100 80a1 	bmi.w	800a030 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009eee:	4964      	ldr	r1, [pc, #400]	; (800a080 <HAL_RCC_ClockConfig+0x234>)
 8009ef0:	680a      	ldr	r2, [r1, #0]
 8009ef2:	f002 020f 	and.w	r2, r2, #15
 8009ef6:	42aa      	cmp	r2, r5
 8009ef8:	f200 80a8 	bhi.w	800a04c <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009efc:	0758      	lsls	r0, r3, #29
 8009efe:	f100 80b1 	bmi.w	800a064 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f02:	0719      	lsls	r1, r3, #28
 8009f04:	d50b      	bpl.n	8009f1e <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f06:	495f      	ldr	r1, [pc, #380]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009f08:	6960      	ldr	r0, [r4, #20]
 8009f0a:	69ca      	ldr	r2, [r1, #28]
 8009f0c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009f10:	4290      	cmp	r0, r2
 8009f12:	d204      	bcs.n	8009f1e <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f14:	69ca      	ldr	r2, [r1, #28]
 8009f16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f1a:	4302      	orrs	r2, r0
 8009f1c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f1e:	06da      	lsls	r2, r3, #27
 8009f20:	d50b      	bpl.n	8009f3a <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009f22:	4958      	ldr	r1, [pc, #352]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009f24:	69a0      	ldr	r0, [r4, #24]
 8009f26:	69ca      	ldr	r2, [r1, #28]
 8009f28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009f2c:	4290      	cmp	r0, r2
 8009f2e:	d204      	bcs.n	8009f3a <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f30:	69ca      	ldr	r2, [r1, #28]
 8009f32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f36:	4302      	orrs	r2, r0
 8009f38:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f3a:	069b      	lsls	r3, r3, #26
 8009f3c:	d50b      	bpl.n	8009f56 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009f3e:	4a51      	ldr	r2, [pc, #324]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009f40:	69e1      	ldr	r1, [r4, #28]
 8009f42:	6a13      	ldr	r3, [r2, #32]
 8009f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f48:	4299      	cmp	r1, r3
 8009f4a:	d204      	bcs.n	8009f56 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009f4c:	6a13      	ldr	r3, [r2, #32]
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	430b      	orrs	r3, r1
 8009f54:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f56:	f7ff fed7 	bl	8009d08 <HAL_RCC_GetSysClockFreq>
 8009f5a:	494a      	ldr	r1, [pc, #296]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009f5c:	4a4a      	ldr	r2, [pc, #296]	; (800a088 <HAL_RCC_ClockConfig+0x23c>)
 8009f5e:	698b      	ldr	r3, [r1, #24]
 8009f60:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009f64:	5cd3      	ldrb	r3, [r2, r3]
 8009f66:	f003 031f 	and.w	r3, r3, #31
 8009f6a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f6c:	698b      	ldr	r3, [r1, #24]
 8009f6e:	f003 030f 	and.w	r3, r3, #15
 8009f72:	5cd3      	ldrb	r3, [r2, r3]
 8009f74:	4a45      	ldr	r2, [pc, #276]	; (800a08c <HAL_RCC_ClockConfig+0x240>)
 8009f76:	f003 031f 	and.w	r3, r3, #31
 8009f7a:	fa20 f303 	lsr.w	r3, r0, r3
 8009f7e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009f80:	4b43      	ldr	r3, [pc, #268]	; (800a090 <HAL_RCC_ClockConfig+0x244>)
 8009f82:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009f84:	4b43      	ldr	r3, [pc, #268]	; (800a094 <HAL_RCC_ClockConfig+0x248>)
}
 8009f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	f7fc b8bc 	b.w	8006108 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f90:	6813      	ldr	r3, [r2, #0]
 8009f92:	f023 030f 	bic.w	r3, r3, #15
 8009f96:	430b      	orrs	r3, r1
 8009f98:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f9a:	6813      	ldr	r3, [r2, #0]
 8009f9c:	f003 030f 	and.w	r3, r3, #15
 8009fa0:	428b      	cmp	r3, r1
 8009fa2:	f47f af58 	bne.w	8009e56 <HAL_RCC_ClockConfig+0xa>
 8009fa6:	e760      	b.n	8009e6a <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fa8:	4936      	ldr	r1, [pc, #216]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009faa:	6920      	ldr	r0, [r4, #16]
 8009fac:	698a      	ldr	r2, [r1, #24]
 8009fae:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009fb2:	4290      	cmp	r0, r2
 8009fb4:	f67f af5d 	bls.w	8009e72 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fb8:	698a      	ldr	r2, [r1, #24]
 8009fba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009fbe:	4302      	orrs	r2, r0
 8009fc0:	618a      	str	r2, [r1, #24]
 8009fc2:	e756      	b.n	8009e72 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009fc4:	4b2f      	ldr	r3, [pc, #188]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 8009fc6:	68a1      	ldr	r1, [r4, #8]
 8009fc8:	699a      	ldr	r2, [r3, #24]
 8009fca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fd2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fd4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fd6:	2902      	cmp	r1, #2
 8009fd8:	d11d      	bne.n	800a016 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fda:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fde:	f43f af3a 	beq.w	8009e56 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009fe2:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fe4:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fe8:	4f26      	ldr	r7, [pc, #152]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009fea:	f022 0207 	bic.w	r2, r2, #7
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8009ff2:	f7fc fe43 	bl	8006c7c <HAL_GetTick>
 8009ff6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	6862      	ldr	r2, [r4, #4]
 8009ffc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a000:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a004:	f43f af6f 	beq.w	8009ee6 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a008:	f7fc fe38 	bl	8006c7c <HAL_GetTick>
 800a00c:	1b80      	subs	r0, r0, r6
 800a00e:	4540      	cmp	r0, r8
 800a010:	d9f2      	bls.n	8009ff8 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800a012:	2003      	movs	r0, #3
 800a014:	e720      	b.n	8009e58 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a016:	2903      	cmp	r1, #3
 800a018:	d102      	bne.n	800a020 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a01a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800a01e:	e7de      	b.n	8009fde <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a020:	2901      	cmp	r1, #1
 800a022:	d102      	bne.n	800a02a <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a024:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a028:	e7d9      	b.n	8009fde <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a02a:	f012 0f04 	tst.w	r2, #4
 800a02e:	e7d6      	b.n	8009fde <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a030:	4914      	ldr	r1, [pc, #80]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 800a032:	68e0      	ldr	r0, [r4, #12]
 800a034:	698a      	ldr	r2, [r1, #24]
 800a036:	f002 020f 	and.w	r2, r2, #15
 800a03a:	4290      	cmp	r0, r2
 800a03c:	f4bf af57 	bcs.w	8009eee <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a040:	698a      	ldr	r2, [r1, #24]
 800a042:	f022 020f 	bic.w	r2, r2, #15
 800a046:	4302      	orrs	r2, r0
 800a048:	618a      	str	r2, [r1, #24]
 800a04a:	e750      	b.n	8009eee <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a04c:	680a      	ldr	r2, [r1, #0]
 800a04e:	f022 020f 	bic.w	r2, r2, #15
 800a052:	432a      	orrs	r2, r5
 800a054:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a056:	680a      	ldr	r2, [r1, #0]
 800a058:	f002 020f 	and.w	r2, r2, #15
 800a05c:	42aa      	cmp	r2, r5
 800a05e:	f47f aefa 	bne.w	8009e56 <HAL_RCC_ClockConfig+0xa>
 800a062:	e74b      	b.n	8009efc <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a064:	4907      	ldr	r1, [pc, #28]	; (800a084 <HAL_RCC_ClockConfig+0x238>)
 800a066:	6920      	ldr	r0, [r4, #16]
 800a068:	698a      	ldr	r2, [r1, #24]
 800a06a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a06e:	4290      	cmp	r0, r2
 800a070:	f4bf af47 	bcs.w	8009f02 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a074:	698a      	ldr	r2, [r1, #24]
 800a076:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a07a:	4302      	orrs	r2, r0
 800a07c:	618a      	str	r2, [r1, #24]
 800a07e:	e740      	b.n	8009f02 <HAL_RCC_ClockConfig+0xb6>
 800a080:	52002000 	.word	0x52002000
 800a084:	58024400 	.word	0x58024400
 800a088:	08015d5c 	.word	0x08015d5c
 800a08c:	24000064 	.word	0x24000064
 800a090:	24000060 	.word	0x24000060
 800a094:	2400006c 	.word	0x2400006c

0800a098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a098:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a09a:	4c0c      	ldr	r4, [pc, #48]	; (800a0cc <HAL_RCC_GetHCLKFreq+0x34>)
 800a09c:	f7ff fe34 	bl	8009d08 <HAL_RCC_GetSysClockFreq>
 800a0a0:	490b      	ldr	r1, [pc, #44]	; (800a0d0 <HAL_RCC_GetHCLKFreq+0x38>)
 800a0a2:	69a3      	ldr	r3, [r4, #24]
 800a0a4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a0a8:	5ccb      	ldrb	r3, [r1, r3]
 800a0aa:	f003 031f 	and.w	r3, r3, #31
 800a0ae:	fa20 f203 	lsr.w	r2, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a0b2:	69a3      	ldr	r3, [r4, #24]
 800a0b4:	f003 030f 	and.w	r3, r3, #15
 800a0b8:	5ccb      	ldrb	r3, [r1, r3]
 800a0ba:	f003 031f 	and.w	r3, r3, #31
 800a0be:	fa22 f003 	lsr.w	r0, r2, r3
 800a0c2:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <HAL_RCC_GetHCLKFreq+0x3c>)
 800a0c4:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a0c6:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <HAL_RCC_GetHCLKFreq+0x40>)
 800a0c8:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800a0ca:	bd10      	pop	{r4, pc}
 800a0cc:	58024400 	.word	0x58024400
 800a0d0:	08015d5c 	.word	0x08015d5c
 800a0d4:	24000064 	.word	0x24000064
 800a0d8:	24000060 	.word	0x24000060

0800a0dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0dc:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a0de:	f7ff ffdb 	bl	800a098 <HAL_RCC_GetHCLKFreq>
 800a0e2:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a0e4:	4a05      	ldr	r2, [pc, #20]	; (800a0fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a0ec:	5cd3      	ldrb	r3, [r2, r3]
 800a0ee:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a0f2:	40d8      	lsrs	r0, r3
 800a0f4:	bd08      	pop	{r3, pc}
 800a0f6:	bf00      	nop
 800a0f8:	58024400 	.word	0x58024400
 800a0fc:	08015d5c 	.word	0x08015d5c

0800a100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a100:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a102:	f7ff ffc9 	bl	800a098 <HAL_RCC_GetHCLKFreq>
 800a106:	4b05      	ldr	r3, [pc, #20]	; (800a11c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a108:	4a05      	ldr	r2, [pc, #20]	; (800a120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a10a:	69db      	ldr	r3, [r3, #28]
 800a10c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a110:	5cd3      	ldrb	r3, [r2, r3]
 800a112:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a116:	40d8      	lsrs	r0, r3
 800a118:	bd08      	pop	{r3, pc}
 800a11a:	bf00      	nop
 800a11c:	58024400 	.word	0x58024400
 800a120:	08015d5c 	.word	0x08015d5c

0800a124 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a124:	233f      	movs	r3, #63	; 0x3f
 800a126:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a128:	4b11      	ldr	r3, [pc, #68]	; (800a170 <HAL_RCC_GetClockConfig+0x4c>)
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	f002 0207 	and.w	r2, r2, #7
 800a130:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a132:	699a      	ldr	r2, [r3, #24]
 800a134:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800a138:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a13a:	699a      	ldr	r2, [r3, #24]
 800a13c:	f002 020f 	and.w	r2, r2, #15
 800a140:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a142:	699a      	ldr	r2, [r3, #24]
 800a144:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a148:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a14a:	69da      	ldr	r2, [r3, #28]
 800a14c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a150:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a152:	69da      	ldr	r2, [r3, #28]
 800a154:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a158:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a160:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a162:	4b04      	ldr	r3, [pc, #16]	; (800a174 <HAL_RCC_GetClockConfig+0x50>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 030f 	and.w	r3, r3, #15
 800a16a:	600b      	str	r3, [r1, #0]
}
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	58024400 	.word	0x58024400
 800a174:	52002000 	.word	0x52002000

0800a178 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a17a:	4c3a      	ldr	r4, [pc, #232]	; (800a264 <RCCEx_PLL2_Config+0xec>)
{
 800a17c:	4606      	mov	r6, r0
 800a17e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a180:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a182:	f003 0303 	and.w	r3, r3, #3
 800a186:	2b03      	cmp	r3, #3
 800a188:	d069      	beq.n	800a25e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a190:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a192:	f7fc fd73 	bl	8006c7c <HAL_GetTick>
 800a196:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	011a      	lsls	r2, r3, #4
 800a19c:	d44b      	bmi.n	800a236 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a19e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a1a0:	6832      	ldr	r2, [r6, #0]
 800a1a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1a6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a1aa:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1ac:	68b3      	ldr	r3, [r6, #8]
 800a1ae:	68f2      	ldr	r2, [r6, #12]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	3a01      	subs	r2, #1
 800a1b4:	025b      	lsls	r3, r3, #9
 800a1b6:	0412      	lsls	r2, r2, #16
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	6872      	ldr	r2, [r6, #4]
 800a1c2:	3a01      	subs	r2, #1
 800a1c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	6932      	ldr	r2, [r6, #16]
 800a1cc:	3a01      	subs	r2, #1
 800a1ce:	0612      	lsls	r2, r2, #24
 800a1d0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1da:	6972      	ldr	r2, [r6, #20]
 800a1dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a1e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1e6:	69b2      	ldr	r2, [r6, #24]
 800a1e8:	f023 0320 	bic.w	r3, r3, #32
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a1f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1f2:	f023 0310 	bic.w	r3, r3, #16
 800a1f6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a1f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1fa:	69f2      	ldr	r2, [r6, #28]
 800a1fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a200:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a204:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a208:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a20a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a20c:	f043 0310 	orr.w	r3, r3, #16
 800a210:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a214:	b9b5      	cbnz	r5, 800a244 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a21a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a21c:	4c11      	ldr	r4, [pc, #68]	; (800a264 <RCCEx_PLL2_Config+0xec>)
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a224:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a226:	f7fc fd29 	bl	8006c7c <HAL_GetTick>
 800a22a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	d50f      	bpl.n	800a252 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800a232:	2000      	movs	r0, #0
 800a234:	e005      	b.n	800a242 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a236:	f7fc fd21 	bl	8006c7c <HAL_GetTick>
 800a23a:	1bc0      	subs	r0, r0, r7
 800a23c:	2802      	cmp	r0, #2
 800a23e:	d9ab      	bls.n	800a198 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800a240:	2003      	movs	r0, #3
}
 800a242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a244:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a246:	bf0c      	ite	eq
 800a248:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a24c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800a250:	e7e3      	b.n	800a21a <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a252:	f7fc fd13 	bl	8006c7c <HAL_GetTick>
 800a256:	1b40      	subs	r0, r0, r5
 800a258:	2802      	cmp	r0, #2
 800a25a:	d9e7      	bls.n	800a22c <RCCEx_PLL2_Config+0xb4>
 800a25c:	e7f0      	b.n	800a240 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800a25e:	2001      	movs	r0, #1
 800a260:	e7ef      	b.n	800a242 <RCCEx_PLL2_Config+0xca>
 800a262:	bf00      	nop
 800a264:	58024400 	.word	0x58024400

0800a268 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a26a:	4c3a      	ldr	r4, [pc, #232]	; (800a354 <RCCEx_PLL3_Config+0xec>)
{
 800a26c:	4606      	mov	r6, r0
 800a26e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a272:	f003 0303 	and.w	r3, r3, #3
 800a276:	2b03      	cmp	r3, #3
 800a278:	d069      	beq.n	800a34e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a280:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a282:	f7fc fcfb 	bl	8006c7c <HAL_GetTick>
 800a286:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	009a      	lsls	r2, r3, #2
 800a28c:	d44b      	bmi.n	800a326 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a28e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a290:	6832      	ldr	r2, [r6, #0]
 800a292:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800a296:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a29a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a29c:	68b3      	ldr	r3, [r6, #8]
 800a29e:	68f2      	ldr	r2, [r6, #12]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	3a01      	subs	r2, #1
 800a2a4:	025b      	lsls	r3, r3, #9
 800a2a6:	0412      	lsls	r2, r2, #16
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	6872      	ldr	r2, [r6, #4]
 800a2b2:	3a01      	subs	r2, #1
 800a2b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	6932      	ldr	r2, [r6, #16]
 800a2bc:	3a01      	subs	r2, #1
 800a2be:	0612      	lsls	r2, r2, #24
 800a2c0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a2c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a2ca:	6972      	ldr	r2, [r6, #20]
 800a2cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a2d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a2d6:	69b2      	ldr	r2, [r6, #24]
 800a2d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a2e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a2e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a2ea:	69f2      	ldr	r2, [r6, #28]
 800a2ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a2f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a2f8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a2fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a300:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a302:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a304:	b9b5      	cbnz	r5, 800a334 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a30a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a30c:	4c11      	ldr	r4, [pc, #68]	; (800a354 <RCCEx_PLL3_Config+0xec>)
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a314:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a316:	f7fc fcb1 	bl	8006c7c <HAL_GetTick>
 800a31a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	d50f      	bpl.n	800a342 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800a322:	2000      	movs	r0, #0
 800a324:	e005      	b.n	800a332 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a326:	f7fc fca9 	bl	8006c7c <HAL_GetTick>
 800a32a:	1bc0      	subs	r0, r0, r7
 800a32c:	2802      	cmp	r0, #2
 800a32e:	d9ab      	bls.n	800a288 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800a330:	2003      	movs	r0, #3
}
 800a332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a334:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a336:	bf0c      	ite	eq
 800a338:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a33c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800a340:	e7e3      	b.n	800a30a <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a342:	f7fc fc9b 	bl	8006c7c <HAL_GetTick>
 800a346:	1b40      	subs	r0, r0, r5
 800a348:	2802      	cmp	r0, #2
 800a34a:	d9e7      	bls.n	800a31c <RCCEx_PLL3_Config+0xb4>
 800a34c:	e7f0      	b.n	800a330 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800a34e:	2001      	movs	r0, #1
 800a350:	e7ef      	b.n	800a332 <RCCEx_PLL3_Config+0xca>
 800a352:	bf00      	nop
 800a354:	58024400 	.word	0x58024400

0800a358 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a35c:	6803      	ldr	r3, [r0, #0]
{
 800a35e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a360:	0118      	lsls	r0, r3, #4
 800a362:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800a366:	d509      	bpl.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a368:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a36a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a36e:	d02f      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a370:	d813      	bhi.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800a372:	b1f3      	cbz	r3, 800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800a374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a378:	d021      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x66>
 800a37a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	05d9      	lsls	r1, r3, #23
 800a380:	f140 80ed 	bpl.w	800a55e <HAL_RCCEx_PeriphCLKConfig+0x206>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a384:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a386:	2b04      	cmp	r3, #4
 800a388:	f200 80e8 	bhi.w	800a55c <HAL_RCCEx_PeriphCLKConfig+0x204>
 800a38c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a390:	002d0026 	.word	0x002d0026
 800a394:	002b00e0 	.word	0x002b00e0
 800a398:	002b      	.short	0x002b
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a39a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a39e:	d1ec      	bne.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a3a0:	4aa9      	ldr	r2, [pc, #676]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3a2:	2600      	movs	r6, #0
 800a3a4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800a3a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a3a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a3ac:	430b      	orrs	r3, r1
 800a3ae:	6513      	str	r3, [r2, #80]	; 0x50
 800a3b0:	e7e4      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3b2:	4aa5      	ldr	r2, [pc, #660]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a3b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a3bc:	e7f0      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3be:	2102      	movs	r1, #2
 800a3c0:	f105 0008 	add.w	r0, r5, #8
 800a3c4:	f7ff fed8 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3c8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d1d6      	bne.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x24>
 800a3ce:	e7e7      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3d0:	2102      	movs	r1, #2
 800a3d2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a3d6:	f7ff ff47 	bl	800a268 <RCCEx_PLL3_Config>
 800a3da:	e7f5      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3dc:	4a9a      	ldr	r2, [pc, #616]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a3e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 800a3e6:	4634      	mov	r4, r6
 800a3e8:	e005      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	f105 0008 	add.w	r0, r5, #8
 800a3f0:	f7ff fec2 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3f4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a3f6:	2c00      	cmp	r4, #0
 800a3f8:	f040 80b3 	bne.w	800a562 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3fc:	4a92      	ldr	r2, [pc, #584]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3fe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800a400:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a402:	f023 0307 	bic.w	r3, r3, #7
 800a406:	430b      	orrs	r3, r1
 800a408:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	059a      	lsls	r2, r3, #22
 800a40e:	d50d      	bpl.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a410:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800a412:	2b80      	cmp	r3, #128	; 0x80
 800a414:	f000 80c3 	beq.w	800a59e <HAL_RCCEx_PeriphCLKConfig+0x246>
 800a418:	f200 80a5 	bhi.w	800a566 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 80b1 	beq.w	800a584 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800a422:	2b40      	cmp	r3, #64	; 0x40
 800a424:	f000 80b4 	beq.w	800a590 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800a428:	2601      	movs	r6, #1
 800a42a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	055b      	lsls	r3, r3, #21
 800a430:	d510      	bpl.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a432:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 800a436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a43a:	f000 80d6 	beq.w	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a43e:	f200 80b6 	bhi.w	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x256>
 800a442:	2b00      	cmp	r3, #0
 800a444:	f000 80c4 	beq.w	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800a448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a44c:	f000 80c6 	beq.w	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x284>
 800a450:	2601      	movs	r6, #1
 800a452:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	051f      	lsls	r7, r3, #20
 800a458:	d510      	bpl.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a45a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800a45e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a462:	f000 80e8 	beq.w	800a636 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a466:	f200 80c8 	bhi.w	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 80d6 	beq.w	800a61c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800a470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a474:	f000 80d8 	beq.w	800a628 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a478:	2601      	movs	r6, #1
 800a47a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	0198      	lsls	r0, r3, #6
 800a480:	d50d      	bpl.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 800a482:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a484:	2b20      	cmp	r3, #32
 800a486:	f000 80f3 	beq.w	800a670 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800a48a:	f200 80df 	bhi.w	800a64c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 80df 	beq.w	800a652 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800a494:	2b10      	cmp	r3, #16
 800a496:	f000 80e5 	beq.w	800a664 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800a49a:	2601      	movs	r6, #1
 800a49c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a49e:	682b      	ldr	r3, [r5, #0]
 800a4a0:	04d9      	lsls	r1, r3, #19
 800a4a2:	d50f      	bpl.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a4a4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800a4a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4aa:	f000 8107 	beq.w	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x364>
 800a4ae:	f200 80e8 	bhi.w	800a682 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 80f5 	beq.w	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a4b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4bc:	f000 80f7 	beq.w	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x356>
 800a4c0:	2601      	movs	r6, #1
 800a4c2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	049a      	lsls	r2, r3, #18
 800a4c8:	d50f      	bpl.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4d0:	f000 8115 	beq.w	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800a4d4:	f200 80fa 	bhi.w	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 8100 	beq.w	800a6de <HAL_RCCEx_PeriphCLKConfig+0x386>
 800a4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e2:	f000 8105 	beq.w	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800a4e6:	2601      	movs	r6, #1
 800a4e8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a4ea:	682b      	ldr	r3, [r5, #0]
 800a4ec:	045b      	lsls	r3, r3, #17
 800a4ee:	d510      	bpl.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a4f0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800a4f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4f8:	f000 8123 	beq.w	800a742 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a4fc:	f200 8107 	bhi.w	800a70e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 810d 	beq.w	800a720 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800a506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a50a:	f000 8113 	beq.w	800a734 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 800a50e:	2601      	movs	r6, #1
 800a510:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a512:	682b      	ldr	r3, [r5, #0]
 800a514:	041f      	lsls	r7, r3, #16
 800a516:	d50d      	bpl.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (PeriphClkInit->FdcanClockSelection)
 800a518:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a51a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a51e:	f000 8118 	beq.w	800a752 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a526:	f000 8122 	beq.w	800a76e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 8116 	beq.w	800a75c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800a530:	2601      	movs	r6, #1
 800a532:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	01d8      	lsls	r0, r3, #7
 800a538:	f140 8130 	bpl.w	800a79c <HAL_RCCEx_PeriphCLKConfig+0x444>
    switch (PeriphClkInit->FmcClockSelection)
 800a53c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800a53e:	2b03      	cmp	r3, #3
 800a540:	f200 8171 	bhi.w	800a826 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a544:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a548:	011c0121 	.word	0x011c0121
 800a54c:	01210168 	.word	0x01210168
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a550:	2100      	movs	r1, #0
 800a552:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a556:	f7ff fe87 	bl	800a268 <RCCEx_PLL3_Config>
 800a55a:	e74b      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a55c:	2601      	movs	r6, #1
 800a55e:	4634      	mov	r4, r6
 800a560:	e753      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800a562:	4626      	mov	r6, r4
 800a564:	e751      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a566:	2bc0      	cmp	r3, #192	; 0xc0
 800a568:	d003      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800a56a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a56e:	f47f af5b 	bne.w	800a428 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if (ret == HAL_OK)
 800a572:	b9d4      	cbnz	r4, 800a5aa <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a574:	4a34      	ldr	r2, [pc, #208]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a576:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800a578:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a57a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800a57e:	430b      	orrs	r3, r1
 800a580:	6513      	str	r3, [r2, #80]	; 0x50
 800a582:	e753      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a584:	4a30      	ldr	r2, [pc, #192]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a586:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a58c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a58e:	e7f0      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a590:	2100      	movs	r1, #0
 800a592:	f105 0008 	add.w	r0, r5, #8
 800a596:	f7ff fdef 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a59a:	4604      	mov	r4, r0
        break;
 800a59c:	e7e9      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a59e:	2100      	movs	r1, #0
 800a5a0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a5a4:	f7ff fe60 	bl	800a268 <RCCEx_PLL3_Config>
 800a5a8:	e7f7      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800a5aa:	4626      	mov	r6, r4
 800a5ac:	e73e      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a5ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5b2:	d003      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x264>
 800a5b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5b8:	f47f af4a 	bne.w	800a450 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if (ret == HAL_OK)
 800a5bc:	b9dc      	cbnz	r4, 800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a5be:	4a22      	ldr	r2, [pc, #136]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5c0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800a5c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a5c6:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800a5ca:	430b      	orrs	r3, r1
 800a5cc:	6593      	str	r3, [r2, #88]	; 0x58
 800a5ce:	e741      	b.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xfc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5d0:	4a1d      	ldr	r2, [pc, #116]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a5d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5d8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a5da:	e7ef      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5dc:	2100      	movs	r1, #0
 800a5de:	f105 0008 	add.w	r0, r5, #8
 800a5e2:	f7ff fdc9 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5e6:	4604      	mov	r4, r0
        break;
 800a5e8:	e7e8      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a5f0:	f7ff fe3a 	bl	800a268 <RCCEx_PLL3_Config>
 800a5f4:	e7f7      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800a5f6:	4626      	mov	r6, r4
 800a5f8:	e72c      	b.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a5fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5fe:	d003      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a604:	f47f af38 	bne.w	800a478 <HAL_RCCEx_PeriphCLKConfig+0x120>
    if (ret == HAL_OK)
 800a608:	b9dc      	cbnz	r4, 800a642 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a60a:	4a0f      	ldr	r2, [pc, #60]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a60c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800a610:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a612:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800a616:	430b      	orrs	r3, r1
 800a618:	6593      	str	r3, [r2, #88]	; 0x58
 800a61a:	e72f      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x124>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a61c:	4a0a      	ldr	r2, [pc, #40]	; (800a648 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a61e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a624:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a626:	e7ef      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a628:	2100      	movs	r1, #0
 800a62a:	f105 0008 	add.w	r0, r5, #8
 800a62e:	f7ff fda3 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a632:	4604      	mov	r4, r0
        break;
 800a634:	e7e8      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a636:	2100      	movs	r1, #0
 800a638:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a63c:	f7ff fe14 	bl	800a268 <RCCEx_PLL3_Config>
 800a640:	e7f7      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a642:	4626      	mov	r6, r4
 800a644:	e71a      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800a646:	bf00      	nop
 800a648:	58024400 	.word	0x58024400
    switch (PeriphClkInit->QspiClockSelection)
 800a64c:	2b30      	cmp	r3, #48	; 0x30
 800a64e:	f47f af24 	bne.w	800a49a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if (ret == HAL_OK)
 800a652:	b9a4      	cbnz	r4, 800a67e <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a654:	4aa0      	ldr	r2, [pc, #640]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a656:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800a658:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a65a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a65e:	430b      	orrs	r3, r1
 800a660:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a662:	e71c      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x146>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a664:	4a9c      	ldr	r2, [pc, #624]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a666:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a66c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a66e:	e7f0      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a670:	2102      	movs	r1, #2
 800a672:	f105 0008 	add.w	r0, r5, #8
 800a676:	f7ff fd7f 	bl	800a178 <RCCEx_PLL2_Config>
 800a67a:	4604      	mov	r4, r0
        break;
 800a67c:	e7e9      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800a67e:	4626      	mov	r6, r4
 800a680:	e70d      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a682:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a686:	d003      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x338>
 800a688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a68c:	f47f af18 	bne.w	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if (ret == HAL_OK)
 800a690:	b9d4      	cbnz	r4, 800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a692:	4a91      	ldr	r2, [pc, #580]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a694:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a696:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a69c:	430b      	orrs	r3, r1
 800a69e:	6513      	str	r3, [r2, #80]	; 0x50
 800a6a0:	e710      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6a2:	4a8d      	ldr	r2, [pc, #564]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a6a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a6a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6aa:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a6ac:	e7f0      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	f105 0008 	add.w	r0, r5, #8
 800a6b4:	f7ff fd60 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6b8:	4604      	mov	r4, r0
        break;
 800a6ba:	e7e9      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6bc:	2100      	movs	r1, #0
 800a6be:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a6c2:	f7ff fdd1 	bl	800a268 <RCCEx_PLL3_Config>
 800a6c6:	e7f7      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a6c8:	4626      	mov	r6, r4
 800a6ca:	e6fb      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a6cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6d0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800a6d4:	d003      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x386>
 800a6d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6da:	f47f af04 	bne.w	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    if (ret == HAL_OK)
 800a6de:	b9a4      	cbnz	r4, 800a70a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a6e0:	4a7d      	ldr	r2, [pc, #500]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a6e2:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800a6e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a6e6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800a6ea:	430b      	orrs	r3, r1
 800a6ec:	6513      	str	r3, [r2, #80]	; 0x50
 800a6ee:	e6fc      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x192>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	f105 0008 	add.w	r0, r5, #8
 800a6f6:	f7ff fd3f 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6fa:	4604      	mov	r4, r0
        break;
 800a6fc:	e7ef      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6fe:	2101      	movs	r1, #1
 800a700:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a704:	f7ff fdb0 	bl	800a268 <RCCEx_PLL3_Config>
 800a708:	e7f7      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800a70a:	4626      	mov	r6, r4
 800a70c:	e6ed      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a70e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a712:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a716:	d003      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800a718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a71c:	f47f aef7 	bne.w	800a50e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    if (ret == HAL_OK)
 800a720:	b9ac      	cbnz	r4, 800a74e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a722:	4a6d      	ldr	r2, [pc, #436]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a724:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800a728:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a72a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a72e:	430b      	orrs	r3, r1
 800a730:	6593      	str	r3, [r2, #88]	; 0x58
 800a732:	e6ee      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a734:	2101      	movs	r1, #1
 800a736:	f105 0008 	add.w	r0, r5, #8
 800a73a:	f7ff fd1d 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a73e:	4604      	mov	r4, r0
        break;
 800a740:	e7ee      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a742:	2101      	movs	r1, #1
 800a744:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a748:	f7ff fd8e 	bl	800a268 <RCCEx_PLL3_Config>
 800a74c:	e7f7      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a74e:	4626      	mov	r6, r4
 800a750:	e6df      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a752:	4a61      	ldr	r2, [pc, #388]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a754:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a75a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a75c:	b974      	cbnz	r4, 800a77c <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a75e:	4a5e      	ldr	r2, [pc, #376]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a760:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800a762:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a764:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a768:	430b      	orrs	r3, r1
 800a76a:	6513      	str	r3, [r2, #80]	; 0x50
 800a76c:	e6e2      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a76e:	2101      	movs	r1, #1
 800a770:	f105 0008 	add.w	r0, r5, #8
 800a774:	f7ff fd00 	bl	800a178 <RCCEx_PLL2_Config>
 800a778:	4604      	mov	r4, r0
        break;
 800a77a:	e7ef      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800a77c:	4626      	mov	r6, r4
 800a77e:	e6d9      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a780:	4a55      	ldr	r2, [pc, #340]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a782:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a788:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a78a:	2c00      	cmp	r4, #0
 800a78c:	d14e      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a78e:	4a52      	ldr	r2, [pc, #328]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a790:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800a792:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a794:	f023 0303 	bic.w	r3, r3, #3
 800a798:	430b      	orrs	r3, r1
 800a79a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	0259      	lsls	r1, r3, #9
 800a7a0:	d54e      	bpl.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7a2:	4f4e      	ldr	r7, [pc, #312]	; (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7aa:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a7ac:	f7fc fa66 	bl	8006c7c <HAL_GetTick>
 800a7b0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	05da      	lsls	r2, r3, #23
 800a7b6:	d53b      	bpl.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if (ret == HAL_OK)
 800a7b8:	2c00      	cmp	r4, #0
 800a7ba:	d16d      	bne.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x540>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a7bc:	4b46      	ldr	r3, [pc, #280]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a7be:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 800a7c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a7c4:	4042      	eors	r2, r0
 800a7c6:	f412 7f40 	tst.w	r2, #768	; 0x300
 800a7ca:	d00b      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a7cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a7d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7d4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800a7d8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a7da:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a7dc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800a7e0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800a7e2:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a7e4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a7e8:	d041      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a7ea:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 800a7ee:	493a      	ldr	r1, [pc, #232]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a7f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a7f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a7f8:	d14a      	bne.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800a7fa:	6908      	ldr	r0, [r1, #16]
 800a7fc:	4a38      	ldr	r2, [pc, #224]	; (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800a7fe:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800a802:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a806:	4302      	orrs	r2, r0
 800a808:	610a      	str	r2, [r1, #16]
 800a80a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a80e:	4a32      	ldr	r2, [pc, #200]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a810:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a812:	430b      	orrs	r3, r1
 800a814:	6713      	str	r3, [r2, #112]	; 0x70
 800a816:	e013      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a818:	2102      	movs	r1, #2
 800a81a:	f105 0008 	add.w	r0, r5, #8
 800a81e:	f7ff fcab 	bl	800a178 <RCCEx_PLL2_Config>
 800a822:	4604      	mov	r4, r0
        break;
 800a824:	e7b1      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch (PeriphClkInit->FmcClockSelection)
 800a826:	2601      	movs	r6, #1
 800a828:	4634      	mov	r4, r6
 800a82a:	e7b7      	b.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x444>
 800a82c:	4626      	mov	r6, r4
 800a82e:	e7b5      	b.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x444>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a830:	f7fc fa24 	bl	8006c7c <HAL_GetTick>
 800a834:	eba0 0008 	sub.w	r0, r0, r8
 800a838:	2864      	cmp	r0, #100	; 0x64
 800a83a:	d9ba      	bls.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
        ret = HAL_TIMEOUT;
 800a83c:	2603      	movs	r6, #3
 800a83e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	07d8      	lsls	r0, r3, #31
 800a844:	d508      	bpl.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a846:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800a848:	2b10      	cmp	r3, #16
 800a84a:	d03d      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800a84c:	d826      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x544>
 800a84e:	b35b      	cbz	r3, 800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a850:	2b08      	cmp	r3, #8
 800a852:	d032      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x562>
 800a854:	2601      	movs	r6, #1
 800a856:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	0799      	lsls	r1, r3, #30
 800a85c:	d550      	bpl.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a85e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a860:	2b05      	cmp	r3, #5
 800a862:	d863      	bhi.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a864:	e8df f003 	tbb	[pc, r3]
 800a868:	445c3e44 	.word	0x445c3e44
 800a86c:	4444      	.short	0x4444
        tickstart = HAL_GetTick();
 800a86e:	f7fc fa05 	bl	8006c7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a872:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 800a876:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a878:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a87c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800a880:	079b      	lsls	r3, r3, #30
 800a882:	d4b2      	bmi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x492>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a884:	f7fc f9fa 	bl	8006c7c <HAL_GetTick>
 800a888:	1bc0      	subs	r0, r0, r7
 800a88a:	4548      	cmp	r0, r9
 800a88c:	d9f6      	bls.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a88e:	e7d5      	b.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a890:	690a      	ldr	r2, [r1, #16]
 800a892:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800a896:	e7b7      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800a898:	4626      	mov	r6, r4
 800a89a:	e7d1      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a89c:	f023 0208 	bic.w	r2, r3, #8
 800a8a0:	2a20      	cmp	r2, #32
 800a8a2:	d001      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a8a4:	2b18      	cmp	r3, #24
 800a8a6:	d1d5      	bne.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if (ret == HAL_OK)
 800a8a8:	b9a4      	cbnz	r4, 800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a8aa:	4a0b      	ldr	r2, [pc, #44]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a8ac:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800a8ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a8b0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	6553      	str	r3, [r2, #84]	; 0x54
 800a8b8:	e7ce      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	f105 0008 	add.w	r0, r5, #8
 800a8c0:	f7ff fc5a 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8c4:	4604      	mov	r4, r0
        break;
 800a8c6:	e7ef      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a8ce:	f7ff fccb 	bl	800a268 <RCCEx_PLL3_Config>
 800a8d2:	e7f7      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800a8d4:	4626      	mov	r6, r4
 800a8d6:	e7bf      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800a8d8:	58024400 	.word	0x58024400
 800a8dc:	58024800 	.word	0x58024800
 800a8e0:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	f105 0008 	add.w	r0, r5, #8
 800a8ea:	f7ff fc45 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8ee:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a8f0:	b9fc      	cbnz	r4, 800a932 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a8f2:	4a11      	ldr	r2, [pc, #68]	; (800a938 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 800a8f4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 800a8f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a8f8:	f023 0307 	bic.w	r3, r3, #7
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	075a      	lsls	r2, r3, #29
 800a904:	d52b      	bpl.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a906:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800a90a:	2b05      	cmp	r3, #5
 800a90c:	f200 817c 	bhi.w	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800a910:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a914:	0014001a 	.word	0x0014001a
 800a918:	001a0174 	.word	0x001a0174
 800a91c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a920:	2101      	movs	r1, #1
 800a922:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a926:	f7ff fc9f 	bl	800a268 <RCCEx_PLL3_Config>
 800a92a:	e7e0      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x596>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a92c:	2601      	movs	r6, #1
 800a92e:	4634      	mov	r4, r6
 800a930:	e7e6      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a932:	4626      	mov	r6, r4
 800a934:	e7e4      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a936:	bf00      	nop
 800a938:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a93c:	2101      	movs	r1, #1
 800a93e:	f105 0008 	add.w	r0, r5, #8
 800a942:	f7ff fc19 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a946:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a948:	2c00      	cmp	r4, #0
 800a94a:	f040 8160 	bne.w	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a94e:	4aaa      	ldr	r2, [pc, #680]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800a950:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800a954:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a956:	f023 0307 	bic.w	r3, r3, #7
 800a95a:	430b      	orrs	r3, r1
 800a95c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a95e:	682b      	ldr	r3, [r5, #0]
 800a960:	069b      	lsls	r3, r3, #26
 800a962:	d510      	bpl.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a964:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800a968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a96c:	f000 816b 	beq.w	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a970:	f200 814f 	bhi.w	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 8155 	beq.w	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800a97a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a97e:	f000 815b 	beq.w	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 800a982:	2601      	movs	r6, #1
 800a984:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a986:	682b      	ldr	r3, [r5, #0]
 800a988:	065f      	lsls	r7, r3, #25
 800a98a:	d510      	bpl.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a98c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800a990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a994:	f000 8179 	beq.w	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x932>
 800a998:	f200 815d 	bhi.w	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f000 8163 	beq.w	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800a9a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9a6:	f000 8169 	beq.w	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a9aa:	2601      	movs	r6, #1
 800a9ac:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	0618      	lsls	r0, r3, #24
 800a9b2:	d510      	bpl.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a9b4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800a9b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9bc:	f000 8187 	beq.w	800acce <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a9c0:	f200 816b 	bhi.w	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x942>
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 8171 	beq.w	800acac <HAL_RCCEx_PeriphCLKConfig+0x954>
 800a9ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9ce:	f000 8177 	beq.w	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800a9d2:	2601      	movs	r6, #1
 800a9d4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a9d6:	682b      	ldr	r3, [r5, #0]
 800a9d8:	0719      	lsls	r1, r3, #28
 800a9da:	d514      	bpl.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a9dc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800a9e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e4:	d107      	bne.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9e6:	2102      	movs	r1, #2
 800a9e8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a9ec:	f7ff fc3c 	bl	800a268 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	bf18      	it	ne
 800a9f4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a9f6:	4a80      	ldr	r2, [pc, #512]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800a9f8:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800a9fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a9fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800aa02:	430b      	orrs	r3, r1
 800aa04:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa06:	682b      	ldr	r3, [r5, #0]
 800aa08:	06da      	lsls	r2, r3, #27
 800aa0a:	d514      	bpl.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa0c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800aa10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa14:	d107      	bne.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa16:	2102      	movs	r1, #2
 800aa18:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800aa1c:	f7ff fc24 	bl	800a268 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800aa20:	2800      	cmp	r0, #0
 800aa22:	bf18      	it	ne
 800aa24:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa26:	4a74      	ldr	r2, [pc, #464]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800aa28:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800aa2c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800aa2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa32:	430b      	orrs	r3, r1
 800aa34:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa36:	682b      	ldr	r3, [r5, #0]
 800aa38:	031b      	lsls	r3, r3, #12
 800aa3a:	d51b      	bpl.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x71c>
    switch (PeriphClkInit->AdcClockSelection)
 800aa3c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800aa40:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800aa44:	f000 814b 	beq.w	800acde <HAL_RCCEx_PeriphCLKConfig+0x986>
 800aa48:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800aa4c:	d007      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x706>
 800aa4e:	2900      	cmp	r1, #0
 800aa50:	f040 814b 	bne.w	800acea <HAL_RCCEx_PeriphCLKConfig+0x992>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa54:	f105 0008 	add.w	r0, r5, #8
 800aa58:	f7ff fb8e 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa5c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800aa5e:	2c00      	cmp	r4, #0
 800aa60:	f040 8146 	bne.w	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa64:	4a64      	ldr	r2, [pc, #400]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800aa66:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800aa6a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800aa6c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800aa70:	430b      	orrs	r3, r1
 800aa72:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	035f      	lsls	r7, r3, #13
 800aa78:	d51c      	bpl.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch (PeriphClkInit->UsbClockSelection)
 800aa7a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800aa7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa82:	f000 8137 	beq.w	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 800aa86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa8a:	d008      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x746>
 800aa8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa90:	f040 8137 	bne.w	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa94:	4a58      	ldr	r2, [pc, #352]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800aa96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800aa98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800aa9e:	2c00      	cmp	r4, #0
 800aaa0:	f040 8132 	bne.w	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aaa4:	4a54      	ldr	r2, [pc, #336]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800aaa6:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800aaaa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aaac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800aab0:	430b      	orrs	r3, r1
 800aab2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	03d8      	lsls	r0, r3, #15
 800aab8:	d509      	bpl.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->SdmmcClockSelection)
 800aaba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 8125 	beq.w	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 800aac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac6:	f000 812f 	beq.w	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aaca:	2601      	movs	r6, #1
 800aacc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aace:	682b      	ldr	r3, [r5, #0]
 800aad0:	0099      	lsls	r1, r3, #2
 800aad2:	d507      	bpl.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aad4:	2102      	movs	r1, #2
 800aad6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800aada:	f7ff fbc5 	bl	800a268 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800aade:	2800      	cmp	r0, #0
 800aae0:	bf18      	it	ne
 800aae2:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aae4:	e9d5 3100 	ldrd	r3, r1, [r5]
 800aae8:	039a      	lsls	r2, r3, #14
 800aaea:	d50b      	bpl.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->RngClockSelection)
 800aaec:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 800aaf0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800aaf4:	f000 812f 	beq.w	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 800aaf8:	f200 811f 	bhi.w	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f000 8122 	beq.w	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800ab02:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab04:	02df      	lsls	r7, r3, #11
 800ab06:	d506      	bpl.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab08:	483b      	ldr	r0, [pc, #236]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800ab0a:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800ab0c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ab0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ab12:	4322      	orrs	r2, r4
 800ab14:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ab16:	00dc      	lsls	r4, r3, #3
 800ab18:	d507      	bpl.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ab1a:	4837      	ldr	r0, [pc, #220]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800ab1c:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 800ab20:	6902      	ldr	r2, [r0, #16]
 800ab22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab26:	4322      	orrs	r2, r4
 800ab28:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab2a:	0298      	lsls	r0, r3, #10
 800ab2c:	d506      	bpl.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab2e:	4832      	ldr	r0, [pc, #200]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800ab30:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800ab32:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ab34:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ab38:	4322      	orrs	r2, r4
 800ab3a:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab3c:	005a      	lsls	r2, r3, #1
 800ab3e:	d509      	bpl.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab40:	4a2d      	ldr	r2, [pc, #180]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800ab42:	6910      	ldr	r0, [r2, #16]
 800ab44:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800ab48:	6110      	str	r0, [r2, #16]
 800ab4a:	6910      	ldr	r0, [r2, #16]
 800ab4c:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 800ab50:	4320      	orrs	r0, r4
 800ab52:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	da06      	bge.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ab58:	4827      	ldr	r0, [pc, #156]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800ab5a:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 800ab5c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800ab5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ab62:	4322      	orrs	r2, r4
 800ab64:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ab66:	021b      	lsls	r3, r3, #8
 800ab68:	d507      	bpl.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x822>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ab6a:	4a23      	ldr	r2, [pc, #140]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800ab6c:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 800ab70:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ab72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800ab76:	4303      	orrs	r3, r0
 800ab78:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ab7a:	07cf      	lsls	r7, r1, #31
 800ab7c:	d507      	bpl.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x836>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab7e:	2100      	movs	r1, #0
 800ab80:	f105 0008 	add.w	r0, r5, #8
 800ab84:	f7ff faf8 	bl	800a178 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	bf18      	it	ne
 800ab8c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ab8e:	686b      	ldr	r3, [r5, #4]
 800ab90:	079c      	lsls	r4, r3, #30
 800ab92:	d507      	bpl.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab94:	2101      	movs	r1, #1
 800ab96:	f105 0008 	add.w	r0, r5, #8
 800ab9a:	f7ff faed 	bl	800a178 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	bf18      	it	ne
 800aba2:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aba4:	686b      	ldr	r3, [r5, #4]
 800aba6:	0758      	lsls	r0, r3, #29
 800aba8:	d507      	bpl.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x862>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abaa:	2102      	movs	r1, #2
 800abac:	f105 0008 	add.w	r0, r5, #8
 800abb0:	f7ff fae2 	bl	800a178 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800abb4:	2800      	cmp	r0, #0
 800abb6:	bf18      	it	ne
 800abb8:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800abba:	686b      	ldr	r3, [r5, #4]
 800abbc:	0719      	lsls	r1, r3, #28
 800abbe:	d507      	bpl.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x878>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abc0:	2100      	movs	r1, #0
 800abc2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800abc6:	f7ff fb4f 	bl	800a268 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800abca:	2800      	cmp	r0, #0
 800abcc:	bf18      	it	ne
 800abce:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800abd0:	686b      	ldr	r3, [r5, #4]
 800abd2:	06da      	lsls	r2, r3, #27
 800abd4:	d507      	bpl.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abd6:	2101      	movs	r1, #1
 800abd8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800abdc:	f7ff fb44 	bl	800a268 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800abe0:	2800      	cmp	r0, #0
 800abe2:	bf18      	it	ne
 800abe4:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800abe6:	686b      	ldr	r3, [r5, #4]
 800abe8:	069b      	lsls	r3, r3, #26
 800abea:	f100 80bc 	bmi.w	800ad66 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    return HAL_OK;
 800abee:	1e30      	subs	r0, r6, #0
 800abf0:	bf18      	it	ne
 800abf2:	2001      	movne	r0, #1
}
 800abf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abf8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abfc:	2101      	movs	r1, #1
 800abfe:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ac02:	f7ff fb31 	bl	800a268 <RCCEx_PLL3_Config>
 800ac06:	e69e      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ac08:	2601      	movs	r6, #1
 800ac0a:	4634      	mov	r4, r6
 800ac0c:	e6a7      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x606>
 800ac0e:	4626      	mov	r6, r4
 800ac10:	e6a5      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ac12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ac16:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800ac1a:	d003      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800ac1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac20:	f47f aeaf 	bne.w	800a982 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    if (ret == HAL_OK)
 800ac24:	b9ac      	cbnz	r4, 800ac52 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac26:	4a55      	ldr	r2, [pc, #340]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800ac28:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800ac2c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ac2e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800ac32:	430b      	orrs	r3, r1
 800ac34:	6553      	str	r3, [r2, #84]	; 0x54
 800ac36:	e6a6      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac38:	2100      	movs	r1, #0
 800ac3a:	f105 0008 	add.w	r0, r5, #8
 800ac3e:	f7ff fa9b 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac42:	4604      	mov	r4, r0
        break;
 800ac44:	e7ee      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac46:	2102      	movs	r1, #2
 800ac48:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ac4c:	f7ff fb0c 	bl	800a268 <RCCEx_PLL3_Config>
 800ac50:	e7f7      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800ac52:	4626      	mov	r6, r4
 800ac54:	e697      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ac56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac5a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800ac5e:	d003      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800ac60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac64:	f47f aea1 	bne.w	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x652>
    if (ret == HAL_OK)
 800ac68:	b9ac      	cbnz	r4, 800ac96 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ac6a:	4a44      	ldr	r2, [pc, #272]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800ac6c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800ac70:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ac72:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800ac76:	430b      	orrs	r3, r1
 800ac78:	6593      	str	r3, [r2, #88]	; 0x58
 800ac7a:	e698      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	f105 0008 	add.w	r0, r5, #8
 800ac82:	f7ff fa79 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac86:	4604      	mov	r4, r0
        break;
 800ac88:	e7ee      	b.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x910>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac8a:	2102      	movs	r1, #2
 800ac8c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ac90:	f7ff faea 	bl	800a268 <RCCEx_PLL3_Config>
 800ac94:	e7f7      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800ac96:	4626      	mov	r6, r4
 800ac98:	e689      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ac9a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac9e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800aca2:	d003      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x954>
 800aca4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aca8:	f47f ae93 	bne.w	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    if (ret == HAL_OK)
 800acac:	b9ac      	cbnz	r4, 800acda <HAL_RCCEx_PeriphCLKConfig+0x982>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800acae:	4a33      	ldr	r2, [pc, #204]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800acb0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800acb4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800acb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800acba:	430b      	orrs	r3, r1
 800acbc:	6593      	str	r3, [r2, #88]	; 0x58
 800acbe:	e68a      	b.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acc0:	2100      	movs	r1, #0
 800acc2:	f105 0008 	add.w	r0, r5, #8
 800acc6:	f7ff fa57 	bl	800a178 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acca:	4604      	mov	r4, r0
        break;
 800accc:	e7ee      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x954>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acce:	2102      	movs	r1, #2
 800acd0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800acd4:	f7ff fac8 	bl	800a268 <RCCEx_PLL3_Config>
 800acd8:	e7f7      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x972>
 800acda:	4626      	mov	r6, r4
 800acdc:	e67b      	b.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acde:	2102      	movs	r1, #2
 800ace0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ace4:	f7ff fac0 	bl	800a268 <RCCEx_PLL3_Config>
 800ace8:	e6b8      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 800acea:	2601      	movs	r6, #1
 800acec:	4634      	mov	r4, r6
 800acee:	e6c1      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800acf0:	4626      	mov	r6, r4
 800acf2:	e6bf      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acf4:	2101      	movs	r1, #1
 800acf6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800acfa:	f7ff fab5 	bl	800a268 <RCCEx_PLL3_Config>
 800acfe:	4604      	mov	r4, r0
        break;
 800ad00:	e6cd      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (PeriphClkInit->UsbClockSelection)
 800ad02:	2601      	movs	r6, #1
 800ad04:	4634      	mov	r4, r6
 800ad06:	e6d5      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800ad08:	4626      	mov	r6, r4
 800ad0a:	e6d3      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad0c:	4a1b      	ldr	r2, [pc, #108]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800ad0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ad10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad14:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800ad16:	b974      	cbnz	r4, 800ad36 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad18:	4a18      	ldr	r2, [pc, #96]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800ad1a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800ad1c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ad1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad22:	430b      	orrs	r3, r1
 800ad24:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad26:	e6d2      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x776>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad28:	2102      	movs	r1, #2
 800ad2a:	f105 0008 	add.w	r0, r5, #8
 800ad2e:	f7ff fa23 	bl	800a178 <RCCEx_PLL2_Config>
 800ad32:	4604      	mov	r4, r0
        break;
 800ad34:	e7ef      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800ad36:	4626      	mov	r6, r4
 800ad38:	e6c9      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->RngClockSelection)
 800ad3a:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800ad3e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800ad42:	f47f aede 	bne.w	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    if (ret == HAL_OK)
 800ad46:	b964      	cbnz	r4, 800ad62 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad48:	4c0c      	ldr	r4, [pc, #48]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800ad4a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ad4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ad50:	4302      	orrs	r2, r0
 800ad52:	6562      	str	r2, [r4, #84]	; 0x54
 800ad54:	e6d6      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad56:	4f09      	ldr	r7, [pc, #36]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800ad58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ad5e:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 800ad60:	e7f1      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800ad62:	4626      	mov	r6, r4
 800ad64:	e6ce      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad66:	2102      	movs	r1, #2
 800ad68:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ad6c:	f7ff fa7c 	bl	800a268 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ad70:	2800      	cmp	r0, #0
 800ad72:	f43f af3c 	beq.w	800abee <HAL_RCCEx_PeriphCLKConfig+0x896>
  return HAL_ERROR;
 800ad76:	2001      	movs	r0, #1
 800ad78:	e73c      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800ad7a:	bf00      	nop
 800ad7c:	58024400 	.word	0x58024400

0800ad80 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800ad80:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad82:	f7ff f989 	bl	800a098 <HAL_RCC_GetHCLKFreq>
 800ad86:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800ad88:	4a05      	ldr	r2, [pc, #20]	; (800ada0 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800ad8a:	6a1b      	ldr	r3, [r3, #32]
 800ad8c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ad90:	5cd3      	ldrb	r3, [r2, r3]
 800ad92:	f003 031f 	and.w	r3, r3, #31
}
 800ad96:	40d8      	lsrs	r0, r3
 800ad98:	bd08      	pop	{r3, pc}
 800ad9a:	bf00      	nop
 800ad9c:	58024400 	.word	0x58024400
 800ada0:	08015d5c 	.word	0x08015d5c

0800ada4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ada4:	494f      	ldr	r1, [pc, #316]	; (800aee4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800ada6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ada8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800adaa:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800adac:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll2m != 0U)
 800adae:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800adb2:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800adb6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 800adb8:	f000 8090 	beq.w	800aedc <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adbc:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800adc0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800adc4:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adc8:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800add0:	4353      	muls	r3, r2
    switch (pllsource)
 800add2:	2c01      	cmp	r4, #1
 800add4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800add8:	ee06 3a90 	vmov	s13, r3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800addc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800ade0:	d06e      	beq.n	800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800ade2:	2c02      	cmp	r4, #2
 800ade4:	d05e      	beq.n	800aea4 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800ade6:	2c00      	cmp	r4, #0
 800ade8:	d16a      	bne.n	800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adea:	680b      	ldr	r3, [r1, #0]
 800adec:	069b      	lsls	r3, r3, #26
 800adee:	d547      	bpl.n	800ae80 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adf0:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adf2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adf4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800adf8:	4a3b      	ldr	r2, [pc, #236]	; (800aee8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adfe:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae00:	ee07 2a90 	vmov	s15, r2
 800ae04:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800ae08:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800ae0c:	ee07 3a10 	vmov	s14, r3
 800ae10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae14:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ae18:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ae1c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ae20:	4a30      	ldr	r2, [pc, #192]	; (800aee4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800ae22:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ae24:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ae28:	ee07 3a10 	vmov	s14, r3
 800ae2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae30:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ae34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ae38:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ae3c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ae40:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ae42:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ae46:	ee07 3a10 	vmov	s14, r3
 800ae4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae4e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ae52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ae56:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ae5a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ae5e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ae60:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ae64:	ee06 3a90 	vmov	s13, r3
 800ae68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ae6c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ae70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ae74:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800ae78:	ee17 3a90 	vmov	r3, s15
 800ae7c:	6083      	str	r3, [r0, #8]
}
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae80:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800ae82:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800aeec <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800ae86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae96:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae9a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800ae9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800aea2:	e7bd      	b.n	800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aea4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800aea6:	eddf 5a12 	vldr	s11, [pc, #72]	; 800aef0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800aeaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeba:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aebe:	e7ec      	b.n	800ae9a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aec0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800aec2:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800aec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aed6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aeda:	e7de      	b.n	800ae9a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aedc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aee0:	e7cc      	b.n	800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800aee2:	bf00      	nop
 800aee4:	58024400 	.word	0x58024400
 800aee8:	03d09000 	.word	0x03d09000
 800aeec:	4c742400 	.word	0x4c742400
 800aef0:	4bbebc20 	.word	0x4bbebc20
 800aef4:	4a742400 	.word	0x4a742400

0800aef8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aef8:	494f      	ldr	r1, [pc, #316]	; (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800aefa:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aefc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aefe:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800af00:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll3m != 0U)
 800af02:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800af06:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800af0a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
 800af0c:	f000 8090 	beq.w	800b030 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af10:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800af14:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800af18:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af1c:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800af24:	4353      	muls	r3, r2
    switch (pllsource)
 800af26:	2c01      	cmp	r4, #1
 800af28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800af2c:	ee06 3a90 	vmov	s13, r3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af30:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800af34:	d06e      	beq.n	800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800af36:	2c02      	cmp	r4, #2
 800af38:	d05e      	beq.n	800aff8 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800af3a:	2c00      	cmp	r4, #0
 800af3c:	d16a      	bne.n	800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af3e:	680b      	ldr	r3, [r1, #0]
 800af40:	069b      	lsls	r3, r3, #26
 800af42:	d547      	bpl.n	800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af44:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af48:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800af4c:	4a3b      	ldr	r2, [pc, #236]	; (800b03c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af52:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af54:	ee07 2a90 	vmov	s15, r2
 800af58:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800af5c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800af60:	ee07 3a10 	vmov	s14, r3
 800af64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800af68:	ee37 7a26 	vadd.f32	s14, s14, s13
 800af6c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800af70:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800af74:	4a30      	ldr	r2, [pc, #192]	; (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800af76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800af78:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800af7c:	ee07 3a10 	vmov	s14, r3
 800af80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800af84:	ee37 7a06 	vadd.f32	s14, s14, s12
 800af88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800af8c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800af90:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800af94:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800af96:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800af9a:	ee07 3a10 	vmov	s14, r3
 800af9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800afa2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800afa6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800afaa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800afae:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800afb2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800afb4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800afb8:	ee06 3a90 	vmov	s13, r3
 800afbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800afc0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800afc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800afc8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800afcc:	ee17 3a90 	vmov	r3, s15
 800afd0:	6083      	str	r3, [r0, #8]
}
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afd6:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800afda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afea:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afee:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800aff2:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800aff6:	e7bd      	b.n	800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800affa:	eddf 5a12 	vldr	s11, [pc, #72]	; 800b044 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800affe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b00e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b012:	e7ec      	b.n	800afee <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b016:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800b01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b02a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b02e:	e7de      	b.n	800afee <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b030:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b034:	e7cc      	b.n	800afd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800b036:	bf00      	nop
 800b038:	58024400 	.word	0x58024400
 800b03c:	03d09000 	.word	0x03d09000
 800b040:	4c742400 	.word	0x4c742400
 800b044:	4bbebc20 	.word	0x4bbebc20
 800b048:	4a742400 	.word	0x4a742400

0800b04c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b04c:	494f      	ldr	r1, [pc, #316]	; (800b18c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800b04e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b050:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b052:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b054:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll1m != 0U)
 800b056:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b05a:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b05e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  if (pll1m != 0U)
 800b060:	f000 8090 	beq.w	800b184 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b064:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b068:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b06c:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b070:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b078:	4353      	muls	r3, r2
    switch (pllsource)
 800b07a:	2c01      	cmp	r4, #1
 800b07c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b080:	ee06 3a90 	vmov	s13, r3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b084:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b088:	d04e      	beq.n	800b128 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800b08a:	2c02      	cmp	r4, #2
 800b08c:	d05e      	beq.n	800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 800b08e:	2c00      	cmp	r4, #0
 800b090:	d16a      	bne.n	800b168 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b092:	680b      	ldr	r3, [r1, #0]
 800b094:	069b      	lsls	r3, r3, #26
 800b096:	d567      	bpl.n	800b168 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b098:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b09a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b09c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b0a0:	4a3b      	ldr	r2, [pc, #236]	; (800b190 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0a6:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0a8:	ee07 2a90 	vmov	s15, r2
 800b0ac:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b0b0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b0b4:	ee07 3a10 	vmov	s14, r3
 800b0b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b0bc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b0c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b0c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b0c8:	4a30      	ldr	r2, [pc, #192]	; (800b18c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800b0ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b0cc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b0d0:	ee07 3a10 	vmov	s14, r3
 800b0d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b0d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b0dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b0e0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b0e4:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b0e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b0ea:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b0ee:	ee07 3a10 	vmov	s14, r3
 800b0f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b0f6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b0fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b0fe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b102:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b106:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b108:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b10c:	ee06 3a90 	vmov	s13, r3
 800b110:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b114:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b118:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b11c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b120:	ee17 3a90 	vmov	r3, s15
 800b124:	6083      	str	r3, [r0, #8]
}
 800b126:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b128:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800b12a:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800b12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b13e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b142:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b146:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b14a:	e7bd      	b.n	800b0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b14c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800b14e:	eddf 5a12 	vldr	s11, [pc, #72]	; 800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800b152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b162:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b166:	e7ec      	b.n	800b142 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b168:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800b16a:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800b16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b17e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b182:	e7de      	b.n	800b142 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b184:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b188:	e7cc      	b.n	800b124 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800b18a:	bf00      	nop
 800b18c:	58024400 	.word	0x58024400
 800b190:	03d09000 	.word	0x03d09000
 800b194:	4a742400 	.word	0x4a742400
 800b198:	4bbebc20 	.word	0x4bbebc20
 800b19c:	4c742400 	.word	0x4c742400

0800b1a0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800b1a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b1a2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800b1a6:	430b      	orrs	r3, r1
 800b1a8:	d114      	bne.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b1aa:	4b9e      	ldr	r3, [pc, #632]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b1ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1ae:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 800b1b2:	2a04      	cmp	r2, #4
 800b1b4:	d82f      	bhi.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800b1b6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b1ba:	0108      	.short	0x0108
 800b1bc:	0005001d 	.word	0x0005001d
 800b1c0:	00490165 	.word	0x00490165
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1c4:	6818      	ldr	r0, [r3, #0]
 800b1c6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b1ca:	d01b      	beq.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1cc:	a801      	add	r0, sp, #4
 800b1ce:	f7ff fe93 	bl	800aef8 <HAL_RCCEx_GetPLL3ClockFreq>
 800b1d2:	e016      	b.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b1d4:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	d11e      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b1dc:	4b91      	ldr	r3, [pc, #580]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b1de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1e0:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
    switch (saiclocksource)
 800b1e4:	2a80      	cmp	r2, #128	; 0x80
 800b1e6:	d0ed      	beq.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800b1e8:	d80f      	bhi.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800b1ea:	2a00      	cmp	r2, #0
 800b1ec:	f000 80ed 	beq.w	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800b1f0:	2a40      	cmp	r2, #64	; 0x40
    switch (srcclk)
 800b1f2:	d110      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1f4:	6818      	ldr	r0, [r3, #0]
 800b1f6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b1fa:	d003      	beq.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1fc:	a801      	add	r0, sp, #4
 800b1fe:	f7ff fdd1 	bl	800ada4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b202:	9801      	ldr	r0, [sp, #4]
}
 800b204:	b005      	add	sp, #20
 800b206:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800b20a:	2ac0      	cmp	r2, #192	; 0xc0
 800b20c:	f000 813a 	beq.w	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800b210:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    switch (saiclocksource)
 800b214:	d01a      	beq.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    switch (srcclk)
 800b216:	2000      	movs	r0, #0
  return frequency;
 800b218:	e7f4      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b21a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800b21e:	430b      	orrs	r3, r1
 800b220:	d133      	bne.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b222:	4b80      	ldr	r3, [pc, #512]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b224:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b226:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
    switch (saiclocksource)
 800b22a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800b22e:	d0c9      	beq.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800b230:	d805      	bhi.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800b232:	2a00      	cmp	r2, #0
 800b234:	f000 80c9 	beq.w	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800b238:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800b23c:	e7d9      	b.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b23e:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800b242:	f000 811f 	beq.w	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800b246:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b24a:	e7e3      	b.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b24c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b24e:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b250:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b254:	0748      	lsls	r0, r1, #29
 800b256:	d506      	bpl.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800b258:	b92a      	cbnz	r2, 800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b25a:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b25c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b260:	4871      	ldr	r0, [pc, #452]	; (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b262:	40d8      	lsrs	r0, r3
 800b264:	e7ce      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b266:	4b6f      	ldr	r3, [pc, #444]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b268:	6819      	ldr	r1, [r3, #0]
 800b26a:	05c9      	lsls	r1, r1, #23
 800b26c:	d503      	bpl.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800b26e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800b272:	f000 8109 	beq.w	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b27c:	d0c2      	beq.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSE_VALUE;
 800b27e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800b282:	486a      	ldr	r0, [pc, #424]	; (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b284:	bf18      	it	ne
 800b286:	2000      	movne	r0, #0
 800b288:	e7bc      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b28a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800b28e:	430b      	orrs	r3, r1
 800b290:	d125      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b292:	4b64      	ldr	r3, [pc, #400]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b294:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b296:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
    switch (saiclocksource)
 800b29a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800b29e:	d091      	beq.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800b2a0:	d805      	bhi.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	f000 8091 	beq.w	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800b2a8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800b2ac:	e7a1      	b.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b2ae:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800b2b2:	f000 80e7 	beq.w	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800b2b6:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
    switch (srcclk)
 800b2ba:	d1ac      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2be:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2c0:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2c4:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2c6:	0748      	lsls	r0, r1, #29
 800b2c8:	d501      	bpl.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 800b2ca:	2a00      	cmp	r2, #0
 800b2cc:	d0c6      	beq.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2ce:	05d9      	lsls	r1, r3, #23
 800b2d0:	d503      	bpl.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b2d2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800b2d6:	f000 80d7 	beq.w	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2da:	4b52      	ldr	r3, [pc, #328]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b2dc:	e7cb      	b.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b2de:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800b2e2:	430b      	orrs	r3, r1
 800b2e4:	d114      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b2e6:	4b4f      	ldr	r3, [pc, #316]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b2e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2ea:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    switch (srcclk)
 800b2ee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b2f2:	f43f af67 	beq.w	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800b2f6:	d804      	bhi.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800b2f8:	2a00      	cmp	r2, #0
 800b2fa:	d066      	beq.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800b2fc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b300:	e777      	b.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b302:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800b306:	f000 80bd 	beq.w	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800b30a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b30e:	e7d4      	b.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b310:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800b314:	430b      	orrs	r3, r1
 800b316:	d134      	bne.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b318:	4a42      	ldr	r2, [pc, #264]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b31a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b31c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800b320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b324:	f000 808a 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800b328:	d80d      	bhi.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 800b32a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b32e:	d016      	beq.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b334:	d01c      	beq.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b336:	2b00      	cmp	r3, #0
 800b338:	f47f af6d 	bne.w	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 800b33c:	b005      	add	sp, #20
 800b33e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800b342:	f7fe becb 	b.w	800a0dc <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 800b346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b34a:	d07e      	beq.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800b34c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    switch (srcclk)
 800b350:	f47f af61 	bne.w	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b354:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 800b356:	4b35      	ldr	r3, [pc, #212]	; (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b358:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b35c:	e079      	b.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b35e:	6810      	ldr	r0, [r2, #0]
 800b360:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b364:	f43f af4e 	beq.w	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b368:	a801      	add	r0, sp, #4
 800b36a:	f7ff fd1b 	bl	800ada4 <HAL_RCCEx_GetPLL2ClockFreq>
 800b36e:	e034      	b.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b370:	6810      	ldr	r0, [r2, #0]
 800b372:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b376:	f43f af45 	beq.w	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b37a:	a801      	add	r0, sp, #4
 800b37c:	f7ff fdbc 	bl	800aef8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b380:	e02b      	b.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b382:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800b386:	430b      	orrs	r3, r1
 800b388:	d117      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b38a:	4b26      	ldr	r3, [pc, #152]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b38c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b38e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    switch (srcclk)
 800b392:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b396:	d006      	beq.n	800b3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800b398:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800b39c:	d08e      	beq.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800b39e:	2a00      	cmp	r2, #0
 800b3a0:	f47f af39 	bne.w	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800b3a4:	e726      	b.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3a6:	6818      	ldr	r0, [r3, #0]
 800b3a8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b3ac:	f43f af2a 	beq.w	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3b0:	a801      	add	r0, sp, #4
 800b3b2:	f7ff fda1 	bl	800aef8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b3b6:	9803      	ldr	r0, [sp, #12]
 800b3b8:	e724      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b3ba:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800b3be:	430b      	orrs	r3, r1
 800b3c0:	d116      	bne.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b3c2:	4b18      	ldr	r3, [pc, #96]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b3c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800b3c6:	03d2      	lsls	r2, r2, #15
 800b3c8:	d409      	bmi.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b3d0:	f43f af18 	beq.w	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3d4:	a801      	add	r0, sp, #4
 800b3d6:	f7ff fe39 	bl	800b04c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3da:	9802      	ldr	r0, [sp, #8]
 800b3dc:	e712      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3de:	6818      	ldr	r0, [r3, #0]
 800b3e0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b3e4:	f43f af0e 	beq.w	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3e8:	a801      	add	r0, sp, #4
 800b3ea:	f7ff fcdb 	bl	800ada4 <HAL_RCCEx_GetPLL2ClockFreq>
 800b3ee:	e7e2      	b.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b3f0:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800b3f4:	430b      	orrs	r3, r1
 800b3f6:	d12f      	bne.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b3f8:	4a0a      	ldr	r2, [pc, #40]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b3fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b3fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800b400:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b404:	d01a      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800b406:	d813      	bhi.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 800b408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b40c:	d0a7      	beq.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b40e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b412:	d0ad      	beq.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b414:	2b00      	cmp	r3, #0
 800b416:	f47f aefe 	bne.w	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 800b41a:	b005      	add	sp, #20
 800b41c:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b420:	f7ff bcae 	b.w	800ad80 <HAL_RCCEx_GetD3PCLK1Freq>
 800b424:	58024400 	.word	0x58024400
 800b428:	03d09000 	.word	0x03d09000
 800b42c:	017d7840 	.word	0x017d7840
    switch (srcclk)
 800b430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b434:	d009      	beq.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800b436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b43a:	e789      	b.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b43c:	6810      	ldr	r0, [r2, #0]
 800b43e:	f010 0004 	ands.w	r0, r0, #4
 800b442:	f43f aedf 	beq.w	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b446:	6813      	ldr	r3, [r2, #0]
 800b448:	e708      	b.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b44a:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 800b44c:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800b44e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
          frequency = HSE_VALUE;
 800b452:	bf18      	it	ne
 800b454:	4618      	movne	r0, r3
 800b456:	e6d5      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b458:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800b45c:	4301      	orrs	r1, r0
 800b45e:	f47f aeda 	bne.w	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b462:	4a0b      	ldr	r2, [pc, #44]	; (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b464:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800b46a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b46e:	d007      	beq.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800b470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b474:	f43f af73 	beq.w	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f47f aecc 	bne.w	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800b47e:	e769      	b.n	800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b480:	6810      	ldr	r0, [r2, #0]
 800b482:	e7a3      	b.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b484:	4803      	ldr	r0, [pc, #12]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800b486:	e6bd      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = CSI_VALUE;
 800b488:	4800      	ldr	r0, [pc, #0]	; (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800b48a:	e6bb      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800b48c:	003d0900 	.word	0x003d0900
 800b490:	58024400 	.word	0x58024400
 800b494:	00bb8000 	.word	0x00bb8000

0800b498 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b498:	b538      	push	{r3, r4, r5, lr}

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b49a:	4a0a      	ldr	r2, [pc, #40]	; (800b4c4 <HAL_RTC_WaitForSynchro+0x2c>)
{
 800b49c:	4604      	mov	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b49e:	6803      	ldr	r3, [r0, #0]
 800b4a0:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800b4a2:	f7fb fbeb 	bl	8006c7c <HAL_GetTick>
 800b4a6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	069b      	lsls	r3, r3, #26
 800b4ae:	d501      	bpl.n	800b4b4 <HAL_RTC_WaitForSynchro+0x1c>
      {
        return HAL_TIMEOUT;
      }
    }

  return HAL_OK;
 800b4b0:	2000      	movs	r0, #0
}
 800b4b2:	bd38      	pop	{r3, r4, r5, pc}
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b4b4:	f7fb fbe2 	bl	8006c7c <HAL_GetTick>
 800b4b8:	1b40      	subs	r0, r0, r5
 800b4ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b4be:	d9f3      	bls.n	800b4a8 <HAL_RTC_WaitForSynchro+0x10>
        return HAL_TIMEOUT;
 800b4c0:	2003      	movs	r0, #3
 800b4c2:	e7f6      	b.n	800b4b2 <HAL_RTC_WaitForSynchro+0x1a>
 800b4c4:	0003ff5f 	.word	0x0003ff5f

0800b4c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b4ca:	6803      	ldr	r3, [r0, #0]
{
 800b4cc:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b4ce:	68dc      	ldr	r4, [r3, #12]
 800b4d0:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 800b4d4:	d118      	bne.n	800b508 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b4d6:	f04f 32ff 	mov.w	r2, #4294967295
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b4da:	2703      	movs	r7, #3
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b4dc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800b4de:	f7fb fbcd 	bl	8006c7c <HAL_GetTick>
 800b4e2:	4606      	mov	r6, r0
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	065b      	lsls	r3, r3, #25
 800b4ea:	d401      	bmi.n	800b4f0 <RTC_EnterInitMode+0x28>
 800b4ec:	2c03      	cmp	r4, #3
 800b4ee:	d101      	bne.n	800b4f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b4f4:	f7fb fbc2 	bl	8006c7c <HAL_GetTick>
 800b4f8:	1b80      	subs	r0, r0, r6
 800b4fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b4fe:	d9f1      	bls.n	800b4e4 <RTC_EnterInitMode+0x1c>
        status = HAL_TIMEOUT;
 800b500:	2403      	movs	r4, #3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b502:	f885 7021 	strb.w	r7, [r5, #33]	; 0x21
 800b506:	e7ed      	b.n	800b4e4 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800b508:	2400      	movs	r4, #0
 800b50a:	e7f1      	b.n	800b4f0 <RTC_EnterInitMode+0x28>

0800b50c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b50c:	b538      	push	{r3, r4, r5, lr}

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b50e:	4c0f      	ldr	r4, [pc, #60]	; (800b54c <RTC_ExitInitMode+0x40>)
{
 800b510:	4605      	mov	r5, r0
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b512:	68e3      	ldr	r3, [r4, #12]
 800b514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b518:	60e3      	str	r3, [r4, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b51a:	68a3      	ldr	r3, [r4, #8]
 800b51c:	069b      	lsls	r3, r3, #26
 800b51e:	d406      	bmi.n	800b52e <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b520:	f7ff ffba 	bl	800b498 <HAL_RTC_WaitForSynchro>
 800b524:	b110      	cbz	r0, 800b52c <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b526:	2003      	movs	r0, #3
 800b528:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800b52c:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	f023 0320 	bic.w	r3, r3, #32
 800b534:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b536:	f7ff ffaf 	bl	800b498 <HAL_RTC_WaitForSynchro>
 800b53a:	b110      	cbz	r0, 800b542 <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b53c:	2003      	movs	r0, #3
 800b53e:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	f043 0320 	orr.w	r3, r3, #32
 800b548:	60a3      	str	r3, [r4, #8]
  return status;
 800b54a:	e7ef      	b.n	800b52c <RTC_ExitInitMode+0x20>
 800b54c:	58004000 	.word	0x58004000

0800b550 <HAL_RTC_Init>:
{
 800b550:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 800b552:	4604      	mov	r4, r0
 800b554:	2800      	cmp	r0, #0
 800b556:	d045      	beq.n	800b5e4 <HAL_RTC_Init+0x94>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b558:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800b55c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b560:	b91b      	cbnz	r3, 800b56a <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 800b562:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800b566:	f7fa fa11 	bl	800598c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b56a:	2302      	movs	r3, #2
 800b56c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	06d2      	lsls	r2, r2, #27
 800b576:	d504      	bpl.n	800b582 <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 800b578:	2301      	movs	r3, #1
 800b57a:	2000      	movs	r0, #0
 800b57c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b580:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b582:	22ca      	movs	r2, #202	; 0xca
      status = RTC_EnterInitMode(hrtc);
 800b584:	4620      	mov	r0, r4
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b586:	625a      	str	r2, [r3, #36]	; 0x24
 800b588:	2253      	movs	r2, #83	; 0x53
 800b58a:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 800b58c:	f7ff ff9c 	bl	800b4c8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800b590:	bb10      	cbnz	r0, 800b5d8 <HAL_RTC_Init+0x88>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b592:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b594:	6920      	ldr	r0, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b596:	6893      	ldr	r3, [r2, #8]
 800b598:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b59c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5a0:	6093      	str	r3, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b5a2:	6863      	ldr	r3, [r4, #4]
 800b5a4:	6891      	ldr	r1, [r2, #8]
 800b5a6:	4303      	orrs	r3, r0
 800b5a8:	69a0      	ldr	r0, [r4, #24]
 800b5aa:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 800b5ac:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b5ae:	430b      	orrs	r3, r1
 800b5b0:	6093      	str	r3, [r2, #8]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b5b2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800b5b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b5ba:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 800b5bc:	f7ff ffa6 	bl	800b50c <RTC_ExitInitMode>
      if(status == HAL_OK)
 800b5c0:	b950      	cbnz	r0, 800b5d8 <HAL_RTC_Init+0x88>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b5c2:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b5c4:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b5c6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800b5c8:	f023 0303 	bic.w	r3, r3, #3
 800b5cc:	64d3      	str	r3, [r2, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b5ce:	69e3      	ldr	r3, [r4, #28]
 800b5d0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800b5d2:	432b      	orrs	r3, r5
 800b5d4:	430b      	orrs	r3, r1
 800b5d6:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	22ff      	movs	r2, #255	; 0xff
 800b5dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d0ca      	beq.n	800b578 <HAL_RTC_Init+0x28>
 800b5e2:	e7cd      	b.n	800b580 <HAL_RTC_Init+0x30>
  HAL_StatusTypeDef status = HAL_ERROR;
 800b5e4:	2001      	movs	r0, #1
 800b5e6:	e7cb      	b.n	800b580 <HAL_RTC_Init+0x30>

0800b5e8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800b5e8:	2300      	movs	r3, #0
  uint8_t  bcdlow  = Value;

  while (bcdlow >= 10U)
 800b5ea:	2809      	cmp	r0, #9
 800b5ec:	d803      	bhi.n	800b5f6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    bcdlow -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b5ee:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800b5f2:	b2c0      	uxtb	r0, r0
 800b5f4:	4770      	bx	lr
    bcdlow -= 10U;
 800b5f6:	380a      	subs	r0, #10
    bcdhigh++;
 800b5f8:	3301      	adds	r3, #1
    bcdlow -= 10U;
 800b5fa:	b2c0      	uxtb	r0, r0
 800b5fc:	e7f5      	b.n	800b5ea <RTC_ByteToBcd2+0x2>

0800b5fe <HAL_RTC_SetTime>:
{
 800b5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800b602:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800b606:	4605      	mov	r5, r0
 800b608:	460e      	mov	r6, r1
 800b60a:	4690      	mov	r8, r2
  __HAL_LOCK(hrtc);
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	f04f 0302 	mov.w	r3, #2
 800b612:	d054      	beq.n	800b6be <HAL_RTC_SetTime+0xc0>
 800b614:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b616:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b61a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 800b61c:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b620:	22ca      	movs	r2, #202	; 0xca
 800b622:	625a      	str	r2, [r3, #36]	; 0x24
 800b624:	2253      	movs	r2, #83	; 0x53
 800b626:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800b628:	f7ff ff4e 	bl	800b4c8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800b62c:	bb70      	cbnz	r0, 800b68c <HAL_RTC_SetTime+0x8e>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b62e:	6829      	ldr	r1, [r5, #0]
 800b630:	7830      	ldrb	r0, [r6, #0]
 800b632:	7874      	ldrb	r4, [r6, #1]
 800b634:	78b7      	ldrb	r7, [r6, #2]
 800b636:	688b      	ldr	r3, [r1, #8]
    if(Format == RTC_FORMAT_BIN)
 800b638:	f1b8 0f00 	cmp.w	r8, #0
 800b63c:	d132      	bne.n	800b6a4 <HAL_RTC_SetTime+0xa6>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b63e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
        sTime->TimeFormat = 0x00U;
 800b642:	bf08      	it	eq
 800b644:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b646:	f7ff ffcf 	bl	800b5e8 <RTC_ByteToBcd2>
 800b64a:	4680      	mov	r8, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b64c:	4620      	mov	r0, r4
 800b64e:	f7ff ffcb 	bl	800b5e8 <RTC_ByteToBcd2>
 800b652:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b654:	4638      	mov	r0, r7
 800b656:	f7ff ffc7 	bl	800b5e8 <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b65a:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b65c:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 800b660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800b664:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b668:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b66c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b670:	600b      	str	r3, [r1, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b672:	688b      	ldr	r3, [r1, #8]
 800b674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b678:	608b      	str	r3, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b67a:	688a      	ldr	r2, [r1, #8]
 800b67c:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 800b680:	4303      	orrs	r3, r0
    status = RTC_ExitInitMode(hrtc);
 800b682:	4628      	mov	r0, r5
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b684:	4313      	orrs	r3, r2
 800b686:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 800b688:	f7ff ff40 	bl	800b50c <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	22ff      	movs	r2, #255	; 0xff
 800b690:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800b692:	b910      	cbnz	r0, 800b69a <HAL_RTC_SetTime+0x9c>
    hrtc->State = HAL_RTC_STATE_READY;
 800b694:	2301      	movs	r3, #1
 800b696:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800b69a:	2300      	movs	r3, #0
 800b69c:	f885 3020 	strb.w	r3, [r5, #32]
}
 800b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b6a4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b6a8:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 800b6ac:	bf08      	it	eq
 800b6ae:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b6b0:	ea44 4300 	orr.w	r3, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b6b4:	78f2      	ldrb	r2, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b6b6:	433b      	orrs	r3, r7
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b6b8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800b6bc:	e7d4      	b.n	800b668 <HAL_RTC_SetTime+0x6a>
  __HAL_LOCK(hrtc);
 800b6be:	4618      	mov	r0, r3
 800b6c0:	e7ee      	b.n	800b6a0 <HAL_RTC_SetTime+0xa2>

0800b6c2 <HAL_RTC_SetDate>:
{
 800b6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800b6c4:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800b6c8:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	f04f 0302 	mov.w	r3, #2
 800b6d0:	d03d      	beq.n	800b74e <HAL_RTC_SetDate+0x8c>
 800b6d2:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b6d4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_LOCK(hrtc);
 800b6d8:	f885 0020 	strb.w	r0, [r5, #32]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b6dc:	780c      	ldrb	r4, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b6de:	78c8      	ldrb	r0, [r1, #3]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b6e0:	784e      	ldrb	r6, [r1, #1]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b6e2:	0364      	lsls	r4, r4, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b6e4:	788f      	ldrb	r7, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b6e6:	bba2      	cbnz	r2, 800b752 <HAL_RTC_SetDate+0x90>
 800b6e8:	06f3      	lsls	r3, r6, #27
 800b6ea:	d503      	bpl.n	800b6f4 <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b6ec:	f026 0610 	bic.w	r6, r6, #16
 800b6f0:	360a      	adds	r6, #10
 800b6f2:	704e      	strb	r6, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b6f4:	f7ff ff78 	bl	800b5e8 <RTC_ByteToBcd2>
 800b6f8:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b6fa:	7848      	ldrb	r0, [r1, #1]
 800b6fc:	f7ff ff74 	bl	800b5e8 <RTC_ByteToBcd2>
 800b700:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b702:	4638      	mov	r0, r7
 800b704:	f7ff ff70 	bl	800b5e8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b708:	ea40 0304 	orr.w	r3, r0, r4
 800b70c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b710:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	22ca      	movs	r2, #202	; 0xca
  status = RTC_EnterInitMode(hrtc);
 800b718:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b71a:	625a      	str	r2, [r3, #36]	; 0x24
 800b71c:	2253      	movs	r2, #83	; 0x53
 800b71e:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800b720:	f7ff fed2 	bl	800b4c8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800b724:	b940      	cbnz	r0, 800b738 <HAL_RTC_SetDate+0x76>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b726:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800b72a:	682a      	ldr	r2, [r5, #0]
    status = RTC_ExitInitMode(hrtc);
 800b72c:	4628      	mov	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b72e:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800b732:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 800b734:	f7ff feea 	bl	800b50c <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	22ff      	movs	r2, #255	; 0xff
 800b73c:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800b73e:	b910      	cbnz	r0, 800b746 <HAL_RTC_SetDate+0x84>
    hrtc->State = HAL_RTC_STATE_READY;
 800b740:	2301      	movs	r3, #1
 800b742:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800b746:	2300      	movs	r3, #0
 800b748:	f885 3020 	strb.w	r3, [r5, #32]
}
 800b74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 800b74e:	4618      	mov	r0, r3
 800b750:	e7fc      	b.n	800b74c <HAL_RTC_SetDate+0x8a>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b752:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800b756:	433c      	orrs	r4, r7
 800b758:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800b75c:	e7da      	b.n	800b714 <HAL_RTC_SetDate+0x52>

0800b75e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b75e:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & 0x0FU));
 800b760:	f000 000f 	and.w	r0, r0, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b764:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 800b768:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800b76c:	b2c0      	uxtb	r0, r0
 800b76e:	4770      	bx	lr

0800b770 <HAL_RTC_GetTime>:
{
 800b770:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b772:	6803      	ldr	r3, [r0, #0]
 800b774:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b776:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b778:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b77a:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b77c:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b780:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800b784:	f003 047f 	and.w	r4, r3, #127	; 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b788:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b78a:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b78e:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b792:	704d      	strb	r5, [r1, #1]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b794:	7008      	strb	r0, [r1, #0]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800b796:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b798:	70cb      	strb	r3, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800b79a:	b952      	cbnz	r2, 800b7b2 <HAL_RTC_GetTime+0x42>
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b79c:	f7ff ffdf 	bl	800b75e <RTC_Bcd2ToByte>
 800b7a0:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f7ff ffdb 	bl	800b75e <RTC_Bcd2ToByte>
 800b7a8:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f7ff ffd7 	bl	800b75e <RTC_Bcd2ToByte>
 800b7b0:	7088      	strb	r0, [r1, #2]
}
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	bd38      	pop	{r3, r4, r5, pc}

0800b7b6 <HAL_RTC_GetDate>:
{
 800b7b6:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b7b8:	6803      	ldr	r3, [r0, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b7bc:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b7c0:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b7c4:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b7c8:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b7cc:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b7ce:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b7d0:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b7d2:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800b7d4:	b952      	cbnz	r2, 800b7ec <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b7d6:	f7ff ffc2 	bl	800b75e <RTC_Bcd2ToByte>
 800b7da:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b7dc:	4628      	mov	r0, r5
 800b7de:	f7ff ffbe 	bl	800b75e <RTC_Bcd2ToByte>
 800b7e2:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7ff ffba 	bl	800b75e <RTC_Bcd2ToByte>
 800b7ea:	7088      	strb	r0, [r1, #2]
}
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}

0800b7f0 <HAL_RTCEx_BKUPWrite>:

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b7f0:	6803      	ldr	r3, [r0, #0]
 800b7f2:	3350      	adds	r3, #80	; 0x50
#endif /* TAMP */

  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b7f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800b7f8:	4770      	bx	lr

0800b7fa <HAL_RTCEx_BKUPRead>:

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b7fa:	6803      	ldr	r3, [r0, #0]
 800b7fc:	3350      	adds	r3, #80	; 0x50
#endif /* TAMP */

  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b7fe:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 800b802:	4770      	bx	lr

0800b804 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b804:	6a03      	ldr	r3, [r0, #32]
 800b806:	f023 0301 	bic.w	r3, r3, #1
{
 800b80a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b80c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b80e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b810:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b812:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b814:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800b818:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b81a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b81e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800b822:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b824:	688d      	ldr	r5, [r1, #8]
 800b826:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b828:	4d1b      	ldr	r5, [pc, #108]	; (800b898 <TIM_OC1_SetConfig+0x94>)
 800b82a:	42a8      	cmp	r0, r5
 800b82c:	d00f      	beq.n	800b84e <TIM_OC1_SetConfig+0x4a>
 800b82e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b832:	42a8      	cmp	r0, r5
 800b834:	d00b      	beq.n	800b84e <TIM_OC1_SetConfig+0x4a>
 800b836:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800b83a:	42a8      	cmp	r0, r5
 800b83c:	d007      	beq.n	800b84e <TIM_OC1_SetConfig+0x4a>
 800b83e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b842:	42a8      	cmp	r0, r5
 800b844:	d003      	beq.n	800b84e <TIM_OC1_SetConfig+0x4a>
 800b846:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b84a:	42a8      	cmp	r0, r5
 800b84c:	d11e      	bne.n	800b88c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b84e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800b850:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b854:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b856:	4d10      	ldr	r5, [pc, #64]	; (800b898 <TIM_OC1_SetConfig+0x94>)
 800b858:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b85a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b85e:	d00f      	beq.n	800b880 <TIM_OC1_SetConfig+0x7c>
 800b860:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b864:	42a8      	cmp	r0, r5
 800b866:	d00b      	beq.n	800b880 <TIM_OC1_SetConfig+0x7c>
 800b868:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800b86c:	42a8      	cmp	r0, r5
 800b86e:	d007      	beq.n	800b880 <TIM_OC1_SetConfig+0x7c>
 800b870:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b874:	42a8      	cmp	r0, r5
 800b876:	d003      	beq.n	800b880 <TIM_OC1_SetConfig+0x7c>
 800b878:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b87c:	42a8      	cmp	r0, r5
 800b87e:	d105      	bne.n	800b88c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b880:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b884:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800b888:	4334      	orrs	r4, r6
 800b88a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b88c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b88e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b890:	684a      	ldr	r2, [r1, #4]
 800b892:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b894:	6203      	str	r3, [r0, #32]
}
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	40010000 	.word	0x40010000

0800b89c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b89c:	6a03      	ldr	r3, [r0, #32]
 800b89e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800b8a2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8aa:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800b8b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b8b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800b8ba:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8bc:	688d      	ldr	r5, [r1, #8]
 800b8be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8c2:	4d16      	ldr	r5, [pc, #88]	; (800b91c <TIM_OC3_SetConfig+0x80>)
 800b8c4:	42a8      	cmp	r0, r5
 800b8c6:	d003      	beq.n	800b8d0 <TIM_OC3_SetConfig+0x34>
 800b8c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b8cc:	42a8      	cmp	r0, r5
 800b8ce:	d10d      	bne.n	800b8ec <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8d0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8da:	4d10      	ldr	r5, [pc, #64]	; (800b91c <TIM_OC3_SetConfig+0x80>)
 800b8dc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800b8de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e2:	d00e      	beq.n	800b902 <TIM_OC3_SetConfig+0x66>
 800b8e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b8e8:	42a8      	cmp	r0, r5
 800b8ea:	d00a      	beq.n	800b902 <TIM_OC3_SetConfig+0x66>
 800b8ec:	4d0c      	ldr	r5, [pc, #48]	; (800b920 <TIM_OC3_SetConfig+0x84>)
 800b8ee:	42a8      	cmp	r0, r5
 800b8f0:	d007      	beq.n	800b902 <TIM_OC3_SetConfig+0x66>
 800b8f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b8f6:	42a8      	cmp	r0, r5
 800b8f8:	d003      	beq.n	800b902 <TIM_OC3_SetConfig+0x66>
 800b8fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b8fe:	42a8      	cmp	r0, r5
 800b900:	d106      	bne.n	800b910 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b902:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b906:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800b90a:	4334      	orrs	r4, r6
 800b90c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b910:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b912:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b914:	684a      	ldr	r2, [r1, #4]
 800b916:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b918:	6203      	str	r3, [r0, #32]
}
 800b91a:	bd70      	pop	{r4, r5, r6, pc}
 800b91c:	40010000 	.word	0x40010000
 800b920:	40014000 	.word	0x40014000

0800b924 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b924:	6a03      	ldr	r3, [r0, #32]
 800b926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800b92a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b92c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b92e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b930:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b932:	69c2      	ldr	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b938:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b93a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b93e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b942:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b946:	688d      	ldr	r5, [r1, #8]
 800b948:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b94c:	4d0e      	ldr	r5, [pc, #56]	; (800b988 <TIM_OC4_SetConfig+0x64>)
 800b94e:	42a8      	cmp	r0, r5
 800b950:	d00f      	beq.n	800b972 <TIM_OC4_SetConfig+0x4e>
 800b952:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b956:	42a8      	cmp	r0, r5
 800b958:	d00b      	beq.n	800b972 <TIM_OC4_SetConfig+0x4e>
 800b95a:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800b95e:	42a8      	cmp	r0, r5
 800b960:	d007      	beq.n	800b972 <TIM_OC4_SetConfig+0x4e>
 800b962:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b966:	42a8      	cmp	r0, r5
 800b968:	d003      	beq.n	800b972 <TIM_OC4_SetConfig+0x4e>
 800b96a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b96e:	42a8      	cmp	r0, r5
 800b970:	d104      	bne.n	800b97c <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b972:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b976:	694d      	ldr	r5, [r1, #20]
 800b978:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b97c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b97e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b980:	684a      	ldr	r2, [r1, #4]
 800b982:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b984:	6203      	str	r3, [r0, #32]
}
 800b986:	bd30      	pop	{r4, r5, pc}
 800b988:	40010000 	.word	0x40010000

0800b98c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b98c:	6a03      	ldr	r3, [r0, #32]
 800b98e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800b992:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b994:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b996:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b998:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b99a:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b99c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800b9a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b9a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b9a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800b9aa:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b9ac:	688d      	ldr	r5, [r1, #8]
 800b9ae:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9b2:	4d0f      	ldr	r5, [pc, #60]	; (800b9f0 <TIM_OC5_SetConfig+0x64>)
 800b9b4:	42a8      	cmp	r0, r5
 800b9b6:	d00f      	beq.n	800b9d8 <TIM_OC5_SetConfig+0x4c>
 800b9b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b9bc:	42a8      	cmp	r0, r5
 800b9be:	d00b      	beq.n	800b9d8 <TIM_OC5_SetConfig+0x4c>
 800b9c0:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800b9c4:	42a8      	cmp	r0, r5
 800b9c6:	d007      	beq.n	800b9d8 <TIM_OC5_SetConfig+0x4c>
 800b9c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b9cc:	42a8      	cmp	r0, r5
 800b9ce:	d003      	beq.n	800b9d8 <TIM_OC5_SetConfig+0x4c>
 800b9d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b9d4:	42a8      	cmp	r0, r5
 800b9d6:	d104      	bne.n	800b9e2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9d8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b9dc:	694d      	ldr	r5, [r1, #20]
 800b9de:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9e2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9e4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b9e6:	684a      	ldr	r2, [r1, #4]
 800b9e8:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ea:	6203      	str	r3, [r0, #32]
}
 800b9ec:	bd30      	pop	{r4, r5, pc}
 800b9ee:	bf00      	nop
 800b9f0:	40010000 	.word	0x40010000

0800b9f4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b9f4:	6a03      	ldr	r3, [r0, #32]
 800b9f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800b9fa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b9fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba00:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba02:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba0a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ba0e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba12:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba16:	688d      	ldr	r5, [r1, #8]
 800ba18:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba1c:	4d0e      	ldr	r5, [pc, #56]	; (800ba58 <TIM_OC6_SetConfig+0x64>)
 800ba1e:	42a8      	cmp	r0, r5
 800ba20:	d00f      	beq.n	800ba42 <TIM_OC6_SetConfig+0x4e>
 800ba22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ba26:	42a8      	cmp	r0, r5
 800ba28:	d00b      	beq.n	800ba42 <TIM_OC6_SetConfig+0x4e>
 800ba2a:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800ba2e:	42a8      	cmp	r0, r5
 800ba30:	d007      	beq.n	800ba42 <TIM_OC6_SetConfig+0x4e>
 800ba32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ba36:	42a8      	cmp	r0, r5
 800ba38:	d003      	beq.n	800ba42 <TIM_OC6_SetConfig+0x4e>
 800ba3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ba3e:	42a8      	cmp	r0, r5
 800ba40:	d104      	bne.n	800ba4c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba42:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba46:	694d      	ldr	r5, [r1, #20]
 800ba48:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba4c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba4e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ba50:	684a      	ldr	r2, [r1, #4]
 800ba52:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba54:	6203      	str	r3, [r0, #32]
}
 800ba56:	bd30      	pop	{r4, r5, pc}
 800ba58:	40010000 	.word	0x40010000

0800ba5c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800ba5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d133      	bne.n	800bacc <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800ba64:	2302      	movs	r3, #2
 800ba66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba6a:	6803      	ldr	r3, [r0, #0]
 800ba6c:	68da      	ldr	r2, [r3, #12]
 800ba6e:	f042 0201 	orr.w	r2, r2, #1
 800ba72:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba74:	4a16      	ldr	r2, [pc, #88]	; (800bad0 <HAL_TIM_Base_Start_IT+0x74>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d01a      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x54>
 800ba7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba7e:	d017      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x54>
 800ba80:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d013      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x54>
 800ba88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00f      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x54>
 800ba90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00b      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x54>
 800ba98:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d007      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x54>
 800baa0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d003      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x54>
 800baa8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800baac:	4293      	cmp	r3, r2
 800baae:	d107      	bne.n	800bac0 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bab0:	6899      	ldr	r1, [r3, #8]
 800bab2:	4a08      	ldr	r2, [pc, #32]	; (800bad4 <HAL_TIM_Base_Start_IT+0x78>)
 800bab4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bab6:	2a06      	cmp	r2, #6
 800bab8:	d006      	beq.n	800bac8 <HAL_TIM_Base_Start_IT+0x6c>
 800baba:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800babe:	d003      	beq.n	800bac8 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	f042 0201 	orr.w	r2, r2, #1
 800bac6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800bac8:	2000      	movs	r0, #0
}
 800baca:	4770      	bx	lr
    return HAL_ERROR;
 800bacc:	2001      	movs	r0, #1
 800bace:	4770      	bx	lr
 800bad0:	40010000 	.word	0x40010000
 800bad4:	00010007 	.word	0x00010007

0800bad8 <HAL_TIM_PWM_MspInit>:
 800bad8:	4770      	bx	lr

0800bada <HAL_TIM_OC_DelayElapsedCallback>:
 800bada:	4770      	bx	lr

0800badc <HAL_TIM_IC_CaptureCallback>:
 800badc:	4770      	bx	lr

0800bade <HAL_TIM_PWM_PulseFinishedCallback>:
 800bade:	4770      	bx	lr

0800bae0 <HAL_TIM_TriggerCallback>:
 800bae0:	4770      	bx	lr

0800bae2 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bae2:	6803      	ldr	r3, [r0, #0]
 800bae4:	691a      	ldr	r2, [r3, #16]
 800bae6:	0791      	lsls	r1, r2, #30
{
 800bae8:	b510      	push	{r4, lr}
 800baea:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800baec:	d50f      	bpl.n	800bb0e <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800baee:	68da      	ldr	r2, [r3, #12]
 800baf0:	0792      	lsls	r2, r2, #30
 800baf2:	d50c      	bpl.n	800bb0e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800baf4:	f06f 0202 	mvn.w	r2, #2
 800baf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bafa:	2201      	movs	r2, #1
 800bafc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	0799      	lsls	r1, r3, #30
 800bb02:	f000 8085 	beq.w	800bc10 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800bb06:	f7ff ffe9 	bl	800badc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	691a      	ldr	r2, [r3, #16]
 800bb12:	0752      	lsls	r2, r2, #29
 800bb14:	d510      	bpl.n	800bb38 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb16:	68da      	ldr	r2, [r3, #12]
 800bb18:	0750      	lsls	r0, r2, #29
 800bb1a:	d50d      	bpl.n	800bb38 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb1c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800bb20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb24:	2202      	movs	r2, #2
 800bb26:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800bb2e:	d075      	beq.n	800bc1c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800bb30:	f7ff ffd4 	bl	800badc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb34:	2300      	movs	r3, #0
 800bb36:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	691a      	ldr	r2, [r3, #16]
 800bb3c:	0711      	lsls	r1, r2, #28
 800bb3e:	d50f      	bpl.n	800bb60 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb40:	68da      	ldr	r2, [r3, #12]
 800bb42:	0712      	lsls	r2, r2, #28
 800bb44:	d50c      	bpl.n	800bb60 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb46:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800bb4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb4e:	2204      	movs	r2, #4
 800bb50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	079b      	lsls	r3, r3, #30
 800bb56:	d067      	beq.n	800bc28 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800bb58:	f7ff ffc0 	bl	800badc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	691a      	ldr	r2, [r3, #16]
 800bb64:	06d0      	lsls	r0, r2, #27
 800bb66:	d510      	bpl.n	800bb8a <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb68:	68da      	ldr	r2, [r3, #12]
 800bb6a:	06d1      	lsls	r1, r2, #27
 800bb6c:	d50d      	bpl.n	800bb8a <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb6e:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800bb72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb76:	2208      	movs	r2, #8
 800bb78:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800bb80:	d058      	beq.n	800bc34 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800bb82:	f7ff ffab 	bl	800badc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb86:	2300      	movs	r3, #0
 800bb88:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	691a      	ldr	r2, [r3, #16]
 800bb8e:	07d2      	lsls	r2, r2, #31
 800bb90:	d508      	bpl.n	800bba4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	07d0      	lsls	r0, r2, #31
 800bb96:	d505      	bpl.n	800bba4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb98:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bba0:	f7f9 fdf2 	bl	8005788 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	691a      	ldr	r2, [r3, #16]
 800bba8:	0611      	lsls	r1, r2, #24
 800bbaa:	d508      	bpl.n	800bbbe <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbac:	68da      	ldr	r2, [r3, #12]
 800bbae:	0612      	lsls	r2, r2, #24
 800bbb0:	d505      	bpl.n	800bbbe <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800bbb6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bbba:	f000 fb84 	bl	800c2c6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	691a      	ldr	r2, [r3, #16]
 800bbc2:	05d0      	lsls	r0, r2, #23
 800bbc4:	d508      	bpl.n	800bbd8 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbc6:	68da      	ldr	r2, [r3, #12]
 800bbc8:	0611      	lsls	r1, r2, #24
 800bbca:	d505      	bpl.n	800bbd8 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbcc:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800bbd0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800bbd4:	f000 fb78 	bl	800c2c8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	691a      	ldr	r2, [r3, #16]
 800bbdc:	0652      	lsls	r2, r2, #25
 800bbde:	d508      	bpl.n	800bbf2 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbe0:	68da      	ldr	r2, [r3, #12]
 800bbe2:	0650      	lsls	r0, r2, #25
 800bbe4:	d505      	bpl.n	800bbf2 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800bbea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bbee:	f7ff ff77 	bl	800bae0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	691a      	ldr	r2, [r3, #16]
 800bbf6:	0691      	lsls	r1, r2, #26
 800bbf8:	d522      	bpl.n	800bc40 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bbfa:	68da      	ldr	r2, [r3, #12]
 800bbfc:	0692      	lsls	r2, r2, #26
 800bbfe:	d51f      	bpl.n	800bc40 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc00:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800bc04:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc06:	611a      	str	r2, [r3, #16]
}
 800bc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800bc0c:	f000 bb5a 	b.w	800c2c4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc10:	f7ff ff63 	bl	800bada <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc14:	4620      	mov	r0, r4
 800bc16:	f7ff ff62 	bl	800bade <HAL_TIM_PWM_PulseFinishedCallback>
 800bc1a:	e776      	b.n	800bb0a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc1c:	f7ff ff5d 	bl	800bada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc20:	4620      	mov	r0, r4
 800bc22:	f7ff ff5c 	bl	800bade <HAL_TIM_PWM_PulseFinishedCallback>
 800bc26:	e785      	b.n	800bb34 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc28:	f7ff ff57 	bl	800bada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f7ff ff56 	bl	800bade <HAL_TIM_PWM_PulseFinishedCallback>
 800bc32:	e793      	b.n	800bb5c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc34:	f7ff ff51 	bl	800bada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f7ff ff50 	bl	800bade <HAL_TIM_PWM_PulseFinishedCallback>
 800bc3e:	e7a2      	b.n	800bb86 <HAL_TIM_IRQHandler+0xa4>
}
 800bc40:	bd10      	pop	{r4, pc}
	...

0800bc44 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc44:	4a30      	ldr	r2, [pc, #192]	; (800bd08 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800bc46:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc48:	4290      	cmp	r0, r2
 800bc4a:	d012      	beq.n	800bc72 <TIM_Base_SetConfig+0x2e>
 800bc4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bc50:	d00f      	beq.n	800bc72 <TIM_Base_SetConfig+0x2e>
 800bc52:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bc56:	4290      	cmp	r0, r2
 800bc58:	d00b      	beq.n	800bc72 <TIM_Base_SetConfig+0x2e>
 800bc5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc5e:	4290      	cmp	r0, r2
 800bc60:	d007      	beq.n	800bc72 <TIM_Base_SetConfig+0x2e>
 800bc62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc66:	4290      	cmp	r0, r2
 800bc68:	d003      	beq.n	800bc72 <TIM_Base_SetConfig+0x2e>
 800bc6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800bc6e:	4290      	cmp	r0, r2
 800bc70:	d119      	bne.n	800bca6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800bc72:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800bc78:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc7a:	4a23      	ldr	r2, [pc, #140]	; (800bd08 <TIM_Base_SetConfig+0xc4>)
 800bc7c:	4290      	cmp	r0, r2
 800bc7e:	d01d      	beq.n	800bcbc <TIM_Base_SetConfig+0x78>
 800bc80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bc84:	d01a      	beq.n	800bcbc <TIM_Base_SetConfig+0x78>
 800bc86:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bc8a:	4290      	cmp	r0, r2
 800bc8c:	d016      	beq.n	800bcbc <TIM_Base_SetConfig+0x78>
 800bc8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc92:	4290      	cmp	r0, r2
 800bc94:	d012      	beq.n	800bcbc <TIM_Base_SetConfig+0x78>
 800bc96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc9a:	4290      	cmp	r0, r2
 800bc9c:	d00e      	beq.n	800bcbc <TIM_Base_SetConfig+0x78>
 800bc9e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800bca2:	4290      	cmp	r0, r2
 800bca4:	d00a      	beq.n	800bcbc <TIM_Base_SetConfig+0x78>
 800bca6:	4a19      	ldr	r2, [pc, #100]	; (800bd0c <TIM_Base_SetConfig+0xc8>)
 800bca8:	4290      	cmp	r0, r2
 800bcaa:	d007      	beq.n	800bcbc <TIM_Base_SetConfig+0x78>
 800bcac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bcb0:	4290      	cmp	r0, r2
 800bcb2:	d003      	beq.n	800bcbc <TIM_Base_SetConfig+0x78>
 800bcb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bcb8:	4290      	cmp	r0, r2
 800bcba:	d103      	bne.n	800bcc4 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcc0:	68ca      	ldr	r2, [r1, #12]
 800bcc2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcc4:	694a      	ldr	r2, [r1, #20]
 800bcc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcca:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800bccc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcce:	688b      	ldr	r3, [r1, #8]
 800bcd0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800bcd2:	680b      	ldr	r3, [r1, #0]
 800bcd4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcd6:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <TIM_Base_SetConfig+0xc4>)
 800bcd8:	4298      	cmp	r0, r3
 800bcda:	d00f      	beq.n	800bcfc <TIM_Base_SetConfig+0xb8>
 800bcdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bce0:	4298      	cmp	r0, r3
 800bce2:	d00b      	beq.n	800bcfc <TIM_Base_SetConfig+0xb8>
 800bce4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bce8:	4298      	cmp	r0, r3
 800bcea:	d007      	beq.n	800bcfc <TIM_Base_SetConfig+0xb8>
 800bcec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcf0:	4298      	cmp	r0, r3
 800bcf2:	d003      	beq.n	800bcfc <TIM_Base_SetConfig+0xb8>
 800bcf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcf8:	4298      	cmp	r0, r3
 800bcfa:	d101      	bne.n	800bd00 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800bcfc:	690b      	ldr	r3, [r1, #16]
 800bcfe:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800bd00:	2301      	movs	r3, #1
 800bd02:	6143      	str	r3, [r0, #20]
}
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	40010000 	.word	0x40010000
 800bd0c:	40014000 	.word	0x40014000

0800bd10 <HAL_TIM_Base_Init>:
{
 800bd10:	b510      	push	{r4, lr}
  if (htim == NULL)
 800bd12:	4604      	mov	r4, r0
 800bd14:	b350      	cbz	r0, 800bd6c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bd16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bd1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bd1e:	b91b      	cbnz	r3, 800bd28 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800bd20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800bd24:	f7fa fbc6 	bl	80064b4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800bd28:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd2a:	6820      	ldr	r0, [r4, #0]
 800bd2c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bd2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd32:	f7ff ff87 	bl	800bc44 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd36:	2301      	movs	r3, #1
  return HAL_OK;
 800bd38:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd3a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800bd42:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800bd46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800bd4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800bd4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800bd5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800bd62:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800bd66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bd6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bd6c:	2001      	movs	r0, #1
 800bd6e:	e7fc      	b.n	800bd6a <HAL_TIM_Base_Init+0x5a>

0800bd70 <HAL_TIM_PWM_Init>:
{
 800bd70:	b510      	push	{r4, lr}
  if (htim == NULL)
 800bd72:	4604      	mov	r4, r0
 800bd74:	b350      	cbz	r0, 800bdcc <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bd76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bd7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bd7e:	b91b      	cbnz	r3, 800bd88 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800bd80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800bd84:	f7ff fea8 	bl	800bad8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800bd88:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd8a:	6820      	ldr	r0, [r4, #0]
 800bd8c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bd8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd92:	f7ff ff57 	bl	800bc44 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd96:	2301      	movs	r3, #1
  return HAL_OK;
 800bd98:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd9a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800bda2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800bda6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800bdaa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800bdae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdb6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800bdba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdbe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800bdc2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800bdc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bdca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bdcc:	2001      	movs	r0, #1
 800bdce:	e7fc      	b.n	800bdca <HAL_TIM_PWM_Init+0x5a>

0800bdd0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdd0:	6a03      	ldr	r3, [r0, #32]
 800bdd2:	f023 0310 	bic.w	r3, r3, #16
{
 800bdd6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdd8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800bdda:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800bddc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800bdde:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800bde0:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bde4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bde6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800bdea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bdf2:	688d      	ldr	r5, [r1, #8]
 800bdf4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bdf8:	4d16      	ldr	r5, [pc, #88]	; (800be54 <TIM_OC2_SetConfig+0x84>)
 800bdfa:	42a8      	cmp	r0, r5
 800bdfc:	d003      	beq.n	800be06 <TIM_OC2_SetConfig+0x36>
 800bdfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800be02:	42a8      	cmp	r0, r5
 800be04:	d10d      	bne.n	800be22 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be06:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800be08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be10:	4d10      	ldr	r5, [pc, #64]	; (800be54 <TIM_OC2_SetConfig+0x84>)
 800be12:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800be14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be18:	d00e      	beq.n	800be38 <TIM_OC2_SetConfig+0x68>
 800be1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800be1e:	42a8      	cmp	r0, r5
 800be20:	d00a      	beq.n	800be38 <TIM_OC2_SetConfig+0x68>
 800be22:	4d0d      	ldr	r5, [pc, #52]	; (800be58 <TIM_OC2_SetConfig+0x88>)
 800be24:	42a8      	cmp	r0, r5
 800be26:	d007      	beq.n	800be38 <TIM_OC2_SetConfig+0x68>
 800be28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800be2c:	42a8      	cmp	r0, r5
 800be2e:	d003      	beq.n	800be38 <TIM_OC2_SetConfig+0x68>
 800be30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800be34:	42a8      	cmp	r0, r5
 800be36:	d106      	bne.n	800be46 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be38:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be3c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800be40:	4334      	orrs	r4, r6
 800be42:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800be46:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800be48:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800be4a:	684a      	ldr	r2, [r1, #4]
 800be4c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800be4e:	6203      	str	r3, [r0, #32]
}
 800be50:	bd70      	pop	{r4, r5, r6, pc}
 800be52:	bf00      	nop
 800be54:	40010000 	.word	0x40010000
 800be58:	40014000 	.word	0x40014000

0800be5c <HAL_TIM_PWM_ConfigChannel>:
{
 800be5c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800be5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800be62:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800be64:	2b01      	cmp	r3, #1
 800be66:	d074      	beq.n	800bf52 <HAL_TIM_PWM_ConfigChannel+0xf6>
 800be68:	2301      	movs	r3, #1
  switch (Channel)
 800be6a:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800be6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800be70:	d04f      	beq.n	800bf12 <HAL_TIM_PWM_ConfigChannel+0xb6>
 800be72:	d809      	bhi.n	800be88 <HAL_TIM_PWM_ConfigChannel+0x2c>
 800be74:	2a04      	cmp	r2, #4
 800be76:	d02c      	beq.n	800bed2 <HAL_TIM_PWM_ConfigChannel+0x76>
 800be78:	2a08      	cmp	r2, #8
 800be7a:	d03a      	beq.n	800bef2 <HAL_TIM_PWM_ConfigChannel+0x96>
 800be7c:	b1c2      	cbz	r2, 800beb0 <HAL_TIM_PWM_ConfigChannel+0x54>
 800be7e:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 800be80:	2300      	movs	r3, #0
 800be82:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800be86:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800be88:	2a10      	cmp	r2, #16
 800be8a:	d052      	beq.n	800bf32 <HAL_TIM_PWM_ConfigChannel+0xd6>
 800be8c:	2a14      	cmp	r2, #20
 800be8e:	d1f6      	bne.n	800be7e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be90:	6800      	ldr	r0, [r0, #0]
 800be92:	f7ff fdaf 	bl	800b9f4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be96:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be98:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800be9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be9e:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bea0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bea6:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bea8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800beaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800beae:	e04e      	b.n	800bf4e <HAL_TIM_PWM_ConfigChannel+0xf2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800beb0:	6800      	ldr	r0, [r0, #0]
 800beb2:	f7ff fca7 	bl	800b804 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800beb6:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800beb8:	6983      	ldr	r3, [r0, #24]
 800beba:	f043 0308 	orr.w	r3, r3, #8
 800bebe:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bec0:	6983      	ldr	r3, [r0, #24]
 800bec2:	f023 0304 	bic.w	r3, r3, #4
 800bec6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bec8:	6983      	ldr	r3, [r0, #24]
 800beca:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800becc:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800bece:	2000      	movs	r0, #0
      break;
 800bed0:	e7d6      	b.n	800be80 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bed2:	6800      	ldr	r0, [r0, #0]
 800bed4:	f7ff ff7c 	bl	800bdd0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bed8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800beda:	6983      	ldr	r3, [r0, #24]
 800bedc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bee0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bee2:	6983      	ldr	r3, [r0, #24]
 800bee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bee8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800beea:	6983      	ldr	r3, [r0, #24]
 800beec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bef0:	e7ec      	b.n	800becc <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bef2:	6800      	ldr	r0, [r0, #0]
 800bef4:	f7ff fcd2 	bl	800b89c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bef8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800befa:	69c3      	ldr	r3, [r0, #28]
 800befc:	f043 0308 	orr.w	r3, r3, #8
 800bf00:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bf02:	69c3      	ldr	r3, [r0, #28]
 800bf04:	f023 0304 	bic.w	r3, r3, #4
 800bf08:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bf0a:	69c3      	ldr	r3, [r0, #28]
 800bf0c:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf0e:	61c3      	str	r3, [r0, #28]
      break;
 800bf10:	e7dd      	b.n	800bece <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf12:	6800      	ldr	r0, [r0, #0]
 800bf14:	f7ff fd06 	bl	800b924 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf18:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bf1a:	69c3      	ldr	r3, [r0, #28]
 800bf1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf20:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf22:	69c3      	ldr	r3, [r0, #28]
 800bf24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf28:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf2a:	69c3      	ldr	r3, [r0, #28]
 800bf2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bf30:	e7ed      	b.n	800bf0e <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bf32:	6800      	ldr	r0, [r0, #0]
 800bf34:	f7ff fd2a 	bl	800b98c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf38:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bf3a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bf3c:	f043 0308 	orr.w	r3, r3, #8
 800bf40:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bf42:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bf44:	f023 0304 	bic.w	r3, r3, #4
 800bf48:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf4a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bf4c:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf4e:	6543      	str	r3, [r0, #84]	; 0x54
 800bf50:	e7bd      	b.n	800bece <HAL_TIM_PWM_ConfigChannel+0x72>
  __HAL_LOCK(htim);
 800bf52:	2002      	movs	r0, #2
 800bf54:	e797      	b.n	800be86 <HAL_TIM_PWM_ConfigChannel+0x2a>

0800bf56 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf56:	4311      	orrs	r1, r2
{
 800bf58:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 800bf5a:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf5c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf60:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf64:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf66:	6083      	str	r3, [r0, #8]
}
 800bf68:	bd10      	pop	{r4, pc}
	...

0800bf6c <HAL_TIM_ConfigClockSource>:
{
 800bf6c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800bf6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800bf72:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	f04f 0302 	mov.w	r3, #2
 800bf7a:	f000 80aa 	beq.w	800c0d2 <HAL_TIM_ConfigClockSource+0x166>
 800bf7e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800bf80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf84:	4b54      	ldr	r3, [pc, #336]	; (800c0d8 <HAL_TIM_ConfigClockSource+0x16c>)
  __HAL_LOCK(htim);
 800bf86:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800bf8a:	6800      	ldr	r0, [r0, #0]
 800bf8c:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf8e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800bf90:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800bf92:	680b      	ldr	r3, [r1, #0]
 800bf94:	2b70      	cmp	r3, #112	; 0x70
 800bf96:	d056      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0xda>
 800bf98:	d83c      	bhi.n	800c014 <HAL_TIM_ConfigClockSource+0xa8>
 800bf9a:	2b50      	cmp	r3, #80	; 0x50
 800bf9c:	d067      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0x102>
 800bf9e:	d81d      	bhi.n	800bfdc <HAL_TIM_ConfigClockSource+0x70>
 800bfa0:	2b40      	cmp	r3, #64	; 0x40
 800bfa2:	d07d      	beq.n	800c0a0 <HAL_TIM_ConfigClockSource+0x134>
 800bfa4:	d806      	bhi.n	800bfb4 <HAL_TIM_ConfigClockSource+0x48>
 800bfa6:	2b20      	cmp	r3, #32
 800bfa8:	d00e      	beq.n	800bfc8 <HAL_TIM_ConfigClockSource+0x5c>
 800bfaa:	d80b      	bhi.n	800bfc4 <HAL_TIM_ConfigClockSource+0x58>
 800bfac:	f033 0210 	bics.w	r2, r3, #16
 800bfb0:	d00a      	beq.n	800bfc8 <HAL_TIM_ConfigClockSource+0x5c>
 800bfb2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bfba:	2300      	movs	r3, #0
 800bfbc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800bfc4:	2b30      	cmp	r3, #48	; 0x30
 800bfc6:	d1f4      	bne.n	800bfb2 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 800bfc8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfca:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800bfce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfd2:	431a      	orrs	r2, r3
 800bfd4:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800bfd8:	6082      	str	r2, [r0, #8]
 800bfda:	e03d      	b.n	800c058 <HAL_TIM_ConfigClockSource+0xec>
  switch (sClockSourceConfig->ClockSource)
 800bfdc:	2b60      	cmp	r3, #96	; 0x60
 800bfde:	d1e9      	bne.n	800bfb4 <HAL_TIM_ConfigClockSource+0x48>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfe0:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 800bfe2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfe4:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
 800bfe8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfea:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfec:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800bfee:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bff0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bff8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800bffc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800c000:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800c002:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800c004:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c006:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c00a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c00e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800c012:	e020      	b.n	800c056 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 800c014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c018:	d020      	beq.n	800c05c <HAL_TIM_ConfigClockSource+0xf0>
 800c01a:	d804      	bhi.n	800c026 <HAL_TIM_ConfigClockSource+0xba>
  HAL_StatusTypeDef status = HAL_OK;
 800c01c:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 800c020:	bf18      	it	ne
 800c022:	2201      	movne	r2, #1
 800c024:	e7c6      	b.n	800bfb4 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 800c026:	492d      	ldr	r1, [pc, #180]	; (800c0dc <HAL_TIM_ConfigClockSource+0x170>)
 800c028:	428b      	cmp	r3, r1
 800c02a:	d0cd      	beq.n	800bfc8 <HAL_TIM_ConfigClockSource+0x5c>
 800c02c:	d805      	bhi.n	800c03a <HAL_TIM_ConfigClockSource+0xce>
 800c02e:	f023 0110 	bic.w	r1, r3, #16
 800c032:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c036:	d0c7      	beq.n	800bfc8 <HAL_TIM_ConfigClockSource+0x5c>
 800c038:	e7bc      	b.n	800bfb4 <HAL_TIM_ConfigClockSource+0x48>
 800c03a:	4929      	ldr	r1, [pc, #164]	; (800c0e0 <HAL_TIM_ConfigClockSource+0x174>)
 800c03c:	428b      	cmp	r3, r1
 800c03e:	d0c3      	beq.n	800bfc8 <HAL_TIM_ConfigClockSource+0x5c>
 800c040:	3110      	adds	r1, #16
 800c042:	428b      	cmp	r3, r1
 800c044:	e7f7      	b.n	800c036 <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 800c046:	68cb      	ldr	r3, [r1, #12]
 800c048:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800c04c:	f7ff ff83 	bl	800bf56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c050:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c052:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c056:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c058:	2200      	movs	r2, #0
}
 800c05a:	e7ab      	b.n	800bfb4 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ETR_SetConfig(htim->Instance,
 800c05c:	68cb      	ldr	r3, [r1, #12]
 800c05e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800c062:	f7ff ff78 	bl	800bf56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c066:	6883      	ldr	r3, [r0, #8]
 800c068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c06c:	e7f3      	b.n	800c056 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 800c06e:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800c070:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800c072:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c074:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c076:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c07a:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 800c07e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c080:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c082:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c088:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c08c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800c08e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800c090:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c092:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c09a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800c09e:	e7da      	b.n	800c056 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 800c0a0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800c0a2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800c0a4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0a6:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c0a8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0ac:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 800c0b0:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0b2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0b4:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c0ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c0be:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800c0c0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800c0c2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c0c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0cc:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800c0d0:	e7c1      	b.n	800c056 <HAL_TIM_ConfigClockSource+0xea>
  __HAL_LOCK(htim);
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	e774      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x54>
 800c0d6:	bf00      	nop
 800c0d8:	ffce0088 	.word	0xffce0088
 800c0dc:	00100020 	.word	0x00100020
 800c0e0:	00100030 	.word	0x00100030

0800c0e4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0e4:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c0e8:	6a03      	ldr	r3, [r0, #32]
{
 800c0ea:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0ec:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0ee:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0f0:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800c0f2:	ea23 0304 	bic.w	r3, r3, r4
 800c0f6:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0f8:	6a03      	ldr	r3, [r0, #32]
 800c0fa:	431a      	orrs	r2, r3
 800c0fc:	6202      	str	r2, [r0, #32]
}
 800c0fe:	bd10      	pop	{r4, pc}

0800c100 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c100:	2908      	cmp	r1, #8
{
 800c102:	b508      	push	{r3, lr}
 800c104:	d018      	beq.n	800c138 <HAL_TIM_OC_Start+0x38>
 800c106:	d805      	bhi.n	800c114 <HAL_TIM_OC_Start+0x14>
 800c108:	b159      	cbz	r1, 800c122 <HAL_TIM_OC_Start+0x22>
 800c10a:	2904      	cmp	r1, #4
 800c10c:	d011      	beq.n	800c132 <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c10e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800c112:	e013      	b.n	800c13c <HAL_TIM_OC_Start+0x3c>
 800c114:	290c      	cmp	r1, #12
 800c116:	d023      	beq.n	800c160 <HAL_TIM_OC_Start+0x60>
 800c118:	2910      	cmp	r1, #16
 800c11a:	d1f8      	bne.n	800c10e <HAL_TIM_OC_Start+0xe>
 800c11c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800c120:	e00c      	b.n	800c13c <HAL_TIM_OC_Start+0x3c>
 800c122:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800c126:	3b01      	subs	r3, #1
 800c128:	bf18      	it	ne
 800c12a:	2301      	movne	r3, #1
 800c12c:	b183      	cbz	r3, 800c150 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 800c12e:	2001      	movs	r0, #1
 800c130:	e042      	b.n	800c1b8 <HAL_TIM_OC_Start+0xb8>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c132:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800c136:	e7f6      	b.n	800c126 <HAL_TIM_OC_Start+0x26>
 800c138:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c13c:	3b01      	subs	r3, #1
 800c13e:	bf18      	it	ne
 800c140:	2301      	movne	r3, #1
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1f3      	bne.n	800c12e <HAL_TIM_OC_Start+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c146:	2908      	cmp	r1, #8
 800c148:	f04f 0302 	mov.w	r3, #2
 800c14c:	d038      	beq.n	800c1c0 <HAL_TIM_OC_Start+0xc0>
 800c14e:	d80a      	bhi.n	800c166 <HAL_TIM_OC_Start+0x66>
 800c150:	2302      	movs	r3, #2
 800c152:	b179      	cbz	r1, 800c174 <HAL_TIM_OC_Start+0x74>
 800c154:	2904      	cmp	r1, #4
 800c156:	d030      	beq.n	800c1ba <HAL_TIM_OC_Start+0xba>
 800c158:	2302      	movs	r3, #2
 800c15a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800c15e:	e00b      	b.n	800c178 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c160:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c164:	e7ea      	b.n	800c13c <HAL_TIM_OC_Start+0x3c>
 800c166:	290c      	cmp	r1, #12
 800c168:	d02d      	beq.n	800c1c6 <HAL_TIM_OC_Start+0xc6>
 800c16a:	2910      	cmp	r1, #16
 800c16c:	d1f4      	bne.n	800c158 <HAL_TIM_OC_Start+0x58>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c16e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800c172:	e001      	b.n	800c178 <HAL_TIM_OC_Start+0x78>
 800c174:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c178:	6800      	ldr	r0, [r0, #0]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f7ff ffb2 	bl	800c0e4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c180:	4b26      	ldr	r3, [pc, #152]	; (800c21c <HAL_TIM_OC_Start+0x11c>)
 800c182:	4298      	cmp	r0, r3
 800c184:	d022      	beq.n	800c1cc <HAL_TIM_OC_Start+0xcc>
 800c186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c18a:	4298      	cmp	r0, r3
 800c18c:	d01e      	beq.n	800c1cc <HAL_TIM_OC_Start+0xcc>
 800c18e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800c192:	4298      	cmp	r0, r3
 800c194:	d01a      	beq.n	800c1cc <HAL_TIM_OC_Start+0xcc>
 800c196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c19a:	4298      	cmp	r0, r3
 800c19c:	d016      	beq.n	800c1cc <HAL_TIM_OC_Start+0xcc>
 800c19e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1a2:	4298      	cmp	r0, r3
 800c1a4:	d012      	beq.n	800c1cc <HAL_TIM_OC_Start+0xcc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c1aa:	d117      	bne.n	800c1dc <HAL_TIM_OC_Start+0xdc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1ac:	6882      	ldr	r2, [r0, #8]
 800c1ae:	4b1c      	ldr	r3, [pc, #112]	; (800c220 <HAL_TIM_OC_Start+0x120>)
 800c1b0:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1b2:	2b06      	cmp	r3, #6
 800c1b4:	d12e      	bne.n	800c214 <HAL_TIM_OC_Start+0x114>
  return HAL_OK;
 800c1b6:	2000      	movs	r0, #0
}
 800c1b8:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1ba:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800c1be:	e7db      	b.n	800c178 <HAL_TIM_OC_Start+0x78>
 800c1c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800c1c4:	e7d8      	b.n	800c178 <HAL_TIM_OC_Start+0x78>
 800c1c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800c1ca:	e7d5      	b.n	800c178 <HAL_TIM_OC_Start+0x78>
    __HAL_TIM_MOE_ENABLE(htim);
 800c1cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c1ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1d2:	6443      	str	r3, [r0, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1d4:	4b11      	ldr	r3, [pc, #68]	; (800c21c <HAL_TIM_OC_Start+0x11c>)
 800c1d6:	4298      	cmp	r0, r3
 800c1d8:	d1e5      	bne.n	800c1a6 <HAL_TIM_OC_Start+0xa6>
 800c1da:	e7e7      	b.n	800c1ac <HAL_TIM_OC_Start+0xac>
 800c1dc:	4b11      	ldr	r3, [pc, #68]	; (800c224 <HAL_TIM_OC_Start+0x124>)
 800c1de:	4298      	cmp	r0, r3
 800c1e0:	d0e4      	beq.n	800c1ac <HAL_TIM_OC_Start+0xac>
 800c1e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1e6:	4298      	cmp	r0, r3
 800c1e8:	d0e0      	beq.n	800c1ac <HAL_TIM_OC_Start+0xac>
 800c1ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1ee:	4298      	cmp	r0, r3
 800c1f0:	d0dc      	beq.n	800c1ac <HAL_TIM_OC_Start+0xac>
 800c1f2:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800c1f6:	4298      	cmp	r0, r3
 800c1f8:	d0d8      	beq.n	800c1ac <HAL_TIM_OC_Start+0xac>
 800c1fa:	f5a3 436c 	sub.w	r3, r3, #60416	; 0xec00
 800c1fe:	4298      	cmp	r0, r3
 800c200:	d0d4      	beq.n	800c1ac <HAL_TIM_OC_Start+0xac>
 800c202:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800c206:	4298      	cmp	r0, r3
 800c208:	d0d0      	beq.n	800c1ac <HAL_TIM_OC_Start+0xac>
    __HAL_TIM_ENABLE(htim);
 800c20a:	6803      	ldr	r3, [r0, #0]
 800c20c:	f043 0301 	orr.w	r3, r3, #1
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	e7d0      	b.n	800c1b6 <HAL_TIM_OC_Start+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c218:	d1f7      	bne.n	800c20a <HAL_TIM_OC_Start+0x10a>
 800c21a:	e7cc      	b.n	800c1b6 <HAL_TIM_OC_Start+0xb6>
 800c21c:	40010000 	.word	0x40010000
 800c220:	00010007 	.word	0x00010007
 800c224:	40000400 	.word	0x40000400

0800c228 <HAL_TIM_PWM_Start>:
 800c228:	f7ff bf6a 	b.w	800c100 <HAL_TIM_OC_Start>

0800c22c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c22c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c22e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c232:	2b01      	cmp	r3, #1
 800c234:	f04f 0302 	mov.w	r3, #2
 800c238:	d03b      	beq.n	800c2b2 <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c23a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c23e:	4d1e      	ldr	r5, [pc, #120]	; (800c2b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  tmpcr2 = htim->Instance->CR2;
 800c240:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c242:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800c244:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800c246:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c248:	d002      	beq.n	800c250 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800c24a:	4e1c      	ldr	r6, [pc, #112]	; (800c2bc <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800c24c:	42b3      	cmp	r3, r6
 800c24e:	d103      	bne.n	800c258 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c250:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c254:	684e      	ldr	r6, [r1, #4]
 800c256:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c258:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800c25a:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c25e:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c260:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800c264:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c266:	d019      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800c268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c26c:	d016      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800c26e:	4a14      	ldr	r2, [pc, #80]	; (800c2c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d013      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800c274:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c278:	4293      	cmp	r3, r2
 800c27a:	d00f      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800c27c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c280:	4293      	cmp	r3, r2
 800c282:	d00b      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800c284:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c288:	4293      	cmp	r3, r2
 800c28a:	d007      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800c28c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800c290:	4293      	cmp	r3, r2
 800c292:	d003      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800c294:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c298:	4293      	cmp	r3, r2
 800c29a:	d104      	bne.n	800c2a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c29c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c29e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2a2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800c2b2:	4618      	mov	r0, r3

  return HAL_OK;
}
 800c2b4:	bd70      	pop	{r4, r5, r6, pc}
 800c2b6:	bf00      	nop
 800c2b8:	40010000 	.word	0x40010000
 800c2bc:	40010400 	.word	0x40010400
 800c2c0:	40000400 	.word	0x40000400

0800c2c4 <HAL_TIMEx_CommutCallback>:
 800c2c4:	4770      	bx	lr

0800c2c6 <HAL_TIMEx_BreakCallback>:
 800c2c6:	4770      	bx	lr

0800c2c8 <HAL_TIMEx_Break2Callback>:
 800c2c8:	4770      	bx	lr

0800c2ca <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c2ca:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2cc:	e852 3f00 	ldrex	r3, [r2]
 800c2d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c2d8:	6802      	ldr	r2, [r0, #0]
 800c2da:	2900      	cmp	r1, #0
 800c2dc:	d1f5      	bne.n	800c2ca <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2de:	f102 0308 	add.w	r3, r2, #8
 800c2e2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	f102 0c08 	add.w	ip, r2, #8
 800c2ee:	e84c 3100 	strex	r1, r3, [ip]
 800c2f2:	2900      	cmp	r1, #0
 800c2f4:	d1f3      	bne.n	800c2de <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2f6:	2320      	movs	r3, #32
 800c2f8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800c2fc:	4770      	bx	lr
	...

0800c300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c300:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c302:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c304:	e852 3f00 	ldrex	r3, [r2]
 800c308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c310:	6802      	ldr	r2, [r0, #0]
 800c312:	2900      	cmp	r1, #0
 800c314:	d1f5      	bne.n	800c302 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c316:	4c0f      	ldr	r4, [pc, #60]	; (800c354 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c318:	f102 0308 	add.w	r3, r2, #8
 800c31c:	e853 3f00 	ldrex	r3, [r3]
 800c320:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c322:	f102 0c08 	add.w	ip, r2, #8
 800c326:	e84c 3100 	strex	r1, r3, [ip]
 800c32a:	2900      	cmp	r1, #0
 800c32c:	d1f4      	bne.n	800c318 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800c330:	2b01      	cmp	r3, #1
 800c332:	d107      	bne.n	800c344 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c334:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c338:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33c:	e842 3100 	strex	r1, r3, [r2]
 800c340:	2900      	cmp	r1, #0
 800c342:	d1f7      	bne.n	800c334 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c344:	2320      	movs	r3, #32
 800c346:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c34a:	2300      	movs	r3, #0
 800c34c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c34e:	6743      	str	r3, [r0, #116]	; 0x74
}
 800c350:	bd10      	pop	{r4, pc}
 800c352:	bf00      	nop
 800c354:	effffffe 	.word	0xeffffffe

0800c358 <UART_TxISR_16BIT.part.0>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c358:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35a:	e852 3f00 	ldrex	r3, [r2]
 800c35e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c362:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c366:	6802      	ldr	r2, [r0, #0]
 800c368:	2900      	cmp	r1, #0
 800c36a:	d1f5      	bne.n	800c358 <UART_TxISR_16BIT.part.0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36c:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c374:	e842 3100 	strex	r1, r3, [r2]
 800c378:	2900      	cmp	r1, #0
 800c37a:	d1f7      	bne.n	800c36c <UART_TxISR_16BIT.part.0+0x14>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c37c:	4770      	bx	lr

0800c37e <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c37e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 800c382:	4603      	mov	r3, r0
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c384:	2a21      	cmp	r2, #33	; 0x21
 800c386:	d111      	bne.n	800c3ac <UART_TxISR_8BIT+0x2e>
    if (huart->TxXferCount == 0U)
 800c388:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800c38c:	b292      	uxth	r2, r2
 800c38e:	b90a      	cbnz	r2, 800c394 <UART_TxISR_8BIT+0x16>
 800c390:	f7ff bfe2 	b.w	800c358 <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c394:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c396:	6801      	ldr	r1, [r0, #0]
 800c398:	f812 0b01 	ldrb.w	r0, [r2], #1
 800c39c:	6288      	str	r0, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c39e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c3a0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800c3a4:	3a01      	subs	r2, #1
 800c3a6:	b292      	uxth	r2, r2
 800c3a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c3ac:	4770      	bx	lr

0800c3ae <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 800c3b2:	4603      	mov	r3, r0
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3b4:	2a21      	cmp	r2, #33	; 0x21
 800c3b6:	d113      	bne.n	800c3e0 <UART_TxISR_16BIT+0x32>
  {
    if (huart->TxXferCount == 0U)
 800c3b8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800c3bc:	b292      	uxth	r2, r2
 800c3be:	b90a      	cbnz	r2, 800c3c4 <UART_TxISR_16BIT+0x16>
 800c3c0:	f7ff bfca 	b.w	800c358 <UART_TxISR_16BIT.part.0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c3c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3c6:	6800      	ldr	r0, [r0, #0]
 800c3c8:	f832 1b02 	ldrh.w	r1, [r2], #2
 800c3cc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800c3d0:	6281      	str	r1, [r0, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c3d2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c3d4:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800c3d8:	3a01      	subs	r2, #1
 800c3da:	b292      	uxth	r2, r2
 800c3dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    }
  }
}
 800c3e0:	4770      	bx	lr

0800c3e2 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800c3e6:	2b21      	cmp	r3, #33	; 0x21
{
 800c3e8:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3ea:	d11b      	bne.n	800c424 <UART_TxISR_8BIT_FIFOEN+0x42>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c3ec:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800c3f0:	b1c2      	cbz	r2, 800c424 <UART_TxISR_8BIT_FIFOEN+0x42>
    {
      if (huart->TxXferCount == 0U)
 800c3f2:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c3f6:	6803      	ldr	r3, [r0, #0]
      if (huart->TxXferCount == 0U)
 800c3f8:	b289      	uxth	r1, r1
 800c3fa:	b9a1      	cbnz	r1, 800c426 <UART_TxISR_8BIT_FIFOEN+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fc:	f103 0208 	add.w	r2, r3, #8
 800c400:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c404:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c408:	f103 0008 	add.w	r0, r3, #8
 800c40c:	e840 2100 	strex	r1, r2, [r0]
 800c410:	2900      	cmp	r1, #0
 800c412:	d1f3      	bne.n	800c3fc <UART_TxISR_8BIT_FIFOEN+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c414:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41c:	e843 2100 	strex	r1, r2, [r3]
 800c420:	2900      	cmp	r1, #0
 800c422:	d1f7      	bne.n	800c414 <UART_TxISR_8BIT_FIFOEN+0x32>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c424:	bd10      	pop	{r4, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c426:	69d9      	ldr	r1, [r3, #28]
 800c428:	0609      	lsls	r1, r1, #24
 800c42a:	d50a      	bpl.n	800c442 <UART_TxISR_8BIT_FIFOEN+0x60>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c42c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800c42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c432:	629c      	str	r4, [r3, #40]	; 0x28
        huart->TxXferCount--;
 800c434:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
        huart->pTxBuffPtr++;
 800c438:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800c43a:	3b01      	subs	r3, #1
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c442:	3a01      	subs	r2, #1
 800c444:	b292      	uxth	r2, r2
 800c446:	e7d3      	b.n	800c3f0 <UART_TxISR_8BIT_FIFOEN+0xe>

0800c448 <UART_TxISR_16BIT_FIFOEN>:
{
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c448:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800c44c:	2b21      	cmp	r3, #33	; 0x21
{
 800c44e:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c450:	d11b      	bne.n	800c48a <UART_TxISR_16BIT_FIFOEN+0x42>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c452:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800c456:	b1c2      	cbz	r2, 800c48a <UART_TxISR_16BIT_FIFOEN+0x42>
    {
      if (huart->TxXferCount == 0U)
 800c458:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c45c:	6803      	ldr	r3, [r0, #0]
      if (huart->TxXferCount == 0U)
 800c45e:	b289      	uxth	r1, r1
 800c460:	b9a1      	cbnz	r1, 800c48c <UART_TxISR_16BIT_FIFOEN+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c462:	f103 0208 	add.w	r2, r3, #8
 800c466:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c46a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46e:	f103 0008 	add.w	r0, r3, #8
 800c472:	e840 2100 	strex	r1, r2, [r0]
 800c476:	2900      	cmp	r1, #0
 800c478:	d1f3      	bne.n	800c462 <UART_TxISR_16BIT_FIFOEN+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c47e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c482:	e843 2100 	strex	r1, r2, [r3]
 800c486:	2900      	cmp	r1, #0
 800c488:	d1f7      	bne.n	800c47a <UART_TxISR_16BIT_FIFOEN+0x32>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c48a:	bd10      	pop	{r4, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c48c:	69d9      	ldr	r1, [r3, #28]
 800c48e:	0609      	lsls	r1, r1, #24
 800c490:	d50c      	bpl.n	800c4ac <UART_TxISR_16BIT_FIFOEN+0x64>
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c492:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800c494:	f831 4b02 	ldrh.w	r4, [r1], #2
 800c498:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800c49c:	629c      	str	r4, [r3, #40]	; 0x28
        huart->TxXferCount--;
 800c49e:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
        huart->pTxBuffPtr += 2U;
 800c4a2:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c4ac:	3a01      	subs	r2, #1
 800c4ae:	b292      	uxth	r2, r2
 800c4b0:	e7d1      	b.n	800c456 <UART_TxISR_16BIT_FIFOEN+0xe>
	...

0800c4b4 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800c4b4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800c4b8:	2b20      	cmp	r3, #32
{
 800c4ba:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800c4bc:	d143      	bne.n	800c546 <HAL_UART_Transmit_IT+0x92>
    if ((pData == NULL) || (Size == 0U))
 800c4be:	2900      	cmp	r1, #0
 800c4c0:	d043      	beq.n	800c54a <HAL_UART_Transmit_IT+0x96>
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	d041      	beq.n	800c54a <HAL_UART_Transmit_IT+0x96>
    huart->TxXferCount = Size;
 800c4c6:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ca:	2300      	movs	r3, #0
    huart->TxXferSize  = Size;
 800c4cc:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c4d0:	6e42      	ldr	r2, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4d2:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4d6:	2321      	movs	r3, #33	; 0x21
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c4d8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    huart->pTxBuffPtr  = pData;
 800c4dc:	6501      	str	r1, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4de:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c4e2:	6802      	ldr	r2, [r0, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4e4:	6883      	ldr	r3, [r0, #8]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c4e6:	d119      	bne.n	800c51c <HAL_UART_Transmit_IT+0x68>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4ec:	d114      	bne.n	800c518 <HAL_UART_Transmit_IT+0x64>
 800c4ee:	6904      	ldr	r4, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c4f0:	4b17      	ldr	r3, [pc, #92]	; (800c550 <HAL_UART_Transmit_IT+0x9c>)
 800c4f2:	4918      	ldr	r1, [pc, #96]	; (800c554 <HAL_UART_Transmit_IT+0xa0>)
 800c4f4:	2c00      	cmp	r4, #0
 800c4f6:	bf08      	it	eq
 800c4f8:	460b      	moveq	r3, r1
 800c4fa:	6783      	str	r3, [r0, #120]	; 0x78
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fc:	f102 0308 	add.w	r3, r2, #8
 800c500:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c504:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c508:	f102 0008 	add.w	r0, r2, #8
 800c50c:	e840 3100 	strex	r1, r3, [r0]
 800c510:	2900      	cmp	r1, #0
 800c512:	d1f3      	bne.n	800c4fc <HAL_UART_Transmit_IT+0x48>
    return HAL_OK;
 800c514:	2000      	movs	r0, #0
}
 800c516:	bd10      	pop	{r4, pc}
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c518:	4b0d      	ldr	r3, [pc, #52]	; (800c550 <HAL_UART_Transmit_IT+0x9c>)
 800c51a:	e7ee      	b.n	800c4fa <HAL_UART_Transmit_IT+0x46>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c51c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c520:	d10f      	bne.n	800c542 <HAL_UART_Transmit_IT+0x8e>
 800c522:	6904      	ldr	r4, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT;
 800c524:	4b0c      	ldr	r3, [pc, #48]	; (800c558 <HAL_UART_Transmit_IT+0xa4>)
 800c526:	490d      	ldr	r1, [pc, #52]	; (800c55c <HAL_UART_Transmit_IT+0xa8>)
 800c528:	2c00      	cmp	r4, #0
 800c52a:	bf08      	it	eq
 800c52c:	460b      	moveq	r3, r1
 800c52e:	6783      	str	r3, [r0, #120]	; 0x78
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c530:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c538:	e842 3100 	strex	r1, r3, [r2]
 800c53c:	2900      	cmp	r1, #0
 800c53e:	d1f7      	bne.n	800c530 <HAL_UART_Transmit_IT+0x7c>
 800c540:	e7e8      	b.n	800c514 <HAL_UART_Transmit_IT+0x60>
        huart->TxISR = UART_TxISR_8BIT;
 800c542:	4b05      	ldr	r3, [pc, #20]	; (800c558 <HAL_UART_Transmit_IT+0xa4>)
 800c544:	e7f3      	b.n	800c52e <HAL_UART_Transmit_IT+0x7a>
    return HAL_BUSY;
 800c546:	2002      	movs	r0, #2
 800c548:	e7e5      	b.n	800c516 <HAL_UART_Transmit_IT+0x62>
      return HAL_ERROR;
 800c54a:	2001      	movs	r0, #1
 800c54c:	e7e3      	b.n	800c516 <HAL_UART_Transmit_IT+0x62>
 800c54e:	bf00      	nop
 800c550:	0800c3e3 	.word	0x0800c3e3
 800c554:	0800c449 	.word	0x0800c449
 800c558:	0800c37f 	.word	0x0800c37f
 800c55c:	0800c3af 	.word	0x0800c3af

0800c560 <HAL_UART_Transmit_DMA>:
{
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	4604      	mov	r4, r0
 800c564:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800c566:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800c56a:	2d20      	cmp	r5, #32
 800c56c:	d132      	bne.n	800c5d4 <HAL_UART_Transmit_DMA+0x74>
    if ((pData == NULL) || (Size == 0U))
 800c56e:	b1f1      	cbz	r1, 800c5ae <HAL_UART_Transmit_DMA+0x4e>
 800c570:	b1ea      	cbz	r2, 800c5ae <HAL_UART_Transmit_DMA+0x4e>
    huart->TxXferCount = Size;
 800c572:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c576:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 800c578:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c57c:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800c57e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c580:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    huart->pTxBuffPtr  = pData;
 800c584:	6521      	str	r1, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c586:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c58a:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 800c58c:	b188      	cbz	r0, 800c5b2 <HAL_UART_Transmit_DMA+0x52>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c58e:	4f12      	ldr	r7, [pc, #72]	; (800c5d8 <HAL_UART_Transmit_DMA+0x78>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c590:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c592:	63c7      	str	r7, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c594:	4f11      	ldr	r7, [pc, #68]	; (800c5dc <HAL_UART_Transmit_DMA+0x7c>)
 800c596:	6407      	str	r7, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c598:	4f11      	ldr	r7, [pc, #68]	; (800c5e0 <HAL_UART_Transmit_DMA+0x80>)
      huart->hdmatx->XferAbortCallback = NULL;
 800c59a:	e9c0 7613 	strd	r7, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c59e:	f7fb fdd7 	bl	8008150 <HAL_DMA_Start_IT>
 800c5a2:	b130      	cbz	r0, 800c5b2 <HAL_UART_Transmit_DMA+0x52>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5a4:	2310      	movs	r3, #16
 800c5a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 800c5aa:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
      return HAL_ERROR;
 800c5ae:	2001      	movs	r0, #1
 800c5b0:	e00f      	b.n	800c5d2 <HAL_UART_Transmit_DMA+0x72>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c5b2:	2240      	movs	r2, #64	; 0x40
 800c5b4:	6823      	ldr	r3, [r4, #0]
 800c5b6:	621a      	str	r2, [r3, #32]
 800c5b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ba:	f102 0308 	add.w	r3, r2, #8
 800c5be:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c6:	f102 0108 	add.w	r1, r2, #8
 800c5ca:	e841 3000 	strex	r0, r3, [r1]
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d1f3      	bne.n	800c5ba <HAL_UART_Transmit_DMA+0x5a>
}
 800c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800c5d4:	2002      	movs	r0, #2
 800c5d6:	e7fc      	b.n	800c5d2 <HAL_UART_Transmit_DMA+0x72>
 800c5d8:	0800c681 	.word	0x0800c681
 800c5dc:	0800c6c9 	.word	0x0800c6c9
 800c5e0:	0800c6d5 	.word	0x0800c6d5

0800c5e4 <HAL_UART_DMAStop>:
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c5e4:	6802      	ldr	r2, [r0, #0]
{
 800c5e6:	b538      	push	{r3, r4, r5, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5e8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800c5ec:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c5ee:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c5f2:	6891      	ldr	r1, [r2, #8]
 800c5f4:	0609      	lsls	r1, r1, #24
 800c5f6:	d51f      	bpl.n	800c638 <HAL_UART_DMAStop+0x54>
 800c5f8:	2b21      	cmp	r3, #33	; 0x21
 800c5fa:	d11d      	bne.n	800c638 <HAL_UART_DMAStop+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fc:	f102 0308 	add.w	r3, r2, #8
 800c600:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c608:	f102 0008 	add.w	r0, r2, #8
 800c60c:	e840 3100 	strex	r1, r3, [r0]
 800c610:	2900      	cmp	r1, #0
 800c612:	d1f3      	bne.n	800c5fc <HAL_UART_DMAStop+0x18>
    if (huart->hdmatx != NULL)
 800c614:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c616:	b160      	cbz	r0, 800c632 <HAL_UART_DMAStop+0x4e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c618:	f7fb feb4 	bl	8008384 <HAL_DMA_Abort>
 800c61c:	b148      	cbz	r0, 800c632 <HAL_UART_DMAStop+0x4e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c61e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c620:	f7fc fab4 	bl	8008b8c <HAL_DMA_GetError>
 800c624:	2820      	cmp	r0, #32
 800c626:	d104      	bne.n	800c632 <HAL_UART_DMAStop+0x4e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c628:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800c62a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c62c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 800c630:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTxTransfer(huart);
 800c632:	4620      	mov	r0, r4
 800c634:	f7ff fe49 	bl	800c2ca <UART_EndTxTransfer>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c638:	6822      	ldr	r2, [r4, #0]
 800c63a:	6890      	ldr	r0, [r2, #8]
 800c63c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800c640:	d0f6      	beq.n	800c630 <HAL_UART_DMAStop+0x4c>
 800c642:	2d22      	cmp	r5, #34	; 0x22
 800c644:	d11a      	bne.n	800c67c <HAL_UART_DMAStop+0x98>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c646:	f102 0308 	add.w	r3, r2, #8
 800c64a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c64e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c652:	f102 0008 	add.w	r0, r2, #8
 800c656:	e840 3100 	strex	r1, r3, [r0]
 800c65a:	2900      	cmp	r1, #0
 800c65c:	d1f3      	bne.n	800c646 <HAL_UART_DMAStop+0x62>
    if (huart->hdmarx != NULL)
 800c65e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c662:	b140      	cbz	r0, 800c676 <HAL_UART_DMAStop+0x92>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c664:	f7fb fe8e 	bl	8008384 <HAL_DMA_Abort>
 800c668:	b128      	cbz	r0, 800c676 <HAL_UART_DMAStop+0x92>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c66a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c66e:	f7fc fa8d 	bl	8008b8c <HAL_DMA_GetError>
 800c672:	2820      	cmp	r0, #32
 800c674:	d0d8      	beq.n	800c628 <HAL_UART_DMAStop+0x44>
    UART_EndRxTransfer(huart);
 800c676:	4620      	mov	r0, r4
 800c678:	f7ff fe42 	bl	800c300 <UART_EndRxTransfer>
  return HAL_OK;
 800c67c:	2000      	movs	r0, #0
 800c67e:	e7d7      	b.n	800c630 <HAL_UART_DMAStop+0x4c>

0800c680 <UART_DMATransmitCplt>:
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c680:	69c2      	ldr	r2, [r0, #28]
 800c682:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 800c686:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c688:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c68a:	d018      	beq.n	800c6be <UART_DMATransmitCplt+0x3e>
    huart->TxXferCount = 0U;
 800c68c:	2200      	movs	r2, #0
 800c68e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c692:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	f101 0208 	add.w	r2, r1, #8
 800c698:	e852 2f00 	ldrex	r2, [r2]
 800c69c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a0:	3108      	adds	r1, #8
 800c6a2:	e841 2000 	strex	r0, r2, [r1]
   return(result);
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d1f2      	bne.n	800c692 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ac:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	e842 3100 	strex	r1, r3, [r2]
 800c6b8:	2900      	cmp	r1, #0
 800c6ba:	d1f7      	bne.n	800c6ac <UART_DMATransmitCplt+0x2c>
}
 800c6bc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7f5 f91e 	bl	8001900 <HAL_UART_TxCpltCallback>
}
 800c6c4:	e7fa      	b.n	800c6bc <UART_DMATransmitCplt+0x3c>

0800c6c6 <HAL_UART_TxHalfCpltCallback>:
 800c6c6:	4770      	bx	lr

0800c6c8 <UART_DMATxHalfCplt>:
  HAL_UART_TxHalfCpltCallback(huart);
 800c6c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800c6ca:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800c6cc:	f7ff fffb 	bl	800c6c6 <HAL_UART_TxHalfCpltCallback>
}
 800c6d0:	bd08      	pop	{r3, pc}

0800c6d2 <HAL_UART_RxHalfCpltCallback>:
 800c6d2:	4770      	bx	lr

0800c6d4 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800c6d6:	b538      	push	{r3, r4, r5, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6d8:	6804      	ldr	r4, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c6da:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c6de:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6e2:	68a2      	ldr	r2, [r4, #8]
 800c6e4:	0612      	lsls	r2, r2, #24
 800c6e6:	d506      	bpl.n	800c6f6 <UART_DMAError+0x22>
 800c6e8:	2b21      	cmp	r3, #33	; 0x21
 800c6ea:	d104      	bne.n	800c6f6 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c6f2:	f7ff fdea 	bl	800c2ca <UART_EndTxTransfer>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c6f6:	68a3      	ldr	r3, [r4, #8]
 800c6f8:	065b      	lsls	r3, r3, #25
 800c6fa:	d506      	bpl.n	800c70a <UART_DMAError+0x36>
 800c6fc:	2d22      	cmp	r5, #34	; 0x22
 800c6fe:	d104      	bne.n	800c70a <UART_DMAError+0x36>
    huart->RxXferCount = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c706:	f7ff fdfb 	bl	800c300 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c70a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800c70e:	f043 0310 	orr.w	r3, r3, #16
 800c712:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800c716:	f7f5 f963 	bl	80019e0 <HAL_UART_ErrorCallback>
}
 800c71a:	bd38      	pop	{r3, r4, r5, pc}

0800c71c <UART_DMAAbortOnError>:
{
 800c71c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c71e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800c720:	2300      	movs	r3, #0
 800c722:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c726:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800c72a:	f7f5 f959 	bl	80019e0 <HAL_UART_ErrorCallback>
}
 800c72e:	bd08      	pop	{r3, pc}

0800c730 <HAL_UART_AbortReceiveCpltCallback>:
 800c730:	4770      	bx	lr
	...

0800c734 <HAL_UART_AbortReceive_IT>:
{
 800c734:	b510      	push	{r4, lr}
 800c736:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c738:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	e852 3f00 	ldrex	r3, [r2]
 800c73e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c742:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	2900      	cmp	r1, #0
 800c74a:	d1f5      	bne.n	800c738 <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c74c:	4827      	ldr	r0, [pc, #156]	; (800c7ec <HAL_UART_AbortReceive_IT+0xb8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	f103 0208 	add.w	r2, r3, #8
 800c752:	e852 2f00 	ldrex	r2, [r2]
 800c756:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c758:	f103 0c08 	add.w	ip, r3, #8
 800c75c:	e84c 2100 	strex	r1, r2, [ip]
 800c760:	2900      	cmp	r1, #0
 800c762:	d1f4      	bne.n	800c74e <HAL_UART_AbortReceive_IT+0x1a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c764:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800c766:	2a01      	cmp	r2, #1
 800c768:	d107      	bne.n	800c77a <HAL_UART_AbortReceive_IT+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c76e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c772:	e843 2100 	strex	r1, r2, [r3]
 800c776:	2900      	cmp	r1, #0
 800c778:	d1f7      	bne.n	800c76a <HAL_UART_AbortReceive_IT+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c77a:	689a      	ldr	r2, [r3, #8]
 800c77c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800c780:	d02a      	beq.n	800c7d8 <HAL_UART_AbortReceive_IT+0xa4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c782:	f103 0208 	add.w	r2, r3, #8
 800c786:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c78a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78e:	f103 0008 	add.w	r0, r3, #8
 800c792:	e840 2100 	strex	r1, r2, [r0]
 800c796:	2900      	cmp	r1, #0
 800c798:	d1f3      	bne.n	800c782 <HAL_UART_AbortReceive_IT+0x4e>
    if (huart->hdmarx != NULL)
 800c79a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c79e:	b150      	cbz	r0, 800c7b6 <HAL_UART_AbortReceive_IT+0x82>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800c7a0:	4b13      	ldr	r3, [pc, #76]	; (800c7f0 <HAL_UART_AbortReceive_IT+0xbc>)
 800c7a2:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7a4:	f7fb ff94 	bl	80086d0 <HAL_DMA_Abort_IT>
 800c7a8:	b118      	cbz	r0, 800c7b2 <HAL_UART_AbortReceive_IT+0x7e>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7aa:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c7ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c7b0:	4798      	blx	r3
}
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	bd10      	pop	{r4, pc}
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c7b6:	220f      	movs	r2, #15
      huart->RxXferCount = 0U;
 800c7b8:	f8a4 005e 	strh.w	r0, [r4, #94]	; 0x5e
      huart->pRxBuffPtr = NULL;
 800c7bc:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c7be:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7c0:	699a      	ldr	r2, [r3, #24]
 800c7c2:	f042 0208 	orr.w	r2, r2, #8
 800c7c6:	619a      	str	r2, [r3, #24]
      huart->RxState = HAL_UART_STATE_READY;
 800c7c8:	2320      	movs	r3, #32
 800c7ca:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ce:	66e0      	str	r0, [r4, #108]	; 0x6c
    HAL_UART_AbortReceiveCpltCallback(huart);
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f7ff ffad 	bl	800c730 <HAL_UART_AbortReceiveCpltCallback>
 800c7d6:	e7ec      	b.n	800c7b2 <HAL_UART_AbortReceive_IT+0x7e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c7d8:	210f      	movs	r1, #15
    huart->RxXferCount = 0U;
 800c7da:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    huart->pRxBuffPtr = NULL;
 800c7de:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c7e0:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 800c7e2:	2320      	movs	r3, #32
 800c7e4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7e8:	66e2      	str	r2, [r4, #108]	; 0x6c
 800c7ea:	e7f1      	b.n	800c7d0 <HAL_UART_AbortReceive_IT+0x9c>
 800c7ec:	effffffe 	.word	0xeffffffe
 800c7f0:	0800c7f5 	.word	0x0800c7f5

0800c7f4 <UART_DMARxOnlyAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7f4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800c7f6:	2100      	movs	r1, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c7f8:	220f      	movs	r2, #15
{
 800c7fa:	b508      	push	{r3, lr}
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c7fc:	6803      	ldr	r3, [r0, #0]
  huart->RxXferCount = 0U;
 800c7fe:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c802:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c804:	699a      	ldr	r2, [r3, #24]
 800c806:	f042 0208 	orr.w	r2, r2, #8
 800c80a:	619a      	str	r2, [r3, #24]
  huart->RxState = HAL_UART_STATE_READY;
 800c80c:	2320      	movs	r3, #32
 800c80e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c812:	66c1      	str	r1, [r0, #108]	; 0x6c
  HAL_UART_AbortReceiveCpltCallback(huart);
 800c814:	f7ff ff8c 	bl	800c730 <HAL_UART_AbortReceiveCpltCallback>
}
 800c818:	bd08      	pop	{r3, pc}
	...

0800c81c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c81c:	6803      	ldr	r3, [r0, #0]
{
 800c81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c822:	69d9      	ldr	r1, [r3, #28]
  if (errorflags == 0U)
 800c824:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c828:	681a      	ldr	r2, [r3, #0]
{
 800c82a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800c82c:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c82e:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800c830:	d110      	bne.n	800c854 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c832:	068e      	lsls	r6, r1, #26
 800c834:	f140 8097 	bpl.w	800c966 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c838:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c83c:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 800c840:	433e      	orrs	r6, r7
 800c842:	f000 8090 	beq.w	800c966 <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 800c846:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 8085 	beq.w	800c958 <HAL_UART_IRQHandler+0x13c>
}
 800c84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c852:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c854:	4eaa      	ldr	r6, [pc, #680]	; (800cb00 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c856:	48ab      	ldr	r0, [pc, #684]	; (800cb04 <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c858:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c85a:	4010      	ands	r0, r2
 800c85c:	4330      	orrs	r0, r6
 800c85e:	f000 8082 	beq.w	800c966 <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c862:	07cf      	lsls	r7, r1, #31
 800c864:	d509      	bpl.n	800c87a <HAL_UART_IRQHandler+0x5e>
 800c866:	05d0      	lsls	r0, r2, #23
 800c868:	d507      	bpl.n	800c87a <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c86a:	2001      	movs	r0, #1
 800c86c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c86e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800c872:	f040 0001 	orr.w	r0, r0, #1
 800c876:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c87a:	078f      	lsls	r7, r1, #30
 800c87c:	d509      	bpl.n	800c892 <HAL_UART_IRQHandler+0x76>
 800c87e:	07e8      	lsls	r0, r5, #31
 800c880:	d507      	bpl.n	800c892 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c882:	2002      	movs	r0, #2
 800c884:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c886:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800c88a:	f040 0004 	orr.w	r0, r0, #4
 800c88e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c892:	074f      	lsls	r7, r1, #29
 800c894:	d509      	bpl.n	800c8aa <HAL_UART_IRQHandler+0x8e>
 800c896:	07e8      	lsls	r0, r5, #31
 800c898:	d507      	bpl.n	800c8aa <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c89a:	2004      	movs	r0, #4
 800c89c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c89e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800c8a2:	f040 0002 	orr.w	r0, r0, #2
 800c8a6:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c8aa:	070f      	lsls	r7, r1, #28
 800c8ac:	d50b      	bpl.n	800c8c6 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c8ae:	f002 0020 	and.w	r0, r2, #32
 800c8b2:	4330      	orrs	r0, r6
 800c8b4:	d007      	beq.n	800c8c6 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8b6:	2008      	movs	r0, #8
 800c8b8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c8ba:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800c8be:	f040 0008 	orr.w	r0, r0, #8
 800c8c2:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c8c6:	050e      	lsls	r6, r1, #20
 800c8c8:	d50a      	bpl.n	800c8e0 <HAL_UART_IRQHandler+0xc4>
 800c8ca:	0150      	lsls	r0, r2, #5
 800c8cc:	d508      	bpl.n	800c8e0 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c8d2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c8d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c8d8:	f043 0320 	orr.w	r3, r3, #32
 800c8dc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c8e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d037      	beq.n	800c958 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c8e8:	068b      	lsls	r3, r1, #26
 800c8ea:	d509      	bpl.n	800c900 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c8ec:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c8f0:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 800c8f4:	432a      	orrs	r2, r5
 800c8f6:	d003      	beq.n	800c900 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 800c8f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c8fa:	b10b      	cbz	r3, 800c900 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c900:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800c902:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800c904:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c908:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c90a:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c90e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c912:	ea53 0502 	orrs.w	r5, r3, r2
 800c916:	d021      	beq.n	800c95c <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 800c918:	f7ff fcf2 	bl	800c300 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c91c:	68b3      	ldr	r3, [r6, #8]
 800c91e:	065f      	lsls	r7, r3, #25
 800c920:	d517      	bpl.n	800c952 <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c922:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c924:	f102 0308 	add.w	r3, r2, #8
 800c928:	e853 3f00 	ldrex	r3, [r3]
 800c92c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c930:	3208      	adds	r2, #8
 800c932:	e842 3100 	strex	r1, r3, [r2]
 800c936:	2900      	cmp	r1, #0
 800c938:	d1f3      	bne.n	800c922 <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 800c93a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c93e:	b140      	cbz	r0, 800c952 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c940:	4b71      	ldr	r3, [pc, #452]	; (800cb08 <HAL_UART_IRQHandler+0x2ec>)
 800c942:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c944:	f7fb fec4 	bl	80086d0 <HAL_DMA_Abort_IT>
 800c948:	b130      	cbz	r0, 800c958 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c94a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c94e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c950:	e77d      	b.n	800c84e <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 800c952:	4620      	mov	r0, r4
 800c954:	f7f5 f844 	bl	80019e0 <HAL_UART_ErrorCallback>
}
 800c958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 800c95c:	f7f5 f840 	bl	80019e0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c960:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 800c964:	e7f8      	b.n	800c958 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c966:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c968:	2801      	cmp	r0, #1
 800c96a:	f040 80ae 	bne.w	800caca <HAL_UART_IRQHandler+0x2ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c96e:	06ce      	lsls	r6, r1, #27
 800c970:	f140 80ab 	bpl.w	800caca <HAL_UART_IRQHandler+0x2ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c974:	06d0      	lsls	r0, r2, #27
 800c976:	f140 80a8 	bpl.w	800caca <HAL_UART_IRQHandler+0x2ae>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c97a:	2210      	movs	r2, #16
 800c97c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c97e:	689a      	ldr	r2, [r3, #8]
 800c980:	0652      	lsls	r2, r2, #25
 800c982:	d56e      	bpl.n	800ca62 <HAL_UART_IRQHandler+0x246>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c984:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c988:	4860      	ldr	r0, [pc, #384]	; (800cb0c <HAL_UART_IRQHandler+0x2f0>)
 800c98a:	680a      	ldr	r2, [r1, #0]
 800c98c:	4282      	cmp	r2, r0
 800c98e:	d01e      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c990:	3018      	adds	r0, #24
 800c992:	4282      	cmp	r2, r0
 800c994:	d01b      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c996:	3018      	adds	r0, #24
 800c998:	4282      	cmp	r2, r0
 800c99a:	d018      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c99c:	3018      	adds	r0, #24
 800c99e:	4282      	cmp	r2, r0
 800c9a0:	d015      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c9a2:	3018      	adds	r0, #24
 800c9a4:	4282      	cmp	r2, r0
 800c9a6:	d012      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c9a8:	3018      	adds	r0, #24
 800c9aa:	4282      	cmp	r2, r0
 800c9ac:	d00f      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c9ae:	3018      	adds	r0, #24
 800c9b0:	4282      	cmp	r2, r0
 800c9b2:	d00c      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c9b4:	3018      	adds	r0, #24
 800c9b6:	4282      	cmp	r2, r0
 800c9b8:	d009      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c9ba:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800c9be:	4282      	cmp	r2, r0
 800c9c0:	d005      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c9c2:	3018      	adds	r0, #24
 800c9c4:	4282      	cmp	r2, r0
 800c9c6:	d002      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c9c8:	3018      	adds	r0, #24
 800c9ca:	4282      	cmp	r2, r0
 800c9cc:	d0ff      	beq.n	800c9ce <HAL_UART_IRQHandler+0x1b2>
 800c9ce:	6852      	ldr	r2, [r2, #4]
 800c9d0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	d0c0      	beq.n	800c958 <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c9d6:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800c9da:	4290      	cmp	r0, r2
 800c9dc:	d9bc      	bls.n	800c958 <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 800c9de:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9e2:	69ca      	ldr	r2, [r1, #28]
 800c9e4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800c9e8:	d02f      	beq.n	800ca4a <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ea:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f2:	e843 2100 	strex	r1, r2, [r3]
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	d1f7      	bne.n	800c9ea <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fa:	f103 0208 	add.w	r2, r3, #8
 800c9fe:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca02:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca06:	f103 0008 	add.w	r0, r3, #8
 800ca0a:	e840 2100 	strex	r1, r2, [r0]
 800ca0e:	2900      	cmp	r1, #0
 800ca10:	d1f3      	bne.n	800c9fa <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca12:	f103 0208 	add.w	r2, r3, #8
 800ca16:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1e:	f103 0008 	add.w	r0, r3, #8
 800ca22:	e840 2100 	strex	r1, r2, [r0]
 800ca26:	2900      	cmp	r1, #0
 800ca28:	d1f3      	bne.n	800ca12 <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca30:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca32:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca36:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3a:	e843 2100 	strex	r1, r2, [r3]
 800ca3e:	2900      	cmp	r1, #0
 800ca40:	d1f7      	bne.n	800ca32 <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca42:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ca46:	f7fb fc9d 	bl	8008384 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca4a:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca4c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca50:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca52:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800ca56:	1ac9      	subs	r1, r1, r3
 800ca58:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f7f5 f826 	bl	8001aac <HAL_UARTEx_RxEventCallback>
 800ca60:	e77a      	b.n	800c958 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca62:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 800ca66:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca6a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ca6e:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800ca70:	b280      	uxth	r0, r0
 800ca72:	2800      	cmp	r0, #0
 800ca74:	f43f af70 	beq.w	800c958 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca78:	1a89      	subs	r1, r1, r2
 800ca7a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800ca7c:	2900      	cmp	r1, #0
 800ca7e:	f43f af6b 	beq.w	800c958 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca82:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca8a:	e843 2000 	strex	r0, r2, [r3]
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d1f7      	bne.n	800ca82 <HAL_UART_IRQHandler+0x266>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca92:	4d1f      	ldr	r5, [pc, #124]	; (800cb10 <HAL_UART_IRQHandler+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca94:	f103 0208 	add.w	r2, r3, #8
 800ca98:	e852 2f00 	ldrex	r2, [r2]
 800ca9c:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9e:	f103 0608 	add.w	r6, r3, #8
 800caa2:	e846 2000 	strex	r0, r2, [r6]
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d1f4      	bne.n	800ca94 <HAL_UART_IRQHandler+0x278>
        huart->RxState = HAL_UART_STATE_READY;
 800caaa:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800caac:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800caae:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cab2:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cab8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabc:	e843 2000 	strex	r0, r2, [r3]
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d1f7      	bne.n	800cab4 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cac4:	2302      	movs	r3, #2
 800cac6:	6723      	str	r3, [r4, #112]	; 0x70
 800cac8:	e7c7      	b.n	800ca5a <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800caca:	02cf      	lsls	r7, r1, #11
 800cacc:	d509      	bpl.n	800cae2 <HAL_UART_IRQHandler+0x2c6>
 800cace:	026e      	lsls	r6, r5, #9
 800cad0:	d507      	bpl.n	800cae2 <HAL_UART_IRQHandler+0x2c6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cad2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800cad6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cad8:	621a      	str	r2, [r3, #32]
}
 800cada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800cade:	f000 bfea 	b.w	800dab6 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cae2:	0608      	lsls	r0, r1, #24
 800cae4:	d516      	bpl.n	800cb14 <HAL_UART_IRQHandler+0x2f8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cae6:	f002 0080 	and.w	r0, r2, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800caea:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 800caee:	4328      	orrs	r0, r5
 800caf0:	d010      	beq.n	800cb14 <HAL_UART_IRQHandler+0x2f8>
    if (huart->TxISR != NULL)
 800caf2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f43f af2f 	beq.w	800c958 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 800cafa:	4620      	mov	r0, r4
 800cafc:	e6a7      	b.n	800c84e <HAL_UART_IRQHandler+0x32>
 800cafe:	bf00      	nop
 800cb00:	10000001 	.word	0x10000001
 800cb04:	04000120 	.word	0x04000120
 800cb08:	0800c71d 	.word	0x0800c71d
 800cb0c:	40020010 	.word	0x40020010
 800cb10:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb14:	064f      	lsls	r7, r1, #25
 800cb16:	d511      	bpl.n	800cb3c <HAL_UART_IRQHandler+0x320>
 800cb18:	0656      	lsls	r6, r2, #25
 800cb1a:	d50f      	bpl.n	800cb3c <HAL_UART_IRQHandler+0x320>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	e843 2100 	strex	r1, r2, [r3]
 800cb28:	2900      	cmp	r1, #0
 800cb2a:	d1f7      	bne.n	800cb1c <HAL_UART_IRQHandler+0x300>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb2c:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb2e:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800cb30:	67a1      	str	r1, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 800cb32:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  HAL_UART_TxCpltCallback(huart);
 800cb36:	f7f4 fee3 	bl	8001900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb3a:	e70d      	b.n	800c958 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb3c:	020d      	lsls	r5, r1, #8
 800cb3e:	d506      	bpl.n	800cb4e <HAL_UART_IRQHandler+0x332>
 800cb40:	0050      	lsls	r0, r2, #1
 800cb42:	d504      	bpl.n	800cb4e <HAL_UART_IRQHandler+0x332>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb44:	4620      	mov	r0, r4
}
 800cb46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb4a:	f000 bfb6 	b.w	800daba <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb4e:	01cb      	lsls	r3, r1, #7
 800cb50:	f57f af02 	bpl.w	800c958 <HAL_UART_IRQHandler+0x13c>
 800cb54:	2a00      	cmp	r2, #0
 800cb56:	f6bf aeff 	bge.w	800c958 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb5a:	4620      	mov	r0, r4
}
 800cb5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb60:	f000 bfaa 	b.w	800dab8 <HAL_UARTEx_RxFifoFullCallback>

0800cb64 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb64:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 800cb68:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb6c:	2a22      	cmp	r2, #34	; 0x22
{
 800cb6e:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb70:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb72:	d155      	bne.n	800cc20 <UART_RxISR_8BIT+0xbc>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cb76:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800cb78:	400b      	ands	r3, r1
 800cb7a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800cb7c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800cb7e:	3301      	adds	r3, #1
 800cb80:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800cb82:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800cb86:	3b01      	subs	r3, #1
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cb8e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d142      	bne.n	800cc1e <UART_RxISR_8BIT+0xba>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb98:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9a:	e852 3f00 	ldrex	r3, [r2]
 800cb9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800cba6:	6803      	ldr	r3, [r0, #0]
 800cba8:	2900      	cmp	r1, #0
 800cbaa:	d1f5      	bne.n	800cb98 <UART_RxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbac:	f103 0208 	add.w	r2, r3, #8
 800cbb0:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb8:	f103 0c08 	add.w	ip, r3, #8
 800cbbc:	e84c 2100 	strex	r1, r2, [ip]
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	d1f3      	bne.n	800cbac <UART_RxISR_8BIT+0x48>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cbc4:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cbc6:	6741      	str	r1, [r0, #116]	; 0x74
      huart->RxState = HAL_UART_STATE_READY;
 800cbc8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cbcc:	4a17      	ldr	r2, [pc, #92]	; (800cc2c <UART_RxISR_8BIT+0xc8>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbce:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d105      	bne.n	800cbe0 <UART_RxISR_8BIT+0x7c>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbd4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800cbd6:	2a01      	cmp	r2, #1
 800cbd8:	d00e      	beq.n	800cbf8 <UART_RxISR_8BIT+0x94>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cbda:	f7f4 febd 	bl	8001958 <HAL_UART_RxCpltCallback>
 800cbde:	e01e      	b.n	800cc1e <UART_RxISR_8BIT+0xba>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	0211      	lsls	r1, r2, #8
 800cbe4:	d5f6      	bpl.n	800cbd4 <UART_RxISR_8BIT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cbea:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbee:	e843 2100 	strex	r1, r2, [r3]
 800cbf2:	2900      	cmp	r1, #0
 800cbf4:	d1f7      	bne.n	800cbe6 <UART_RxISR_8BIT+0x82>
 800cbf6:	e7ed      	b.n	800cbd4 <UART_RxISR_8BIT+0x70>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc00:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	e843 2100 	strex	r1, r2, [r3]
 800cc08:	2900      	cmp	r1, #0
 800cc0a:	d1f7      	bne.n	800cbfc <UART_RxISR_8BIT+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc0c:	69da      	ldr	r2, [r3, #28]
 800cc0e:	06d2      	lsls	r2, r2, #27
 800cc10:	d501      	bpl.n	800cc16 <UART_RxISR_8BIT+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc12:	2210      	movs	r2, #16
 800cc14:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc16:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800cc1a:	f7f4 ff47 	bl	8001aac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc1e:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc20:	699a      	ldr	r2, [r3, #24]
 800cc22:	f042 0208 	orr.w	r2, r2, #8
 800cc26:	619a      	str	r2, [r3, #24]
}
 800cc28:	e7f9      	b.n	800cc1e <UART_RxISR_8BIT+0xba>
 800cc2a:	bf00      	nop
 800cc2c:	58000c00 	.word	0x58000c00

0800cc30 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc30:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 800cc34:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc38:	2a22      	cmp	r2, #34	; 0x22
{
 800cc3a:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc3c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc3e:	d152      	bne.n	800cce6 <UART_RxISR_16BIT+0xb6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800cc42:	4011      	ands	r1, r2
 800cc44:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800cc46:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 800cc4a:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800cc4c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800cc50:	3a01      	subs	r2, #1
 800cc52:	b292      	uxth	r2, r2
 800cc54:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cc58:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800cc5c:	b292      	uxth	r2, r2
 800cc5e:	2a00      	cmp	r2, #0
 800cc60:	d140      	bne.n	800cce4 <UART_RxISR_16BIT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc62:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6a:	e843 2100 	strex	r1, r2, [r3]
 800cc6e:	2900      	cmp	r1, #0
 800cc70:	d1f7      	bne.n	800cc62 <UART_RxISR_16BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc72:	f103 0208 	add.w	r2, r3, #8
 800cc76:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc7a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7e:	f103 0c08 	add.w	ip, r3, #8
 800cc82:	e84c 2100 	strex	r1, r2, [ip]
 800cc86:	2900      	cmp	r1, #0
 800cc88:	d1f3      	bne.n	800cc72 <UART_RxISR_16BIT+0x42>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc8a:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cc8c:	6741      	str	r1, [r0, #116]	; 0x74
      huart->RxState = HAL_UART_STATE_READY;
 800cc8e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc92:	4a17      	ldr	r2, [pc, #92]	; (800ccf0 <UART_RxISR_16BIT+0xc0>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc94:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d105      	bne.n	800cca6 <UART_RxISR_16BIT+0x76>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc9a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800cc9c:	2a01      	cmp	r2, #1
 800cc9e:	d00e      	beq.n	800ccbe <UART_RxISR_16BIT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cca0:	f7f4 fe5a 	bl	8001958 <HAL_UART_RxCpltCallback>
 800cca4:	e01e      	b.n	800cce4 <UART_RxISR_16BIT+0xb4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cca6:	685a      	ldr	r2, [r3, #4]
 800cca8:	0211      	lsls	r1, r2, #8
 800ccaa:	d5f6      	bpl.n	800cc9a <UART_RxISR_16BIT+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccac:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccb0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb4:	e843 2100 	strex	r1, r2, [r3]
 800ccb8:	2900      	cmp	r1, #0
 800ccba:	d1f7      	bne.n	800ccac <UART_RxISR_16BIT+0x7c>
 800ccbc:	e7ed      	b.n	800cc9a <UART_RxISR_16BIT+0x6a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccc6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccca:	e843 2100 	strex	r1, r2, [r3]
 800ccce:	2900      	cmp	r1, #0
 800ccd0:	d1f7      	bne.n	800ccc2 <UART_RxISR_16BIT+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ccd2:	69da      	ldr	r2, [r3, #28]
 800ccd4:	06d2      	lsls	r2, r2, #27
 800ccd6:	d501      	bpl.n	800ccdc <UART_RxISR_16BIT+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccd8:	2210      	movs	r2, #16
 800ccda:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccdc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800cce0:	f7f4 fee4 	bl	8001aac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cce4:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cce6:	699a      	ldr	r2, [r3, #24]
 800cce8:	f042 0208 	orr.w	r2, r2, #8
 800ccec:	619a      	str	r2, [r3, #24]
}
 800ccee:	e7f9      	b.n	800cce4 <UART_RxISR_16BIT+0xb4>
 800ccf0:	58000c00 	.word	0x58000c00

0800ccf4 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ccf4:	6803      	ldr	r3, [r0, #0]
{
 800ccf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ccfa:	69df      	ldr	r7, [r3, #28]
{
 800ccfc:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ccfe:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cd00:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd02:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  uint16_t  uhMask = huart->Mask;
 800cd06:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd0a:	2922      	cmp	r1, #34	; 0x22
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cd0c:	9201      	str	r2, [sp, #4]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd0e:	f040 80b4 	bne.w	800ce7a <UART_RxISR_8BIT_FIFOEN+0x186>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cd12:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd16:	2600      	movs	r6, #0
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd18:	f8df a16c 	ldr.w	sl, [pc, #364]	; 800ce88 <UART_RxISR_8BIT_FIFOEN+0x194>
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd1c:	f8df b16c 	ldr.w	fp, [pc, #364]	; 800ce8c <UART_RxISR_8BIT_FIFOEN+0x198>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd20:	f1b9 0f00 	cmp.w	r9, #0
 800cd24:	d001      	beq.n	800cd2a <UART_RxISR_8BIT_FIFOEN+0x36>
 800cd26:	06bb      	lsls	r3, r7, #26
 800cd28:	d421      	bmi.n	800cd6e <UART_RxISR_8BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cd2a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800cd2e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cd30:	b1d3      	cbz	r3, 800cd68 <UART_RxISR_8BIT_FIFOEN+0x74>
 800cd32:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d916      	bls.n	800cd68 <UART_RxISR_8BIT_FIFOEN+0x74>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd3c:	f102 0308 	add.w	r3, r2, #8
 800cd40:	e853 3f00 	ldrex	r3, [r3]
 800cd44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd48:	3208      	adds	r2, #8
 800cd4a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800cd4e:	6822      	ldr	r2, [r4, #0]
 800cd50:	2900      	cmp	r1, #0
 800cd52:	d1f2      	bne.n	800cd3a <UART_RxISR_8BIT_FIFOEN+0x46>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cd54:	4b4b      	ldr	r3, [pc, #300]	; (800ce84 <UART_RxISR_8BIT_FIFOEN+0x190>)
 800cd56:	6763      	str	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd58:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd5c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd60:	e842 3100 	strex	r1, r3, [r2]
 800cd64:	2900      	cmp	r1, #0
 800cd66:	d1f7      	bne.n	800cd58 <UART_RxISR_8BIT_FIFOEN+0x64>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd68:	b003      	add	sp, #12
 800cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd6e:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cd70:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cd74:	ea03 0308 	and.w	r3, r3, r8
 800cd78:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800cd7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800cd80:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800cd84:	3b01      	subs	r3, #1
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cd8c:	6823      	ldr	r3, [r4, #0]
 800cd8e:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cd90:	0778      	lsls	r0, r7, #29
 800cd92:	d02c      	beq.n	800cdee <UART_RxISR_8BIT_FIFOEN+0xfa>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd94:	07f9      	lsls	r1, r7, #31
 800cd96:	d50a      	bpl.n	800cdae <UART_RxISR_8BIT_FIFOEN+0xba>
 800cd98:	9a01      	ldr	r2, [sp, #4]
 800cd9a:	05d2      	lsls	r2, r2, #23
 800cd9c:	d507      	bpl.n	800cdae <UART_RxISR_8BIT_FIFOEN+0xba>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd9e:	2101      	movs	r1, #1
 800cda0:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cda2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800cda6:	f041 0101 	orr.w	r1, r1, #1
 800cdaa:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdae:	07b8      	lsls	r0, r7, #30
 800cdb0:	d509      	bpl.n	800cdc6 <UART_RxISR_8BIT_FIFOEN+0xd2>
 800cdb2:	07e9      	lsls	r1, r5, #31
 800cdb4:	d507      	bpl.n	800cdc6 <UART_RxISR_8BIT_FIFOEN+0xd2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cdb6:	2102      	movs	r1, #2
 800cdb8:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cdba:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800cdbe:	f041 0104 	orr.w	r1, r1, #4
 800cdc2:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdc6:	077a      	lsls	r2, r7, #29
 800cdc8:	d509      	bpl.n	800cdde <UART_RxISR_8BIT_FIFOEN+0xea>
 800cdca:	07e8      	lsls	r0, r5, #31
 800cdcc:	d507      	bpl.n	800cdde <UART_RxISR_8BIT_FIFOEN+0xea>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cdce:	2104      	movs	r1, #4
 800cdd0:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cdd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800cdd6:	f043 0302 	orr.w	r3, r3, #2
 800cdda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cdde:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800cde2:	b123      	cbz	r3, 800cdee <UART_RxISR_8BIT_FIFOEN+0xfa>
          HAL_UART_ErrorCallback(huart);
 800cde4:	4620      	mov	r0, r4
 800cde6:	f7f4 fdfb 	bl	80019e0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdea:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 800cdee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d193      	bne.n	800cd20 <UART_RxISR_8BIT_FIFOEN+0x2c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdf8:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfa:	e851 3f00 	ldrex	r3, [r1]
 800cdfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce02:	e841 3000 	strex	r0, r3, [r1]
   return(result);
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d1f5      	bne.n	800cdf8 <UART_RxISR_8BIT_FIFOEN+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0c:	f103 0208 	add.w	r2, r3, #8
 800ce10:	e852 1f00 	ldrex	r1, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce14:	ea01 010a 	and.w	r1, r1, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce18:	e842 1000 	strex	r0, r1, [r2]
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d1f5      	bne.n	800ce0c <UART_RxISR_8BIT_FIFOEN+0x118>
        huart->RxState = HAL_UART_STATE_READY;
 800ce20:	2120      	movs	r1, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce22:	455b      	cmp	r3, fp
        huart->RxISR = NULL;
 800ce24:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ce26:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce2a:	6720      	str	r0, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce2c:	d00a      	beq.n	800ce44 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce2e:	6859      	ldr	r1, [r3, #4]
 800ce30:	0209      	lsls	r1, r1, #8
 800ce32:	d507      	bpl.n	800ce44 <UART_RxISR_8BIT_FIFOEN+0x150>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce34:	e853 1f00 	ldrex	r1, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce38:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3c:	e843 1000 	strex	r0, r1, [r3]
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d1f7      	bne.n	800ce34 <UART_RxISR_8BIT_FIFOEN+0x140>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce44:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ce46:	2901      	cmp	r1, #1
 800ce48:	d113      	bne.n	800ce72 <UART_RxISR_8BIT_FIFOEN+0x17e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce4a:	66e6      	str	r6, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4c:	e853 1f00 	ldrex	r1, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce50:	f021 0110 	bic.w	r1, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce54:	e843 1000 	strex	r0, r1, [r3]
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d1f7      	bne.n	800ce4c <UART_RxISR_8BIT_FIFOEN+0x158>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce5c:	69d9      	ldr	r1, [r3, #28]
 800ce5e:	06ca      	lsls	r2, r1, #27
 800ce60:	d501      	bpl.n	800ce66 <UART_RxISR_8BIT_FIFOEN+0x172>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce62:	2110      	movs	r1, #16
 800ce64:	6219      	str	r1, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce66:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f7f4 fe1e 	bl	8001aac <HAL_UARTEx_RxEventCallback>
 800ce70:	e756      	b.n	800cd20 <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 800ce72:	4620      	mov	r0, r4
 800ce74:	f7f4 fd70 	bl	8001958 <HAL_UART_RxCpltCallback>
 800ce78:	e752      	b.n	800cd20 <UART_RxISR_8BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ce7a:	699a      	ldr	r2, [r3, #24]
 800ce7c:	f042 0208 	orr.w	r2, r2, #8
 800ce80:	619a      	str	r2, [r3, #24]
}
 800ce82:	e771      	b.n	800cd68 <UART_RxISR_8BIT_FIFOEN+0x74>
 800ce84:	0800cb65 	.word	0x0800cb65
 800ce88:	effffffe 	.word	0xeffffffe
 800ce8c:	58000c00 	.word	0x58000c00

0800ce90 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ce90:	6803      	ldr	r3, [r0, #0]
{
 800ce92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ce96:	69df      	ldr	r7, [r3, #28]
{
 800ce98:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ce9a:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ce9c:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce9e:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  uint16_t  uhMask = huart->Mask;
 800cea2:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cea6:	2922      	cmp	r1, #34	; 0x22
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cea8:	9201      	str	r2, [sp, #4]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ceaa:	f040 80b2 	bne.w	800d012 <UART_RxISR_16BIT_FIFOEN+0x182>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ceae:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceb2:	2600      	movs	r6, #0
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ceb4:	f8df a168 	ldr.w	sl, [pc, #360]	; 800d020 <UART_RxISR_16BIT_FIFOEN+0x190>
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ceb8:	f8df b168 	ldr.w	fp, [pc, #360]	; 800d024 <UART_RxISR_16BIT_FIFOEN+0x194>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cebc:	f1b9 0f00 	cmp.w	r9, #0
 800cec0:	d001      	beq.n	800cec6 <UART_RxISR_16BIT_FIFOEN+0x36>
 800cec2:	06bb      	lsls	r3, r7, #26
 800cec4:	d421      	bmi.n	800cf0a <UART_RxISR_16BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cec6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800ceca:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cecc:	b1d3      	cbz	r3, 800cf04 <UART_RxISR_16BIT_FIFOEN+0x74>
 800cece:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d916      	bls.n	800cf04 <UART_RxISR_16BIT_FIFOEN+0x74>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ced6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced8:	f102 0308 	add.w	r3, r2, #8
 800cedc:	e853 3f00 	ldrex	r3, [r3]
 800cee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee4:	3208      	adds	r2, #8
 800cee6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800ceea:	6822      	ldr	r2, [r4, #0]
 800ceec:	2900      	cmp	r1, #0
 800ceee:	d1f2      	bne.n	800ced6 <UART_RxISR_16BIT_FIFOEN+0x46>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cef0:	4b4a      	ldr	r3, [pc, #296]	; (800d01c <UART_RxISR_16BIT_FIFOEN+0x18c>)
 800cef2:	6763      	str	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef4:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cef8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefc:	e842 3100 	strex	r1, r3, [r2]
 800cf00:	2900      	cmp	r1, #0
 800cf02:	d1f7      	bne.n	800cef4 <UART_RxISR_16BIT_FIFOEN+0x64>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf04:	b003      	add	sp, #12
 800cf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf0a:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800cf0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf0e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800cf10:	ea08 0101 	and.w	r1, r8, r1
 800cf14:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 800cf18:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800cf1a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800cf1e:	3a01      	subs	r2, #1
 800cf20:	b292      	uxth	r2, r2
 800cf22:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cf26:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cf28:	0778      	lsls	r0, r7, #29
 800cf2a:	d02c      	beq.n	800cf86 <UART_RxISR_16BIT_FIFOEN+0xf6>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf2c:	07f9      	lsls	r1, r7, #31
 800cf2e:	d50a      	bpl.n	800cf46 <UART_RxISR_16BIT_FIFOEN+0xb6>
 800cf30:	9a01      	ldr	r2, [sp, #4]
 800cf32:	05d2      	lsls	r2, r2, #23
 800cf34:	d507      	bpl.n	800cf46 <UART_RxISR_16BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf36:	2101      	movs	r1, #1
 800cf38:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf3a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800cf3e:	f041 0101 	orr.w	r1, r1, #1
 800cf42:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf46:	07b8      	lsls	r0, r7, #30
 800cf48:	d509      	bpl.n	800cf5e <UART_RxISR_16BIT_FIFOEN+0xce>
 800cf4a:	07e9      	lsls	r1, r5, #31
 800cf4c:	d507      	bpl.n	800cf5e <UART_RxISR_16BIT_FIFOEN+0xce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf4e:	2102      	movs	r1, #2
 800cf50:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf52:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800cf56:	f041 0104 	orr.w	r1, r1, #4
 800cf5a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf5e:	077a      	lsls	r2, r7, #29
 800cf60:	d509      	bpl.n	800cf76 <UART_RxISR_16BIT_FIFOEN+0xe6>
 800cf62:	07e8      	lsls	r0, r5, #31
 800cf64:	d507      	bpl.n	800cf76 <UART_RxISR_16BIT_FIFOEN+0xe6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf66:	2104      	movs	r1, #4
 800cf68:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf6a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800cf6e:	f043 0302 	orr.w	r3, r3, #2
 800cf72:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800cf7a:	b123      	cbz	r3, 800cf86 <UART_RxISR_16BIT_FIFOEN+0xf6>
          HAL_UART_ErrorCallback(huart);
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7f4 fd2f 	bl	80019e0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf82:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 800cf86:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d195      	bne.n	800cebc <UART_RxISR_16BIT_FIFOEN+0x2c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf90:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf92:	e851 3f00 	ldrex	r3, [r1]
 800cf96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9a:	e841 3000 	strex	r0, r3, [r1]
   return(result);
 800cf9e:	6823      	ldr	r3, [r4, #0]
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d1f5      	bne.n	800cf90 <UART_RxISR_16BIT_FIFOEN+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa4:	f103 0208 	add.w	r2, r3, #8
 800cfa8:	e852 1f00 	ldrex	r1, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfac:	ea01 010a 	and.w	r1, r1, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb0:	e842 1000 	strex	r0, r1, [r2]
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d1f5      	bne.n	800cfa4 <UART_RxISR_16BIT_FIFOEN+0x114>
        huart->RxState = HAL_UART_STATE_READY;
 800cfb8:	2120      	movs	r1, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cfba:	455b      	cmp	r3, fp
        huart->RxISR = NULL;
 800cfbc:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800cfbe:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfc2:	6720      	str	r0, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cfc4:	d00a      	beq.n	800cfdc <UART_RxISR_16BIT_FIFOEN+0x14c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cfc6:	6859      	ldr	r1, [r3, #4]
 800cfc8:	0209      	lsls	r1, r1, #8
 800cfca:	d507      	bpl.n	800cfdc <UART_RxISR_16BIT_FIFOEN+0x14c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfcc:	e853 1f00 	ldrex	r1, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cfd0:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd4:	e843 1000 	strex	r0, r1, [r3]
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d1f7      	bne.n	800cfcc <UART_RxISR_16BIT_FIFOEN+0x13c>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfdc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800cfde:	2901      	cmp	r1, #1
 800cfe0:	d113      	bne.n	800d00a <UART_RxISR_16BIT_FIFOEN+0x17a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfe2:	66e6      	str	r6, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe4:	e853 1f00 	ldrex	r1, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfe8:	f021 0110 	bic.w	r1, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfec:	e843 1000 	strex	r0, r1, [r3]
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d1f7      	bne.n	800cfe4 <UART_RxISR_16BIT_FIFOEN+0x154>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cff4:	69d9      	ldr	r1, [r3, #28]
 800cff6:	06ca      	lsls	r2, r1, #27
 800cff8:	d501      	bpl.n	800cffe <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cffa:	2110      	movs	r1, #16
 800cffc:	6219      	str	r1, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cffe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800d002:	4620      	mov	r0, r4
 800d004:	f7f4 fd52 	bl	8001aac <HAL_UARTEx_RxEventCallback>
 800d008:	e758      	b.n	800cebc <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7f4 fca4 	bl	8001958 <HAL_UART_RxCpltCallback>
 800d010:	e754      	b.n	800cebc <UART_RxISR_16BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d012:	699a      	ldr	r2, [r3, #24]
 800d014:	f042 0208 	orr.w	r2, r2, #8
 800d018:	619a      	str	r2, [r3, #24]
}
 800d01a:	e773      	b.n	800cf04 <UART_RxISR_16BIT_FIFOEN+0x74>
 800d01c:	0800cc31 	.word	0x0800cc31
 800d020:	effffffe 	.word	0xeffffffe
 800d024:	58000c00 	.word	0x58000c00

0800d028 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d028:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800d02a:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d02c:	2301      	movs	r3, #1
 800d02e:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d030:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d032:	2b01      	cmp	r3, #1
 800d034:	d105      	bne.n	800d042 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d036:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800d03a:	0849      	lsrs	r1, r1, #1
 800d03c:	f7f4 fd36 	bl	8001aac <HAL_UARTEx_RxEventCallback>
}
 800d040:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800d042:	f7ff fb46 	bl	800c6d2 <HAL_UART_RxHalfCpltCallback>
}
 800d046:	e7fb      	b.n	800d040 <UART_DMARxHalfCplt+0x18>

0800d048 <UART_DMAReceiveCplt>:
{
 800d048:	b508      	push	{r3, lr}
 800d04a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d04c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d04e:	69db      	ldr	r3, [r3, #28]
 800d050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d054:	d032      	beq.n	800d0bc <UART_DMAReceiveCplt+0x74>
    huart->RxXferCount = 0U;
 800d056:	2300      	movs	r3, #0
 800d058:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d05c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05e:	e852 3f00 	ldrex	r3, [r2]
 800d062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d066:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800d06a:	6803      	ldr	r3, [r0, #0]
 800d06c:	2900      	cmp	r1, #0
 800d06e:	d1f5      	bne.n	800d05c <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d070:	f103 0208 	add.w	r2, r3, #8
 800d074:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d078:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07c:	f103 0c08 	add.w	ip, r3, #8
 800d080:	e84c 2100 	strex	r1, r2, [ip]
 800d084:	2900      	cmp	r1, #0
 800d086:	d1f3      	bne.n	800d070 <UART_DMAReceiveCplt+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d088:	f103 0208 	add.w	r2, r3, #8
 800d08c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d094:	f103 0c08 	add.w	ip, r3, #8
 800d098:	e84c 2100 	strex	r1, r2, [ip]
 800d09c:	2900      	cmp	r1, #0
 800d09e:	d1f3      	bne.n	800d088 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 800d0a0:	2220      	movs	r2, #32
 800d0a2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0a6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d0a8:	2a01      	cmp	r2, #1
 800d0aa:	d107      	bne.n	800d0bc <UART_DMAReceiveCplt+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ac:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0b0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b4:	e843 2100 	strex	r1, r2, [r3]
 800d0b8:	2900      	cmp	r1, #0
 800d0ba:	d1f7      	bne.n	800d0ac <UART_DMAReceiveCplt+0x64>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0c0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d104      	bne.n	800d0d0 <UART_DMAReceiveCplt+0x88>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0c6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800d0ca:	f7f4 fcef 	bl	8001aac <HAL_UARTEx_RxEventCallback>
}
 800d0ce:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 800d0d0:	f7f4 fc42 	bl	8001958 <HAL_UART_RxCpltCallback>
}
 800d0d4:	e7fb      	b.n	800d0ce <UART_DMAReceiveCplt+0x86>

0800d0d6 <HAL_HalfDuplex_EnableTransmitter>:
{
 800d0d6:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800d0d8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d01e      	beq.n	800d11e <HAL_HalfDuplex_EnableTransmitter+0x48>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800d0e6:	2324      	movs	r3, #36	; 0x24
 800d0e8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800d0ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ee:	e852 3f00 	ldrex	r3, [r2]
 800d0f2:	f023 030c 	bic.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f6:	e842 3400 	strex	r4, r3, [r2]
   return(result);
 800d0fa:	6801      	ldr	r1, [r0, #0]
 800d0fc:	2c00      	cmp	r4, #0
 800d0fe:	d1f5      	bne.n	800d0ec <HAL_HalfDuplex_EnableTransmitter+0x16>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d100:	e851 2f00 	ldrex	r2, [r1]
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800d104:	f042 0208 	orr.w	r2, r2, #8
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d108:	e841 2300 	strex	r3, r2, [r1]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1f7      	bne.n	800d100 <HAL_HalfDuplex_EnableTransmitter+0x2a>
  huart->gState = HAL_UART_STATE_READY;
 800d110:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800d112:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800d116:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  return HAL_OK;
 800d11a:	4618      	mov	r0, r3
}
 800d11c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800d11e:	2002      	movs	r0, #2
 800d120:	e7fc      	b.n	800d11c <HAL_HalfDuplex_EnableTransmitter+0x46>

0800d122 <HAL_HalfDuplex_EnableReceiver>:
{
 800d122:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800d124:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d01e      	beq.n	800d16a <HAL_HalfDuplex_EnableReceiver+0x48>
 800d12c:	2301      	movs	r3, #1
 800d12e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800d132:	2324      	movs	r3, #36	; 0x24
 800d134:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800d138:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13a:	e852 3f00 	ldrex	r3, [r2]
 800d13e:	f023 030c 	bic.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d142:	e842 3400 	strex	r4, r3, [r2]
   return(result);
 800d146:	6801      	ldr	r1, [r0, #0]
 800d148:	2c00      	cmp	r4, #0
 800d14a:	d1f5      	bne.n	800d138 <HAL_HalfDuplex_EnableReceiver+0x16>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14c:	e851 2f00 	ldrex	r2, [r1]
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800d150:	f042 0204 	orr.w	r2, r2, #4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d154:	e841 2300 	strex	r3, r2, [r1]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1f7      	bne.n	800d14c <HAL_HalfDuplex_EnableReceiver+0x2a>
  huart->gState = HAL_UART_STATE_READY;
 800d15c:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800d15e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800d162:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  return HAL_OK;
 800d166:	4618      	mov	r0, r3
}
 800d168:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800d16a:	2002      	movs	r0, #2
 800d16c:	e7fc      	b.n	800d168 <HAL_HalfDuplex_EnableReceiver+0x46>

0800d16e <HAL_UART_GetState>:
  temp1 = huart->gState;
 800d16e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  temp2 = huart->RxState;
 800d172:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 800d176:	4310      	orrs	r0, r2
 800d178:	4770      	bx	lr
	...

0800d17c <UART_SetConfig>:
{
 800d17c:	b530      	push	{r4, r5, lr}
 800d17e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800d180:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d182:	69c0      	ldr	r0, [r0, #28]
{
 800d184:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d186:	6921      	ldr	r1, [r4, #16]
 800d188:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d18a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d18c:	430a      	orrs	r2, r1
 800d18e:	6961      	ldr	r1, [r4, #20]
 800d190:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d192:	4997      	ldr	r1, [pc, #604]	; (800d3f0 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d194:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d196:	4029      	ands	r1, r5
 800d198:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d19a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d19c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d19e:	685a      	ldr	r2, [r3, #4]
 800d1a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800d1a4:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d1a6:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d1a8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d1aa:	4a92      	ldr	r2, [pc, #584]	; (800d3f4 <UART_SetConfig+0x278>)
 800d1ac:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800d1ae:	bf1c      	itt	ne
 800d1b0:	6a22      	ldrne	r2, [r4, #32]
 800d1b2:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d1b4:	689a      	ldr	r2, [r3, #8]
 800d1b6:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800d1ba:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800d1be:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d1c2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c6:	f022 020f 	bic.w	r2, r2, #15
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1ce:	4a8a      	ldr	r2, [pc, #552]	; (800d3f8 <UART_SetConfig+0x27c>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d11b      	bne.n	800d20c <UART_SetConfig+0x90>
 800d1d4:	4b89      	ldr	r3, [pc, #548]	; (800d3fc <UART_SetConfig+0x280>)
 800d1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d1dc:	2b28      	cmp	r3, #40	; 0x28
 800d1de:	d86c      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d1e0:	4a87      	ldr	r2, [pc, #540]	; (800d400 <UART_SetConfig+0x284>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d1e6:	5cd3      	ldrb	r3, [r2, r3]
 800d1e8:	f040 8132 	bne.w	800d450 <UART_SetConfig+0x2d4>
    switch (clocksource)
 800d1ec:	2b08      	cmp	r3, #8
 800d1ee:	f200 80c0 	bhi.w	800d372 <UART_SetConfig+0x1f6>
 800d1f2:	2b08      	cmp	r3, #8
 800d1f4:	d861      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d1f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d1fa:	00e7      	.short	0x00e7
 800d1fc:	006000ec 	.word	0x006000ec
 800d200:	00ef0060 	.word	0x00ef0060
 800d204:	00600060 	.word	0x00600060
 800d208:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d20c:	4a7d      	ldr	r2, [pc, #500]	; (800d404 <UART_SetConfig+0x288>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d107      	bne.n	800d222 <UART_SetConfig+0xa6>
 800d212:	4b7a      	ldr	r3, [pc, #488]	; (800d3fc <UART_SetConfig+0x280>)
 800d214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d216:	f003 0307 	and.w	r3, r3, #7
 800d21a:	2b05      	cmp	r3, #5
 800d21c:	d84d      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d21e:	4a7a      	ldr	r2, [pc, #488]	; (800d408 <UART_SetConfig+0x28c>)
 800d220:	e7df      	b.n	800d1e2 <UART_SetConfig+0x66>
 800d222:	4a7a      	ldr	r2, [pc, #488]	; (800d40c <UART_SetConfig+0x290>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d107      	bne.n	800d238 <UART_SetConfig+0xbc>
 800d228:	4b74      	ldr	r3, [pc, #464]	; (800d3fc <UART_SetConfig+0x280>)
 800d22a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d22c:	f003 0307 	and.w	r3, r3, #7
 800d230:	2b05      	cmp	r3, #5
 800d232:	d842      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d234:	4a76      	ldr	r2, [pc, #472]	; (800d410 <UART_SetConfig+0x294>)
 800d236:	e7d4      	b.n	800d1e2 <UART_SetConfig+0x66>
 800d238:	4a76      	ldr	r2, [pc, #472]	; (800d414 <UART_SetConfig+0x298>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d107      	bne.n	800d24e <UART_SetConfig+0xd2>
 800d23e:	4b6f      	ldr	r3, [pc, #444]	; (800d3fc <UART_SetConfig+0x280>)
 800d240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d242:	f003 0307 	and.w	r3, r3, #7
 800d246:	2b05      	cmp	r3, #5
 800d248:	d837      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d24a:	4a73      	ldr	r2, [pc, #460]	; (800d418 <UART_SetConfig+0x29c>)
 800d24c:	e7c9      	b.n	800d1e2 <UART_SetConfig+0x66>
 800d24e:	4a73      	ldr	r2, [pc, #460]	; (800d41c <UART_SetConfig+0x2a0>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d107      	bne.n	800d264 <UART_SetConfig+0xe8>
 800d254:	4b69      	ldr	r3, [pc, #420]	; (800d3fc <UART_SetConfig+0x280>)
 800d256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d258:	f003 0307 	and.w	r3, r3, #7
 800d25c:	2b05      	cmp	r3, #5
 800d25e:	d82c      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d260:	4a6f      	ldr	r2, [pc, #444]	; (800d420 <UART_SetConfig+0x2a4>)
 800d262:	e7be      	b.n	800d1e2 <UART_SetConfig+0x66>
 800d264:	4a6f      	ldr	r2, [pc, #444]	; (800d424 <UART_SetConfig+0x2a8>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d107      	bne.n	800d27a <UART_SetConfig+0xfe>
 800d26a:	4b64      	ldr	r3, [pc, #400]	; (800d3fc <UART_SetConfig+0x280>)
 800d26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d26e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d272:	2b28      	cmp	r3, #40	; 0x28
 800d274:	d821      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d276:	4a6c      	ldr	r2, [pc, #432]	; (800d428 <UART_SetConfig+0x2ac>)
 800d278:	e7b3      	b.n	800d1e2 <UART_SetConfig+0x66>
 800d27a:	4a6c      	ldr	r2, [pc, #432]	; (800d42c <UART_SetConfig+0x2b0>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d107      	bne.n	800d290 <UART_SetConfig+0x114>
 800d280:	4b5e      	ldr	r3, [pc, #376]	; (800d3fc <UART_SetConfig+0x280>)
 800d282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d284:	f003 0307 	and.w	r3, r3, #7
 800d288:	2b05      	cmp	r3, #5
 800d28a:	d816      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d28c:	4a68      	ldr	r2, [pc, #416]	; (800d430 <UART_SetConfig+0x2b4>)
 800d28e:	e7a8      	b.n	800d1e2 <UART_SetConfig+0x66>
 800d290:	4a68      	ldr	r2, [pc, #416]	; (800d434 <UART_SetConfig+0x2b8>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d107      	bne.n	800d2a6 <UART_SetConfig+0x12a>
 800d296:	4b59      	ldr	r3, [pc, #356]	; (800d3fc <UART_SetConfig+0x280>)
 800d298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d29a:	f003 0307 	and.w	r3, r3, #7
 800d29e:	2b05      	cmp	r3, #5
 800d2a0:	d80b      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d2a2:	4a65      	ldr	r2, [pc, #404]	; (800d438 <UART_SetConfig+0x2bc>)
 800d2a4:	e79d      	b.n	800d1e2 <UART_SetConfig+0x66>
 800d2a6:	4a53      	ldr	r2, [pc, #332]	; (800d3f4 <UART_SetConfig+0x278>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d106      	bne.n	800d2ba <UART_SetConfig+0x13e>
 800d2ac:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 800d2b0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d2b2:	f003 0307 	and.w	r3, r3, #7
 800d2b6:	2b05      	cmp	r3, #5
 800d2b8:	d901      	bls.n	800d2be <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d2ba:	2001      	movs	r0, #1
 800d2bc:	e00e      	b.n	800d2dc <UART_SetConfig+0x160>
 800d2be:	495f      	ldr	r1, [pc, #380]	; (800d43c <UART_SetConfig+0x2c0>)
 800d2c0:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 800d2c2:	2b10      	cmp	r3, #16
 800d2c4:	d023      	beq.n	800d30e <UART_SetConfig+0x192>
 800d2c6:	d811      	bhi.n	800d2ec <UART_SetConfig+0x170>
 800d2c8:	2b04      	cmp	r3, #4
 800d2ca:	d016      	beq.n	800d2fa <UART_SetConfig+0x17e>
 800d2cc:	2b08      	cmp	r3, #8
 800d2ce:	d019      	beq.n	800d304 <UART_SetConfig+0x188>
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d1f2      	bne.n	800d2ba <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d2d4:	f7fd fd54 	bl	800ad80 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800d2d8:	bb10      	cbnz	r0, 800d320 <UART_SetConfig+0x1a4>
 800d2da:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800d2dc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800d2e0:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800d2e2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800d2e4:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 800d2e8:	b007      	add	sp, #28
 800d2ea:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 800d2ec:	2b20      	cmp	r3, #32
 800d2ee:	d03e      	beq.n	800d36e <UART_SetConfig+0x1f2>
 800d2f0:	2b40      	cmp	r3, #64	; 0x40
 800d2f2:	d1e2      	bne.n	800d2ba <UART_SetConfig+0x13e>
 800d2f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d2f8:	e012      	b.n	800d320 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2fa:	4668      	mov	r0, sp
 800d2fc:	f7fd fd52 	bl	800ada4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d300:	9801      	ldr	r0, [sp, #4]
        break;
 800d302:	e7e9      	b.n	800d2d8 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d304:	a803      	add	r0, sp, #12
 800d306:	f7fd fdf7 	bl	800aef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d30a:	9804      	ldr	r0, [sp, #16]
        break;
 800d30c:	e7e4      	b.n	800d2d8 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d30e:	6813      	ldr	r3, [r2, #0]
 800d310:	484b      	ldr	r0, [pc, #300]	; (800d440 <UART_SetConfig+0x2c4>)
 800d312:	f013 0f20 	tst.w	r3, #32
 800d316:	d003      	beq.n	800d320 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d318:	6813      	ldr	r3, [r2, #0]
 800d31a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d31e:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d320:	4b48      	ldr	r3, [pc, #288]	; (800d444 <UART_SetConfig+0x2c8>)
 800d322:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d324:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d326:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d32a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d32e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d332:	4299      	cmp	r1, r3
 800d334:	d8c1      	bhi.n	800d2ba <UART_SetConfig+0x13e>
 800d336:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800d33a:	d8be      	bhi.n	800d2ba <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d33c:	2300      	movs	r3, #0
 800d33e:	4619      	mov	r1, r3
 800d340:	f7f3 f9f2 	bl	8000728 <__aeabi_uldivmod>
 800d344:	462a      	mov	r2, r5
 800d346:	0209      	lsls	r1, r1, #8
 800d348:	086b      	lsrs	r3, r5, #1
 800d34a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800d34e:	0200      	lsls	r0, r0, #8
 800d350:	18c0      	adds	r0, r0, r3
 800d352:	f04f 0300 	mov.w	r3, #0
 800d356:	f141 0100 	adc.w	r1, r1, #0
 800d35a:	f7f3 f9e5 	bl	8000728 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d35e:	4b3a      	ldr	r3, [pc, #232]	; (800d448 <UART_SetConfig+0x2cc>)
 800d360:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d364:	429a      	cmp	r2, r3
 800d366:	d8a8      	bhi.n	800d2ba <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	60d8      	str	r0, [r3, #12]
 800d36c:	e7b5      	b.n	800d2da <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 800d36e:	4837      	ldr	r0, [pc, #220]	; (800d44c <UART_SetConfig+0x2d0>)
 800d370:	e7d6      	b.n	800d320 <UART_SetConfig+0x1a4>
    switch (clocksource)
 800d372:	2b20      	cmp	r3, #32
 800d374:	d03a      	beq.n	800d3ec <UART_SetConfig+0x270>
 800d376:	2b40      	cmp	r3, #64	; 0x40
 800d378:	d00b      	beq.n	800d392 <UART_SetConfig+0x216>
 800d37a:	2b10      	cmp	r3, #16
 800d37c:	d19d      	bne.n	800d2ba <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d37e:	4b1f      	ldr	r3, [pc, #124]	; (800d3fc <UART_SetConfig+0x280>)
 800d380:	482f      	ldr	r0, [pc, #188]	; (800d440 <UART_SetConfig+0x2c4>)
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	f012 0f20 	tst.w	r2, #32
 800d388:	d003      	beq.n	800d392 <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d390:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d392:	4b2c      	ldr	r3, [pc, #176]	; (800d444 <UART_SetConfig+0x2c8>)
 800d394:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d396:	6861      	ldr	r1, [r4, #4]
 800d398:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d39c:	084b      	lsrs	r3, r1, #1
 800d39e:	fbb0 f2f2 	udiv	r2, r0, r2
 800d3a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3a6:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3aa:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3ae:	f1a3 0110 	sub.w	r1, r3, #16
 800d3b2:	4291      	cmp	r1, r2
 800d3b4:	d881      	bhi.n	800d2ba <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3b6:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3ba:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800d3be:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3c0:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	60cb      	str	r3, [r1, #12]
 800d3c6:	e788      	b.n	800d2da <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3c8:	f7fc fe88 	bl	800a0dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d084      	beq.n	800d2da <UART_SetConfig+0x15e>
 800d3d0:	e7df      	b.n	800d392 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3d2:	f7fc fe95 	bl	800a100 <HAL_RCC_GetPCLK2Freq>
        break;
 800d3d6:	e7f9      	b.n	800d3cc <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3d8:	4668      	mov	r0, sp
 800d3da:	f7fd fce3 	bl	800ada4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3de:	9801      	ldr	r0, [sp, #4]
        break;
 800d3e0:	e7f4      	b.n	800d3cc <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3e2:	a803      	add	r0, sp, #12
 800d3e4:	f7fd fd88 	bl	800aef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3e8:	9804      	ldr	r0, [sp, #16]
        break;
 800d3ea:	e7ef      	b.n	800d3cc <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 800d3ec:	4817      	ldr	r0, [pc, #92]	; (800d44c <UART_SetConfig+0x2d0>)
 800d3ee:	e7d0      	b.n	800d392 <UART_SetConfig+0x216>
 800d3f0:	cfff69f3 	.word	0xcfff69f3
 800d3f4:	58000c00 	.word	0x58000c00
 800d3f8:	40011000 	.word	0x40011000
 800d3fc:	58024400 	.word	0x58024400
 800d400:	08015d74 	.word	0x08015d74
 800d404:	40004400 	.word	0x40004400
 800d408:	08015d9d 	.word	0x08015d9d
 800d40c:	40004800 	.word	0x40004800
 800d410:	08015d9d 	.word	0x08015d9d
 800d414:	40004c00 	.word	0x40004c00
 800d418:	08015d9d 	.word	0x08015d9d
 800d41c:	40005000 	.word	0x40005000
 800d420:	08015d9d 	.word	0x08015d9d
 800d424:	40011400 	.word	0x40011400
 800d428:	08015d74 	.word	0x08015d74
 800d42c:	40007800 	.word	0x40007800
 800d430:	08015d9d 	.word	0x08015d9d
 800d434:	40007c00 	.word	0x40007c00
 800d438:	08015d9d 	.word	0x08015d9d
 800d43c:	08015da3 	.word	0x08015da3
 800d440:	03d09000 	.word	0x03d09000
 800d444:	08015daa 	.word	0x08015daa
 800d448:	000ffcff 	.word	0x000ffcff
 800d44c:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800d450:	2b08      	cmp	r3, #8
 800d452:	d817      	bhi.n	800d484 <UART_SetConfig+0x308>
 800d454:	2b08      	cmp	r3, #8
 800d456:	f63f af30 	bhi.w	800d2ba <UART_SetConfig+0x13e>
 800d45a:	a201      	add	r2, pc, #4	; (adr r2, 800d460 <UART_SetConfig+0x2e4>)
 800d45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d460:	0800d4c7 	.word	0x0800d4c7
 800d464:	0800d4d3 	.word	0x0800d4d3
 800d468:	0800d2bb 	.word	0x0800d2bb
 800d46c:	0800d2bb 	.word	0x0800d2bb
 800d470:	0800d4d9 	.word	0x0800d4d9
 800d474:	0800d2bb 	.word	0x0800d2bb
 800d478:	0800d2bb 	.word	0x0800d2bb
 800d47c:	0800d2bb 	.word	0x0800d2bb
 800d480:	0800d4e3 	.word	0x0800d4e3
 800d484:	2b20      	cmp	r3, #32
 800d486:	d031      	beq.n	800d4ec <UART_SetConfig+0x370>
 800d488:	2b40      	cmp	r3, #64	; 0x40
 800d48a:	d031      	beq.n	800d4f0 <UART_SetConfig+0x374>
 800d48c:	2b10      	cmp	r3, #16
 800d48e:	f47f af14 	bne.w	800d2ba <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d492:	4b19      	ldr	r3, [pc, #100]	; (800d4f8 <UART_SetConfig+0x37c>)
 800d494:	4819      	ldr	r0, [pc, #100]	; (800d4fc <UART_SetConfig+0x380>)
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	f012 0f20 	tst.w	r2, #32
 800d49c:	d003      	beq.n	800d4a6 <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d4a4:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d4a8:	4a15      	ldr	r2, [pc, #84]	; (800d500 <UART_SetConfig+0x384>)
 800d4aa:	6863      	ldr	r3, [r4, #4]
 800d4ac:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800d4b0:	fbb0 f0f2 	udiv	r0, r0, r2
 800d4b4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800d4b8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4bc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800d4c0:	f1a0 0210 	sub.w	r2, r0, #16
 800d4c4:	e74e      	b.n	800d364 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4c6:	f7fc fe09 	bl	800a0dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	f43f af05 	beq.w	800d2da <UART_SetConfig+0x15e>
 800d4d0:	e7e9      	b.n	800d4a6 <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4d2:	f7fc fe15 	bl	800a100 <HAL_RCC_GetPCLK2Freq>
        break;
 800d4d6:	e7f8      	b.n	800d4ca <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4d8:	4668      	mov	r0, sp
 800d4da:	f7fd fc63 	bl	800ada4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d4de:	9801      	ldr	r0, [sp, #4]
        break;
 800d4e0:	e7f3      	b.n	800d4ca <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4e2:	a803      	add	r0, sp, #12
 800d4e4:	f7fd fd08 	bl	800aef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d4e8:	9804      	ldr	r0, [sp, #16]
        break;
 800d4ea:	e7ee      	b.n	800d4ca <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 800d4ec:	4805      	ldr	r0, [pc, #20]	; (800d504 <UART_SetConfig+0x388>)
 800d4ee:	e7da      	b.n	800d4a6 <UART_SetConfig+0x32a>
    switch (clocksource)
 800d4f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d4f4:	e7d7      	b.n	800d4a6 <UART_SetConfig+0x32a>
 800d4f6:	bf00      	nop
 800d4f8:	58024400 	.word	0x58024400
 800d4fc:	03d09000 	.word	0x03d09000
 800d500:	08015daa 	.word	0x08015daa
 800d504:	003d0900 	.word	0x003d0900

0800d508 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d508:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d50a:	07da      	lsls	r2, r3, #31
{
 800d50c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d50e:	d506      	bpl.n	800d51e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d510:	6801      	ldr	r1, [r0, #0]
 800d512:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800d514:	684a      	ldr	r2, [r1, #4]
 800d516:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d51a:	4322      	orrs	r2, r4
 800d51c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d51e:	079c      	lsls	r4, r3, #30
 800d520:	d506      	bpl.n	800d530 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d522:	6801      	ldr	r1, [r0, #0]
 800d524:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800d526:	684a      	ldr	r2, [r1, #4]
 800d528:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d52c:	4322      	orrs	r2, r4
 800d52e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d530:	0759      	lsls	r1, r3, #29
 800d532:	d506      	bpl.n	800d542 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d534:	6801      	ldr	r1, [r0, #0]
 800d536:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d538:	684a      	ldr	r2, [r1, #4]
 800d53a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d53e:	4322      	orrs	r2, r4
 800d540:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d542:	071a      	lsls	r2, r3, #28
 800d544:	d506      	bpl.n	800d554 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d546:	6801      	ldr	r1, [r0, #0]
 800d548:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800d54a:	684a      	ldr	r2, [r1, #4]
 800d54c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d550:	4322      	orrs	r2, r4
 800d552:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d554:	06dc      	lsls	r4, r3, #27
 800d556:	d506      	bpl.n	800d566 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d558:	6801      	ldr	r1, [r0, #0]
 800d55a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d55c:	688a      	ldr	r2, [r1, #8]
 800d55e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d562:	4322      	orrs	r2, r4
 800d564:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d566:	0699      	lsls	r1, r3, #26
 800d568:	d506      	bpl.n	800d578 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d56a:	6801      	ldr	r1, [r0, #0]
 800d56c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800d56e:	688a      	ldr	r2, [r1, #8]
 800d570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d574:	4322      	orrs	r2, r4
 800d576:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d578:	065a      	lsls	r2, r3, #25
 800d57a:	d510      	bpl.n	800d59e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d57c:	6801      	ldr	r1, [r0, #0]
 800d57e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800d580:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d582:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d586:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800d58a:	ea42 0204 	orr.w	r2, r2, r4
 800d58e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d590:	d105      	bne.n	800d59e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d592:	684a      	ldr	r2, [r1, #4]
 800d594:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800d596:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800d59a:	4322      	orrs	r2, r4
 800d59c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d59e:	061b      	lsls	r3, r3, #24
 800d5a0:	d506      	bpl.n	800d5b0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d5a2:	6802      	ldr	r2, [r0, #0]
 800d5a4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800d5a6:	6853      	ldr	r3, [r2, #4]
 800d5a8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d5ac:	430b      	orrs	r3, r1
 800d5ae:	6053      	str	r3, [r2, #4]
}
 800d5b0:	bd10      	pop	{r4, pc}

0800d5b2 <UART_WaitOnFlagUntilTimeout>:
{
 800d5b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	460f      	mov	r7, r1
 800d5be:	4616      	mov	r6, r2
 800d5c0:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5c2:	6822      	ldr	r2, [r4, #0]
 800d5c4:	69d3      	ldr	r3, [r2, #28]
 800d5c6:	ea37 0303 	bics.w	r3, r7, r3
 800d5ca:	bf0c      	ite	eq
 800d5cc:	2301      	moveq	r3, #1
 800d5ce:	2300      	movne	r3, #0
 800d5d0:	42b3      	cmp	r3, r6
 800d5d2:	d001      	beq.n	800d5d8 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	e01e      	b.n	800d616 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 800d5d8:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d5dc:	d0f2      	beq.n	800d5c4 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5de:	f7f9 fb4d 	bl	8006c7c <HAL_GetTick>
 800d5e2:	eba0 0008 	sub.w	r0, r0, r8
 800d5e6:	4548      	cmp	r0, r9
 800d5e8:	d825      	bhi.n	800d636 <UART_WaitOnFlagUntilTimeout+0x84>
 800d5ea:	f1b9 0f00 	cmp.w	r9, #0
 800d5ee:	d022      	beq.n	800d636 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5f0:	6820      	ldr	r0, [r4, #0]
 800d5f2:	6803      	ldr	r3, [r0, #0]
 800d5f4:	075a      	lsls	r2, r3, #29
 800d5f6:	d5e4      	bpl.n	800d5c2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d5f8:	69c5      	ldr	r5, [r0, #28]
 800d5fa:	f015 0508 	ands.w	r5, r5, #8
 800d5fe:	d00c      	beq.n	800d61a <UART_WaitOnFlagUntilTimeout+0x68>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d600:	2508      	movs	r5, #8
 800d602:	6205      	str	r5, [r0, #32]
           UART_EndRxTransfer(huart);
 800d604:	4620      	mov	r0, r4
 800d606:	f7fe fe7b 	bl	800c300 <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 800d60a:	2300      	movs	r3, #0
           return HAL_ERROR;
 800d60c:	2001      	movs	r0, #1
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d60e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
           __HAL_UNLOCK(huart);
 800d612:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 800d616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d61a:	69c3      	ldr	r3, [r0, #28]
 800d61c:	051b      	lsls	r3, r3, #20
 800d61e:	d5d0      	bpl.n	800d5c2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d624:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 800d626:	4620      	mov	r0, r4
 800d628:	f7fe fe6a 	bl	800c300 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d62c:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800d62e:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d632:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 800d636:	2003      	movs	r0, #3
 800d638:	e7ed      	b.n	800d616 <UART_WaitOnFlagUntilTimeout+0x64>

0800d63a <HAL_UART_Transmit>:
{
 800d63a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d63e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800d640:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800d644:	4604      	mov	r4, r0
 800d646:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800d648:	2b20      	cmp	r3, #32
{
 800d64a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800d64c:	d147      	bne.n	800d6de <HAL_UART_Transmit+0xa4>
    if ((pData == NULL) || (Size == 0U))
 800d64e:	2900      	cmp	r1, #0
 800d650:	d047      	beq.n	800d6e2 <HAL_UART_Transmit+0xa8>
 800d652:	2a00      	cmp	r2, #0
 800d654:	d045      	beq.n	800d6e2 <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d656:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d658:	2500      	movs	r5, #0
 800d65a:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d65e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 800d662:	f7f9 fb0b 	bl	8006c7c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d666:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800d668:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 800d66a:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d66e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 800d672:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d676:	d103      	bne.n	800d680 <HAL_UART_Transmit+0x46>
 800d678:	6922      	ldr	r2, [r4, #16]
 800d67a:	b90a      	cbnz	r2, 800d680 <HAL_UART_Transmit+0x46>
 800d67c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800d67e:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 800d680:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d684:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800d688:	b292      	uxth	r2, r2
 800d68a:	b952      	cbnz	r2, 800d6a2 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d68c:	2140      	movs	r1, #64	; 0x40
 800d68e:	4620      	mov	r0, r4
 800d690:	f7ff ff8f 	bl	800d5b2 <UART_WaitOnFlagUntilTimeout>
 800d694:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 800d696:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d69a:	b968      	cbnz	r0, 800d6b8 <HAL_UART_Transmit+0x7e>
}
 800d69c:	b004      	add	sp, #16
 800d69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2180      	movs	r1, #128	; 0x80
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	9303      	str	r3, [sp, #12]
 800d6aa:	f7ff ff82 	bl	800d5b2 <UART_WaitOnFlagUntilTimeout>
 800d6ae:	9b03      	ldr	r3, [sp, #12]
 800d6b0:	b120      	cbz	r0, 800d6bc <HAL_UART_Transmit+0x82>
        huart->gState = HAL_UART_STATE_READY;
 800d6b2:	2320      	movs	r3, #32
 800d6b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800d6b8:	2003      	movs	r0, #3
 800d6ba:	e7ef      	b.n	800d69c <HAL_UART_Transmit+0x62>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d6bc:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 800d6be:	b95e      	cbnz	r6, 800d6d8 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d6c0:	f835 2b02 	ldrh.w	r2, [r5], #2
 800d6c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d6c8:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800d6ca:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800d6ce:	3a01      	subs	r2, #1
 800d6d0:	b292      	uxth	r2, r2
 800d6d2:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 800d6d6:	e7d3      	b.n	800d680 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d6d8:	f816 2b01 	ldrb.w	r2, [r6], #1
 800d6dc:	e7f4      	b.n	800d6c8 <HAL_UART_Transmit+0x8e>
    return HAL_BUSY;
 800d6de:	2002      	movs	r0, #2
 800d6e0:	e7dc      	b.n	800d69c <HAL_UART_Transmit+0x62>
      return  HAL_ERROR;
 800d6e2:	2001      	movs	r0, #1
 800d6e4:	e7da      	b.n	800d69c <HAL_UART_Transmit+0x62>

0800d6e6 <UART_CheckIdleState>:
{
 800d6e6:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e8:	2500      	movs	r5, #0
{
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ee:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800d6f2:	f7f9 fac3 	bl	8006c7c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6f6:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800d6f8:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6fa:	6812      	ldr	r2, [r2, #0]
 800d6fc:	0711      	lsls	r1, r2, #28
 800d6fe:	d51d      	bpl.n	800d73c <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d700:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800d704:	9003      	str	r0, [sp, #12]
 800d706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d70a:	4620      	mov	r0, r4
 800d70c:	9200      	str	r2, [sp, #0]
 800d70e:	462a      	mov	r2, r5
 800d710:	f7ff ff4f 	bl	800d5b2 <UART_WaitOnFlagUntilTimeout>
 800d714:	9b03      	ldr	r3, [sp, #12]
 800d716:	b188      	cbz	r0, 800d73c <UART_CheckIdleState+0x56>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d718:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71a:	e852 3f00 	ldrex	r3, [r2]
 800d71e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d722:	e842 3100 	strex	r1, r3, [r2]
 800d726:	2900      	cmp	r1, #0
 800d728:	d1f6      	bne.n	800d718 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 800d72a:	2320      	movs	r3, #32
 800d72c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800d730:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800d732:	2300      	movs	r3, #0
 800d734:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 800d738:	b005      	add	sp, #20
 800d73a:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d73c:	6822      	ldr	r2, [r4, #0]
 800d73e:	6812      	ldr	r2, [r2, #0]
 800d740:	0752      	lsls	r2, r2, #29
 800d742:	d523      	bpl.n	800d78c <UART_CheckIdleState+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d744:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800d748:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d74c:	4620      	mov	r0, r4
 800d74e:	9200      	str	r2, [sp, #0]
 800d750:	2200      	movs	r2, #0
 800d752:	f7ff ff2e 	bl	800d5b2 <UART_WaitOnFlagUntilTimeout>
 800d756:	b1c8      	cbz	r0, 800d78c <UART_CheckIdleState+0xa6>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d758:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d75a:	e852 3f00 	ldrex	r3, [r2]
 800d75e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d762:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800d766:	6822      	ldr	r2, [r4, #0]
 800d768:	2900      	cmp	r1, #0
 800d76a:	d1f5      	bne.n	800d758 <UART_CheckIdleState+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	f102 0308 	add.w	r3, r2, #8
 800d770:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d774:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d778:	f102 0008 	add.w	r0, r2, #8
 800d77c:	e840 3100 	strex	r1, r3, [r0]
 800d780:	2900      	cmp	r1, #0
 800d782:	d1f3      	bne.n	800d76c <UART_CheckIdleState+0x86>
      huart->RxState = HAL_UART_STATE_READY;
 800d784:	2320      	movs	r3, #32
 800d786:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800d78a:	e7d1      	b.n	800d730 <UART_CheckIdleState+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 800d78c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d78e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800d790:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d794:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d798:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d79a:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 800d79c:	e7c9      	b.n	800d732 <UART_CheckIdleState+0x4c>

0800d79e <HAL_UART_Init>:
{
 800d79e:	b510      	push	{r4, lr}
  if (huart == NULL)
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	b350      	cbz	r0, 800d7fa <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800d7a4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800d7a8:	b91b      	cbnz	r3, 800d7b2 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800d7aa:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800d7ae:	f7f9 f803 	bl	80067b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800d7b2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d7b4:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d7b6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800d7b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800d7bc:	6813      	ldr	r3, [r2, #0]
 800d7be:	f023 0301 	bic.w	r3, r3, #1
 800d7c2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d7c4:	f7ff fcda 	bl	800d17c <UART_SetConfig>
 800d7c8:	2801      	cmp	r0, #1
 800d7ca:	d016      	beq.n	800d7fa <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d7cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d7ce:	b113      	cbz	r3, 800d7d6 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f7ff fe99 	bl	800d508 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7d6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800d7d8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7da:	685a      	ldr	r2, [r3, #4]
 800d7dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d7e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d7e2:	689a      	ldr	r2, [r3, #8]
 800d7e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d7e8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	f042 0201 	orr.w	r2, r2, #1
}
 800d7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800d7f4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800d7f6:	f7ff bf76 	b.w	800d6e6 <UART_CheckIdleState>
}
 800d7fa:	2001      	movs	r0, #1
 800d7fc:	bd10      	pop	{r4, pc}
	...

0800d800 <UART_Start_Receive_IT>:
{
 800d800:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 800d802:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
 800d804:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800d806:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 800d808:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  UART_MASK_COMPUTATION(huart);
 800d80c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
 800d810:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d814:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 800d816:	d135      	bne.n	800d884 <UART_Start_Receive_IT+0x84>
 800d818:	6903      	ldr	r3, [r0, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f240 13ff 	movw	r3, #511	; 0x1ff
 800d820:	bf18      	it	ne
 800d822:	23ff      	movne	r3, #255	; 0xff
 800d824:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d828:	2300      	movs	r3, #0
 800d82a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d82e:	2322      	movs	r3, #34	; 0x22
 800d830:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d834:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d836:	f101 0308 	add.w	r3, r1, #8
 800d83a:	e853 3f00 	ldrex	r3, [r3]
 800d83e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d842:	3108      	adds	r1, #8
 800d844:	e841 3400 	strex	r4, r3, [r1]
   return(result);
 800d848:	6803      	ldr	r3, [r0, #0]
 800d84a:	2c00      	cmp	r4, #0
 800d84c:	d1f2      	bne.n	800d834 <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d84e:	6e45      	ldr	r5, [r0, #100]	; 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d850:	6884      	ldr	r4, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d852:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d856:	6901      	ldr	r1, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d858:	d134      	bne.n	800d8c4 <UART_Start_Receive_IT+0xc4>
 800d85a:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 800d85e:	4295      	cmp	r5, r2
 800d860:	d830      	bhi.n	800d8c4 <UART_Start_Receive_IT+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d862:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800d866:	d11d      	bne.n	800d8a4 <UART_Start_Receive_IT+0xa4>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d868:	4a25      	ldr	r2, [pc, #148]	; (800d900 <UART_Start_Receive_IT+0x100>)
 800d86a:	4c26      	ldr	r4, [pc, #152]	; (800d904 <UART_Start_Receive_IT+0x104>)
 800d86c:	2900      	cmp	r1, #0
 800d86e:	bf18      	it	ne
 800d870:	4622      	movne	r2, r4
 800d872:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d874:	b1c1      	cbz	r1, 800d8a8 <UART_Start_Receive_IT+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d876:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d87a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87e:	e843 2100 	strex	r1, r2, [r3]
   return(result);
 800d882:	e7f7      	b.n	800d874 <UART_Start_Receive_IT+0x74>
  UART_MASK_COMPUTATION(huart);
 800d884:	b929      	cbnz	r1, 800d892 <UART_Start_Receive_IT+0x92>
 800d886:	6903      	ldr	r3, [r0, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	bf14      	ite	ne
 800d88c:	237f      	movne	r3, #127	; 0x7f
 800d88e:	23ff      	moveq	r3, #255	; 0xff
 800d890:	e7c8      	b.n	800d824 <UART_Start_Receive_IT+0x24>
 800d892:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800d896:	d1c5      	bne.n	800d824 <UART_Start_Receive_IT+0x24>
 800d898:	6903      	ldr	r3, [r0, #16]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	bf0c      	ite	eq
 800d89e:	237f      	moveq	r3, #127	; 0x7f
 800d8a0:	233f      	movne	r3, #63	; 0x3f
 800d8a2:	e7bf      	b.n	800d824 <UART_Start_Receive_IT+0x24>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d8a4:	4a17      	ldr	r2, [pc, #92]	; (800d904 <UART_Start_Receive_IT+0x104>)
 800d8a6:	e7e4      	b.n	800d872 <UART_Start_Receive_IT+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a8:	f103 0208 	add.w	r2, r3, #8
 800d8ac:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d8b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b4:	f103 0008 	add.w	r0, r3, #8
 800d8b8:	e840 2100 	strex	r1, r2, [r0]
 800d8bc:	2900      	cmp	r1, #0
 800d8be:	d1f3      	bne.n	800d8a8 <UART_Start_Receive_IT+0xa8>
}
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	bd30      	pop	{r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8c4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800d8c8:	d10f      	bne.n	800d8ea <UART_Start_Receive_IT+0xea>
      huart->RxISR = UART_RxISR_8BIT;
 800d8ca:	4a0f      	ldr	r2, [pc, #60]	; (800d908 <UART_Start_Receive_IT+0x108>)
 800d8cc:	4c0f      	ldr	r4, [pc, #60]	; (800d90c <UART_Start_Receive_IT+0x10c>)
 800d8ce:	2900      	cmp	r1, #0
 800d8d0:	bf18      	it	ne
 800d8d2:	4622      	movne	r2, r4
 800d8d4:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d8d6:	b151      	cbz	r1, 800d8ee <UART_Start_Receive_IT+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d8dc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e0:	e843 2100 	strex	r1, r2, [r3]
 800d8e4:	2900      	cmp	r1, #0
 800d8e6:	d1f7      	bne.n	800d8d8 <UART_Start_Receive_IT+0xd8>
 800d8e8:	e7ea      	b.n	800d8c0 <UART_Start_Receive_IT+0xc0>
      huart->RxISR = UART_RxISR_8BIT;
 800d8ea:	4a08      	ldr	r2, [pc, #32]	; (800d90c <UART_Start_Receive_IT+0x10c>)
 800d8ec:	e7f2      	b.n	800d8d4 <UART_Start_Receive_IT+0xd4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ee:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d8f2:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f6:	e843 2100 	strex	r1, r2, [r3]
 800d8fa:	2900      	cmp	r1, #0
 800d8fc:	d1f7      	bne.n	800d8ee <UART_Start_Receive_IT+0xee>
 800d8fe:	e7df      	b.n	800d8c0 <UART_Start_Receive_IT+0xc0>
 800d900:	0800ce91 	.word	0x0800ce91
 800d904:	0800ccf5 	.word	0x0800ccf5
 800d908:	0800cc31 	.word	0x0800cc31
 800d90c:	0800cb65 	.word	0x0800cb65

0800d910 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800d910:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800d914:	2b20      	cmp	r3, #32
{
 800d916:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 800d918:	d115      	bne.n	800d946 <HAL_UART_Receive_IT+0x36>
    if ((pData == NULL) || (Size == 0U))
 800d91a:	b1b9      	cbz	r1, 800d94c <HAL_UART_Receive_IT+0x3c>
 800d91c:	b1b2      	cbz	r2, 800d94c <HAL_UART_Receive_IT+0x3c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d91e:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d920:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d922:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d924:	4b0a      	ldr	r3, [pc, #40]	; (800d950 <HAL_UART_Receive_IT+0x40>)
 800d926:	429c      	cmp	r4, r3
 800d928:	d00a      	beq.n	800d940 <HAL_UART_Receive_IT+0x30>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d92a:	6863      	ldr	r3, [r4, #4]
 800d92c:	021b      	lsls	r3, r3, #8
 800d92e:	d507      	bpl.n	800d940 <HAL_UART_Receive_IT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d930:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d938:	e844 3500 	strex	r5, r3, [r4]
 800d93c:	2d00      	cmp	r5, #0
 800d93e:	d1f7      	bne.n	800d930 <HAL_UART_Receive_IT+0x20>
}
 800d940:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 800d942:	f7ff bf5d 	b.w	800d800 <UART_Start_Receive_IT>
    return HAL_BUSY;
 800d946:	2002      	movs	r0, #2
}
 800d948:	bc30      	pop	{r4, r5}
 800d94a:	4770      	bx	lr
      return HAL_ERROR;
 800d94c:	2001      	movs	r0, #1
 800d94e:	e7fb      	b.n	800d948 <HAL_UART_Receive_IT+0x38>
 800d950:	58000c00 	.word	0x58000c00

0800d954 <UART_Start_Receive_DMA>:
{
 800d954:	b570      	push	{r4, r5, r6, lr}
 800d956:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 800d958:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d95c:	2200      	movs	r2, #0
{
 800d95e:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 800d960:	6581      	str	r1, [r0, #88]	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d962:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d966:	2022      	movs	r0, #34	; 0x22
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d968:	6825      	ldr	r5, [r4, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d96a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  if (huart->hdmarx != NULL)
 800d96e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800d972:	b1a0      	cbz	r0, 800d99e <UART_Start_Receive_DMA+0x4a>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d974:	4e1c      	ldr	r6, [pc, #112]	; (800d9e8 <UART_Start_Receive_DMA+0x94>)
 800d976:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d978:	4e1c      	ldr	r6, [pc, #112]	; (800d9ec <UART_Start_Receive_DMA+0x98>)
 800d97a:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d97c:	4e1c      	ldr	r6, [pc, #112]	; (800d9f0 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800d97e:	e9c0 6213 	strd	r6, r2, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d982:	460a      	mov	r2, r1
 800d984:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800d988:	f7fa fbe2 	bl	8008150 <HAL_DMA_Start_IT>
 800d98c:	b138      	cbz	r0, 800d99e <UART_Start_Receive_DMA+0x4a>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d98e:	2310      	movs	r3, #16
      return HAL_ERROR;
 800d990:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d992:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      huart->RxState = HAL_UART_STATE_READY;
 800d996:	2320      	movs	r3, #32
 800d998:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800d99c:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d99e:	6922      	ldr	r2, [r4, #16]
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	b13a      	cbz	r2, 800d9b4 <UART_Start_Receive_DMA+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ac:	e843 2100 	strex	r1, r2, [r3]
 800d9b0:	2900      	cmp	r1, #0
 800d9b2:	d1f7      	bne.n	800d9a4 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b4:	f103 0208 	add.w	r2, r3, #8
 800d9b8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9bc:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c0:	f103 0008 	add.w	r0, r3, #8
 800d9c4:	e840 2100 	strex	r1, r2, [r0]
 800d9c8:	2900      	cmp	r1, #0
 800d9ca:	d1f3      	bne.n	800d9b4 <UART_Start_Receive_DMA+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9cc:	f103 0208 	add.w	r2, r3, #8
 800d9d0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d8:	f103 0108 	add.w	r1, r3, #8
 800d9dc:	e841 2000 	strex	r0, r2, [r1]
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d1f3      	bne.n	800d9cc <UART_Start_Receive_DMA+0x78>
 800d9e4:	e7da      	b.n	800d99c <UART_Start_Receive_DMA+0x48>
 800d9e6:	bf00      	nop
 800d9e8:	0800d049 	.word	0x0800d049
 800d9ec:	0800d029 	.word	0x0800d029
 800d9f0:	0800c6d5 	.word	0x0800c6d5

0800d9f4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9f4:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 800d9f6:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9f8:	b92b      	cbnz	r3, 800da06 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800da00:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da04:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da06:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da08:	4d09      	ldr	r5, [pc, #36]	; (800da30 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da0a:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da0c:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800da0e:	4c09      	ldr	r4, [pc, #36]	; (800da34 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da10:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da14:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da16:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800da18:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da1a:	011b      	lsls	r3, r3, #4
 800da1c:	fbb3 f3f1 	udiv	r3, r3, r1
 800da20:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da24:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800da26:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da28:	011b      	lsls	r3, r3, #4
 800da2a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800da2e:	e7e7      	b.n	800da00 <UARTEx_SetNbDataToProcess+0xc>
 800da30:	08015dca 	.word	0x08015dca
 800da34:	08015dc2 	.word	0x08015dc2

0800da38 <HAL_RS485Ex_Init>:
{
 800da38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3a:	460f      	mov	r7, r1
 800da3c:	4616      	mov	r6, r2
 800da3e:	461d      	mov	r5, r3
  if (huart == NULL)
 800da40:	4604      	mov	r4, r0
 800da42:	2800      	cmp	r0, #0
 800da44:	d035      	beq.n	800dab2 <HAL_RS485Ex_Init+0x7a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800da46:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800da4a:	b91b      	cbnz	r3, 800da54 <HAL_RS485Ex_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 800da4c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800da50:	f7f8 feb2 	bl	80067b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800da54:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800da56:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da58:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800da5a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800da5e:	6813      	ldr	r3, [r2, #0]
 800da60:	f023 0301 	bic.w	r3, r3, #1
 800da64:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da66:	f7ff fb89 	bl	800d17c <UART_SetConfig>
 800da6a:	2801      	cmp	r0, #1
 800da6c:	d021      	beq.n	800dab2 <HAL_RS485Ex_Init+0x7a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800da70:	b113      	cbz	r3, 800da78 <HAL_RS485Ex_Init+0x40>
    UART_AdvFeatureConfig(huart);
 800da72:	4620      	mov	r0, r4
 800da74:	f7ff fd48 	bl	800d508 <UART_AdvFeatureConfig>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800da78:	6823      	ldr	r3, [r4, #0]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800da7a:	042d      	lsls	r5, r5, #16
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800da7c:	689a      	ldr	r2, [r3, #8]
 800da7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da82:	609a      	str	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800da84:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800da88:	6898      	ldr	r0, [r3, #8]
 800da8a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800da8e:	4338      	orrs	r0, r7
 800da90:	6098      	str	r0, [r3, #8]
  return (UART_CheckIdleState(huart));
 800da92:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800da94:	6819      	ldr	r1, [r3, #0]
 800da96:	f021 717f 	bic.w	r1, r1, #66846720	; 0x3fc0000
 800da9a:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800da9e:	430a      	orrs	r2, r1
 800daa0:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	f042 0201 	orr.w	r2, r2, #1
 800daa8:	601a      	str	r2, [r3, #0]
}
 800daaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 800daae:	f7ff be1a 	b.w	800d6e6 <UART_CheckIdleState>
}
 800dab2:	2001      	movs	r0, #1
 800dab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dab6 <HAL_UARTEx_WakeupCallback>:
}
 800dab6:	4770      	bx	lr

0800dab8 <HAL_UARTEx_RxFifoFullCallback>:
 800dab8:	4770      	bx	lr

0800daba <HAL_UARTEx_TxFifoEmptyCallback>:
 800daba:	4770      	bx	lr

0800dabc <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800dabc:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d014      	beq.n	800daee <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dac4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800dac6:	2324      	movs	r3, #36	; 0x24
 800dac8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dacc:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800dace:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dad0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800dad4:	f023 0301 	bic.w	r3, r3, #1
 800dad8:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dada:	2300      	movs	r3, #0
 800dadc:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dade:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800dae0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800dae2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800dae6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  return HAL_OK;
 800daea:	4618      	mov	r0, r3
 800daec:	4770      	bx	lr
  __HAL_LOCK(huart);
 800daee:	2002      	movs	r0, #2
}
 800daf0:	4770      	bx	lr

0800daf2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800daf2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800daf4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 800daf8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d017      	beq.n	800db2e <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dafe:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800db00:	2324      	movs	r3, #36	; 0x24
 800db02:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db06:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800db08:	682b      	ldr	r3, [r5, #0]
 800db0a:	f023 0301 	bic.w	r3, r3, #1
 800db0e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800db10:	68ab      	ldr	r3, [r5, #8]
 800db12:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800db16:	4319      	orrs	r1, r3
 800db18:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800db1a:	f7ff ff6b 	bl	800d9f4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800db1e:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db20:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800db22:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800db26:	2000      	movs	r0, #0
 800db28:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800db2e:	2002      	movs	r0, #2
 800db30:	e7fc      	b.n	800db2c <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0800db32 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800db32:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800db34:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 800db38:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d017      	beq.n	800db6e <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db3e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800db40:	2324      	movs	r3, #36	; 0x24
 800db42:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db46:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	f023 0301 	bic.w	r3, r3, #1
 800db4e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800db50:	68ab      	ldr	r3, [r5, #8]
 800db52:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800db56:	4319      	orrs	r1, r3
 800db58:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800db5a:	f7ff ff4b 	bl	800d9f4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800db5e:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db60:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800db62:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800db66:	2000      	movs	r0, #0
 800db68:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800db6c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800db6e:	2002      	movs	r0, #2
 800db70:	e7fc      	b.n	800db6c <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0800db72 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 800db72:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800db74:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
{
 800db78:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800db7a:	2e20      	cmp	r6, #32
 800db7c:	d11c      	bne.n	800dbb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x46>
    if ((pData == NULL) || (Size == 0U))
 800db7e:	b909      	cbnz	r1, 800db84 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
      return HAL_ERROR;
 800db80:	2001      	movs	r0, #1
}
 800db82:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 800db84:	2a00      	cmp	r2, #0
 800db86:	d0fb      	beq.n	800db80 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800db88:	2301      	movs	r3, #1
 800db8a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db8c:	2300      	movs	r3, #0
 800db8e:	6703      	str	r3, [r0, #112]	; 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800db90:	f7ff fee0 	bl	800d954 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800db94:	2800      	cmp	r0, #0
 800db96:	d1f4      	bne.n	800db82 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d1f0      	bne.n	800db80 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db9e:	2210      	movs	r2, #16
 800dba0:	6823      	ldr	r3, [r4, #0]
 800dba2:	621a      	str	r2, [r3, #32]
 800dba4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba6:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbaa:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbae:	e842 3100 	strex	r1, r3, [r2]
 800dbb2:	2900      	cmp	r1, #0
 800dbb4:	d1f7      	bne.n	800dba6 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 800dbb6:	e7e4      	b.n	800db82 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
    return HAL_BUSY;
 800dbb8:	2002      	movs	r0, #2
 800dbba:	e7e2      	b.n	800db82 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>

0800dbbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dbbc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800dbbe:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800dbc0:	4a10      	ldr	r2, [pc, #64]	; (800dc04 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 800dbc2:	9301      	str	r3, [sp, #4]
    count++;
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800dbca:	9b01      	ldr	r3, [sp, #4]
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d816      	bhi.n	800dbfe <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dbd0:	6903      	ldr	r3, [r0, #16]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	daf6      	bge.n	800dbc4 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 800dbd6:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 800dbd8:	4a0a      	ldr	r2, [pc, #40]	; (800dc04 <USB_CoreReset+0x48>)
  count = 0U;
 800dbda:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dbdc:	6903      	ldr	r3, [r0, #16]
 800dbde:	f043 0301 	orr.w	r3, r3, #1
 800dbe2:	6103      	str	r3, [r0, #16]
    count++;
 800dbe4:	9b01      	ldr	r3, [sp, #4]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800dbea:	9b01      	ldr	r3, [sp, #4]
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d806      	bhi.n	800dbfe <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dbf0:	6903      	ldr	r3, [r0, #16]
 800dbf2:	f013 0301 	ands.w	r3, r3, #1
 800dbf6:	d1f5      	bne.n	800dbe4 <USB_CoreReset+0x28>

  return HAL_OK;
 800dbf8:	4618      	mov	r0, r3
}
 800dbfa:	b002      	add	sp, #8
 800dbfc:	4770      	bx	lr
      return HAL_TIMEOUT;
 800dbfe:	2003      	movs	r0, #3
 800dc00:	e7fb      	b.n	800dbfa <USB_CoreReset+0x3e>
 800dc02:	bf00      	nop
 800dc04:	00030d40 	.word	0x00030d40

0800dc08 <USB_CoreInit>:
{
 800dc08:	b084      	sub	sp, #16
 800dc0a:	b538      	push	{r3, r4, r5, lr}
 800dc0c:	ad05      	add	r5, sp, #20
 800dc0e:	4604      	mov	r4, r0
 800dc10:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d12f      	bne.n	800dc7a <USB_CoreInit+0x72>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dc1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc20:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dc22:	68c3      	ldr	r3, [r0, #12]
 800dc24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800dc28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc2c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dc2e:	68c3      	ldr	r3, [r0, #12]
 800dc30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800dc34:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800dc36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d103      	bne.n	800dc44 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dc3c:	68c3      	ldr	r3, [r0, #12]
 800dc3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc42:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800dc44:	4620      	mov	r0, r4
 800dc46:	f7ff ffb9 	bl	800dbbc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800dc4a:	9b07      	ldr	r3, [sp, #28]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d110      	bne.n	800dc72 <USB_CoreInit+0x6a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dc50:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dc56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800dc58:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 800dc5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc60:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dc62:	68a3      	ldr	r3, [r4, #8]
 800dc64:	f043 0306 	orr.w	r3, r3, #6
 800dc68:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dc6a:	68a3      	ldr	r3, [r4, #8]
 800dc6c:	f043 0320 	orr.w	r3, r3, #32
 800dc70:	60a3      	str	r3, [r4, #8]
}
 800dc72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc76:	b004      	add	sp, #16
 800dc78:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dc7a:	68c3      	ldr	r3, [r0, #12]
 800dc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc80:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800dc82:	f7ff ff9b 	bl	800dbbc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800dc86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc88:	b923      	cbnz	r3, 800dc94 <USB_CoreInit+0x8c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dc8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc90:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc92:	e7da      	b.n	800dc4a <USB_CoreInit+0x42>
 800dc94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc9a:	e7f9      	b.n	800dc90 <USB_CoreInit+0x88>

0800dc9c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dc9c:	6883      	ldr	r3, [r0, #8]
 800dc9e:	f023 0301 	bic.w	r3, r3, #1
 800dca2:	6083      	str	r3, [r0, #8]
}
 800dca4:	2000      	movs	r0, #0
 800dca6:	4770      	bx	lr

0800dca8 <USB_SetCurrentMode>:
{
 800dca8:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dcaa:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800dcac:	2901      	cmp	r1, #1
{
 800dcae:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dcb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dcb4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800dcb6:	d10f      	bne.n	800dcd8 <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dcb8:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800dcba:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dcbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dcc0:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 800dcc2:	2001      	movs	r0, #1
      ms++;
 800dcc4:	3401      	adds	r4, #1
      HAL_Delay(1U);
 800dcc6:	f7f8 ffdf 	bl	8006c88 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800dcca:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dccc:	07d9      	lsls	r1, r3, #31
 800dcce:	d414      	bmi.n	800dcfa <USB_SetCurrentMode+0x52>
 800dcd0:	2c32      	cmp	r4, #50	; 0x32
 800dcd2:	d1f6      	bne.n	800dcc2 <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 800dcd4:	2001      	movs	r0, #1
}
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 800dcd8:	2900      	cmp	r1, #0
 800dcda:	d1fb      	bne.n	800dcd4 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dcdc:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800dcde:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dce4:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 800dce6:	2001      	movs	r0, #1
      ms++;
 800dce8:	3401      	adds	r4, #1
      HAL_Delay(1U);
 800dcea:	f7f8 ffcd 	bl	8006c88 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800dcee:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dcf0:	07da      	lsls	r2, r3, #31
 800dcf2:	d502      	bpl.n	800dcfa <USB_SetCurrentMode+0x52>
 800dcf4:	2c32      	cmp	r4, #50	; 0x32
 800dcf6:	d1f6      	bne.n	800dce6 <USB_SetCurrentMode+0x3e>
 800dcf8:	e7ec      	b.n	800dcd4 <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 800dcfa:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 800dcfe:	4258      	negs	r0, r3
 800dd00:	4158      	adcs	r0, r3
 800dd02:	e7e8      	b.n	800dcd6 <USB_SetCurrentMode+0x2e>

0800dd04 <USB_FlushTxFifo>:
{
 800dd04:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800dd06:	2300      	movs	r3, #0
    if (count > 200000U)
 800dd08:	4a10      	ldr	r2, [pc, #64]	; (800dd4c <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 800dd0a:	9301      	str	r3, [sp, #4]
    count++;
 800dd0c:	9b01      	ldr	r3, [sp, #4]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800dd12:	9b01      	ldr	r3, [sp, #4]
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d816      	bhi.n	800dd46 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd18:	6903      	ldr	r3, [r0, #16]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	daf6      	bge.n	800dd0c <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dd1e:	0189      	lsls	r1, r1, #6
  count = 0U;
 800dd20:	2300      	movs	r3, #0
    if (count > 200000U)
 800dd22:	4a0a      	ldr	r2, [pc, #40]	; (800dd4c <USB_FlushTxFifo+0x48>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dd24:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800dd28:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dd2a:	6101      	str	r1, [r0, #16]
    count++;
 800dd2c:	9b01      	ldr	r3, [sp, #4]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800dd32:	9b01      	ldr	r3, [sp, #4]
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d806      	bhi.n	800dd46 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dd38:	6903      	ldr	r3, [r0, #16]
 800dd3a:	f013 0320 	ands.w	r3, r3, #32
 800dd3e:	d1f5      	bne.n	800dd2c <USB_FlushTxFifo+0x28>
  return HAL_OK;
 800dd40:	4618      	mov	r0, r3
}
 800dd42:	b002      	add	sp, #8
 800dd44:	4770      	bx	lr
      return HAL_TIMEOUT;
 800dd46:	2003      	movs	r0, #3
 800dd48:	e7fb      	b.n	800dd42 <USB_FlushTxFifo+0x3e>
 800dd4a:	bf00      	nop
 800dd4c:	00030d40 	.word	0x00030d40

0800dd50 <USB_FlushRxFifo>:
{
 800dd50:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800dd52:	2300      	movs	r3, #0
    if (count > 200000U)
 800dd54:	4a0f      	ldr	r2, [pc, #60]	; (800dd94 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 800dd56:	9301      	str	r3, [sp, #4]
    count++;
 800dd58:	9b01      	ldr	r3, [sp, #4]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800dd5e:	9b01      	ldr	r3, [sp, #4]
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d814      	bhi.n	800dd8e <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd64:	6903      	ldr	r3, [r0, #16]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	daf6      	bge.n	800dd58 <USB_FlushRxFifo+0x8>
  count = 0U;
 800dd6a:	2300      	movs	r3, #0
    if (count > 200000U)
 800dd6c:	4a09      	ldr	r2, [pc, #36]	; (800dd94 <USB_FlushRxFifo+0x44>)
  count = 0U;
 800dd6e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd70:	2310      	movs	r3, #16
 800dd72:	6103      	str	r3, [r0, #16]
    count++;
 800dd74:	9b01      	ldr	r3, [sp, #4]
 800dd76:	3301      	adds	r3, #1
 800dd78:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800dd7a:	9b01      	ldr	r3, [sp, #4]
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d806      	bhi.n	800dd8e <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dd80:	6903      	ldr	r3, [r0, #16]
 800dd82:	f013 0310 	ands.w	r3, r3, #16
 800dd86:	d1f5      	bne.n	800dd74 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 800dd88:	4618      	mov	r0, r3
}
 800dd8a:	b002      	add	sp, #8
 800dd8c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800dd8e:	2003      	movs	r0, #3
 800dd90:	e7fb      	b.n	800dd8a <USB_FlushRxFifo+0x3a>
 800dd92:	bf00      	nop
 800dd94:	00030d40 	.word	0x00030d40

0800dd98 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd98:	b084      	sub	sp, #16
 800dd9a:	b570      	push	{r4, r5, r6, lr}
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	a805      	add	r0, sp, #20
 800dda0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dda4:	2300      	movs	r3, #0
 800dda6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ddaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ddac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ddb0:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ddb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ddb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ddb8:	63a3      	str	r3, [r4, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ddba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ddbc:	05da      	lsls	r2, r3, #23
 800ddbe:	d53a      	bpl.n	800de36 <USB_HostInit+0x9e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ddc0:	9b08      	ldr	r3, [sp, #32]
 800ddc2:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ddc4:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 800ddc8:	d137      	bne.n	800de3a <USB_HostInit+0xa2>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ddca:	f043 0304 	orr.w	r3, r3, #4
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ddce:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ddd2:	2110      	movs	r1, #16
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f7ff ff95 	bl	800dd04 <USB_FlushTxFifo>
 800ddda:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dddc:	4620      	mov	r0, r4
 800ddde:	f7ff ffb7 	bl	800dd50 <USB_FlushRxFifo>
 800dde2:	4308      	orrs	r0, r1
  {
    ret = HAL_ERROR;
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800dde4:	2300      	movs	r3, #0
 800dde6:	9e06      	ldr	r6, [sp, #24]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dde8:	b2c0      	uxtb	r0, r0
 800ddea:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 800ddee:	461d      	mov	r5, r3
 800ddf0:	f04f 31ff 	mov.w	r1, #4294967295
    ret = HAL_ERROR;
 800ddf4:	3800      	subs	r0, #0
 800ddf6:	bf18      	it	ne
 800ddf8:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.Host_channels; i++)
 800ddfa:	429e      	cmp	r6, r3
 800ddfc:	d120      	bne.n	800de40 <USB_HostInit+0xa8>
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
    USBx_HC(i)->HCINTMSK = 0U;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ddfe:	61a5      	str	r5, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800de00:	6161      	str	r1, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800de02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800de04:	05db      	lsls	r3, r3, #23
 800de06:	d520      	bpl.n	800de4a <USB_HostInit+0xb2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800de08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de0c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800de0e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800de12:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800de14:	4b10      	ldr	r3, [pc, #64]	; (800de58 <USB_HostInit+0xc0>)
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800de16:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800de1a:	9b07      	ldr	r3, [sp, #28]
 800de1c:	b91b      	cbnz	r3, 800de26 <USB_HostInit+0x8e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800de1e:	69a3      	ldr	r3, [r4, #24]
 800de20:	f043 0310 	orr.w	r3, r3, #16
 800de24:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800de26:	69a2      	ldr	r2, [r4, #24]
 800de28:	4b0c      	ldr	r3, [pc, #48]	; (800de5c <USB_HostInit+0xc4>)
 800de2a:	4313      	orrs	r3, r2
 800de2c:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 800de2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de32:	b004      	add	sp, #16
 800de34:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800de36:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800de3a:	f023 0304 	bic.w	r3, r3, #4
 800de3e:	e7c6      	b.n	800ddce <USB_HostInit+0x36>
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800de40:	6091      	str	r1, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 800de42:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 800de44:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800de46:	3220      	adds	r2, #32
 800de48:	e7d7      	b.n	800ddfa <USB_HostInit+0x62>
    USBx->GRXFSIZ  = 0x80U;
 800de4a:	2380      	movs	r3, #128	; 0x80
 800de4c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800de4e:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800de52:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800de54:	4b02      	ldr	r3, [pc, #8]	; (800de60 <USB_HostInit+0xc8>)
 800de56:	e7de      	b.n	800de16 <USB_HostInit+0x7e>
 800de58:	00e00300 	.word	0x00e00300
 800de5c:	a3200008 	.word	0xa3200008
 800de60:	004000e0 	.word	0x004000e0

0800de64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800de64:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800de66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800de6a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800de6c:	f001 fa4c 	bl	800f308 <xTaskGetSchedulerState>
 800de70:	2801      	cmp	r0, #1
 800de72:	d003      	beq.n	800de7c <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800de74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800de78:	f001 bf74 	b.w	800fd64 <xPortSysTickHandler>
}
 800de7c:	bd08      	pop	{r3, pc}
	...

0800de80 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de80:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800de84:	b92b      	cbnz	r3, 800de92 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800de86:	4b06      	ldr	r3, [pc, #24]	; (800dea0 <osKernelInitialize+0x20>)
 800de88:	6818      	ldr	r0, [r3, #0]
 800de8a:	b928      	cbnz	r0, 800de98 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800de8c:	2201      	movs	r2, #1
 800de8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800de90:	4770      	bx	lr
    stat = osErrorISR;
 800de92:	f06f 0005 	mvn.w	r0, #5
 800de96:	4770      	bx	lr
    } else {
      stat = osError;
 800de98:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	24040bb0 	.word	0x24040bb0

0800dea4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dea4:	b510      	push	{r4, lr}
 800dea6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800deaa:	b95c      	cbnz	r4, 800dec4 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800deac:	4b08      	ldr	r3, [pc, #32]	; (800ded0 <osKernelStart+0x2c>)
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	2a01      	cmp	r2, #1
 800deb2:	d10a      	bne.n	800deca <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800deb4:	4a07      	ldr	r2, [pc, #28]	; (800ded4 <osKernelStart+0x30>)
 800deb6:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800deb8:	2202      	movs	r2, #2
 800deba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800debc:	f000 ff74 	bl	800eda8 <vTaskStartScheduler>
      stat = osOK;
 800dec0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800dec2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800dec4:	f06f 0005 	mvn.w	r0, #5
 800dec8:	e7fb      	b.n	800dec2 <osKernelStart+0x1e>
      stat = osError;
 800deca:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800dece:	e7f8      	b.n	800dec2 <osKernelStart+0x1e>
 800ded0:	24040bb0 	.word	0x24040bb0
 800ded4:	e000ed00 	.word	0xe000ed00

0800ded8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ded8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deda:	460b      	mov	r3, r1
 800dedc:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dede:	2100      	movs	r1, #0
 800dee0:	9105      	str	r1, [sp, #20]
 800dee2:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800dee6:	b9cc      	cbnz	r4, 800df1c <osThreadNew+0x44>
 800dee8:	b1c0      	cbz	r0, 800df1c <osThreadNew+0x44>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800deea:	b36a      	cbz	r2, 800df48 <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800deec:	6995      	ldr	r5, [r2, #24]
 800deee:	428d      	cmp	r5, r1
 800def0:	bf08      	it	eq
 800def2:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800def4:	1e69      	subs	r1, r5, #1
 800def6:	46ac      	mov	ip, r5
 800def8:	2937      	cmp	r1, #55	; 0x37
 800defa:	d82a      	bhi.n	800df52 <osThreadNew+0x7a>
 800defc:	6851      	ldr	r1, [r2, #4]
 800defe:	07c9      	lsls	r1, r1, #31
 800df00:	d427      	bmi.n	800df52 <osThreadNew+0x7a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800df02:	6956      	ldr	r6, [r2, #20]
 800df04:	b16e      	cbz	r6, 800df22 <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800df06:	08b4      	lsrs	r4, r6, #2
      if (attr->name != NULL) {
 800df08:	6811      	ldr	r1, [r2, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800df0a:	e9d2 7e02 	ldrd	r7, lr, [r2, #8]
 800df0e:	b157      	cbz	r7, 800df26 <osThreadNew+0x4e>
 800df10:	f1be 0fab 	cmp.w	lr, #171	; 0xab
 800df14:	d902      	bls.n	800df1c <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800df16:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800df18:	b102      	cbz	r2, 800df1c <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800df1a:	b9e6      	cbnz	r6, 800df56 <osThreadNew+0x7e>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800df1c:	9805      	ldr	r0, [sp, #20]
}
 800df1e:	b007      	add	sp, #28
 800df20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800df22:	2480      	movs	r4, #128	; 0x80
 800df24:	e7f0      	b.n	800df08 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800df26:	f1be 0f00 	cmp.w	lr, #0
 800df2a:	d1f7      	bne.n	800df1c <osThreadNew+0x44>
      if (mem == 0) {
 800df2c:	6912      	ldr	r2, [r2, #16]
 800df2e:	2a00      	cmp	r2, #0
 800df30:	d1f4      	bne.n	800df1c <osThreadNew+0x44>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800df32:	aa05      	add	r2, sp, #20
 800df34:	e9cd c200 	strd	ip, r2, [sp]
 800df38:	b2a2      	uxth	r2, r4
 800df3a:	f000 ff07 	bl	800ed4c <xTaskCreate>
 800df3e:	2801      	cmp	r0, #1
            hTask = NULL;
 800df40:	bf1c      	itt	ne
 800df42:	2300      	movne	r3, #0
 800df44:	9305      	strne	r3, [sp, #20]
 800df46:	e7e9      	b.n	800df1c <osThreadNew+0x44>
    name = NULL;
 800df48:	4611      	mov	r1, r2
    prio  = (UBaseType_t)osPriorityNormal;
 800df4a:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800df4e:	2480      	movs	r4, #128	; 0x80
 800df50:	e7ef      	b.n	800df32 <osThreadNew+0x5a>
        return (NULL);
 800df52:	4620      	mov	r0, r4
 800df54:	e7e3      	b.n	800df1e <osThreadNew+0x46>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df56:	e9cd 2701 	strd	r2, r7, [sp, #4]
 800df5a:	9500      	str	r5, [sp, #0]
 800df5c:	4622      	mov	r2, r4
 800df5e:	f000 febd 	bl	800ecdc <xTaskCreateStatic>
 800df62:	9005      	str	r0, [sp, #20]
 800df64:	e7da      	b.n	800df1c <osThreadNew+0x44>

0800df66 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800df66:	f001 b9c9 	b.w	800f2fc <xTaskGetCurrentTaskHandle>

0800df6a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800df6a:	b510      	push	{r4, lr}
 800df6c:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800df70:	b924      	cbnz	r4, 800df7c <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800df72:	b110      	cbz	r0, 800df7a <osDelay+0x10>
      vTaskDelay(ticks);
 800df74:	f001 f888 	bl	800f088 <vTaskDelay>
    stat = osOK;
 800df78:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 800df7a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800df7c:	f06f 0005 	mvn.w	r0, #5
 800df80:	e7fb      	b.n	800df7a <osDelay+0x10>

0800df82 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800df82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df84:	4604      	mov	r4, r0
 800df86:	460e      	mov	r6, r1
 800df88:	4615      	mov	r5, r2
 800df8a:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800df8e:	b11a      	cbz	r2, 800df98 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800df90:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800df92:	4620      	mov	r0, r4
 800df94:	b003      	add	sp, #12
 800df96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800df98:	2800      	cmp	r0, #0
 800df9a:	d0f9      	beq.n	800df90 <osSemaphoreNew+0xe>
 800df9c:	4288      	cmp	r0, r1
 800df9e:	d3f7      	bcc.n	800df90 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800dfa0:	b1e5      	cbz	r5, 800dfdc <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dfa2:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800dfa6:	b1bb      	cbz	r3, 800dfd8 <osSemaphoreNew+0x56>
 800dfa8:	2f4f      	cmp	r7, #79	; 0x4f
 800dfaa:	d9f1      	bls.n	800df90 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800dfac:	2801      	cmp	r0, #1
 800dfae:	d12a      	bne.n	800e006 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dfb0:	2103      	movs	r1, #3
 800dfb2:	9100      	str	r1, [sp, #0]
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	f000 f98e 	bl	800e2d6 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800dfba:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d0e7      	beq.n	800df90 <osSemaphoreNew+0xe>
 800dfc0:	b1de      	cbz	r6, 800dffa <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	f000 fa3a 	bl	800e440 <xQueueGenericSend>
 800dfcc:	2801      	cmp	r0, #1
 800dfce:	d014      	beq.n	800dffa <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f000 fcd3 	bl	800e97c <vQueueDelete>
 800dfd6:	e7db      	b.n	800df90 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dfd8:	2f00      	cmp	r7, #0
 800dfda:	d1d9      	bne.n	800df90 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800dfdc:	2c01      	cmp	r4, #1
 800dfde:	d105      	bne.n	800dfec <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800dfe0:	2203      	movs	r2, #3
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f000 f9c4 	bl	800e372 <xQueueGenericCreate>
 800dfea:	e7e6      	b.n	800dfba <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dfec:	4620      	mov	r0, r4
 800dfee:	4631      	mov	r1, r6
 800dff0:	f000 fa08 	bl	800e404 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800dff4:	4604      	mov	r4, r0
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d0ca      	beq.n	800df90 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800dffa:	b955      	cbnz	r5, 800e012 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800dffc:	4629      	mov	r1, r5
 800dffe:	4620      	mov	r0, r4
 800e000:	f000 fc96 	bl	800e930 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800e004:	e7c5      	b.n	800df92 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e006:	461a      	mov	r2, r3
 800e008:	f000 f9da 	bl	800e3c0 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800e00c:	4604      	mov	r4, r0
 800e00e:	2800      	cmp	r0, #0
 800e010:	d0be      	beq.n	800df90 <osSemaphoreNew+0xe>
          name = attr->name;
 800e012:	682d      	ldr	r5, [r5, #0]
 800e014:	e7f2      	b.n	800dffc <osSemaphoreNew+0x7a>

0800e016 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e018:	4605      	mov	r5, r0
 800e01a:	460e      	mov	r6, r1
 800e01c:	4614      	mov	r4, r2
 800e01e:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e022:	b11f      	cbz	r7, 800e02c <osMessageQueueNew+0x16>
  hQueue = NULL;
 800e024:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800e026:	4628      	mov	r0, r5
 800e028:	b003      	add	sp, #12
 800e02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d0f9      	beq.n	800e024 <osMessageQueueNew+0xe>
 800e030:	2900      	cmp	r1, #0
 800e032:	d0f7      	beq.n	800e024 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800e034:	b1da      	cbz	r2, 800e06e <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e036:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800e03a:	b183      	cbz	r3, 800e05e <osMessageQueueNew+0x48>
 800e03c:	2a4f      	cmp	r2, #79	; 0x4f
 800e03e:	d9f1      	bls.n	800e024 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e040:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e042:	2a00      	cmp	r2, #0
 800e044:	d0ee      	beq.n	800e024 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e046:	434d      	muls	r5, r1
 800e048:	6966      	ldr	r6, [r4, #20]
 800e04a:	42ae      	cmp	r6, r5
 800e04c:	d3ea      	bcc.n	800e024 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e04e:	9700      	str	r7, [sp, #0]
 800e050:	f000 f941 	bl	800e2d6 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800e054:	4605      	mov	r5, r0
 800e056:	2800      	cmp	r0, #0
 800e058:	d0e4      	beq.n	800e024 <osMessageQueueNew+0xe>
        name = attr->name;
 800e05a:	6824      	ldr	r4, [r4, #0]
 800e05c:	e011      	b.n	800e082 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e05e:	2a00      	cmp	r2, #0
 800e060:	d1e0      	bne.n	800e024 <osMessageQueueNew+0xe>
 800e062:	6923      	ldr	r3, [r4, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1dd      	bne.n	800e024 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e068:	6963      	ldr	r3, [r4, #20]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d1da      	bne.n	800e024 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800e06e:	4628      	mov	r0, r5
 800e070:	2200      	movs	r2, #0
 800e072:	4631      	mov	r1, r6
 800e074:	f000 f97d 	bl	800e372 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800e078:	4605      	mov	r5, r0
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d0d2      	beq.n	800e024 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800e07e:	2c00      	cmp	r4, #0
 800e080:	d1eb      	bne.n	800e05a <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800e082:	4621      	mov	r1, r4
 800e084:	4628      	mov	r0, r5
 800e086:	f000 fc53 	bl	800e930 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800e08a:	e7cc      	b.n	800e026 <osMessageQueueNew+0x10>

0800e08c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e08c:	4b03      	ldr	r3, [pc, #12]	; (800e09c <vApplicationGetIdleTaskMemory+0x10>)
 800e08e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e090:	4b03      	ldr	r3, [pc, #12]	; (800e0a0 <vApplicationGetIdleTaskMemory+0x14>)
 800e092:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e094:	2380      	movs	r3, #128	; 0x80
 800e096:	6013      	str	r3, [r2, #0]
}
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	24040b04 	.word	0x24040b04
 800e0a0:	24040904 	.word	0x24040904

0800e0a4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e0a4:	4b03      	ldr	r3, [pc, #12]	; (800e0b4 <vApplicationGetTimerTaskMemory+0x10>)
 800e0a6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e0a8:	4b03      	ldr	r3, [pc, #12]	; (800e0b8 <vApplicationGetTimerTaskMemory+0x14>)
 800e0aa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e0ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0b0:	6013      	str	r3, [r2, #0]
}
 800e0b2:	4770      	bx	lr
 800e0b4:	24040fb4 	.word	0x24040fb4
 800e0b8:	24040bb4 	.word	0x24040bb4

0800e0bc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0bc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0c0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0c4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0c6:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0c8:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e0d0:	4770      	bx	lr

0800e0d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e0d6:	4770      	bx	lr

0800e0d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e0d8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e0da:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800e0dc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e0de:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e0e0:	689a      	ldr	r2, [r3, #8]
 800e0e2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e0e4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e0e6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e0e8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	6003      	str	r3, [r0, #0]
}
 800e0ee:	4770      	bx	lr

0800e0f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e0f0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e0f2:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e0f4:	1c63      	adds	r3, r4, #1
 800e0f6:	d10a      	bne.n	800e10e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e0f8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e0fa:	685a      	ldr	r2, [r3, #4]
 800e0fc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e0fe:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e100:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e102:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e104:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e106:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e108:	3301      	adds	r3, #1
 800e10a:	6003      	str	r3, [r0, #0]
}
 800e10c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e10e:	f100 0208 	add.w	r2, r0, #8
 800e112:	4613      	mov	r3, r2
 800e114:	6852      	ldr	r2, [r2, #4]
 800e116:	6815      	ldr	r5, [r2, #0]
 800e118:	42a5      	cmp	r5, r4
 800e11a:	d9fa      	bls.n	800e112 <vListInsert+0x22>
 800e11c:	e7ed      	b.n	800e0fa <vListInsert+0xa>

0800e11e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e11e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e120:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800e124:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e126:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e128:	6859      	ldr	r1, [r3, #4]
 800e12a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e12c:	bf08      	it	eq
 800e12e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e130:	2200      	movs	r2, #0
 800e132:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	3a01      	subs	r2, #1
 800e138:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e13a:	6818      	ldr	r0, [r3, #0]
}
 800e13c:	4770      	bx	lr

0800e13e <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e13e:	b510      	push	{r4, lr}
 800e140:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e142:	f001 fda7 	bl	800fc94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e146:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e148:	f001 fdc4 	bl	800fcd4 <vPortExitCritical>

	return xReturn;
}
 800e14c:	fab4 f084 	clz	r0, r4
 800e150:	0940      	lsrs	r0, r0, #5
 800e152:	bd10      	pop	{r4, pc}

0800e154 <prvCopyDataToQueue>:
{
 800e154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e156:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e158:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800e15a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e15c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e15e:	b952      	cbnz	r2, 800e176 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e160:	6807      	ldr	r7, [r0, #0]
 800e162:	bb47      	cbnz	r7, 800e1b6 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e164:	6880      	ldr	r0, [r0, #8]
 800e166:	f001 f91f 	bl	800f3a8 <xTaskPriorityDisinherit>
 800e16a:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e16c:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e16e:	3601      	adds	r6, #1
}
 800e170:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e172:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800e174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800e176:	b965      	cbnz	r5, 800e192 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e178:	6840      	ldr	r0, [r0, #4]
 800e17a:	f003 fe86 	bl	8011e8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e17e:	6863      	ldr	r3, [r4, #4]
 800e180:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e182:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e184:	68a2      	ldr	r2, [r4, #8]
 800e186:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e188:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e18a:	d3f0      	bcc.n	800e16e <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	6063      	str	r3, [r4, #4]
 800e190:	e7ed      	b.n	800e16e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e192:	68c0      	ldr	r0, [r0, #12]
 800e194:	f003 fe79 	bl	8011e8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e198:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e19a:	68e3      	ldr	r3, [r4, #12]
 800e19c:	4251      	negs	r1, r2
 800e19e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1a0:	6822      	ldr	r2, [r4, #0]
 800e1a2:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1a4:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e1a6:	bf3e      	ittt	cc
 800e1a8:	68a3      	ldrcc	r3, [r4, #8]
 800e1aa:	185b      	addcc	r3, r3, r1
 800e1ac:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e1ae:	2d02      	cmp	r5, #2
 800e1b0:	d101      	bne.n	800e1b6 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1b2:	b116      	cbz	r6, 800e1ba <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800e1b4:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800e1b6:	2500      	movs	r5, #0
 800e1b8:	e7d9      	b.n	800e16e <prvCopyDataToQueue+0x1a>
 800e1ba:	4635      	mov	r5, r6
 800e1bc:	e7d7      	b.n	800e16e <prvCopyDataToQueue+0x1a>

0800e1be <prvCopyDataFromQueue>:
{
 800e1be:	4603      	mov	r3, r0
 800e1c0:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e1c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800e1c4:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e1c6:	b162      	cbz	r2, 800e1e2 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e1c8:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e1ca:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e1cc:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e1ce:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e1d0:	60dc      	str	r4, [r3, #12]
}
 800e1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e1d6:	bf24      	itt	cs
 800e1d8:	6819      	ldrcs	r1, [r3, #0]
 800e1da:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e1dc:	68d9      	ldr	r1, [r3, #12]
 800e1de:	f003 be54 	b.w	8011e8a <memcpy>
}
 800e1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <prvUnlockQueue>:
{
 800e1e8:	b570      	push	{r4, r5, r6, lr}
 800e1ea:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800e1ec:	f001 fd52 	bl	800fc94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800e1f0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1f4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800e1f8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e1fa:	2d00      	cmp	r5, #0
 800e1fc:	dc14      	bgt.n	800e228 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800e1fe:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e200:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800e204:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800e208:	f001 fd64 	bl	800fcd4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e20c:	f001 fd42 	bl	800fc94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800e210:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800e214:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e216:	2d00      	cmp	r5, #0
 800e218:	dc12      	bgt.n	800e240 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800e21a:	23ff      	movs	r3, #255	; 0xff
 800e21c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800e220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800e224:	f001 bd56 	b.w	800fcd4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d0e7      	beq.n	800e1fe <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e22e:	4630      	mov	r0, r6
 800e230:	f000 ffd2 	bl	800f1d8 <xTaskRemoveFromEventList>
 800e234:	b108      	cbz	r0, 800e23a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800e236:	f001 f85b 	bl	800f2f0 <vTaskMissedYield>
			--cTxLock;
 800e23a:	3d01      	subs	r5, #1
 800e23c:	b26d      	sxtb	r5, r5
 800e23e:	e7dc      	b.n	800e1fa <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e240:	6923      	ldr	r3, [r4, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d0e9      	beq.n	800e21a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e246:	4630      	mov	r0, r6
 800e248:	f000 ffc6 	bl	800f1d8 <xTaskRemoveFromEventList>
 800e24c:	b108      	cbz	r0, 800e252 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800e24e:	f001 f84f 	bl	800f2f0 <vTaskMissedYield>
				--cRxLock;
 800e252:	3d01      	subs	r5, #1
 800e254:	b26d      	sxtb	r5, r5
 800e256:	e7de      	b.n	800e216 <prvUnlockQueue+0x2e>

0800e258 <xQueueGenericReset>:
{
 800e258:	b538      	push	{r3, r4, r5, lr}
 800e25a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800e25c:	4604      	mov	r4, r0
 800e25e:	b940      	cbnz	r0, 800e272 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	e7fe      	b.n	800e270 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800e272:	f001 fd0f 	bl	800fc94 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e276:	6822      	ldr	r2, [r4, #0]
 800e278:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e27c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e27e:	434b      	muls	r3, r1
 800e280:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e282:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e284:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e286:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e288:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800e28a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e28c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e28e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800e290:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e294:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800e298:	b9a5      	cbnz	r5, 800e2c4 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e29a:	6923      	ldr	r3, [r4, #16]
 800e29c:	b173      	cbz	r3, 800e2bc <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e29e:	f104 0010 	add.w	r0, r4, #16
 800e2a2:	f000 ff99 	bl	800f1d8 <xTaskRemoveFromEventList>
 800e2a6:	b148      	cbz	r0, 800e2bc <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800e2a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800e2bc:	f001 fd0a 	bl	800fcd4 <vPortExitCritical>
}
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2c4:	f104 0010 	add.w	r0, r4, #16
 800e2c8:	f7ff fef8 	bl	800e0bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e2d0:	f7ff fef4 	bl	800e0bc <vListInitialise>
 800e2d4:	e7f2      	b.n	800e2bc <xQueueGenericReset+0x64>

0800e2d6 <xQueueGenericCreateStatic>:
	{
 800e2d6:	b513      	push	{r0, r1, r4, lr}
 800e2d8:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e2da:	b940      	cbnz	r0, 800e2ee <xQueueGenericCreateStatic+0x18>
 800e2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e0:	f383 8811 	msr	BASEPRI, r3
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	f3bf 8f4f 	dsb	sy
 800e2ec:	e7fe      	b.n	800e2ec <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800e2ee:	b943      	cbnz	r3, 800e302 <xQueueGenericCreateStatic+0x2c>
 800e2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	e7fe      	b.n	800e300 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e302:	b14a      	cbz	r2, 800e318 <xQueueGenericCreateStatic+0x42>
 800e304:	b991      	cbnz	r1, 800e32c <xQueueGenericCreateStatic+0x56>
 800e306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	e7fe      	b.n	800e316 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e318:	b141      	cbz	r1, 800e32c <xQueueGenericCreateStatic+0x56>
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	e7fe      	b.n	800e32a <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e32c:	2350      	movs	r3, #80	; 0x50
 800e32e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e330:	9b01      	ldr	r3, [sp, #4]
 800e332:	2b50      	cmp	r3, #80	; 0x50
 800e334:	d008      	beq.n	800e348 <xQueueGenericCreateStatic+0x72>
 800e336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33a:	f383 8811 	msr	BASEPRI, r3
 800e33e:	f3bf 8f6f 	isb	sy
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	e7fe      	b.n	800e346 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e348:	2900      	cmp	r1, #0
 800e34a:	bf08      	it	eq
 800e34c:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e34e:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e350:	2301      	movs	r3, #1
 800e352:	6022      	str	r2, [r4, #0]
 800e354:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800e358:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e35c:	4619      	mov	r1, r3
 800e35e:	4620      	mov	r0, r4
 800e360:	f7ff ff7a 	bl	800e258 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800e364:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800e368:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800e36a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800e36e:	b002      	add	sp, #8
 800e370:	bd10      	pop	{r4, pc}

0800e372 <xQueueGenericCreate>:
	{
 800e372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e374:	460d      	mov	r5, r1
 800e376:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e378:	4606      	mov	r6, r0
 800e37a:	b940      	cbnz	r0, 800e38e <xQueueGenericCreate+0x1c>
 800e37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e380:	f383 8811 	msr	BASEPRI, r3
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	e7fe      	b.n	800e38c <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e38e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e390:	3050      	adds	r0, #80	; 0x50
 800e392:	f001 fde9 	bl	800ff68 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800e396:	4604      	mov	r4, r0
 800e398:	b170      	cbz	r0, 800e3b8 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e39a:	2300      	movs	r3, #0
 800e39c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e3a0:	b165      	cbz	r5, 800e3bc <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3a2:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e3a6:	2101      	movs	r1, #1
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800e3ac:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e3b0:	f7ff ff52 	bl	800e258 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800e3b4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3bc:	4603      	mov	r3, r0
 800e3be:	e7f2      	b.n	800e3a6 <xQueueGenericCreate+0x34>

0800e3c0 <xQueueCreateCountingSemaphoreStatic>:
	{
 800e3c0:	b513      	push	{r0, r1, r4, lr}
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e3c6:	b940      	cbnz	r0, 800e3da <xQueueCreateCountingSemaphoreStatic+0x1a>
 800e3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3cc:	f383 8811 	msr	BASEPRI, r3
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	e7fe      	b.n	800e3d8 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e3da:	4288      	cmp	r0, r1
 800e3dc:	d208      	bcs.n	800e3f0 <xQueueCreateCountingSemaphoreStatic+0x30>
 800e3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	e7fe      	b.n	800e3ee <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3f0:	2202      	movs	r2, #2
 800e3f2:	9200      	str	r2, [sp, #0]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	f7ff ff6d 	bl	800e2d6 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800e3fc:	b100      	cbz	r0, 800e400 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3fe:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e400:	b002      	add	sp, #8
 800e402:	bd10      	pop	{r4, pc}

0800e404 <xQueueCreateCountingSemaphore>:
	{
 800e404:	b510      	push	{r4, lr}
 800e406:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e408:	b940      	cbnz	r0, 800e41c <xQueueCreateCountingSemaphore+0x18>
 800e40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	e7fe      	b.n	800e41a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e41c:	4288      	cmp	r0, r1
 800e41e:	d208      	bcs.n	800e432 <xQueueCreateCountingSemaphore+0x2e>
 800e420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	e7fe      	b.n	800e430 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e432:	2202      	movs	r2, #2
 800e434:	2100      	movs	r1, #0
 800e436:	f7ff ff9c 	bl	800e372 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e43a:	b100      	cbz	r0, 800e43e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e43c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e43e:	bd10      	pop	{r4, pc}

0800e440 <xQueueGenericSend>:
{
 800e440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e444:	b085      	sub	sp, #20
 800e446:	4688      	mov	r8, r1
 800e448:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800e44a:	4604      	mov	r4, r0
{
 800e44c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800e44e:	b940      	cbnz	r0, 800e462 <xQueueGenericSend+0x22>
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	e7fe      	b.n	800e460 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e462:	b951      	cbnz	r1, 800e47a <xQueueGenericSend+0x3a>
 800e464:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e466:	b143      	cbz	r3, 800e47a <xQueueGenericSend+0x3a>
 800e468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	e7fe      	b.n	800e478 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e47a:	2f02      	cmp	r7, #2
 800e47c:	d10b      	bne.n	800e496 <xQueueGenericSend+0x56>
 800e47e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e480:	2b01      	cmp	r3, #1
 800e482:	d008      	beq.n	800e496 <xQueueGenericSend+0x56>
 800e484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e488:	f383 8811 	msr	BASEPRI, r3
 800e48c:	f3bf 8f6f 	isb	sy
 800e490:	f3bf 8f4f 	dsb	sy
 800e494:	e7fe      	b.n	800e494 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e496:	f000 ff37 	bl	800f308 <xTaskGetSchedulerState>
 800e49a:	4606      	mov	r6, r0
 800e49c:	b950      	cbnz	r0, 800e4b4 <xQueueGenericSend+0x74>
 800e49e:	9b01      	ldr	r3, [sp, #4]
 800e4a0:	b14b      	cbz	r3, 800e4b6 <xQueueGenericSend+0x76>
 800e4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a6:	f383 8811 	msr	BASEPRI, r3
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	e7fe      	b.n	800e4b2 <xQueueGenericSend+0x72>
 800e4b4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e4b6:	f04f 0900 	mov.w	r9, #0
 800e4ba:	e037      	b.n	800e52c <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4bc:	9d01      	ldr	r5, [sp, #4]
 800e4be:	b91d      	cbnz	r5, 800e4c8 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800e4c0:	f001 fc08 	bl	800fcd4 <vPortExitCritical>
			return errQUEUE_FULL;
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	e052      	b.n	800e56e <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800e4c8:	b916      	cbnz	r6, 800e4d0 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4ca:	a802      	add	r0, sp, #8
 800e4cc:	f000 fec8 	bl	800f260 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e4d0:	f001 fc00 	bl	800fcd4 <vPortExitCritical>
		vTaskSuspendAll();
 800e4d4:	f000 fcb8 	bl	800ee48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4d8:	f001 fbdc 	bl	800fc94 <vPortEnterCritical>
 800e4dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e4e0:	2bff      	cmp	r3, #255	; 0xff
 800e4e2:	d101      	bne.n	800e4e8 <xQueueGenericSend+0xa8>
 800e4e4:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800e4e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e4ec:	2bff      	cmp	r3, #255	; 0xff
 800e4ee:	d101      	bne.n	800e4f4 <xQueueGenericSend+0xb4>
 800e4f0:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800e4f4:	f001 fbee 	bl	800fcd4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4f8:	a901      	add	r1, sp, #4
 800e4fa:	a802      	add	r0, sp, #8
 800e4fc:	f000 febc 	bl	800f278 <xTaskCheckForTimeOut>
 800e500:	2800      	cmp	r0, #0
 800e502:	d14a      	bne.n	800e59a <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e504:	f001 fbc6 	bl	800fc94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e508:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e50a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d131      	bne.n	800e574 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e510:	f001 fbe0 	bl	800fcd4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e514:	9901      	ldr	r1, [sp, #4]
 800e516:	f104 0010 	add.w	r0, r4, #16
 800e51a:	f000 fe25 	bl	800f168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e51e:	4620      	mov	r0, r4
 800e520:	f7ff fe62 	bl	800e1e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e524:	f000 fd3c 	bl	800efa0 <xTaskResumeAll>
 800e528:	b360      	cbz	r0, 800e584 <xQueueGenericSend+0x144>
 800e52a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e52c:	f001 fbb2 	bl	800fc94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e530:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e532:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e534:	429a      	cmp	r2, r3
 800e536:	d301      	bcc.n	800e53c <xQueueGenericSend+0xfc>
 800e538:	2f02      	cmp	r7, #2
 800e53a:	d1bf      	bne.n	800e4bc <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e53c:	463a      	mov	r2, r7
 800e53e:	4641      	mov	r1, r8
 800e540:	4620      	mov	r0, r4
 800e542:	f7ff fe07 	bl	800e154 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e548:	b11b      	cbz	r3, 800e552 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e54a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e54e:	f000 fe43 	bl	800f1d8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800e552:	b148      	cbz	r0, 800e568 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800e554:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e55c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e568:	f001 fbb4 	bl	800fcd4 <vPortExitCritical>
				return pdPASS;
 800e56c:	2001      	movs	r0, #1
}
 800e56e:	b005      	add	sp, #20
 800e570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800e574:	f001 fbae 	bl	800fcd4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e578:	4620      	mov	r0, r4
 800e57a:	f7ff fe35 	bl	800e1e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e57e:	f000 fd0f 	bl	800efa0 <xTaskResumeAll>
 800e582:	e7d2      	b.n	800e52a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800e584:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	e7c7      	b.n	800e52a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800e59a:	4620      	mov	r0, r4
 800e59c:	f7ff fe24 	bl	800e1e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5a0:	f000 fcfe 	bl	800efa0 <xTaskResumeAll>
 800e5a4:	e78e      	b.n	800e4c4 <xQueueGenericSend+0x84>

0800e5a6 <xQueueGenericSendFromISR>:
{
 800e5a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5aa:	4689      	mov	r9, r1
 800e5ac:	4690      	mov	r8, r2
 800e5ae:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	b940      	cbnz	r0, 800e5c6 <xQueueGenericSendFromISR+0x20>
 800e5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f3bf 8f4f 	dsb	sy
 800e5c4:	e7fe      	b.n	800e5c4 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5c6:	b951      	cbnz	r1, 800e5de <xQueueGenericSendFromISR+0x38>
 800e5c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e5ca:	b143      	cbz	r3, 800e5de <xQueueGenericSendFromISR+0x38>
 800e5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	e7fe      	b.n	800e5dc <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5de:	2f02      	cmp	r7, #2
 800e5e0:	d10b      	bne.n	800e5fa <xQueueGenericSendFromISR+0x54>
 800e5e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d008      	beq.n	800e5fa <xQueueGenericSendFromISR+0x54>
 800e5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ec:	f383 8811 	msr	BASEPRI, r3
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	e7fe      	b.n	800e5f8 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5fa:	f001 fc61 	bl	800fec0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e5fe:	f3ef 8611 	mrs	r6, BASEPRI
 800e602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e612:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e616:	429a      	cmp	r2, r3
 800e618:	d301      	bcc.n	800e61e <xQueueGenericSendFromISR+0x78>
 800e61a:	2f02      	cmp	r7, #2
 800e61c:	d123      	bne.n	800e666 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800e61e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e622:	463a      	mov	r2, r7
 800e624:	4649      	mov	r1, r9
 800e626:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800e628:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e62a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e62c:	f7ff fd92 	bl	800e154 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800e630:	1c6b      	adds	r3, r5, #1
 800e632:	d113      	bne.n	800e65c <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e636:	b90b      	cbnz	r3, 800e63c <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800e638:	2001      	movs	r0, #1
 800e63a:	e00b      	b.n	800e654 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e63c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e640:	f000 fdca 	bl	800f1d8 <xTaskRemoveFromEventList>
 800e644:	2800      	cmp	r0, #0
 800e646:	d0f7      	beq.n	800e638 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800e648:	f1b8 0f00 	cmp.w	r8, #0
 800e64c:	d0f4      	beq.n	800e638 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e64e:	2001      	movs	r0, #1
 800e650:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e654:	f386 8811 	msr	BASEPRI, r6
}
 800e658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e65c:	3501      	adds	r5, #1
 800e65e:	b26d      	sxtb	r5, r5
 800e660:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800e664:	e7e8      	b.n	800e638 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800e666:	2000      	movs	r0, #0
 800e668:	e7f4      	b.n	800e654 <xQueueGenericSendFromISR+0xae>

0800e66a <xQueueReceive>:
{
 800e66a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e66e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800e670:	4604      	mov	r4, r0
{
 800e672:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e674:	b940      	cbnz	r0, 800e688 <xQueueReceive+0x1e>
	__asm volatile
 800e676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e67a:	f383 8811 	msr	BASEPRI, r3
 800e67e:	f3bf 8f6f 	isb	sy
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	e7fe      	b.n	800e686 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e688:	b951      	cbnz	r1, 800e6a0 <xQueueReceive+0x36>
 800e68a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e68c:	b143      	cbz	r3, 800e6a0 <xQueueReceive+0x36>
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	e7fe      	b.n	800e69e <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6a0:	f000 fe32 	bl	800f308 <xTaskGetSchedulerState>
 800e6a4:	4606      	mov	r6, r0
 800e6a6:	b950      	cbnz	r0, 800e6be <xQueueReceive+0x54>
 800e6a8:	9b01      	ldr	r3, [sp, #4]
 800e6aa:	b14b      	cbz	r3, 800e6c0 <xQueueReceive+0x56>
 800e6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b0:	f383 8811 	msr	BASEPRI, r3
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	e7fe      	b.n	800e6bc <xQueueReceive+0x52>
 800e6be:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e6c0:	f04f 0800 	mov.w	r8, #0
 800e6c4:	e03d      	b.n	800e742 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6c6:	9d01      	ldr	r5, [sp, #4]
 800e6c8:	b91d      	cbnz	r5, 800e6d2 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800e6ca:	f001 fb03 	bl	800fcd4 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	e056      	b.n	800e780 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800e6d2:	b916      	cbnz	r6, 800e6da <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6d4:	a802      	add	r0, sp, #8
 800e6d6:	f000 fdc3 	bl	800f260 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e6da:	f001 fafb 	bl	800fcd4 <vPortExitCritical>
		vTaskSuspendAll();
 800e6de:	f000 fbb3 	bl	800ee48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6e2:	f001 fad7 	bl	800fc94 <vPortEnterCritical>
 800e6e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e6ea:	2bff      	cmp	r3, #255	; 0xff
 800e6ec:	d101      	bne.n	800e6f2 <xQueueReceive+0x88>
 800e6ee:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800e6f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e6f6:	2bff      	cmp	r3, #255	; 0xff
 800e6f8:	d101      	bne.n	800e6fe <xQueueReceive+0x94>
 800e6fa:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800e6fe:	f001 fae9 	bl	800fcd4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e702:	a901      	add	r1, sp, #4
 800e704:	a802      	add	r0, sp, #8
 800e706:	f000 fdb7 	bl	800f278 <xTaskCheckForTimeOut>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d141      	bne.n	800e792 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e70e:	4620      	mov	r0, r4
 800e710:	f7ff fd15 	bl	800e13e <prvIsQueueEmpty>
 800e714:	b3b8      	cbz	r0, 800e786 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e716:	9901      	ldr	r1, [sp, #4]
 800e718:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e71c:	f000 fd24 	bl	800f168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e720:	4620      	mov	r0, r4
 800e722:	f7ff fd61 	bl	800e1e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e726:	f000 fc3b 	bl	800efa0 <xTaskResumeAll>
 800e72a:	b948      	cbnz	r0, 800e740 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800e72c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e734:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	f3bf 8f6f 	isb	sy
 800e740:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e742:	f001 faa7 	bl	800fc94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e746:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e748:	2d00      	cmp	r5, #0
 800e74a:	d0bc      	beq.n	800e6c6 <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e74c:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e74e:	4639      	mov	r1, r7
 800e750:	4620      	mov	r0, r4
 800e752:	f7ff fd34 	bl	800e1be <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e756:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e758:	6923      	ldr	r3, [r4, #16]
 800e75a:	b173      	cbz	r3, 800e77a <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e75c:	f104 0010 	add.w	r0, r4, #16
 800e760:	f000 fd3a 	bl	800f1d8 <xTaskRemoveFromEventList>
 800e764:	b148      	cbz	r0, 800e77a <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800e766:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e76e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e772:	f3bf 8f4f 	dsb	sy
 800e776:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e77a:	f001 faab 	bl	800fcd4 <vPortExitCritical>
				return pdPASS;
 800e77e:	2001      	movs	r0, #1
}
 800e780:	b004      	add	sp, #16
 800e782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800e786:	4620      	mov	r0, r4
 800e788:	f7ff fd2e 	bl	800e1e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e78c:	f000 fc08 	bl	800efa0 <xTaskResumeAll>
 800e790:	e7d6      	b.n	800e740 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800e792:	4620      	mov	r0, r4
 800e794:	f7ff fd28 	bl	800e1e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e798:	f000 fc02 	bl	800efa0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e79c:	4620      	mov	r0, r4
 800e79e:	f7ff fcce 	bl	800e13e <prvIsQueueEmpty>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d0cc      	beq.n	800e740 <xQueueReceive+0xd6>
 800e7a6:	e792      	b.n	800e6ce <xQueueReceive+0x64>

0800e7a8 <xQueueSemaphoreTake>:
{
 800e7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7aa:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800e7ac:	4604      	mov	r4, r0
{
 800e7ae:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e7b0:	b940      	cbnz	r0, 800e7c4 <xQueueSemaphoreTake+0x1c>
 800e7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	e7fe      	b.n	800e7c2 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e7c4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800e7c6:	b145      	cbz	r5, 800e7da <xQueueSemaphoreTake+0x32>
 800e7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7cc:	f383 8811 	msr	BASEPRI, r3
 800e7d0:	f3bf 8f6f 	isb	sy
 800e7d4:	f3bf 8f4f 	dsb	sy
 800e7d8:	e7fe      	b.n	800e7d8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7da:	f000 fd95 	bl	800f308 <xTaskGetSchedulerState>
 800e7de:	4606      	mov	r6, r0
 800e7e0:	b950      	cbnz	r0, 800e7f8 <xQueueSemaphoreTake+0x50>
 800e7e2:	9b01      	ldr	r3, [sp, #4]
 800e7e4:	b15b      	cbz	r3, 800e7fe <xQueueSemaphoreTake+0x56>
 800e7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	e7fe      	b.n	800e7f6 <xQueueSemaphoreTake+0x4e>
 800e7f8:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800e7fa:	2700      	movs	r7, #0
 800e7fc:	e053      	b.n	800e8a6 <xQueueSemaphoreTake+0xfe>
 800e7fe:	4605      	mov	r5, r0
 800e800:	e7fb      	b.n	800e7fa <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e802:	9b01      	ldr	r3, [sp, #4]
 800e804:	b963      	cbnz	r3, 800e820 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e806:	b145      	cbz	r5, 800e81a <xQueueSemaphoreTake+0x72>
 800e808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	e7fe      	b.n	800e818 <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800e81a:	f001 fa5b 	bl	800fcd4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e81e:	e062      	b.n	800e8e6 <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800e820:	b916      	cbnz	r6, 800e828 <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e822:	a802      	add	r0, sp, #8
 800e824:	f000 fd1c 	bl	800f260 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e828:	f001 fa54 	bl	800fcd4 <vPortExitCritical>
		vTaskSuspendAll();
 800e82c:	f000 fb0c 	bl	800ee48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e830:	f001 fa30 	bl	800fc94 <vPortEnterCritical>
 800e834:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e838:	2bff      	cmp	r3, #255	; 0xff
 800e83a:	d101      	bne.n	800e840 <xQueueSemaphoreTake+0x98>
 800e83c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800e840:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e844:	2bff      	cmp	r3, #255	; 0xff
 800e846:	d101      	bne.n	800e84c <xQueueSemaphoreTake+0xa4>
 800e848:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e84c:	f001 fa42 	bl	800fcd4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e850:	a901      	add	r1, sp, #4
 800e852:	a802      	add	r0, sp, #8
 800e854:	f000 fd10 	bl	800f278 <xTaskCheckForTimeOut>
 800e858:	2800      	cmp	r0, #0
 800e85a:	d14d      	bne.n	800e8f8 <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e85c:	4620      	mov	r0, r4
 800e85e:	f7ff fc6e 	bl	800e13e <prvIsQueueEmpty>
 800e862:	2800      	cmp	r0, #0
 800e864:	d042      	beq.n	800e8ec <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	b93b      	cbnz	r3, 800e87a <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800e86a:	f001 fa13 	bl	800fc94 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e86e:	68a0      	ldr	r0, [r4, #8]
 800e870:	f000 fd5a 	bl	800f328 <xTaskPriorityInherit>
 800e874:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800e876:	f001 fa2d 	bl	800fcd4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e87a:	9901      	ldr	r1, [sp, #4]
 800e87c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e880:	f000 fc72 	bl	800f168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e884:	4620      	mov	r0, r4
 800e886:	f7ff fcaf 	bl	800e1e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e88a:	f000 fb89 	bl	800efa0 <xTaskResumeAll>
 800e88e:	b948      	cbnz	r0, 800e8a4 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800e890:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e898:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e8a6:	f001 f9f5 	bl	800fc94 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e8aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d0a8      	beq.n	800e802 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8b4:	6823      	ldr	r3, [r4, #0]
 800e8b6:	b913      	cbnz	r3, 800e8be <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e8b8:	f000 fe0c 	bl	800f4d4 <pvTaskIncrementMutexHeldCount>
 800e8bc:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8be:	6923      	ldr	r3, [r4, #16]
 800e8c0:	b173      	cbz	r3, 800e8e0 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8c2:	f104 0010 	add.w	r0, r4, #16
 800e8c6:	f000 fc87 	bl	800f1d8 <xTaskRemoveFromEventList>
 800e8ca:	b148      	cbz	r0, 800e8e0 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800e8cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e8d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e8d8:	f3bf 8f4f 	dsb	sy
 800e8dc:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800e8e0:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800e8e2:	f001 f9f7 	bl	800fcd4 <vPortExitCritical>
}
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	b005      	add	sp, #20
 800e8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	f7ff fc7b 	bl	800e1e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8f2:	f000 fb55 	bl	800efa0 <xTaskResumeAll>
 800e8f6:	e7d5      	b.n	800e8a4 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f7ff fc75 	bl	800e1e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8fe:	f000 fb4f 	bl	800efa0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e902:	4620      	mov	r0, r4
 800e904:	f7ff fc1b 	bl	800e13e <prvIsQueueEmpty>
 800e908:	2800      	cmp	r0, #0
 800e90a:	d0cb      	beq.n	800e8a4 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800e90c:	2d00      	cmp	r5, #0
 800e90e:	d0ea      	beq.n	800e8e6 <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800e910:	f001 f9c0 	bl	800fc94 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e914:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e916:	b119      	cbz	r1, 800e920 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e918:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e91a:	6819      	ldr	r1, [r3, #0]
 800e91c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e920:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800e922:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e924:	f000 fd84 	bl	800f430 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e928:	f001 f9d4 	bl	800fcd4 <vPortExitCritical>
 800e92c:	e7db      	b.n	800e8e6 <xQueueSemaphoreTake+0x13e>
	...

0800e930 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e930:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e932:	4a07      	ldr	r2, [pc, #28]	; (800e950 <vQueueAddToRegistry+0x20>)
	{
 800e934:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e936:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800e93a:	b92c      	cbnz	r4, 800e948 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e93c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e940:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e944:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e946:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e948:	3301      	adds	r3, #1
 800e94a:	2b08      	cmp	r3, #8
 800e94c:	d1f3      	bne.n	800e936 <vQueueAddToRegistry+0x6>
 800e94e:	e7fa      	b.n	800e946 <vQueueAddToRegistry+0x16>
 800e950:	24041060 	.word	0x24041060

0800e954 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e954:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e956:	4a08      	ldr	r2, [pc, #32]	; (800e978 <vQueueUnregisterQueue+0x24>)
	{
 800e958:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e95a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e95e:	684c      	ldr	r4, [r1, #4]
 800e960:	4284      	cmp	r4, r0
 800e962:	d104      	bne.n	800e96e <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e964:	2000      	movs	r0, #0
 800e966:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e96a:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e96c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e96e:	3301      	adds	r3, #1
 800e970:	2b08      	cmp	r3, #8
 800e972:	d1f2      	bne.n	800e95a <vQueueUnregisterQueue+0x6>
 800e974:	e7fa      	b.n	800e96c <vQueueUnregisterQueue+0x18>
 800e976:	bf00      	nop
 800e978:	24041060 	.word	0x24041060

0800e97c <vQueueDelete>:
{
 800e97c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e97e:	4604      	mov	r4, r0
 800e980:	b940      	cbnz	r0, 800e994 <vQueueDelete+0x18>
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	e7fe      	b.n	800e992 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800e994:	f7ff ffde 	bl	800e954 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e998:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e99c:	b923      	cbnz	r3, 800e9a8 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800e99e:	4620      	mov	r0, r4
}
 800e9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800e9a4:	f001 bb78 	b.w	8010098 <vPortFree>
}
 800e9a8:	bd10      	pop	{r4, pc}

0800e9aa <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9aa:	b570      	push	{r4, r5, r6, lr}
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	460d      	mov	r5, r1
 800e9b0:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e9b2:	f001 f96f 	bl	800fc94 <vPortEnterCritical>
 800e9b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e9ba:	2bff      	cmp	r3, #255	; 0xff
 800e9bc:	d102      	bne.n	800e9c4 <vQueueWaitForMessageRestricted+0x1a>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800e9c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e9c8:	2bff      	cmp	r3, #255	; 0xff
 800e9ca:	d102      	bne.n	800e9d2 <vQueueWaitForMessageRestricted+0x28>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9d2:	f001 f97f 	bl	800fcd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e9d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9d8:	b92b      	cbnz	r3, 800e9e6 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e9da:	4632      	mov	r2, r6
 800e9dc:	4629      	mov	r1, r5
 800e9de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e9e2:	f000 fbdb 	bl	800f19c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e9e6:	4620      	mov	r0, r4
	}
 800e9e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800e9ec:	f7ff bbfc 	b.w	800e1e8 <prvUnlockQueue>

0800e9f0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e9f6:	f001 f94d 	bl	800fc94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e9fa:	4b2f      	ldr	r3, [pc, #188]	; (800eab8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800e9fc:	4e2f      	ldr	r6, [pc, #188]	; (800eabc <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	4f2f      	ldr	r7, [pc, #188]	; (800eac0 <prvAddNewTaskToReadyList+0xd0>)
 800ea02:	3201      	adds	r2, #1
 800ea04:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800ea06:	6835      	ldr	r5, [r6, #0]
 800ea08:	2d00      	cmp	r5, #0
 800ea0a:	d14a      	bne.n	800eaa2 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea0c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d11f      	bne.n	800ea54 <prvAddNewTaskToReadyList+0x64>
 800ea14:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea16:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea18:	4640      	mov	r0, r8
 800ea1a:	f7ff fb4f 	bl	800e0bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea1e:	f108 0814 	add.w	r8, r8, #20
 800ea22:	2d38      	cmp	r5, #56	; 0x38
 800ea24:	d1f7      	bne.n	800ea16 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea26:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800eae8 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800ea2a:	4d26      	ldr	r5, [pc, #152]	; (800eac4 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800ea2c:	4640      	mov	r0, r8
 800ea2e:	f7ff fb45 	bl	800e0bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea32:	4628      	mov	r0, r5
 800ea34:	f7ff fb42 	bl	800e0bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea38:	4823      	ldr	r0, [pc, #140]	; (800eac8 <prvAddNewTaskToReadyList+0xd8>)
 800ea3a:	f7ff fb3f 	bl	800e0bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea3e:	4823      	ldr	r0, [pc, #140]	; (800eacc <prvAddNewTaskToReadyList+0xdc>)
 800ea40:	f7ff fb3c 	bl	800e0bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea44:	4822      	ldr	r0, [pc, #136]	; (800ead0 <prvAddNewTaskToReadyList+0xe0>)
 800ea46:	f7ff fb39 	bl	800e0bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea4a:	4b22      	ldr	r3, [pc, #136]	; (800ead4 <prvAddNewTaskToReadyList+0xe4>)
 800ea4c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea50:	4b21      	ldr	r3, [pc, #132]	; (800ead8 <prvAddNewTaskToReadyList+0xe8>)
 800ea52:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800ea54:	4a21      	ldr	r2, [pc, #132]	; (800eadc <prvAddNewTaskToReadyList+0xec>)
 800ea56:	6813      	ldr	r3, [r2, #0]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800ea5c:	4a20      	ldr	r2, [pc, #128]	; (800eae0 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea5e:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800ea60:	6811      	ldr	r1, [r2, #0]
 800ea62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ea64:	428b      	cmp	r3, r1
 800ea66:	d900      	bls.n	800ea6a <prvAddNewTaskToReadyList+0x7a>
 800ea68:	6013      	str	r3, [r2, #0]
 800ea6a:	2014      	movs	r0, #20
 800ea6c:	1d21      	adds	r1, r4, #4
 800ea6e:	fb00 7003 	mla	r0, r0, r3, r7
 800ea72:	f7ff fb31 	bl	800e0d8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800ea76:	f001 f92d 	bl	800fcd4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800ea7a:	4b1a      	ldr	r3, [pc, #104]	; (800eae4 <prvAddNewTaskToReadyList+0xf4>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	b173      	cbz	r3, 800ea9e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea80:	6833      	ldr	r3, [r6, #0]
 800ea82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d209      	bcs.n	800ea9e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800ea8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ea8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea92:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	f3bf 8f6f 	isb	sy
}
 800ea9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800eaa2:	4b10      	ldr	r3, [pc, #64]	; (800eae4 <prvAddNewTaskToReadyList+0xf4>)
 800eaa4:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eaa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 800eaa8:	2a00      	cmp	r2, #0
 800eaaa:	d1d3      	bne.n	800ea54 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eaac:	6832      	ldr	r2, [r6, #0]
 800eaae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d8cf      	bhi.n	800ea54 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800eab4:	6034      	str	r4, [r6, #0]
 800eab6:	e7cd      	b.n	800ea54 <prvAddNewTaskToReadyList+0x64>
 800eab8:	2404150c 	.word	0x2404150c
 800eabc:	240410a0 	.word	0x240410a0
 800eac0:	240410ac 	.word	0x240410ac
 800eac4:	24041534 	.word	0x24041534
 800eac8:	24041554 	.word	0x24041554
 800eacc:	24041580 	.word	0x24041580
 800ead0:	2404156c 	.word	0x2404156c
 800ead4:	240410a4 	.word	0x240410a4
 800ead8:	240410a8 	.word	0x240410a8
 800eadc:	24041518 	.word	0x24041518
 800eae0:	2404151c 	.word	0x2404151c
 800eae4:	24041568 	.word	0x24041568
 800eae8:	24041520 	.word	0x24041520

0800eaec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eaee:	4b15      	ldr	r3, [pc, #84]	; (800eb44 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800eaf0:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaf2:	4d15      	ldr	r5, [pc, #84]	; (800eb48 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800eaf4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800eaf6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaf8:	6828      	ldr	r0, [r5, #0]
 800eafa:	3004      	adds	r0, #4
 800eafc:	f7ff fb0f 	bl	800e11e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb00:	1c73      	adds	r3, r6, #1
 800eb02:	d107      	bne.n	800eb14 <prvAddCurrentTaskToDelayedList+0x28>
 800eb04:	b137      	cbz	r7, 800eb14 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb06:	6829      	ldr	r1, [r5, #0]
 800eb08:	4810      	ldr	r0, [pc, #64]	; (800eb4c <prvAddCurrentTaskToDelayedList+0x60>)
 800eb0a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eb0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb10:	f7ff bae2 	b.w	800e0d8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eb14:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb16:	682b      	ldr	r3, [r5, #0]
 800eb18:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb1a:	d307      	bcc.n	800eb2c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb1c:	4b0c      	ldr	r3, [pc, #48]	; (800eb50 <prvAddCurrentTaskToDelayedList+0x64>)
 800eb1e:	6818      	ldr	r0, [r3, #0]
 800eb20:	6829      	ldr	r1, [r5, #0]
}
 800eb22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb26:	3104      	adds	r1, #4
 800eb28:	f7ff bae2 	b.w	800e0f0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb2c:	4b09      	ldr	r3, [pc, #36]	; (800eb54 <prvAddCurrentTaskToDelayedList+0x68>)
 800eb2e:	6818      	ldr	r0, [r3, #0]
 800eb30:	6829      	ldr	r1, [r5, #0]
 800eb32:	3104      	adds	r1, #4
 800eb34:	f7ff fadc 	bl	800e0f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb38:	4b07      	ldr	r3, [pc, #28]	; (800eb58 <prvAddCurrentTaskToDelayedList+0x6c>)
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	42a2      	cmp	r2, r4
 800eb3e:	d900      	bls.n	800eb42 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800eb40:	601c      	str	r4, [r3, #0]
}
 800eb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb44:	24041594 	.word	0x24041594
 800eb48:	240410a0 	.word	0x240410a0
 800eb4c:	2404156c 	.word	0x2404156c
 800eb50:	240410a8 	.word	0x240410a8
 800eb54:	240410a4 	.word	0x240410a4
 800eb58:	24041548 	.word	0x24041548

0800eb5c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb5c:	4a06      	ldr	r2, [pc, #24]	; (800eb78 <prvResetNextTaskUnblockTime+0x1c>)
 800eb5e:	6813      	ldr	r3, [r2, #0]
 800eb60:	6819      	ldr	r1, [r3, #0]
 800eb62:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <prvResetNextTaskUnblockTime+0x20>)
 800eb64:	b919      	cbnz	r1, 800eb6e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb66:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb6a:	601a      	str	r2, [r3, #0]
}
 800eb6c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb6e:	6812      	ldr	r2, [r2, #0]
 800eb70:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb72:	68d2      	ldr	r2, [r2, #12]
 800eb74:	6852      	ldr	r2, [r2, #4]
 800eb76:	e7f8      	b.n	800eb6a <prvResetNextTaskUnblockTime+0xe>
 800eb78:	240410a4 	.word	0x240410a4
 800eb7c:	24041548 	.word	0x24041548

0800eb80 <prvDeleteTCB>:
	{
 800eb80:	b510      	push	{r4, lr}
 800eb82:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eb84:	3058      	adds	r0, #88	; 0x58
 800eb86:	f003 f8bf 	bl	8011d08 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb8a:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 800eb8e:	b93b      	cbnz	r3, 800eba0 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800eb90:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800eb92:	f001 fa81 	bl	8010098 <vPortFree>
				vPortFree( pxTCB );
 800eb96:	4620      	mov	r0, r4
	}
 800eb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800eb9c:	f001 ba7c 	b.w	8010098 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d0f8      	beq.n	800eb96 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eba4:	2b02      	cmp	r3, #2
 800eba6:	d008      	beq.n	800ebba <prvDeleteTCB+0x3a>
 800eba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebac:	f383 8811 	msr	BASEPRI, r3
 800ebb0:	f3bf 8f6f 	isb	sy
 800ebb4:	f3bf 8f4f 	dsb	sy
 800ebb8:	e7fe      	b.n	800ebb8 <prvDeleteTCB+0x38>
	}
 800ebba:	bd10      	pop	{r4, pc}

0800ebbc <prvIdleTask>:
{
 800ebbc:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebbe:	4c13      	ldr	r4, [pc, #76]	; (800ec0c <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebc0:	4f13      	ldr	r7, [pc, #76]	; (800ec10 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800ebc2:	4d14      	ldr	r5, [pc, #80]	; (800ec14 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	b973      	cbnz	r3, 800ebe6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ebc8:	4b13      	ldr	r3, [pc, #76]	; (800ec18 <prvIdleTask+0x5c>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d9f8      	bls.n	800ebc2 <prvIdleTask+0x6>
				taskYIELD();
 800ebd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ebd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	f3bf 8f6f 	isb	sy
 800ebe4:	e7ed      	b.n	800ebc2 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800ebe6:	f001 f855 	bl	800fc94 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebee:	1d30      	adds	r0, r6, #4
 800ebf0:	f7ff fa95 	bl	800e11e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ebf4:	682b      	ldr	r3, [r5, #0]
 800ebf6:	3b01      	subs	r3, #1
 800ebf8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	3b01      	subs	r3, #1
 800ebfe:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800ec00:	f001 f868 	bl	800fcd4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800ec04:	4630      	mov	r0, r6
 800ec06:	f7ff ffbb 	bl	800eb80 <prvDeleteTCB>
 800ec0a:	e7db      	b.n	800ebc4 <prvIdleTask+0x8>
 800ec0c:	24041510 	.word	0x24041510
 800ec10:	24041580 	.word	0x24041580
 800ec14:	2404150c 	.word	0x2404150c
 800ec18:	240410ac 	.word	0x240410ac

0800ec1c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ec1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ec20:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ec24:	4606      	mov	r6, r0
 800ec26:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ec28:	21a5      	movs	r1, #165	; 0xa5
 800ec2a:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ec2c:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ec2e:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ec32:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ec36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ec38:	f002 ffa6 	bl	8011b88 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ec3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ec3e:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ec40:	f023 0907 	bic.w	r9, r3, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ec44:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	if( pcName != NULL )
 800ec48:	2d00      	cmp	r5, #0
 800ec4a:	d041      	beq.n	800ecd0 <prvInitialiseNewTask.constprop.0+0xb4>
 800ec4c:	1e6b      	subs	r3, r5, #1
 800ec4e:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800ec52:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ec54:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ec58:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800ec5c:	b109      	cbz	r1, 800ec62 <prvInitialiseNewTask.constprop.0+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec5e:	42ab      	cmp	r3, r5
 800ec60:	d1f8      	bne.n	800ec54 <prvInitialiseNewTask.constprop.0+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec62:	2300      	movs	r3, #0
 800ec64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec68:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800ec6a:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec6e:	1d20      	adds	r0, r4, #4
 800ec70:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800ec72:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 800ec76:	bf28      	it	cs
 800ec78:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800ec7a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ec7c:	6525      	str	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec7e:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec82:	f7ff fa26 	bl	800e0d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec86:	f104 0018 	add.w	r0, r4, #24
 800ec8a:	f7ff fa22 	bl	800e0d2 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ec8e:	224c      	movs	r2, #76	; 0x4c
 800ec90:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800ec92:	f8c4 a0a4 	str.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ec96:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec9a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec9c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec9e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eca0:	f884 a0a8 	strb.w	sl, [r4, #168]	; 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eca4:	f002 ff70 	bl	8011b88 <memset>
 800eca8:	4b0b      	ldr	r3, [pc, #44]	; (800ecd8 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ecaa:	4631      	mov	r1, r6
 800ecac:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ecae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ecb2:	65e3      	str	r3, [r4, #92]	; 0x5c
 800ecb4:	33d0      	adds	r3, #208	; 0xd0
 800ecb6:	6622      	str	r2, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ecb8:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ecba:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ecbc:	f000 ffc4 	bl	800fc48 <pxPortInitialiseStack>
 800ecc0:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800ecc2:	f1b8 0f00 	cmp.w	r8, #0
 800ecc6:	d001      	beq.n	800eccc <prvInitialiseNewTask.constprop.0+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ecc8:	f8c8 4000 	str.w	r4, [r8]
}
 800eccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ecd0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800ecd4:	e7c8      	b.n	800ec68 <prvInitialiseNewTask.constprop.0+0x4c>
 800ecd6:	bf00      	nop
 800ecd8:	240452f0 	.word	0x240452f0

0800ecdc <xTaskCreateStatic>:
	{
 800ecdc:	b570      	push	{r4, r5, r6, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800ece4:	b945      	cbnz	r5, 800ecf8 <xTaskCreateStatic+0x1c>
 800ece6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecea:	f383 8811 	msr	BASEPRI, r3
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	e7fe      	b.n	800ecf6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800ecf8:	b944      	cbnz	r4, 800ed0c <xTaskCreateStatic+0x30>
 800ecfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfe:	f383 8811 	msr	BASEPRI, r3
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	f3bf 8f4f 	dsb	sy
 800ed0a:	e7fe      	b.n	800ed0a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed0c:	26ac      	movs	r6, #172	; 0xac
 800ed0e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed10:	9e05      	ldr	r6, [sp, #20]
 800ed12:	2eac      	cmp	r6, #172	; 0xac
 800ed14:	d008      	beq.n	800ed28 <xTaskCreateStatic+0x4c>
 800ed16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1a:	f383 8811 	msr	BASEPRI, r3
 800ed1e:	f3bf 8f6f 	isb	sy
 800ed22:	f3bf 8f4f 	dsb	sy
 800ed26:	e7fe      	b.n	800ed26 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed28:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed2a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed2c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed2e:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ed32:	ad04      	add	r5, sp, #16
 800ed34:	9402      	str	r4, [sp, #8]
 800ed36:	9501      	str	r5, [sp, #4]
 800ed38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ed3a:	9500      	str	r5, [sp, #0]
 800ed3c:	f7ff ff6e 	bl	800ec1c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed40:	4620      	mov	r0, r4
 800ed42:	f7ff fe55 	bl	800e9f0 <prvAddNewTaskToReadyList>
	}
 800ed46:	9804      	ldr	r0, [sp, #16]
 800ed48:	b006      	add	sp, #24
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}

0800ed4c <xTaskCreate>:
	{
 800ed4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed50:	4607      	mov	r7, r0
 800ed52:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ed54:	0090      	lsls	r0, r2, #2
	{
 800ed56:	4688      	mov	r8, r1
 800ed58:	4616      	mov	r6, r2
 800ed5a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ed5c:	f001 f904 	bl	800ff68 <pvPortMalloc>
			if( pxStack != NULL )
 800ed60:	4605      	mov	r5, r0
 800ed62:	b1e8      	cbz	r0, 800eda0 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ed64:	20ac      	movs	r0, #172	; 0xac
 800ed66:	f001 f8ff 	bl	800ff68 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	b1a8      	cbz	r0, 800ed9a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ed6e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800ed70:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ed72:	4632      	mov	r2, r6
 800ed74:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ed76:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ed7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed7c:	9002      	str	r0, [sp, #8]
 800ed7e:	4638      	mov	r0, r7
 800ed80:	9301      	str	r3, [sp, #4]
 800ed82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed84:	9300      	str	r3, [sp, #0]
 800ed86:	464b      	mov	r3, r9
 800ed88:	f7ff ff48 	bl	800ec1c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f7ff fe2f 	bl	800e9f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed92:	2001      	movs	r0, #1
	}
 800ed94:	b005      	add	sp, #20
 800ed96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f001 f97c 	bl	8010098 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eda0:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800eda4:	e7f6      	b.n	800ed94 <xTaskCreate+0x48>
	...

0800eda8 <vTaskStartScheduler>:
{
 800eda8:	b510      	push	{r4, lr}
 800edaa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800edac:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800edae:	aa07      	add	r2, sp, #28
 800edb0:	a906      	add	r1, sp, #24
 800edb2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800edb4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800edb8:	f7ff f968 	bl	800e08c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800edbc:	9b05      	ldr	r3, [sp, #20]
 800edbe:	9a07      	ldr	r2, [sp, #28]
 800edc0:	9302      	str	r3, [sp, #8]
 800edc2:	9b06      	ldr	r3, [sp, #24]
 800edc4:	4919      	ldr	r1, [pc, #100]	; (800ee2c <vTaskStartScheduler+0x84>)
 800edc6:	481a      	ldr	r0, [pc, #104]	; (800ee30 <vTaskStartScheduler+0x88>)
 800edc8:	e9cd 4300 	strd	r4, r3, [sp]
 800edcc:	4623      	mov	r3, r4
 800edce:	f7ff ff85 	bl	800ecdc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800edd2:	b340      	cbz	r0, 800ee26 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800edd4:	f000 fd48 	bl	800f868 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800edd8:	2801      	cmp	r0, #1
 800edda:	d119      	bne.n	800ee10 <vTaskStartScheduler+0x68>
 800eddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800edec:	4b11      	ldr	r3, [pc, #68]	; (800ee34 <vTaskStartScheduler+0x8c>)
 800edee:	4a12      	ldr	r2, [pc, #72]	; (800ee38 <vTaskStartScheduler+0x90>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3358      	adds	r3, #88	; 0x58
 800edf4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800edf6:	f04f 32ff 	mov.w	r2, #4294967295
 800edfa:	4b10      	ldr	r3, [pc, #64]	; (800ee3c <vTaskStartScheduler+0x94>)
 800edfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800edfe:	4b10      	ldr	r3, [pc, #64]	; (800ee40 <vTaskStartScheduler+0x98>)
 800ee00:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee02:	4b10      	ldr	r3, [pc, #64]	; (800ee44 <vTaskStartScheduler+0x9c>)
 800ee04:	601c      	str	r4, [r3, #0]
}
 800ee06:	b008      	add	sp, #32
 800ee08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800ee0c:	f000 bfd2 	b.w	800fdb4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ee10:	3001      	adds	r0, #1
 800ee12:	d108      	bne.n	800ee26 <vTaskStartScheduler+0x7e>
 800ee14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee18:	f383 8811 	msr	BASEPRI, r3
 800ee1c:	f3bf 8f6f 	isb	sy
 800ee20:	f3bf 8f4f 	dsb	sy
 800ee24:	e7fe      	b.n	800ee24 <vTaskStartScheduler+0x7c>
}
 800ee26:	b008      	add	sp, #32
 800ee28:	bd10      	pop	{r4, pc}
 800ee2a:	bf00      	nop
 800ee2c:	08015dd2 	.word	0x08015dd2
 800ee30:	0800ebbd 	.word	0x0800ebbd
 800ee34:	240410a0 	.word	0x240410a0
 800ee38:	24000238 	.word	0x24000238
 800ee3c:	24041548 	.word	0x24041548
 800ee40:	24041568 	.word	0x24041568
 800ee44:	24041594 	.word	0x24041594

0800ee48 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ee48:	4a02      	ldr	r2, [pc, #8]	; (800ee54 <vTaskSuspendAll+0xc>)
 800ee4a:	6813      	ldr	r3, [r2, #0]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	6013      	str	r3, [r2, #0]
}
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	24041514 	.word	0x24041514

0800ee58 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ee58:	4b01      	ldr	r3, [pc, #4]	; (800ee60 <xTaskGetTickCount+0x8>)
 800ee5a:	6818      	ldr	r0, [r3, #0]
}
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	24041594 	.word	0x24041594

0800ee64 <xTaskGetTickCountFromISR>:
{
 800ee64:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee66:	f001 f82b 	bl	800fec0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800ee6a:	4b01      	ldr	r3, [pc, #4]	; (800ee70 <xTaskGetTickCountFromISR+0xc>)
 800ee6c:	6818      	ldr	r0, [r3, #0]
}
 800ee6e:	bd08      	pop	{r3, pc}
 800ee70:	24041594 	.word	0x24041594

0800ee74 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee74:	4b3f      	ldr	r3, [pc, #252]	; (800ef74 <xTaskIncrementTick+0x100>)
 800ee76:	681b      	ldr	r3, [r3, #0]
{
 800ee78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d172      	bne.n	800ef66 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ee80:	4b3d      	ldr	r3, [pc, #244]	; (800ef78 <xTaskIncrementTick+0x104>)
 800ee82:	681d      	ldr	r5, [r3, #0]
 800ee84:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800ee86:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ee88:	b9bd      	cbnz	r5, 800eeba <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800ee8a:	4b3c      	ldr	r3, [pc, #240]	; (800ef7c <xTaskIncrementTick+0x108>)
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	6812      	ldr	r2, [r2, #0]
 800ee90:	b142      	cbz	r2, 800eea4 <xTaskIncrementTick+0x30>
 800ee92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee96:	f383 8811 	msr	BASEPRI, r3
 800ee9a:	f3bf 8f6f 	isb	sy
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	e7fe      	b.n	800eea2 <xTaskIncrementTick+0x2e>
 800eea4:	4a36      	ldr	r2, [pc, #216]	; (800ef80 <xTaskIncrementTick+0x10c>)
 800eea6:	6819      	ldr	r1, [r3, #0]
 800eea8:	6810      	ldr	r0, [r2, #0]
 800eeaa:	6018      	str	r0, [r3, #0]
 800eeac:	6011      	str	r1, [r2, #0]
 800eeae:	4a35      	ldr	r2, [pc, #212]	; (800ef84 <xTaskIncrementTick+0x110>)
 800eeb0:	6813      	ldr	r3, [r2, #0]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	6013      	str	r3, [r2, #0]
 800eeb6:	f7ff fe51 	bl	800eb5c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eeba:	4e33      	ldr	r6, [pc, #204]	; (800ef88 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800eebc:	2400      	movs	r4, #0
 800eebe:	4f33      	ldr	r7, [pc, #204]	; (800ef8c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eec0:	6833      	ldr	r3, [r6, #0]
 800eec2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800ef98 <xTaskIncrementTick+0x124>
 800eec6:	429d      	cmp	r5, r3
 800eec8:	d211      	bcs.n	800eeee <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eeca:	f8d8 3000 	ldr.w	r3, [r8]
 800eece:	2214      	movs	r2, #20
 800eed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed2:	4353      	muls	r3, r2
 800eed4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800eed6:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800eed8:	4b2d      	ldr	r3, [pc, #180]	; (800ef90 <xTaskIncrementTick+0x11c>)
 800eeda:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800eedc:	bf28      	it	cs
 800eede:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	bf18      	it	ne
 800eee4:	2401      	movne	r4, #1
}
 800eee6:	4620      	mov	r0, r4
 800eee8:	b003      	add	sp, #12
 800eeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eeee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800ef7c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800eef2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800ef9c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eef6:	f8d9 3000 	ldr.w	r3, [r9]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	b91b      	cbnz	r3, 800ef06 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eefe:	f04f 33ff 	mov.w	r3, #4294967295
 800ef02:	6033      	str	r3, [r6, #0]
					break;
 800ef04:	e7e1      	b.n	800eeca <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef06:	f8d9 3000 	ldr.w	r3, [r9]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ef10:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800ef14:	4295      	cmp	r5, r2
 800ef16:	d201      	bcs.n	800ef1c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800ef18:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ef1a:	e7d6      	b.n	800eeca <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef1c:	f10b 0104 	add.w	r1, fp, #4
 800ef20:	4608      	mov	r0, r1
 800ef22:	9101      	str	r1, [sp, #4]
 800ef24:	f7ff f8fb 	bl	800e11e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef28:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800ef2c:	9901      	ldr	r1, [sp, #4]
 800ef2e:	b122      	cbz	r2, 800ef3a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef30:	f10b 0018 	add.w	r0, fp, #24
 800ef34:	f7ff f8f3 	bl	800e11e <uxListRemove>
 800ef38:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800ef3a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800ef3e:	f8da 2000 	ldr.w	r2, [sl]
 800ef42:	4290      	cmp	r0, r2
 800ef44:	d901      	bls.n	800ef4a <xTaskIncrementTick+0xd6>
 800ef46:	f8ca 0000 	str.w	r0, [sl]
 800ef4a:	2314      	movs	r3, #20
 800ef4c:	fb03 7000 	mla	r0, r3, r0, r7
 800ef50:	f7ff f8c2 	bl	800e0d8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef54:	f8d8 1000 	ldr.w	r1, [r8]
 800ef58:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800ef5c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	bf28      	it	cs
 800ef62:	2401      	movcs	r4, #1
 800ef64:	e7c7      	b.n	800eef6 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800ef66:	4a0b      	ldr	r2, [pc, #44]	; (800ef94 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800ef68:	2400      	movs	r4, #0
		++xPendedTicks;
 800ef6a:	6813      	ldr	r3, [r2, #0]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800ef70:	e7b9      	b.n	800eee6 <xTaskIncrementTick+0x72>
 800ef72:	bf00      	nop
 800ef74:	24041514 	.word	0x24041514
 800ef78:	24041594 	.word	0x24041594
 800ef7c:	240410a4 	.word	0x240410a4
 800ef80:	240410a8 	.word	0x240410a8
 800ef84:	2404154c 	.word	0x2404154c
 800ef88:	24041548 	.word	0x24041548
 800ef8c:	240410ac 	.word	0x240410ac
 800ef90:	24041598 	.word	0x24041598
 800ef94:	24041550 	.word	0x24041550
 800ef98:	240410a0 	.word	0x240410a0
 800ef9c:	2404151c 	.word	0x2404151c

0800efa0 <xTaskResumeAll>:
{
 800efa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800efa2:	4c31      	ldr	r4, [pc, #196]	; (800f068 <xTaskResumeAll+0xc8>)
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	b943      	cbnz	r3, 800efba <xTaskResumeAll+0x1a>
 800efa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efac:	f383 8811 	msr	BASEPRI, r3
 800efb0:	f3bf 8f6f 	isb	sy
 800efb4:	f3bf 8f4f 	dsb	sy
 800efb8:	e7fe      	b.n	800efb8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800efba:	f000 fe6b 	bl	800fc94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efc4:	6824      	ldr	r4, [r4, #0]
 800efc6:	b12c      	cbz	r4, 800efd4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800efc8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800efca:	f000 fe83 	bl	800fcd4 <vPortExitCritical>
}
 800efce:	4620      	mov	r0, r4
 800efd0:	b003      	add	sp, #12
 800efd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800efd4:	4b25      	ldr	r3, [pc, #148]	; (800f06c <xTaskResumeAll+0xcc>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d0f5      	beq.n	800efc8 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800efdc:	4d24      	ldr	r5, [pc, #144]	; (800f070 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800efde:	4e25      	ldr	r6, [pc, #148]	; (800f074 <xTaskResumeAll+0xd4>)
 800efe0:	4f25      	ldr	r7, [pc, #148]	; (800f078 <xTaskResumeAll+0xd8>)
 800efe2:	e01e      	b.n	800f022 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efe4:	68eb      	ldr	r3, [r5, #12]
 800efe6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efe8:	f104 0018 	add.w	r0, r4, #24
 800efec:	f7ff f897 	bl	800e11e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eff0:	1d21      	adds	r1, r4, #4
 800eff2:	4608      	mov	r0, r1
 800eff4:	9101      	str	r1, [sp, #4]
 800eff6:	f7ff f892 	bl	800e11e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800effa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800effc:	6832      	ldr	r2, [r6, #0]
 800effe:	9901      	ldr	r1, [sp, #4]
 800f000:	4293      	cmp	r3, r2
 800f002:	d900      	bls.n	800f006 <xTaskResumeAll+0x66>
 800f004:	6033      	str	r3, [r6, #0]
 800f006:	2014      	movs	r0, #20
 800f008:	fb00 7003 	mla	r0, r0, r3, r7
 800f00c:	f7ff f864 	bl	800e0d8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f010:	4b1a      	ldr	r3, [pc, #104]	; (800f07c <xTaskResumeAll+0xdc>)
 800f012:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f018:	429a      	cmp	r2, r3
 800f01a:	d302      	bcc.n	800f022 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800f01c:	4b18      	ldr	r3, [pc, #96]	; (800f080 <xTaskResumeAll+0xe0>)
 800f01e:	2201      	movs	r2, #1
 800f020:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f022:	682b      	ldr	r3, [r5, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1dd      	bne.n	800efe4 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800f028:	b10c      	cbz	r4, 800f02e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800f02a:	f7ff fd97 	bl	800eb5c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f02e:	4d15      	ldr	r5, [pc, #84]	; (800f084 <xTaskResumeAll+0xe4>)
 800f030:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800f032:	b144      	cbz	r4, 800f046 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800f034:	4e12      	ldr	r6, [pc, #72]	; (800f080 <xTaskResumeAll+0xe0>)
 800f036:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800f038:	f7ff ff1c 	bl	800ee74 <xTaskIncrementTick>
 800f03c:	b100      	cbz	r0, 800f040 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800f03e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f040:	3c01      	subs	r4, #1
 800f042:	d1f9      	bne.n	800f038 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800f044:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800f046:	4b0e      	ldr	r3, [pc, #56]	; (800f080 <xTaskResumeAll+0xe0>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d0bc      	beq.n	800efc8 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800f04e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f056:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800f062:	2401      	movs	r4, #1
 800f064:	e7b1      	b.n	800efca <xTaskResumeAll+0x2a>
 800f066:	bf00      	nop
 800f068:	24041514 	.word	0x24041514
 800f06c:	2404150c 	.word	0x2404150c
 800f070:	24041554 	.word	0x24041554
 800f074:	2404151c 	.word	0x2404151c
 800f078:	240410ac 	.word	0x240410ac
 800f07c:	240410a0 	.word	0x240410a0
 800f080:	24041598 	.word	0x24041598
 800f084:	24041550 	.word	0x24041550

0800f088 <vTaskDelay>:
	{
 800f088:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f08a:	b950      	cbnz	r0, 800f0a2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800f08c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f094:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	f3bf 8f6f 	isb	sy
	}
 800f0a0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800f0a2:	4b0a      	ldr	r3, [pc, #40]	; (800f0cc <vTaskDelay+0x44>)
 800f0a4:	6819      	ldr	r1, [r3, #0]
 800f0a6:	b141      	cbz	r1, 800f0ba <vTaskDelay+0x32>
 800f0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ac:	f383 8811 	msr	BASEPRI, r3
 800f0b0:	f3bf 8f6f 	isb	sy
 800f0b4:	f3bf 8f4f 	dsb	sy
 800f0b8:	e7fe      	b.n	800f0b8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800f0ba:	f7ff fec5 	bl	800ee48 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f0be:	f7ff fd15 	bl	800eaec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f0c2:	f7ff ff6d 	bl	800efa0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d0e0      	beq.n	800f08c <vTaskDelay+0x4>
 800f0ca:	e7e9      	b.n	800f0a0 <vTaskDelay+0x18>
 800f0cc:	24041514 	.word	0x24041514

0800f0d0 <vTaskSwitchContext>:
{
 800f0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f0d2:	4b1f      	ldr	r3, [pc, #124]	; (800f150 <vTaskSwitchContext+0x80>)
 800f0d4:	681a      	ldr	r2, [r3, #0]
 800f0d6:	4b1f      	ldr	r3, [pc, #124]	; (800f154 <vTaskSwitchContext+0x84>)
 800f0d8:	b112      	cbz	r2, 800f0e0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800f0da:	2201      	movs	r2, #1
 800f0dc:	601a      	str	r2, [r3, #0]
}
 800f0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800f0e0:	4c1d      	ldr	r4, [pc, #116]	; (800f158 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 800f0e2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f0e4:	6822      	ldr	r2, [r4, #0]
 800f0e6:	6823      	ldr	r3, [r4, #0]
 800f0e8:	6812      	ldr	r2, [r2, #0]
 800f0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d804      	bhi.n	800f0fa <vTaskSwitchContext+0x2a>
 800f0f0:	6820      	ldr	r0, [r4, #0]
 800f0f2:	6821      	ldr	r1, [r4, #0]
 800f0f4:	3134      	adds	r1, #52	; 0x34
 800f0f6:	f7f6 f901 	bl	80052fc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0fa:	4e18      	ldr	r6, [pc, #96]	; (800f15c <vTaskSwitchContext+0x8c>)
 800f0fc:	2714      	movs	r7, #20
 800f0fe:	4918      	ldr	r1, [pc, #96]	; (800f160 <vTaskSwitchContext+0x90>)
 800f100:	6832      	ldr	r2, [r6, #0]
 800f102:	fb07 f302 	mul.w	r3, r7, r2
 800f106:	58cd      	ldr	r5, [r1, r3]
 800f108:	18c8      	adds	r0, r1, r3
 800f10a:	b1a5      	cbz	r5, 800f136 <vTaskSwitchContext+0x66>
 800f10c:	6845      	ldr	r5, [r0, #4]
 800f10e:	3308      	adds	r3, #8
 800f110:	686d      	ldr	r5, [r5, #4]
 800f112:	440b      	add	r3, r1
 800f114:	429d      	cmp	r5, r3
 800f116:	6045      	str	r5, [r0, #4]
 800f118:	bf04      	itt	eq
 800f11a:	686b      	ldreq	r3, [r5, #4]
 800f11c:	6043      	streq	r3, [r0, #4]
 800f11e:	2314      	movs	r3, #20
 800f120:	fb03 1102 	mla	r1, r3, r2, r1
 800f124:	684b      	ldr	r3, [r1, #4]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	6032      	str	r2, [r6, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	4a0d      	ldr	r2, [pc, #52]	; (800f164 <vTaskSwitchContext+0x94>)
 800f130:	3358      	adds	r3, #88	; 0x58
 800f132:	6013      	str	r3, [r2, #0]
}
 800f134:	e7d3      	b.n	800f0de <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f136:	b942      	cbnz	r2, 800f14a <vTaskSwitchContext+0x7a>
 800f138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13c:	f383 8811 	msr	BASEPRI, r3
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	f3bf 8f4f 	dsb	sy
 800f148:	e7fe      	b.n	800f148 <vTaskSwitchContext+0x78>
 800f14a:	3a01      	subs	r2, #1
 800f14c:	e7d9      	b.n	800f102 <vTaskSwitchContext+0x32>
 800f14e:	bf00      	nop
 800f150:	24041514 	.word	0x24041514
 800f154:	24041598 	.word	0x24041598
 800f158:	240410a0 	.word	0x240410a0
 800f15c:	2404151c 	.word	0x2404151c
 800f160:	240410ac 	.word	0x240410ac
 800f164:	24000238 	.word	0x24000238

0800f168 <vTaskPlaceOnEventList>:
{
 800f168:	b510      	push	{r4, lr}
 800f16a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800f16c:	b940      	cbnz	r0, 800f180 <vTaskPlaceOnEventList+0x18>
 800f16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f172:	f383 8811 	msr	BASEPRI, r3
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	e7fe      	b.n	800f17e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f180:	4b05      	ldr	r3, [pc, #20]	; (800f198 <vTaskPlaceOnEventList+0x30>)
 800f182:	6819      	ldr	r1, [r3, #0]
 800f184:	3118      	adds	r1, #24
 800f186:	f7fe ffb3 	bl	800e0f0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f18a:	4620      	mov	r0, r4
 800f18c:	2101      	movs	r1, #1
}
 800f18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f192:	f7ff bcab 	b.w	800eaec <prvAddCurrentTaskToDelayedList>
 800f196:	bf00      	nop
 800f198:	240410a0 	.word	0x240410a0

0800f19c <vTaskPlaceOnEventListRestricted>:
	{
 800f19c:	b538      	push	{r3, r4, r5, lr}
 800f19e:	460d      	mov	r5, r1
 800f1a0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800f1a2:	b940      	cbnz	r0, 800f1b6 <vTaskPlaceOnEventListRestricted+0x1a>
 800f1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a8:	f383 8811 	msr	BASEPRI, r3
 800f1ac:	f3bf 8f6f 	isb	sy
 800f1b0:	f3bf 8f4f 	dsb	sy
 800f1b4:	e7fe      	b.n	800f1b4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1b6:	4b07      	ldr	r3, [pc, #28]	; (800f1d4 <vTaskPlaceOnEventListRestricted+0x38>)
 800f1b8:	6819      	ldr	r1, [r3, #0]
 800f1ba:	3118      	adds	r1, #24
 800f1bc:	f7fe ff8c 	bl	800e0d8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800f1c0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	bf0c      	ite	eq
 800f1c6:	4628      	moveq	r0, r5
 800f1c8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800f1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f1d0:	f7ff bc8c 	b.w	800eaec <prvAddCurrentTaskToDelayedList>
 800f1d4:	240410a0 	.word	0x240410a0

0800f1d8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1d8:	68c3      	ldr	r3, [r0, #12]
{
 800f1da:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f1de:	b944      	cbnz	r4, 800f1f2 <xTaskRemoveFromEventList+0x1a>
 800f1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e4:	f383 8811 	msr	BASEPRI, r3
 800f1e8:	f3bf 8f6f 	isb	sy
 800f1ec:	f3bf 8f4f 	dsb	sy
 800f1f0:	e7fe      	b.n	800f1f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f1f2:	f104 0118 	add.w	r1, r4, #24
 800f1f6:	4608      	mov	r0, r1
 800f1f8:	9101      	str	r1, [sp, #4]
 800f1fa:	f7fe ff90 	bl	800e11e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1fe:	4b12      	ldr	r3, [pc, #72]	; (800f248 <xTaskRemoveFromEventList+0x70>)
 800f200:	9901      	ldr	r1, [sp, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	b9e3      	cbnz	r3, 800f240 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f206:	1d21      	adds	r1, r4, #4
 800f208:	4608      	mov	r0, r1
 800f20a:	9101      	str	r1, [sp, #4]
 800f20c:	f7fe ff87 	bl	800e11e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f210:	4a0e      	ldr	r2, [pc, #56]	; (800f24c <xTaskRemoveFromEventList+0x74>)
 800f212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f214:	6810      	ldr	r0, [r2, #0]
 800f216:	9901      	ldr	r1, [sp, #4]
 800f218:	4283      	cmp	r3, r0
 800f21a:	d900      	bls.n	800f21e <xTaskRemoveFromEventList+0x46>
 800f21c:	6013      	str	r3, [r2, #0]
 800f21e:	4a0c      	ldr	r2, [pc, #48]	; (800f250 <xTaskRemoveFromEventList+0x78>)
 800f220:	2014      	movs	r0, #20
 800f222:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f226:	f7fe ff57 	bl	800e0d8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f22a:	4b0a      	ldr	r3, [pc, #40]	; (800f254 <xTaskRemoveFromEventList+0x7c>)
 800f22c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f232:	429a      	cmp	r2, r3
 800f234:	d906      	bls.n	800f244 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800f236:	2001      	movs	r0, #1
 800f238:	4b07      	ldr	r3, [pc, #28]	; (800f258 <xTaskRemoveFromEventList+0x80>)
 800f23a:	6018      	str	r0, [r3, #0]
}
 800f23c:	b002      	add	sp, #8
 800f23e:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f240:	4806      	ldr	r0, [pc, #24]	; (800f25c <xTaskRemoveFromEventList+0x84>)
 800f242:	e7f0      	b.n	800f226 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800f244:	2000      	movs	r0, #0
	return xReturn;
 800f246:	e7f9      	b.n	800f23c <xTaskRemoveFromEventList+0x64>
 800f248:	24041514 	.word	0x24041514
 800f24c:	2404151c 	.word	0x2404151c
 800f250:	240410ac 	.word	0x240410ac
 800f254:	240410a0 	.word	0x240410a0
 800f258:	24041598 	.word	0x24041598
 800f25c:	24041554 	.word	0x24041554

0800f260 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f260:	4b03      	ldr	r3, [pc, #12]	; (800f270 <vTaskInternalSetTimeOutState+0x10>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f266:	4b03      	ldr	r3, [pc, #12]	; (800f274 <vTaskInternalSetTimeOutState+0x14>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	6043      	str	r3, [r0, #4]
}
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	2404154c 	.word	0x2404154c
 800f274:	24041594 	.word	0x24041594

0800f278 <xTaskCheckForTimeOut>:
{
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800f27c:	4605      	mov	r5, r0
 800f27e:	b940      	cbnz	r0, 800f292 <xTaskCheckForTimeOut+0x1a>
 800f280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f284:	f383 8811 	msr	BASEPRI, r3
 800f288:	f3bf 8f6f 	isb	sy
 800f28c:	f3bf 8f4f 	dsb	sy
 800f290:	e7fe      	b.n	800f290 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800f292:	b941      	cbnz	r1, 800f2a6 <xTaskCheckForTimeOut+0x2e>
 800f294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f298:	f383 8811 	msr	BASEPRI, r3
 800f29c:	f3bf 8f6f 	isb	sy
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	e7fe      	b.n	800f2a4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800f2a6:	f000 fcf5 	bl	800fc94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f2aa:	4b0f      	ldr	r3, [pc, #60]	; (800f2e8 <xTaskCheckForTimeOut+0x70>)
 800f2ac:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	1c5a      	adds	r2, r3, #1
 800f2b2:	d010      	beq.n	800f2d6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f2b4:	480d      	ldr	r0, [pc, #52]	; (800f2ec <xTaskCheckForTimeOut+0x74>)
 800f2b6:	682e      	ldr	r6, [r5, #0]
 800f2b8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f2ba:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f2bc:	4286      	cmp	r6, r0
 800f2be:	d001      	beq.n	800f2c4 <xTaskCheckForTimeOut+0x4c>
 800f2c0:	428a      	cmp	r2, r1
 800f2c2:	d90f      	bls.n	800f2e4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f2c4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f2c6:	4283      	cmp	r3, r0
 800f2c8:	d90a      	bls.n	800f2e0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800f2ca:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f2cc:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800f2ce:	4413      	add	r3, r2
 800f2d0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f2d2:	f7ff ffc5 	bl	800f260 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800f2d6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f2d8:	f000 fcfc 	bl	800fcd4 <vPortExitCritical>
}
 800f2dc:	4620      	mov	r0, r4
 800f2de:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800f2e4:	2401      	movs	r4, #1
 800f2e6:	e7f7      	b.n	800f2d8 <xTaskCheckForTimeOut+0x60>
 800f2e8:	24041594 	.word	0x24041594
 800f2ec:	2404154c 	.word	0x2404154c

0800f2f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f2f0:	4b01      	ldr	r3, [pc, #4]	; (800f2f8 <vTaskMissedYield+0x8>)
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	601a      	str	r2, [r3, #0]
}
 800f2f6:	4770      	bx	lr
 800f2f8:	24041598 	.word	0x24041598

0800f2fc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800f2fc:	4b01      	ldr	r3, [pc, #4]	; (800f304 <xTaskGetCurrentTaskHandle+0x8>)
 800f2fe:	6818      	ldr	r0, [r3, #0]
	}
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	240410a0 	.word	0x240410a0

0800f308 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f308:	4b05      	ldr	r3, [pc, #20]	; (800f320 <xTaskGetSchedulerState+0x18>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	b133      	cbz	r3, 800f31c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f30e:	4b05      	ldr	r3, [pc, #20]	; (800f324 <xTaskGetSchedulerState+0x1c>)
 800f310:	6818      	ldr	r0, [r3, #0]
 800f312:	fab0 f080 	clz	r0, r0
 800f316:	0940      	lsrs	r0, r0, #5
 800f318:	0040      	lsls	r0, r0, #1
 800f31a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f31c:	2001      	movs	r0, #1
	}
 800f31e:	4770      	bx	lr
 800f320:	24041568 	.word	0x24041568
 800f324:	24041514 	.word	0x24041514

0800f328 <xTaskPriorityInherit>:
	{
 800f328:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800f32a:	4604      	mov	r4, r0
 800f32c:	b340      	cbz	r0, 800f380 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f32e:	4d1b      	ldr	r5, [pc, #108]	; (800f39c <xTaskPriorityInherit+0x74>)
 800f330:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f332:	682a      	ldr	r2, [r5, #0]
 800f334:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f336:	4293      	cmp	r3, r2
 800f338:	d228      	bcs.n	800f38c <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f33a:	6982      	ldr	r2, [r0, #24]
 800f33c:	2a00      	cmp	r2, #0
 800f33e:	db04      	blt.n	800f34a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f340:	682a      	ldr	r2, [r5, #0]
 800f342:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f344:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800f348:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f34a:	2214      	movs	r2, #20
 800f34c:	4e14      	ldr	r6, [pc, #80]	; (800f3a0 <xTaskPriorityInherit+0x78>)
 800f34e:	fb02 6303 	mla	r3, r2, r3, r6
 800f352:	6962      	ldr	r2, [r4, #20]
 800f354:	429a      	cmp	r2, r3
 800f356:	d115      	bne.n	800f384 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f358:	1d21      	adds	r1, r4, #4
 800f35a:	4608      	mov	r0, r1
 800f35c:	9101      	str	r1, [sp, #4]
 800f35e:	f7fe fede 	bl	800e11e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f362:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f364:	4a0f      	ldr	r2, [pc, #60]	; (800f3a4 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f368:	6810      	ldr	r0, [r2, #0]
 800f36a:	9901      	ldr	r1, [sp, #4]
 800f36c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f36e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f370:	d900      	bls.n	800f374 <xTaskPriorityInherit+0x4c>
 800f372:	6013      	str	r3, [r2, #0]
 800f374:	2014      	movs	r0, #20
 800f376:	fb00 6003 	mla	r0, r0, r3, r6
 800f37a:	f7fe fead 	bl	800e0d8 <vListInsertEnd>
				xReturn = pdTRUE;
 800f37e:	2001      	movs	r0, #1
	}
 800f380:	b002      	add	sp, #8
 800f382:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f384:	682b      	ldr	r3, [r5, #0]
 800f386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f388:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f38a:	e7f8      	b.n	800f37e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f38c:	682b      	ldr	r3, [r5, #0]
 800f38e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800f390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f392:	4298      	cmp	r0, r3
 800f394:	bf2c      	ite	cs
 800f396:	2000      	movcs	r0, #0
 800f398:	2001      	movcc	r0, #1
 800f39a:	e7f1      	b.n	800f380 <xTaskPriorityInherit+0x58>
 800f39c:	240410a0 	.word	0x240410a0
 800f3a0:	240410ac 	.word	0x240410ac
 800f3a4:	2404151c 	.word	0x2404151c

0800f3a8 <xTaskPriorityDisinherit>:
	{
 800f3a8:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800f3aa:	b910      	cbnz	r0, 800f3b2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800f3ac:	2000      	movs	r0, #0
	}
 800f3ae:	b002      	add	sp, #8
 800f3b0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800f3b2:	4b1c      	ldr	r3, [pc, #112]	; (800f424 <xTaskPriorityDisinherit+0x7c>)
 800f3b4:	681c      	ldr	r4, [r3, #0]
 800f3b6:	4284      	cmp	r4, r0
 800f3b8:	d008      	beq.n	800f3cc <xTaskPriorityDisinherit+0x24>
 800f3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	e7fe      	b.n	800f3ca <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800f3cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f3ce:	b943      	cbnz	r3, 800f3e2 <xTaskPriorityDisinherit+0x3a>
 800f3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	e7fe      	b.n	800f3e0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f3e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800f3e4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f3e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 800f3e8:	6563      	str	r3, [r4, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f3ea:	4291      	cmp	r1, r2
 800f3ec:	d0de      	beq.n	800f3ac <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d1dc      	bne.n	800f3ac <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3f2:	1d21      	adds	r1, r4, #4
 800f3f4:	4608      	mov	r0, r1
 800f3f6:	9101      	str	r1, [sp, #4]
 800f3f8:	f7fe fe91 	bl	800e11e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f3fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 800f3fe:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f400:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f404:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f406:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f408:	4a07      	ldr	r2, [pc, #28]	; (800f428 <xTaskPriorityDisinherit+0x80>)
 800f40a:	6810      	ldr	r0, [r2, #0]
 800f40c:	4283      	cmp	r3, r0
 800f40e:	d900      	bls.n	800f412 <xTaskPriorityDisinherit+0x6a>
 800f410:	6013      	str	r3, [r2, #0]
 800f412:	4a06      	ldr	r2, [pc, #24]	; (800f42c <xTaskPriorityDisinherit+0x84>)
 800f414:	2014      	movs	r0, #20
 800f416:	fb00 2003 	mla	r0, r0, r3, r2
 800f41a:	f7fe fe5d 	bl	800e0d8 <vListInsertEnd>
					xReturn = pdTRUE;
 800f41e:	2001      	movs	r0, #1
		return xReturn;
 800f420:	e7c5      	b.n	800f3ae <xTaskPriorityDisinherit+0x6>
 800f422:	bf00      	nop
 800f424:	240410a0 	.word	0x240410a0
 800f428:	2404151c 	.word	0x2404151c
 800f42c:	240410ac 	.word	0x240410ac

0800f430 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800f430:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800f432:	4604      	mov	r4, r0
 800f434:	2800      	cmp	r0, #0
 800f436:	d044      	beq.n	800f4c2 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800f438:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f43a:	b942      	cbnz	r2, 800f44e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800f43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f440:	f383 8811 	msr	BASEPRI, r3
 800f444:	f3bf 8f6f 	isb	sy
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	e7fe      	b.n	800f44c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f44e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f450:	4299      	cmp	r1, r3
 800f452:	bf38      	it	cc
 800f454:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f456:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f458:	428b      	cmp	r3, r1
 800f45a:	d032      	beq.n	800f4c2 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f45c:	2a01      	cmp	r2, #1
 800f45e:	d130      	bne.n	800f4c2 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800f460:	4a19      	ldr	r2, [pc, #100]	; (800f4c8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800f462:	6812      	ldr	r2, [r2, #0]
 800f464:	4282      	cmp	r2, r0
 800f466:	d108      	bne.n	800f47a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800f468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46c:	f383 8811 	msr	BASEPRI, r3
 800f470:	f3bf 8f6f 	isb	sy
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	e7fe      	b.n	800f478 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f47a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f47c:	4d13      	ldr	r5, [pc, #76]	; (800f4cc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f47e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f480:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800f484:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f486:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f48a:	bfa8      	it	ge
 800f48c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f490:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f492:	bfa8      	it	ge
 800f494:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f496:	429a      	cmp	r2, r3
 800f498:	d113      	bne.n	800f4c2 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f49a:	1d01      	adds	r1, r0, #4
 800f49c:	4608      	mov	r0, r1
 800f49e:	9101      	str	r1, [sp, #4]
 800f4a0:	f7fe fe3d 	bl	800e11e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f4a4:	4a0a      	ldr	r2, [pc, #40]	; (800f4d0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800f4a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4a8:	6810      	ldr	r0, [r2, #0]
 800f4aa:	9901      	ldr	r1, [sp, #4]
 800f4ac:	4283      	cmp	r3, r0
 800f4ae:	d900      	bls.n	800f4b2 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800f4b0:	6013      	str	r3, [r2, #0]
 800f4b2:	2014      	movs	r0, #20
 800f4b4:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800f4b8:	b003      	add	sp, #12
 800f4ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800f4be:	f7fe be0b 	b.w	800e0d8 <vListInsertEnd>
	}
 800f4c2:	b003      	add	sp, #12
 800f4c4:	bd30      	pop	{r4, r5, pc}
 800f4c6:	bf00      	nop
 800f4c8:	240410a0 	.word	0x240410a0
 800f4cc:	240410ac 	.word	0x240410ac
 800f4d0:	2404151c 	.word	0x2404151c

0800f4d4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800f4d4:	4b04      	ldr	r3, [pc, #16]	; (800f4e8 <pvTaskIncrementMutexHeldCount+0x14>)
 800f4d6:	681a      	ldr	r2, [r3, #0]
 800f4d8:	b11a      	cbz	r2, 800f4e2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800f4da:	6819      	ldr	r1, [r3, #0]
 800f4dc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800f4de:	3201      	adds	r2, #1
 800f4e0:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 800f4e2:	6818      	ldr	r0, [r3, #0]
	}
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop
 800f4e8:	240410a0 	.word	0x240410a0

0800f4ec <ulTaskNotifyTake>:
	{
 800f4ec:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f4ee:	4c19      	ldr	r4, [pc, #100]	; (800f554 <ulTaskNotifyTake+0x68>)
	{
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 800f4f4:	f000 fbce 	bl	800fc94 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f4fe:	b98b      	cbnz	r3, 800f524 <ulTaskNotifyTake+0x38>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f500:	6823      	ldr	r3, [r4, #0]
 800f502:	2101      	movs	r1, #1
 800f504:	f883 10a8 	strb.w	r1, [r3, #168]	; 0xa8
				if( xTicksToWait > ( TickType_t ) 0 )
 800f508:	b165      	cbz	r5, 800f524 <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f50a:	4628      	mov	r0, r5
 800f50c:	f7ff faee 	bl	800eaec <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f510:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f518:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f51c:	f3bf 8f4f 	dsb	sy
 800f520:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800f524:	f000 fbd6 	bl	800fcd4 <vPortExitCritical>
		taskENTER_CRITICAL();
 800f528:	f000 fbb4 	bl	800fc94 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f52c:	6823      	ldr	r3, [r4, #0]
 800f52e:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
			if( ulReturn != 0UL )
 800f532:	b125      	cbz	r5, 800f53e <ulTaskNotifyTake+0x52>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f534:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 800f536:	b156      	cbz	r6, 800f54e <ulTaskNotifyTake+0x62>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f538:	2200      	movs	r2, #0
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f53a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	2200      	movs	r2, #0
 800f542:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		taskEXIT_CRITICAL();
 800f546:	f000 fbc5 	bl	800fcd4 <vPortExitCritical>
	}
 800f54a:	4628      	mov	r0, r5
 800f54c:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f54e:	1e6a      	subs	r2, r5, #1
 800f550:	e7f3      	b.n	800f53a <ulTaskNotifyTake+0x4e>
 800f552:	bf00      	nop
 800f554:	240410a0 	.word	0x240410a0

0800f558 <xTaskGenericNotify>:
	{
 800f558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f55a:	460d      	mov	r5, r1
 800f55c:	4616      	mov	r6, r2
 800f55e:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 800f560:	4604      	mov	r4, r0
 800f562:	b940      	cbnz	r0, 800f576 <xTaskGenericNotify+0x1e>
 800f564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f568:	f383 8811 	msr	BASEPRI, r3
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f3bf 8f4f 	dsb	sy
 800f574:	e7fe      	b.n	800f574 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 800f576:	f000 fb8d 	bl	800fc94 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800f57a:	b117      	cbz	r7, 800f582 <xTaskGenericNotify+0x2a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f57c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800f580:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f582:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f586:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f588:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f58a:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
			switch( eAction )
 800f58e:	2e04      	cmp	r6, #4
 800f590:	d81a      	bhi.n	800f5c8 <xTaskGenericNotify+0x70>
 800f592:	e8df f006 	tbb	[pc, r6]
 800f596:	0308      	.short	0x0308
 800f598:	1610      	.short	0x1610
 800f59a:	14          	.byte	0x14
 800f59b:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800f59c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800f5a0:	432a      	orrs	r2, r5
					( pxTCB->ulNotifiedValue )++;
 800f5a2:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d01b      	beq.n	800f5e2 <xTaskGenericNotify+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 800f5aa:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 800f5ac:	f000 fb92 	bl	800fcd4 <vPortExitCritical>
	}
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	b003      	add	sp, #12
 800f5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800f5b6:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800f5ba:	3201      	adds	r2, #1
 800f5bc:	e7f1      	b.n	800f5a2 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	d03d      	beq.n	800f63e <xTaskGenericNotify+0xe6>
						pxTCB->ulNotifiedValue = ulValue;
 800f5c2:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 800f5c6:	e7ee      	b.n	800f5a6 <xTaskGenericNotify+0x4e>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f5c8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800f5cc:	3201      	adds	r2, #1
 800f5ce:	d0ea      	beq.n	800f5a6 <xTaskGenericNotify+0x4e>
 800f5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	e7fe      	b.n	800f5e0 <xTaskGenericNotify+0x88>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5e2:	1d21      	adds	r1, r4, #4
 800f5e4:	4608      	mov	r0, r1
 800f5e6:	9101      	str	r1, [sp, #4]
 800f5e8:	f7fe fd99 	bl	800e11e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f5ec:	4a15      	ldr	r2, [pc, #84]	; (800f644 <xTaskGenericNotify+0xec>)
 800f5ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f5f0:	6810      	ldr	r0, [r2, #0]
 800f5f2:	9901      	ldr	r1, [sp, #4]
 800f5f4:	4283      	cmp	r3, r0
 800f5f6:	d900      	bls.n	800f5fa <xTaskGenericNotify+0xa2>
 800f5f8:	6013      	str	r3, [r2, #0]
 800f5fa:	4a13      	ldr	r2, [pc, #76]	; (800f648 <xTaskGenericNotify+0xf0>)
 800f5fc:	2014      	movs	r0, #20
 800f5fe:	fb00 2003 	mla	r0, r0, r3, r2
 800f602:	f7fe fd69 	bl	800e0d8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f608:	b143      	cbz	r3, 800f61c <xTaskGenericNotify+0xc4>
 800f60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60e:	f383 8811 	msr	BASEPRI, r3
 800f612:	f3bf 8f6f 	isb	sy
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	e7fe      	b.n	800f61a <xTaskGenericNotify+0xc2>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f61c:	4b0b      	ldr	r3, [pc, #44]	; (800f64c <xTaskGenericNotify+0xf4>)
 800f61e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f624:	429a      	cmp	r2, r3
 800f626:	d9c0      	bls.n	800f5aa <xTaskGenericNotify+0x52>
					taskYIELD_IF_USING_PREEMPTION();
 800f628:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f62c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f630:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f634:	f3bf 8f4f 	dsb	sy
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	e7b5      	b.n	800f5aa <xTaskGenericNotify+0x52>
						xReturn = pdFAIL;
 800f63e:	2400      	movs	r4, #0
 800f640:	e7b4      	b.n	800f5ac <xTaskGenericNotify+0x54>
 800f642:	bf00      	nop
 800f644:	2404151c 	.word	0x2404151c
 800f648:	240410ac 	.word	0x240410ac
 800f64c:	240410a0 	.word	0x240410a0

0800f650 <xTaskGenericNotifyFromISR>:
	{
 800f650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f654:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800f658:	460d      	mov	r5, r1
 800f65a:	4616      	mov	r6, r2
 800f65c:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 800f65e:	4604      	mov	r4, r0
 800f660:	b940      	cbnz	r0, 800f674 <xTaskGenericNotifyFromISR+0x24>
 800f662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f666:	f383 8811 	msr	BASEPRI, r3
 800f66a:	f3bf 8f6f 	isb	sy
 800f66e:	f3bf 8f4f 	dsb	sy
 800f672:	e7fe      	b.n	800f672 <xTaskGenericNotifyFromISR+0x22>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f674:	f000 fc24 	bl	800fec0 <vPortValidateInterruptPriority>
	__asm volatile
 800f678:	f3ef 8811 	mrs	r8, BASEPRI
 800f67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f680:	f383 8811 	msr	BASEPRI, r3
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800f68c:	b117      	cbz	r7, 800f694 <xTaskGenericNotifyFromISR+0x44>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f68e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800f692:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f694:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f698:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f69a:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f69c:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
			switch( eAction )
 800f6a0:	2e04      	cmp	r6, #4
 800f6a2:	d81a      	bhi.n	800f6da <xTaskGenericNotifyFromISR+0x8a>
 800f6a4:	e8df f006 	tbb	[pc, r6]
 800f6a8:	16100308 	.word	0x16100308
 800f6ac:	14          	.byte	0x14
 800f6ad:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800f6ae:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800f6b2:	432a      	orrs	r2, r5
					( pxTCB->ulNotifiedValue )++;
 800f6b4:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d01b      	beq.n	800f6f4 <xTaskGenericNotifyFromISR+0xa4>
 800f6bc:	2001      	movs	r0, #1
	__asm volatile
 800f6be:	f388 8811 	msr	BASEPRI, r8
	}
 800f6c2:	b003      	add	sp, #12
 800f6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800f6c8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800f6cc:	3201      	adds	r2, #1
 800f6ce:	e7f1      	b.n	800f6b4 <xTaskGenericNotifyFromISR+0x64>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f6d0:	2b02      	cmp	r3, #2
 800f6d2:	d042      	beq.n	800f75a <xTaskGenericNotifyFromISR+0x10a>
						pxTCB->ulNotifiedValue = ulValue;
 800f6d4:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 800f6d8:	e7ee      	b.n	800f6b8 <xTaskGenericNotifyFromISR+0x68>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f6da:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800f6de:	3201      	adds	r2, #1
 800f6e0:	d0ea      	beq.n	800f6b8 <xTaskGenericNotifyFromISR+0x68>
	__asm volatile
 800f6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e6:	f383 8811 	msr	BASEPRI, r3
 800f6ea:	f3bf 8f6f 	isb	sy
 800f6ee:	f3bf 8f4f 	dsb	sy
 800f6f2:	e7fe      	b.n	800f6f2 <xTaskGenericNotifyFromISR+0xa2>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f6f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f6f6:	b143      	cbz	r3, 800f70a <xTaskGenericNotifyFromISR+0xba>
 800f6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fc:	f383 8811 	msr	BASEPRI, r3
 800f700:	f3bf 8f6f 	isb	sy
 800f704:	f3bf 8f4f 	dsb	sy
 800f708:	e7fe      	b.n	800f708 <xTaskGenericNotifyFromISR+0xb8>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f70a:	4b15      	ldr	r3, [pc, #84]	; (800f760 <xTaskGenericNotifyFromISR+0x110>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	bb03      	cbnz	r3, 800f752 <xTaskGenericNotifyFromISR+0x102>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f710:	1d21      	adds	r1, r4, #4
 800f712:	4608      	mov	r0, r1
 800f714:	9101      	str	r1, [sp, #4]
 800f716:	f7fe fd02 	bl	800e11e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f71a:	4a12      	ldr	r2, [pc, #72]	; (800f764 <xTaskGenericNotifyFromISR+0x114>)
 800f71c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f71e:	6810      	ldr	r0, [r2, #0]
 800f720:	9901      	ldr	r1, [sp, #4]
 800f722:	4283      	cmp	r3, r0
 800f724:	d900      	bls.n	800f728 <xTaskGenericNotifyFromISR+0xd8>
 800f726:	6013      	str	r3, [r2, #0]
 800f728:	4a0f      	ldr	r2, [pc, #60]	; (800f768 <xTaskGenericNotifyFromISR+0x118>)
 800f72a:	2014      	movs	r0, #20
 800f72c:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f730:	f7fe fcd2 	bl	800e0d8 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f734:	4b0d      	ldr	r3, [pc, #52]	; (800f76c <xTaskGenericNotifyFromISR+0x11c>)
 800f736:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d9bd      	bls.n	800f6bc <xTaskGenericNotifyFromISR+0x6c>
					if( pxHigherPriorityTaskWoken != NULL )
 800f740:	2301      	movs	r3, #1
 800f742:	f1b9 0f00 	cmp.w	r9, #0
 800f746:	d001      	beq.n	800f74c <xTaskGenericNotifyFromISR+0xfc>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f748:	f8c9 3000 	str.w	r3, [r9]
					xYieldPending = pdTRUE;
 800f74c:	4a08      	ldr	r2, [pc, #32]	; (800f770 <xTaskGenericNotifyFromISR+0x120>)
 800f74e:	6013      	str	r3, [r2, #0]
 800f750:	e7b4      	b.n	800f6bc <xTaskGenericNotifyFromISR+0x6c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f752:	f104 0118 	add.w	r1, r4, #24
 800f756:	4807      	ldr	r0, [pc, #28]	; (800f774 <xTaskGenericNotifyFromISR+0x124>)
 800f758:	e7ea      	b.n	800f730 <xTaskGenericNotifyFromISR+0xe0>
						xReturn = pdFAIL;
 800f75a:	2000      	movs	r0, #0
 800f75c:	e7af      	b.n	800f6be <xTaskGenericNotifyFromISR+0x6e>
 800f75e:	bf00      	nop
 800f760:	24041514 	.word	0x24041514
 800f764:	2404151c 	.word	0x2404151c
 800f768:	240410ac 	.word	0x240410ac
 800f76c:	240410a0 	.word	0x240410a0
 800f770:	24041598 	.word	0x24041598
 800f774:	24041554 	.word	0x24041554

0800f778 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800f77a:	4c11      	ldr	r4, [pc, #68]	; (800f7c0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800f77c:	f000 fa8a 	bl	800fc94 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800f780:	6825      	ldr	r5, [r4, #0]
 800f782:	b9bd      	cbnz	r5, 800f7b4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800f784:	4f0f      	ldr	r7, [pc, #60]	; (800f7c4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800f786:	4e10      	ldr	r6, [pc, #64]	; (800f7c8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800f788:	4638      	mov	r0, r7
 800f78a:	f7fe fc97 	bl	800e0bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f78e:	4630      	mov	r0, r6
 800f790:	f7fe fc94 	bl	800e0bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f794:	4b0d      	ldr	r3, [pc, #52]	; (800f7cc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f796:	4a0e      	ldr	r2, [pc, #56]	; (800f7d0 <prvCheckForValidListAndQueue+0x58>)
 800f798:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800f79a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f79c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800f79e:	4b0d      	ldr	r3, [pc, #52]	; (800f7d4 <prvCheckForValidListAndQueue+0x5c>)
 800f7a0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f7a2:	4b0d      	ldr	r3, [pc, #52]	; (800f7d8 <prvCheckForValidListAndQueue+0x60>)
 800f7a4:	9500      	str	r5, [sp, #0]
 800f7a6:	f7fe fd96 	bl	800e2d6 <xQueueGenericCreateStatic>
 800f7aa:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f7ac:	b110      	cbz	r0, 800f7b4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f7ae:	490b      	ldr	r1, [pc, #44]	; (800f7dc <prvCheckForValidListAndQueue+0x64>)
 800f7b0:	f7ff f8be 	bl	800e930 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800f7b4:	b003      	add	sp, #12
 800f7b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800f7ba:	f000 ba8b 	b.w	800fcd4 <vPortExitCritical>
 800f7be:	bf00      	nop
 800f7c0:	240416c0 	.word	0x240416c0
 800f7c4:	24041644 	.word	0x24041644
 800f7c8:	24041658 	.word	0x24041658
 800f7cc:	2404159c 	.word	0x2404159c
 800f7d0:	240415a4 	.word	0x240415a4
 800f7d4:	240415a0 	.word	0x240415a0
 800f7d8:	24041670 	.word	0x24041670
 800f7dc:	08015dd7 	.word	0x08015dd7

0800f7e0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800f7e0:	4291      	cmp	r1, r2
{
 800f7e2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f7e4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f7e6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800f7e8:	d80a      	bhi.n	800f800 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	6982      	ldr	r2, [r0, #24]
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d20d      	bcs.n	800f80e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f7f2:	1d01      	adds	r1, r0, #4
 800f7f4:	4b07      	ldr	r3, [pc, #28]	; (800f814 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7f6:	6818      	ldr	r0, [r3, #0]
 800f7f8:	f7fe fc7a 	bl	800e0f0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f7fc:	2000      	movs	r0, #0
}
 800f7fe:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f800:	429a      	cmp	r2, r3
 800f802:	d201      	bcs.n	800f808 <prvInsertTimerInActiveList+0x28>
 800f804:	4299      	cmp	r1, r3
 800f806:	d202      	bcs.n	800f80e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f808:	1d01      	adds	r1, r0, #4
 800f80a:	4b03      	ldr	r3, [pc, #12]	; (800f818 <prvInsertTimerInActiveList+0x38>)
 800f80c:	e7f3      	b.n	800f7f6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800f80e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800f810:	e7f5      	b.n	800f7fe <prvInsertTimerInActiveList+0x1e>
 800f812:	bf00      	nop
 800f814:	240415a0 	.word	0x240415a0
 800f818:	2404159c 	.word	0x2404159c

0800f81c <prvInitialiseNewTimer>:
{
 800f81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f820:	9c07      	ldr	r4, [sp, #28]
 800f822:	4680      	mov	r8, r0
 800f824:	4616      	mov	r6, r2
 800f826:	461f      	mov	r7, r3
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f828:	460d      	mov	r5, r1
 800f82a:	b941      	cbnz	r1, 800f83e <prvInitialiseNewTimer+0x22>
 800f82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	e7fe      	b.n	800f83c <prvInitialiseNewTimer+0x20>
	if( pxNewTimer != NULL )
 800f83e:	b18c      	cbz	r4, 800f864 <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 800f840:	f7ff ff9a 	bl	800f778 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f844:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f846:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 800f848:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f84c:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 800f84e:	e9c4 5706 	strd	r5, r7, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f852:	f7fe fc3e 	bl	800e0d2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f856:	b12e      	cbz	r6, 800f864 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f858:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f85c:	f043 0304 	orr.w	r3, r3, #4
 800f860:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800f864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f868 <xTimerCreateTimerTask>:
{
 800f868:	b510      	push	{r4, lr}
 800f86a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800f86c:	f7ff ff84 	bl	800f778 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f870:	4b12      	ldr	r3, [pc, #72]	; (800f8bc <xTimerCreateTimerTask+0x54>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	b1b3      	cbz	r3, 800f8a4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f876:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f878:	aa07      	add	r2, sp, #28
 800f87a:	a906      	add	r1, sp, #24
 800f87c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f87e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f882:	f7fe fc0f 	bl	800e0a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f886:	9b05      	ldr	r3, [sp, #20]
 800f888:	9a07      	ldr	r2, [sp, #28]
 800f88a:	9302      	str	r3, [sp, #8]
 800f88c:	9b06      	ldr	r3, [sp, #24]
 800f88e:	490c      	ldr	r1, [pc, #48]	; (800f8c0 <xTimerCreateTimerTask+0x58>)
 800f890:	9301      	str	r3, [sp, #4]
 800f892:	2302      	movs	r3, #2
 800f894:	480b      	ldr	r0, [pc, #44]	; (800f8c4 <xTimerCreateTimerTask+0x5c>)
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	4623      	mov	r3, r4
 800f89a:	f7ff fa1f 	bl	800ecdc <xTaskCreateStatic>
 800f89e:	4b0a      	ldr	r3, [pc, #40]	; (800f8c8 <xTimerCreateTimerTask+0x60>)
 800f8a0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800f8a2:	b940      	cbnz	r0, 800f8b6 <xTimerCreateTimerTask+0x4e>
 800f8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800f8b4:	e7fe      	b.n	800f8b4 <xTimerCreateTimerTask+0x4c>
}
 800f8b6:	2001      	movs	r0, #1
 800f8b8:	b008      	add	sp, #32
 800f8ba:	bd10      	pop	{r4, pc}
 800f8bc:	240416c0 	.word	0x240416c0
 800f8c0:	08015ddc 	.word	0x08015ddc
 800f8c4:	0800fa01 	.word	0x0800fa01
 800f8c8:	240416c4 	.word	0x240416c4

0800f8cc <xTimerCreate>:
	{
 800f8cc:	b530      	push	{r4, r5, lr}
 800f8ce:	b087      	sub	sp, #28
 800f8d0:	4605      	mov	r5, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f8d2:	202c      	movs	r0, #44	; 0x2c
	{
 800f8d4:	9303      	str	r3, [sp, #12]
 800f8d6:	e9cd 2104 	strd	r2, r1, [sp, #16]
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f8da:	f000 fb45 	bl	800ff68 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800f8de:	4604      	mov	r4, r0
 800f8e0:	b158      	cbz	r0, 800f8fa <xTimerCreate+0x2e>
			pxNewTimer->ucStatus = 0x00;
 800f8e2:	2000      	movs	r0, #0
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f8e4:	9905      	ldr	r1, [sp, #20]
			pxNewTimer->ucStatus = 0x00;
 800f8e6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f8ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f8ec:	9401      	str	r4, [sp, #4]
 800f8ee:	9000      	str	r0, [sp, #0]
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f8f6:	f7ff ff91 	bl	800f81c <prvInitialiseNewTimer>
	}
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	b007      	add	sp, #28
 800f8fe:	bd30      	pop	{r4, r5, pc}

0800f900 <xTimerGenericCommand>:
{
 800f900:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f902:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800f904:	4604      	mov	r4, r0
{
 800f906:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800f908:	b940      	cbnz	r0, 800f91c <xTimerGenericCommand+0x1c>
 800f90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90e:	f383 8811 	msr	BASEPRI, r3
 800f912:	f3bf 8f6f 	isb	sy
 800f916:	f3bf 8f4f 	dsb	sy
 800f91a:	e7fe      	b.n	800f91a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800f91c:	4d0c      	ldr	r5, [pc, #48]	; (800f950 <xTimerGenericCommand+0x50>)
 800f91e:	6828      	ldr	r0, [r5, #0]
 800f920:	b178      	cbz	r0, 800f942 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f922:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f924:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f926:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f92a:	dc0c      	bgt.n	800f946 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f92c:	f7ff fcec 	bl	800f308 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f930:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f932:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f934:	4669      	mov	r1, sp
 800f936:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f938:	bf0c      	ite	eq
 800f93a:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f93c:	461a      	movne	r2, r3
 800f93e:	f7fe fd7f 	bl	800e440 <xQueueGenericSend>
}
 800f942:	b004      	add	sp, #16
 800f944:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f946:	2300      	movs	r3, #0
 800f948:	4669      	mov	r1, sp
 800f94a:	f7fe fe2c 	bl	800e5a6 <xQueueGenericSendFromISR>
 800f94e:	e7f8      	b.n	800f942 <xTimerGenericCommand+0x42>
 800f950:	240416c0 	.word	0x240416c0

0800f954 <prvSampleTimeNow>:
{
 800f954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800f958:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800f9fc <prvSampleTimeNow+0xa8>
{
 800f95c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800f95e:	f7ff fa7b 	bl	800ee58 <xTaskGetTickCount>
 800f962:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800f964:	f8d8 3000 	ldr.w	r3, [r8]
 800f968:	4283      	cmp	r3, r0
 800f96a:	d90b      	bls.n	800f984 <prvSampleTimeNow+0x30>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f96c:	4f21      	ldr	r7, [pc, #132]	; (800f9f4 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f96e:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	b96a      	cbnz	r2, 800f994 <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 800f978:	4a1f      	ldr	r2, [pc, #124]	; (800f9f8 <prvSampleTimeNow+0xa4>)
 800f97a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f97c:	6013      	str	r3, [r2, #0]
 800f97e:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800f980:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f982:	e000      	b.n	800f986 <prvSampleTimeNow+0x32>
 800f984:	2300      	movs	r3, #0
}
 800f986:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800f988:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800f98a:	f8c8 5000 	str.w	r5, [r8]
}
 800f98e:	b004      	add	sp, #16
 800f990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f994:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f996:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f998:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f99c:	1d21      	adds	r1, r4, #4
 800f99e:	4608      	mov	r0, r1
 800f9a0:	9103      	str	r1, [sp, #12]
 800f9a2:	f7fe fbbc 	bl	800e11e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9a6:	6a23      	ldr	r3, [r4, #32]
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f9b0:	9903      	ldr	r1, [sp, #12]
 800f9b2:	f013 0f04 	tst.w	r3, #4
 800f9b6:	d0dc      	beq.n	800f972 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9b8:	69a3      	ldr	r3, [r4, #24]
 800f9ba:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f9bc:	459a      	cmp	sl, r3
 800f9be:	d205      	bcs.n	800f9cc <prvSampleTimeNow+0x78>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f9c0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f9c2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9c4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f9c6:	f7fe fb93 	bl	800e0f0 <vListInsert>
 800f9ca:	e7d2      	b.n	800f972 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	4652      	mov	r2, sl
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f8cd 9000 	str.w	r9, [sp]
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	f7ff ff92 	bl	800f900 <xTimerGenericCommand>
				configASSERT( xResult );
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d1c8      	bne.n	800f972 <prvSampleTimeNow+0x1e>
 800f9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	e7fe      	b.n	800f9f0 <prvSampleTimeNow+0x9c>
 800f9f2:	bf00      	nop
 800f9f4:	2404159c 	.word	0x2404159c
 800f9f8:	240415a0 	.word	0x240415a0
 800f9fc:	2404166c 	.word	0x2404166c

0800fa00 <prvTimerTask>:
{
 800fa00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa04:	4d6e      	ldr	r5, [pc, #440]	; (800fbc0 <prvTimerTask+0x1c0>)
{
 800fa06:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fa08:	4e6e      	ldr	r6, [pc, #440]	; (800fbc4 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa0a:	682b      	ldr	r3, [r5, #0]
 800fa0c:	f8d3 8000 	ldr.w	r8, [r3]
 800fa10:	f1b8 0f00 	cmp.w	r8, #0
 800fa14:	d035      	beq.n	800fa82 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa16:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa18:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa1a:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800fa1e:	f7ff fa13 	bl	800ee48 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa22:	a804      	add	r0, sp, #16
 800fa24:	f7ff ff96 	bl	800f954 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800fa28:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa2a:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d169      	bne.n	800fb04 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fa30:	2c00      	cmp	r4, #0
 800fa32:	d14c      	bne.n	800face <prvTimerTask+0xce>
 800fa34:	4540      	cmp	r0, r8
 800fa36:	d350      	bcc.n	800fada <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800fa38:	f7ff fab2 	bl	800efa0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa3c:	682b      	ldr	r3, [r5, #0]
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa42:	1d38      	adds	r0, r7, #4
 800fa44:	f7fe fb6b 	bl	800e11e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fa4c:	0758      	lsls	r0, r3, #29
 800fa4e:	d51a      	bpl.n	800fa86 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fa50:	69b9      	ldr	r1, [r7, #24]
 800fa52:	4643      	mov	r3, r8
 800fa54:	464a      	mov	r2, r9
 800fa56:	4638      	mov	r0, r7
 800fa58:	4441      	add	r1, r8
 800fa5a:	f7ff fec1 	bl	800f7e0 <prvInsertTimerInActiveList>
 800fa5e:	b1b0      	cbz	r0, 800fa8e <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa60:	4623      	mov	r3, r4
 800fa62:	4642      	mov	r2, r8
 800fa64:	4621      	mov	r1, r4
 800fa66:	4638      	mov	r0, r7
 800fa68:	9400      	str	r4, [sp, #0]
 800fa6a:	f7ff ff49 	bl	800f900 <xTimerGenericCommand>
			configASSERT( xResult );
 800fa6e:	b970      	cbnz	r0, 800fa8e <prvTimerTask+0x8e>
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	e7fe      	b.n	800fa80 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa82:	2401      	movs	r4, #1
 800fa84:	e7cb      	b.n	800fa1e <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa86:	f023 0301 	bic.w	r3, r3, #1
 800fa8a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa8e:	6a3b      	ldr	r3, [r7, #32]
 800fa90:	4638      	mov	r0, r7
 800fa92:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fa94:	2200      	movs	r2, #0
 800fa96:	a904      	add	r1, sp, #16
 800fa98:	6830      	ldr	r0, [r6, #0]
 800fa9a:	f7fe fde6 	bl	800e66a <xQueueReceive>
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	d0b3      	beq.n	800fa0a <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800faa2:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800faa4:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	db2f      	blt.n	800fb0a <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800faaa:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800faac:	6963      	ldr	r3, [r4, #20]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d132      	bne.n	800fb18 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fab2:	a803      	add	r0, sp, #12
 800fab4:	f7ff ff4e 	bl	800f954 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800fab8:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800faba:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800fabc:	2b09      	cmp	r3, #9
 800fabe:	d8e9      	bhi.n	800fa94 <prvTimerTask+0x94>
 800fac0:	e8df f003 	tbb	[pc, r3]
 800fac4:	572e2e2e 	.word	0x572e2e2e
 800fac8:	2e2e765e 	.word	0x2e2e765e
 800facc:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800face:	4b3e      	ldr	r3, [pc, #248]	; (800fbc8 <prvTimerTask+0x1c8>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	681c      	ldr	r4, [r3, #0]
 800fad4:	fab4 f484 	clz	r4, r4
 800fad8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fada:	4622      	mov	r2, r4
 800fadc:	eba8 0109 	sub.w	r1, r8, r9
 800fae0:	6830      	ldr	r0, [r6, #0]
 800fae2:	f7fe ff62 	bl	800e9aa <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fae6:	f7ff fa5b 	bl	800efa0 <xTaskResumeAll>
 800faea:	2800      	cmp	r0, #0
 800faec:	d1d2      	bne.n	800fa94 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800faee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800faf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faf6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	f3bf 8f6f 	isb	sy
 800fb02:	e7c7      	b.n	800fa94 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800fb04:	f7ff fa4c 	bl	800efa0 <xTaskResumeAll>
}
 800fb08:	e7c4      	b.n	800fa94 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fb0a:	9b05      	ldr	r3, [sp, #20]
 800fb0c:	9907      	ldr	r1, [sp, #28]
 800fb0e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fb10:	9b04      	ldr	r3, [sp, #16]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	dbbe      	blt.n	800fa94 <prvTimerTask+0x94>
 800fb16:	e7c8      	b.n	800faaa <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb18:	1d20      	adds	r0, r4, #4
 800fb1a:	f7fe fb00 	bl	800e11e <uxListRemove>
 800fb1e:	e7c8      	b.n	800fab2 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb24:	4620      	mov	r0, r4
 800fb26:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb28:	f043 0301 	orr.w	r3, r3, #1
 800fb2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb30:	9b05      	ldr	r3, [sp, #20]
 800fb32:	4419      	add	r1, r3
 800fb34:	f7ff fe54 	bl	800f7e0 <prvInsertTimerInActiveList>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d0ab      	beq.n	800fa94 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb3c:	6a23      	ldr	r3, [r4, #32]
 800fb3e:	4620      	mov	r0, r4
 800fb40:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb42:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fb46:	0759      	lsls	r1, r3, #29
 800fb48:	d5a4      	bpl.n	800fa94 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fb4a:	69a2      	ldr	r2, [r4, #24]
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	9905      	ldr	r1, [sp, #20]
 800fb50:	4620      	mov	r0, r4
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	440a      	add	r2, r1
 800fb56:	4619      	mov	r1, r3
 800fb58:	f7ff fed2 	bl	800f900 <xTimerGenericCommand>
							configASSERT( xResult );
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	d199      	bne.n	800fa94 <prvTimerTask+0x94>
 800fb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb64:	f383 8811 	msr	BASEPRI, r3
 800fb68:	f3bf 8f6f 	isb	sy
 800fb6c:	f3bf 8f4f 	dsb	sy
 800fb70:	e7fe      	b.n	800fb70 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb72:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb76:	f023 0301 	bic.w	r3, r3, #1
 800fb7a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800fb7e:	e789      	b.n	800fa94 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb80:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fb84:	f043 0301 	orr.w	r3, r3, #1
 800fb88:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fb8c:	9905      	ldr	r1, [sp, #20]
 800fb8e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fb90:	b941      	cbnz	r1, 800fba4 <prvTimerTask+0x1a4>
 800fb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb96:	f383 8811 	msr	BASEPRI, r3
 800fb9a:	f3bf 8f6f 	isb	sy
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	e7fe      	b.n	800fba2 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fba4:	4603      	mov	r3, r0
 800fba6:	4401      	add	r1, r0
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f7ff fe19 	bl	800f7e0 <prvInsertTimerInActiveList>
					break;
 800fbae:	e771      	b.n	800fa94 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fbb0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fbb4:	079a      	lsls	r2, r3, #30
 800fbb6:	d4de      	bmi.n	800fb76 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800fbb8:	4620      	mov	r0, r4
 800fbba:	f000 fa6d 	bl	8010098 <vPortFree>
 800fbbe:	e769      	b.n	800fa94 <prvTimerTask+0x94>
 800fbc0:	2404159c 	.word	0x2404159c
 800fbc4:	240416c0 	.word	0x240416c0
 800fbc8:	240415a0 	.word	0x240415a0

0800fbcc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fbcc:	4808      	ldr	r0, [pc, #32]	; (800fbf0 <prvPortStartFirstTask+0x24>)
 800fbce:	6800      	ldr	r0, [r0, #0]
 800fbd0:	6800      	ldr	r0, [r0, #0]
 800fbd2:	f380 8808 	msr	MSP, r0
 800fbd6:	f04f 0000 	mov.w	r0, #0
 800fbda:	f380 8814 	msr	CONTROL, r0
 800fbde:	b662      	cpsie	i
 800fbe0:	b661      	cpsie	f
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	f3bf 8f6f 	isb	sy
 800fbea:	df00      	svc	0
 800fbec:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbee:	0000      	.short	0x0000
 800fbf0:	e000ed08 	.word	0xe000ed08

0800fbf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fbf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fc04 <vPortEnableVFP+0x10>
 800fbf8:	6801      	ldr	r1, [r0, #0]
 800fbfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fbfe:	6001      	str	r1, [r0, #0]
 800fc00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc02:	0000      	.short	0x0000
 800fc04:	e000ed88 	.word	0xe000ed88

0800fc08 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800fc08:	2300      	movs	r3, #0
{
 800fc0a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800fc0c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800fc0e:	4b0d      	ldr	r3, [pc, #52]	; (800fc44 <prvTaskExitError+0x3c>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	3301      	adds	r3, #1
 800fc14:	d008      	beq.n	800fc28 <prvTaskExitError+0x20>
 800fc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1a:	f383 8811 	msr	BASEPRI, r3
 800fc1e:	f3bf 8f6f 	isb	sy
 800fc22:	f3bf 8f4f 	dsb	sy
 800fc26:	e7fe      	b.n	800fc26 <prvTaskExitError+0x1e>
 800fc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800fc38:	9b01      	ldr	r3, [sp, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d0fc      	beq.n	800fc38 <prvTaskExitError+0x30>
}
 800fc3e:	b002      	add	sp, #8
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	24000070 	.word	0x24000070

0800fc48 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc4c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc50:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800fc54:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc56:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc58:	4b03      	ldr	r3, [pc, #12]	; (800fc68 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc5a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc5c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc5e:	f06f 0302 	mvn.w	r3, #2
 800fc62:	6203      	str	r3, [r0, #32]
}
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop
 800fc68:	0800fc09 	.word	0x0800fc09
 800fc6c:	00000000 	.word	0x00000000

0800fc70 <SVC_Handler>:
	__asm volatile (
 800fc70:	4b07      	ldr	r3, [pc, #28]	; (800fc90 <pxCurrentTCBConst2>)
 800fc72:	6819      	ldr	r1, [r3, #0]
 800fc74:	6808      	ldr	r0, [r1, #0]
 800fc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7a:	f380 8809 	msr	PSP, r0
 800fc7e:	f3bf 8f6f 	isb	sy
 800fc82:	f04f 0000 	mov.w	r0, #0
 800fc86:	f380 8811 	msr	BASEPRI, r0
 800fc8a:	4770      	bx	lr
 800fc8c:	f3af 8000 	nop.w

0800fc90 <pxCurrentTCBConst2>:
 800fc90:	240410a0 	.word	0x240410a0

0800fc94 <vPortEnterCritical>:
 800fc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc98:	f383 8811 	msr	BASEPRI, r3
 800fc9c:	f3bf 8f6f 	isb	sy
 800fca0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800fca4:	4a0a      	ldr	r2, [pc, #40]	; (800fcd0 <vPortEnterCritical+0x3c>)
 800fca6:	6813      	ldr	r3, [r2, #0]
 800fca8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800fcaa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800fcac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800fcae:	d10e      	bne.n	800fcce <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fcb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fcb4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	b143      	cbz	r3, 800fcce <vPortEnterCritical+0x3a>
 800fcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc0:	f383 8811 	msr	BASEPRI, r3
 800fcc4:	f3bf 8f6f 	isb	sy
 800fcc8:	f3bf 8f4f 	dsb	sy
 800fccc:	e7fe      	b.n	800fccc <vPortEnterCritical+0x38>
}
 800fcce:	4770      	bx	lr
 800fcd0:	24000070 	.word	0x24000070

0800fcd4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800fcd4:	4a08      	ldr	r2, [pc, #32]	; (800fcf8 <vPortExitCritical+0x24>)
 800fcd6:	6813      	ldr	r3, [r2, #0]
 800fcd8:	b943      	cbnz	r3, 800fcec <vPortExitCritical+0x18>
 800fcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	e7fe      	b.n	800fcea <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800fcec:	3b01      	subs	r3, #1
 800fcee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fcf0:	b90b      	cbnz	r3, 800fcf6 <vPortExitCritical+0x22>
	__asm volatile
 800fcf2:	f383 8811 	msr	BASEPRI, r3
}
 800fcf6:	4770      	bx	lr
 800fcf8:	24000070 	.word	0x24000070
 800fcfc:	00000000 	.word	0x00000000

0800fd00 <PendSV_Handler>:
	__asm volatile
 800fd00:	f3ef 8009 	mrs	r0, PSP
 800fd04:	f3bf 8f6f 	isb	sy
 800fd08:	4b15      	ldr	r3, [pc, #84]	; (800fd60 <pxCurrentTCBConst>)
 800fd0a:	681a      	ldr	r2, [r3, #0]
 800fd0c:	f01e 0f10 	tst.w	lr, #16
 800fd10:	bf08      	it	eq
 800fd12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1a:	6010      	str	r0, [r2, #0]
 800fd1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fd20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fd24:	f380 8811 	msr	BASEPRI, r0
 800fd28:	f3bf 8f4f 	dsb	sy
 800fd2c:	f3bf 8f6f 	isb	sy
 800fd30:	f7ff f9ce 	bl	800f0d0 <vTaskSwitchContext>
 800fd34:	f04f 0000 	mov.w	r0, #0
 800fd38:	f380 8811 	msr	BASEPRI, r0
 800fd3c:	bc09      	pop	{r0, r3}
 800fd3e:	6819      	ldr	r1, [r3, #0]
 800fd40:	6808      	ldr	r0, [r1, #0]
 800fd42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd46:	f01e 0f10 	tst.w	lr, #16
 800fd4a:	bf08      	it	eq
 800fd4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fd50:	f380 8809 	msr	PSP, r0
 800fd54:	f3bf 8f6f 	isb	sy
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	f3af 8000 	nop.w

0800fd60 <pxCurrentTCBConst>:
 800fd60:	240410a0 	.word	0x240410a0

0800fd64 <xPortSysTickHandler>:
{
 800fd64:	b508      	push	{r3, lr}
	__asm volatile
 800fd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6a:	f383 8811 	msr	BASEPRI, r3
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800fd76:	f7ff f87d 	bl	800ee74 <xTaskIncrementTick>
 800fd7a:	b128      	cbz	r0, 800fd88 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fd7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fd80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800fd88:	2300      	movs	r3, #0
 800fd8a:	f383 8811 	msr	BASEPRI, r3
}
 800fd8e:	bd08      	pop	{r3, pc}

0800fd90 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd90:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800fd94:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd9a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd9c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd9e:	4b04      	ldr	r3, [pc, #16]	; (800fdb0 <vPortSetupTimerInterrupt+0x20>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fda6:	3b01      	subs	r3, #1
 800fda8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fdaa:	2307      	movs	r3, #7
 800fdac:	6113      	str	r3, [r2, #16]
}
 800fdae:	4770      	bx	lr
 800fdb0:	24000060 	.word	0x24000060

0800fdb4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fdb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800fdb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fdba:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800fdbe:	4a3a      	ldr	r2, [pc, #232]	; (800fea8 <xPortStartScheduler+0xf4>)
 800fdc0:	4291      	cmp	r1, r2
 800fdc2:	d108      	bne.n	800fdd6 <xPortStartScheduler+0x22>
	__asm volatile
 800fdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc8:	f383 8811 	msr	BASEPRI, r3
 800fdcc:	f3bf 8f6f 	isb	sy
 800fdd0:	f3bf 8f4f 	dsb	sy
 800fdd4:	e7fe      	b.n	800fdd4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fdd6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800fdda:	4b34      	ldr	r3, [pc, #208]	; (800feac <xPortStartScheduler+0xf8>)
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d108      	bne.n	800fdf2 <xPortStartScheduler+0x3e>
 800fde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde4:	f383 8811 	msr	BASEPRI, r3
 800fde8:	f3bf 8f6f 	isb	sy
 800fdec:	f3bf 8f4f 	dsb	sy
 800fdf0:	e7fe      	b.n	800fdf0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fdf2:	4b2f      	ldr	r3, [pc, #188]	; (800feb0 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdf4:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fdf6:	781a      	ldrb	r2, [r3, #0]
 800fdf8:	b2d2      	uxtb	r2, r2
 800fdfa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fdfc:	22ff      	movs	r2, #255	; 0xff
 800fdfe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe00:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe02:	4a2c      	ldr	r2, [pc, #176]	; (800feb4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe04:	b2db      	uxtb	r3, r3
 800fe06:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fe0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fe12:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe14:	2307      	movs	r3, #7
 800fe16:	4a28      	ldr	r2, [pc, #160]	; (800feb8 <xPortStartScheduler+0x104>)
 800fe18:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe1a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800fe1e:	1e5c      	subs	r4, r3, #1
 800fe20:	0600      	lsls	r0, r0, #24
 800fe22:	d40c      	bmi.n	800fe3e <xPortStartScheduler+0x8a>
 800fe24:	b111      	cbz	r1, 800fe2c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	6013      	str	r3, [r2, #0]
 800fe2a:	d011      	beq.n	800fe50 <xPortStartScheduler+0x9c>
 800fe2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe30:	f383 8811 	msr	BASEPRI, r3
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	e7fe      	b.n	800fe3c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fe42:	2101      	movs	r1, #1
 800fe44:	005b      	lsls	r3, r3, #1
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	f88d 3003 	strb.w	r3, [sp, #3]
 800fe4c:	4623      	mov	r3, r4
 800fe4e:	e7e4      	b.n	800fe1a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe50:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe54:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800fe58:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe5a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe5c:	9b01      	ldr	r3, [sp, #4]
 800fe5e:	4a14      	ldr	r2, [pc, #80]	; (800feb0 <xPortStartScheduler+0xfc>)
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe64:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800fe68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe6c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe70:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800fe74:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe78:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800fe7c:	f7ff ff88 	bl	800fd90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800fe80:	4b0e      	ldr	r3, [pc, #56]	; (800febc <xPortStartScheduler+0x108>)
 800fe82:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800fe84:	f7ff feb6 	bl	800fbf4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe88:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800fe8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fe90:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800fe94:	f7ff fe9a 	bl	800fbcc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800fe98:	f7ff f91a 	bl	800f0d0 <vTaskSwitchContext>
}
 800fe9c:	4628      	mov	r0, r5
	prvTaskExitError();
 800fe9e:	f7ff feb3 	bl	800fc08 <prvTaskExitError>
}
 800fea2:	b003      	add	sp, #12
 800fea4:	bd30      	pop	{r4, r5, pc}
 800fea6:	bf00      	nop
 800fea8:	410fc271 	.word	0x410fc271
 800feac:	410fc270 	.word	0x410fc270
 800feb0:	e000e400 	.word	0xe000e400
 800feb4:	240416c8 	.word	0x240416c8
 800feb8:	240416cc 	.word	0x240416cc
 800febc:	24000070 	.word	0x24000070

0800fec0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fec0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fec4:	2b0f      	cmp	r3, #15
 800fec6:	d90e      	bls.n	800fee6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fec8:	4a11      	ldr	r2, [pc, #68]	; (800ff10 <vPortValidateInterruptPriority+0x50>)
 800feca:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fecc:	4a11      	ldr	r2, [pc, #68]	; (800ff14 <vPortValidateInterruptPriority+0x54>)
 800fece:	7812      	ldrb	r2, [r2, #0]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d908      	bls.n	800fee6 <vPortValidateInterruptPriority+0x26>
 800fed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed8:	f383 8811 	msr	BASEPRI, r3
 800fedc:	f3bf 8f6f 	isb	sy
 800fee0:	f3bf 8f4f 	dsb	sy
 800fee4:	e7fe      	b.n	800fee4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fee6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800feea:	4a0b      	ldr	r2, [pc, #44]	; (800ff18 <vPortValidateInterruptPriority+0x58>)
 800feec:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800fef0:	6812      	ldr	r2, [r2, #0]
 800fef2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d908      	bls.n	800ff0c <vPortValidateInterruptPriority+0x4c>
 800fefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fefe:	f383 8811 	msr	BASEPRI, r3
 800ff02:	f3bf 8f6f 	isb	sy
 800ff06:	f3bf 8f4f 	dsb	sy
 800ff0a:	e7fe      	b.n	800ff0a <vPortValidateInterruptPriority+0x4a>
	}
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop
 800ff10:	e000e3f0 	.word	0xe000e3f0
 800ff14:	240416c8 	.word	0x240416c8
 800ff18:	240416cc 	.word	0x240416cc

0800ff1c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff1c:	4b10      	ldr	r3, [pc, #64]	; (800ff60 <prvInsertBlockIntoFreeList+0x44>)
{
 800ff1e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff20:	461a      	mov	r2, r3
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4283      	cmp	r3, r0
 800ff26:	d3fb      	bcc.n	800ff20 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff28:	6854      	ldr	r4, [r2, #4]
 800ff2a:	1911      	adds	r1, r2, r4
 800ff2c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff2e:	bf01      	itttt	eq
 800ff30:	6841      	ldreq	r1, [r0, #4]
 800ff32:	4610      	moveq	r0, r2
 800ff34:	1909      	addeq	r1, r1, r4
 800ff36:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff38:	6844      	ldr	r4, [r0, #4]
 800ff3a:	1901      	adds	r1, r0, r4
 800ff3c:	428b      	cmp	r3, r1
 800ff3e:	d10c      	bne.n	800ff5a <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff40:	4908      	ldr	r1, [pc, #32]	; (800ff64 <prvInsertBlockIntoFreeList+0x48>)
 800ff42:	6809      	ldr	r1, [r1, #0]
 800ff44:	428b      	cmp	r3, r1
 800ff46:	d003      	beq.n	800ff50 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ff48:	6859      	ldr	r1, [r3, #4]
 800ff4a:	4421      	add	r1, r4
 800ff4c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff4e:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff50:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff52:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff54:	bf18      	it	ne
 800ff56:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff58:	bd10      	pop	{r4, pc}
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	e7f8      	b.n	800ff50 <prvInsertBlockIntoFreeList+0x34>
 800ff5e:	bf00      	nop
 800ff60:	240452e8 	.word	0x240452e8
 800ff64:	240416d0 	.word	0x240416d0

0800ff68 <pvPortMalloc>:
{
 800ff68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff6c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800ff6e:	f7fe ff6b 	bl	800ee48 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ff72:	4942      	ldr	r1, [pc, #264]	; (801007c <pvPortMalloc+0x114>)
 800ff74:	4d42      	ldr	r5, [pc, #264]	; (8010080 <pvPortMalloc+0x118>)
 800ff76:	680b      	ldr	r3, [r1, #0]
 800ff78:	bb0b      	cbnz	r3, 800ffbe <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800ff7a:	4a42      	ldr	r2, [pc, #264]	; (8010084 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff7c:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff7e:	4e42      	ldr	r6, [pc, #264]	; (8010088 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff80:	bf1b      	ittet	ne
 800ff82:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff84:	f502 5270 	addne.w	r2, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff88:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff8c:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff90:	bf1c      	itt	ne
 800ff92:	1a13      	subne	r3, r2, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff94:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 800ff96:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff98:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff9a:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff9c:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 800ff9e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ffa0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800ffa4:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ffa8:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800ffaa:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ffac:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffb0:	4b36      	ldr	r3, [pc, #216]	; (801008c <pvPortMalloc+0x124>)
 800ffb2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffb4:	4b36      	ldr	r3, [pc, #216]	; (8010090 <pvPortMalloc+0x128>)
 800ffb6:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ffb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ffbc:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ffbe:	682e      	ldr	r6, [r5, #0]
 800ffc0:	4226      	tst	r6, r4
 800ffc2:	d155      	bne.n	8010070 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800ffc4:	2c00      	cmp	r4, #0
 800ffc6:	d046      	beq.n	8010056 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800ffc8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ffcc:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ffce:	bf1c      	itt	ne
 800ffd0:	f023 0307 	bicne.w	r3, r3, #7
 800ffd4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d04a      	beq.n	8010070 <pvPortMalloc+0x108>
 800ffda:	4f2d      	ldr	r7, [pc, #180]	; (8010090 <pvPortMalloc+0x128>)
 800ffdc:	683c      	ldr	r4, [r7, #0]
 800ffde:	429c      	cmp	r4, r3
 800ffe0:	d346      	bcc.n	8010070 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800ffe2:	4a29      	ldr	r2, [pc, #164]	; (8010088 <pvPortMalloc+0x120>)
 800ffe4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffe6:	6868      	ldr	r0, [r5, #4]
 800ffe8:	4298      	cmp	r0, r3
 800ffea:	d204      	bcs.n	800fff6 <pvPortMalloc+0x8e>
 800ffec:	f8d5 c000 	ldr.w	ip, [r5]
 800fff0:	f1bc 0f00 	cmp.w	ip, #0
 800fff4:	d115      	bne.n	8010022 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800fff6:	6809      	ldr	r1, [r1, #0]
 800fff8:	42a9      	cmp	r1, r5
 800fffa:	d039      	beq.n	8010070 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fffc:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fffe:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010002:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010004:	1ac2      	subs	r2, r0, r3
 8010006:	2a10      	cmp	r2, #16
 8010008:	d912      	bls.n	8010030 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801000a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801000c:	0741      	lsls	r1, r0, #29
 801000e:	d00b      	beq.n	8010028 <pvPortMalloc+0xc0>
 8010010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010014:	f383 8811 	msr	BASEPRI, r3
 8010018:	f3bf 8f6f 	isb	sy
 801001c:	f3bf 8f4f 	dsb	sy
 8010020:	e7fe      	b.n	8010020 <pvPortMalloc+0xb8>
 8010022:	462a      	mov	r2, r5
 8010024:	4665      	mov	r5, ip
 8010026:	e7de      	b.n	800ffe6 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010028:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801002a:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801002c:	f7ff ff76 	bl	800ff1c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010030:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010032:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010034:	4915      	ldr	r1, [pc, #84]	; (801008c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010036:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010038:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801003a:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 801003c:	4a15      	ldr	r2, [pc, #84]	; (8010094 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801003e:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 8010040:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8010042:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010044:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 8010046:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801004a:	bf38      	it	cc
 801004c:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801004e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010052:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8010054:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8010056:	f7fe ffa3 	bl	800efa0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801005a:	0763      	lsls	r3, r4, #29
 801005c:	d00a      	beq.n	8010074 <pvPortMalloc+0x10c>
 801005e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	e7fe      	b.n	801006e <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8010070:	2400      	movs	r4, #0
 8010072:	e7f0      	b.n	8010056 <pvPortMalloc+0xee>
}
 8010074:	4620      	mov	r0, r4
 8010076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801007a:	bf00      	nop
 801007c:	240416d0 	.word	0x240416d0
 8010080:	240452d4 	.word	0x240452d4
 8010084:	240416d4 	.word	0x240416d4
 8010088:	240452e8 	.word	0x240452e8
 801008c:	240452dc 	.word	0x240452dc
 8010090:	240452d8 	.word	0x240452d8
 8010094:	240452e0 	.word	0x240452e0

08010098 <vPortFree>:
{
 8010098:	b510      	push	{r4, lr}
	if( pv != NULL )
 801009a:	4604      	mov	r4, r0
 801009c:	b390      	cbz	r0, 8010104 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801009e:	4a1a      	ldr	r2, [pc, #104]	; (8010108 <vPortFree+0x70>)
 80100a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80100a4:	6812      	ldr	r2, [r2, #0]
 80100a6:	4213      	tst	r3, r2
 80100a8:	d108      	bne.n	80100bc <vPortFree+0x24>
 80100aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ae:	f383 8811 	msr	BASEPRI, r3
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	f3bf 8f4f 	dsb	sy
 80100ba:	e7fe      	b.n	80100ba <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80100bc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80100c0:	b141      	cbz	r1, 80100d4 <vPortFree+0x3c>
 80100c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c6:	f383 8811 	msr	BASEPRI, r3
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	e7fe      	b.n	80100d2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80100d4:	ea23 0302 	bic.w	r3, r3, r2
 80100d8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80100dc:	f7fe feb4 	bl	800ee48 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100e0:	4a0a      	ldr	r2, [pc, #40]	; (801010c <vPortFree+0x74>)
 80100e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100e6:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100ea:	6811      	ldr	r1, [r2, #0]
 80100ec:	440b      	add	r3, r1
 80100ee:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100f0:	f7ff ff14 	bl	800ff1c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80100f4:	4a06      	ldr	r2, [pc, #24]	; (8010110 <vPortFree+0x78>)
 80100f6:	6813      	ldr	r3, [r2, #0]
 80100f8:	3301      	adds	r3, #1
}
 80100fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80100fe:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8010100:	f7fe bf4e 	b.w	800efa0 <xTaskResumeAll>
}
 8010104:	bd10      	pop	{r4, pc}
 8010106:	bf00      	nop
 8010108:	240452d4 	.word	0x240452d4
 801010c:	240452d8 	.word	0x240452d8
 8010110:	240452e4 	.word	0x240452e4

08010114 <atof>:
 8010114:	2100      	movs	r1, #0
 8010116:	f000 bdd1 	b.w	8010cbc <strtod>

0801011a <atoi>:
 801011a:	220a      	movs	r2, #10
 801011c:	2100      	movs	r1, #0
 801011e:	f000 be5d 	b.w	8010ddc <strtol>

08010122 <sulp>:
 8010122:	b570      	push	{r4, r5, r6, lr}
 8010124:	4604      	mov	r4, r0
 8010126:	460d      	mov	r5, r1
 8010128:	4616      	mov	r6, r2
 801012a:	ec45 4b10 	vmov	d0, r4, r5
 801012e:	f003 fcad 	bl	8013a8c <__ulp>
 8010132:	b17e      	cbz	r6, 8010154 <sulp+0x32>
 8010134:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010138:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801013c:	2b00      	cmp	r3, #0
 801013e:	dd09      	ble.n	8010154 <sulp+0x32>
 8010140:	051b      	lsls	r3, r3, #20
 8010142:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010146:	2000      	movs	r0, #0
 8010148:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801014c:	ec41 0b17 	vmov	d7, r0, r1
 8010150:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010154:	bd70      	pop	{r4, r5, r6, pc}
	...

08010158 <_strtod_l>:
 8010158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801015c:	ed2d 8b0e 	vpush	{d8-d14}
 8010160:	b097      	sub	sp, #92	; 0x5c
 8010162:	4604      	mov	r4, r0
 8010164:	920d      	str	r2, [sp, #52]	; 0x34
 8010166:	2200      	movs	r2, #0
 8010168:	9212      	str	r2, [sp, #72]	; 0x48
 801016a:	468a      	mov	sl, r1
 801016c:	f04f 0800 	mov.w	r8, #0
 8010170:	f04f 0900 	mov.w	r9, #0
 8010174:	460a      	mov	r2, r1
 8010176:	9211      	str	r2, [sp, #68]	; 0x44
 8010178:	7811      	ldrb	r1, [r2, #0]
 801017a:	292b      	cmp	r1, #43	; 0x2b
 801017c:	d04c      	beq.n	8010218 <_strtod_l+0xc0>
 801017e:	d839      	bhi.n	80101f4 <_strtod_l+0x9c>
 8010180:	290d      	cmp	r1, #13
 8010182:	d833      	bhi.n	80101ec <_strtod_l+0x94>
 8010184:	2908      	cmp	r1, #8
 8010186:	d833      	bhi.n	80101f0 <_strtod_l+0x98>
 8010188:	2900      	cmp	r1, #0
 801018a:	d03c      	beq.n	8010206 <_strtod_l+0xae>
 801018c:	2200      	movs	r2, #0
 801018e:	9208      	str	r2, [sp, #32]
 8010190:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010192:	7832      	ldrb	r2, [r6, #0]
 8010194:	2a30      	cmp	r2, #48	; 0x30
 8010196:	f040 80b8 	bne.w	801030a <_strtod_l+0x1b2>
 801019a:	7872      	ldrb	r2, [r6, #1]
 801019c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80101a0:	2a58      	cmp	r2, #88	; 0x58
 80101a2:	d170      	bne.n	8010286 <_strtod_l+0x12e>
 80101a4:	9302      	str	r3, [sp, #8]
 80101a6:	9b08      	ldr	r3, [sp, #32]
 80101a8:	9301      	str	r3, [sp, #4]
 80101aa:	ab12      	add	r3, sp, #72	; 0x48
 80101ac:	9300      	str	r3, [sp, #0]
 80101ae:	4a91      	ldr	r2, [pc, #580]	; (80103f4 <_strtod_l+0x29c>)
 80101b0:	ab13      	add	r3, sp, #76	; 0x4c
 80101b2:	a911      	add	r1, sp, #68	; 0x44
 80101b4:	4620      	mov	r0, r4
 80101b6:	f002 fd47 	bl	8012c48 <__gethex>
 80101ba:	f010 070f 	ands.w	r7, r0, #15
 80101be:	4605      	mov	r5, r0
 80101c0:	d005      	beq.n	80101ce <_strtod_l+0x76>
 80101c2:	2f06      	cmp	r7, #6
 80101c4:	d12a      	bne.n	801021c <_strtod_l+0xc4>
 80101c6:	3601      	adds	r6, #1
 80101c8:	2300      	movs	r3, #0
 80101ca:	9611      	str	r6, [sp, #68]	; 0x44
 80101cc:	9308      	str	r3, [sp, #32]
 80101ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f040 8555 	bne.w	8010c80 <_strtod_l+0xb28>
 80101d6:	9b08      	ldr	r3, [sp, #32]
 80101d8:	ec49 8b10 	vmov	d0, r8, r9
 80101dc:	b1cb      	cbz	r3, 8010212 <_strtod_l+0xba>
 80101de:	eeb1 0b40 	vneg.f64	d0, d0
 80101e2:	b017      	add	sp, #92	; 0x5c
 80101e4:	ecbd 8b0e 	vpop	{d8-d14}
 80101e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ec:	2920      	cmp	r1, #32
 80101ee:	d1cd      	bne.n	801018c <_strtod_l+0x34>
 80101f0:	3201      	adds	r2, #1
 80101f2:	e7c0      	b.n	8010176 <_strtod_l+0x1e>
 80101f4:	292d      	cmp	r1, #45	; 0x2d
 80101f6:	d1c9      	bne.n	801018c <_strtod_l+0x34>
 80101f8:	2101      	movs	r1, #1
 80101fa:	9108      	str	r1, [sp, #32]
 80101fc:	1c51      	adds	r1, r2, #1
 80101fe:	9111      	str	r1, [sp, #68]	; 0x44
 8010200:	7852      	ldrb	r2, [r2, #1]
 8010202:	2a00      	cmp	r2, #0
 8010204:	d1c4      	bne.n	8010190 <_strtod_l+0x38>
 8010206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010208:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801020c:	2b00      	cmp	r3, #0
 801020e:	f040 8535 	bne.w	8010c7c <_strtod_l+0xb24>
 8010212:	ec49 8b10 	vmov	d0, r8, r9
 8010216:	e7e4      	b.n	80101e2 <_strtod_l+0x8a>
 8010218:	2100      	movs	r1, #0
 801021a:	e7ee      	b.n	80101fa <_strtod_l+0xa2>
 801021c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801021e:	b13a      	cbz	r2, 8010230 <_strtod_l+0xd8>
 8010220:	2135      	movs	r1, #53	; 0x35
 8010222:	a814      	add	r0, sp, #80	; 0x50
 8010224:	f003 fd2c 	bl	8013c80 <__copybits>
 8010228:	9912      	ldr	r1, [sp, #72]	; 0x48
 801022a:	4620      	mov	r0, r4
 801022c:	f003 f902 	bl	8013434 <_Bfree>
 8010230:	1e7b      	subs	r3, r7, #1
 8010232:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010234:	2b04      	cmp	r3, #4
 8010236:	d806      	bhi.n	8010246 <_strtod_l+0xee>
 8010238:	e8df f003 	tbb	[pc, r3]
 801023c:	201d0314 	.word	0x201d0314
 8010240:	14          	.byte	0x14
 8010241:	00          	.byte	0x00
 8010242:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8010246:	05eb      	lsls	r3, r5, #23
 8010248:	bf48      	it	mi
 801024a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801024e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010252:	0d1b      	lsrs	r3, r3, #20
 8010254:	051b      	lsls	r3, r3, #20
 8010256:	2b00      	cmp	r3, #0
 8010258:	d1b9      	bne.n	80101ce <_strtod_l+0x76>
 801025a:	f001 fde1 	bl	8011e20 <__errno>
 801025e:	2322      	movs	r3, #34	; 0x22
 8010260:	6003      	str	r3, [r0, #0]
 8010262:	e7b4      	b.n	80101ce <_strtod_l+0x76>
 8010264:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8010268:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801026c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010270:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010274:	e7e7      	b.n	8010246 <_strtod_l+0xee>
 8010276:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80103fc <_strtod_l+0x2a4>
 801027a:	e7e4      	b.n	8010246 <_strtod_l+0xee>
 801027c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010280:	f04f 38ff 	mov.w	r8, #4294967295
 8010284:	e7df      	b.n	8010246 <_strtod_l+0xee>
 8010286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010288:	1c5a      	adds	r2, r3, #1
 801028a:	9211      	str	r2, [sp, #68]	; 0x44
 801028c:	785b      	ldrb	r3, [r3, #1]
 801028e:	2b30      	cmp	r3, #48	; 0x30
 8010290:	d0f9      	beq.n	8010286 <_strtod_l+0x12e>
 8010292:	2b00      	cmp	r3, #0
 8010294:	d09b      	beq.n	80101ce <_strtod_l+0x76>
 8010296:	2301      	movs	r3, #1
 8010298:	9306      	str	r3, [sp, #24]
 801029a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801029c:	9309      	str	r3, [sp, #36]	; 0x24
 801029e:	2300      	movs	r3, #0
 80102a0:	9305      	str	r3, [sp, #20]
 80102a2:	9307      	str	r3, [sp, #28]
 80102a4:	461e      	mov	r6, r3
 80102a6:	220a      	movs	r2, #10
 80102a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80102aa:	7805      	ldrb	r5, [r0, #0]
 80102ac:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80102b0:	b2d9      	uxtb	r1, r3
 80102b2:	2909      	cmp	r1, #9
 80102b4:	d92b      	bls.n	801030e <_strtod_l+0x1b6>
 80102b6:	4950      	ldr	r1, [pc, #320]	; (80103f8 <_strtod_l+0x2a0>)
 80102b8:	2201      	movs	r2, #1
 80102ba:	f001 fc8f 	bl	8011bdc <strncmp>
 80102be:	2800      	cmp	r0, #0
 80102c0:	d035      	beq.n	801032e <_strtod_l+0x1d6>
 80102c2:	2000      	movs	r0, #0
 80102c4:	462a      	mov	r2, r5
 80102c6:	4633      	mov	r3, r6
 80102c8:	4683      	mov	fp, r0
 80102ca:	4601      	mov	r1, r0
 80102cc:	2a65      	cmp	r2, #101	; 0x65
 80102ce:	d001      	beq.n	80102d4 <_strtod_l+0x17c>
 80102d0:	2a45      	cmp	r2, #69	; 0x45
 80102d2:	d118      	bne.n	8010306 <_strtod_l+0x1ae>
 80102d4:	b91b      	cbnz	r3, 80102de <_strtod_l+0x186>
 80102d6:	9b06      	ldr	r3, [sp, #24]
 80102d8:	4303      	orrs	r3, r0
 80102da:	d094      	beq.n	8010206 <_strtod_l+0xae>
 80102dc:	2300      	movs	r3, #0
 80102de:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80102e2:	f10a 0201 	add.w	r2, sl, #1
 80102e6:	9211      	str	r2, [sp, #68]	; 0x44
 80102e8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80102ec:	2a2b      	cmp	r2, #43	; 0x2b
 80102ee:	d075      	beq.n	80103dc <_strtod_l+0x284>
 80102f0:	2a2d      	cmp	r2, #45	; 0x2d
 80102f2:	d07b      	beq.n	80103ec <_strtod_l+0x294>
 80102f4:	f04f 0e00 	mov.w	lr, #0
 80102f8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80102fc:	2d09      	cmp	r5, #9
 80102fe:	f240 8083 	bls.w	8010408 <_strtod_l+0x2b0>
 8010302:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8010306:	2500      	movs	r5, #0
 8010308:	e09e      	b.n	8010448 <_strtod_l+0x2f0>
 801030a:	2300      	movs	r3, #0
 801030c:	e7c4      	b.n	8010298 <_strtod_l+0x140>
 801030e:	2e08      	cmp	r6, #8
 8010310:	bfd5      	itete	le
 8010312:	9907      	ldrle	r1, [sp, #28]
 8010314:	9905      	ldrgt	r1, [sp, #20]
 8010316:	fb02 3301 	mlale	r3, r2, r1, r3
 801031a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801031e:	f100 0001 	add.w	r0, r0, #1
 8010322:	bfd4      	ite	le
 8010324:	9307      	strle	r3, [sp, #28]
 8010326:	9305      	strgt	r3, [sp, #20]
 8010328:	3601      	adds	r6, #1
 801032a:	9011      	str	r0, [sp, #68]	; 0x44
 801032c:	e7bc      	b.n	80102a8 <_strtod_l+0x150>
 801032e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	9211      	str	r2, [sp, #68]	; 0x44
 8010334:	785a      	ldrb	r2, [r3, #1]
 8010336:	b3ae      	cbz	r6, 80103a4 <_strtod_l+0x24c>
 8010338:	4683      	mov	fp, r0
 801033a:	4633      	mov	r3, r6
 801033c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010340:	2909      	cmp	r1, #9
 8010342:	d912      	bls.n	801036a <_strtod_l+0x212>
 8010344:	2101      	movs	r1, #1
 8010346:	e7c1      	b.n	80102cc <_strtod_l+0x174>
 8010348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801034a:	1c5a      	adds	r2, r3, #1
 801034c:	9211      	str	r2, [sp, #68]	; 0x44
 801034e:	785a      	ldrb	r2, [r3, #1]
 8010350:	3001      	adds	r0, #1
 8010352:	2a30      	cmp	r2, #48	; 0x30
 8010354:	d0f8      	beq.n	8010348 <_strtod_l+0x1f0>
 8010356:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801035a:	2b08      	cmp	r3, #8
 801035c:	f200 8495 	bhi.w	8010c8a <_strtod_l+0xb32>
 8010360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010362:	9309      	str	r3, [sp, #36]	; 0x24
 8010364:	4683      	mov	fp, r0
 8010366:	2000      	movs	r0, #0
 8010368:	4603      	mov	r3, r0
 801036a:	3a30      	subs	r2, #48	; 0x30
 801036c:	f100 0101 	add.w	r1, r0, #1
 8010370:	d012      	beq.n	8010398 <_strtod_l+0x240>
 8010372:	448b      	add	fp, r1
 8010374:	eb00 0c03 	add.w	ip, r0, r3
 8010378:	4619      	mov	r1, r3
 801037a:	250a      	movs	r5, #10
 801037c:	4561      	cmp	r1, ip
 801037e:	d113      	bne.n	80103a8 <_strtod_l+0x250>
 8010380:	1819      	adds	r1, r3, r0
 8010382:	2908      	cmp	r1, #8
 8010384:	f103 0301 	add.w	r3, r3, #1
 8010388:	4403      	add	r3, r0
 801038a:	dc1b      	bgt.n	80103c4 <_strtod_l+0x26c>
 801038c:	9807      	ldr	r0, [sp, #28]
 801038e:	210a      	movs	r1, #10
 8010390:	fb01 2200 	mla	r2, r1, r0, r2
 8010394:	9207      	str	r2, [sp, #28]
 8010396:	2100      	movs	r1, #0
 8010398:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801039a:	1c50      	adds	r0, r2, #1
 801039c:	9011      	str	r0, [sp, #68]	; 0x44
 801039e:	7852      	ldrb	r2, [r2, #1]
 80103a0:	4608      	mov	r0, r1
 80103a2:	e7cb      	b.n	801033c <_strtod_l+0x1e4>
 80103a4:	4630      	mov	r0, r6
 80103a6:	e7d4      	b.n	8010352 <_strtod_l+0x1fa>
 80103a8:	2908      	cmp	r1, #8
 80103aa:	f101 0101 	add.w	r1, r1, #1
 80103ae:	dc03      	bgt.n	80103b8 <_strtod_l+0x260>
 80103b0:	9f07      	ldr	r7, [sp, #28]
 80103b2:	436f      	muls	r7, r5
 80103b4:	9707      	str	r7, [sp, #28]
 80103b6:	e7e1      	b.n	801037c <_strtod_l+0x224>
 80103b8:	2910      	cmp	r1, #16
 80103ba:	bfde      	ittt	le
 80103bc:	9f05      	ldrle	r7, [sp, #20]
 80103be:	436f      	mulle	r7, r5
 80103c0:	9705      	strle	r7, [sp, #20]
 80103c2:	e7db      	b.n	801037c <_strtod_l+0x224>
 80103c4:	2b10      	cmp	r3, #16
 80103c6:	bfdf      	itttt	le
 80103c8:	9805      	ldrle	r0, [sp, #20]
 80103ca:	210a      	movle	r1, #10
 80103cc:	fb01 2200 	mlale	r2, r1, r0, r2
 80103d0:	9205      	strle	r2, [sp, #20]
 80103d2:	e7e0      	b.n	8010396 <_strtod_l+0x23e>
 80103d4:	f04f 0b00 	mov.w	fp, #0
 80103d8:	2101      	movs	r1, #1
 80103da:	e77c      	b.n	80102d6 <_strtod_l+0x17e>
 80103dc:	f04f 0e00 	mov.w	lr, #0
 80103e0:	f10a 0202 	add.w	r2, sl, #2
 80103e4:	9211      	str	r2, [sp, #68]	; 0x44
 80103e6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80103ea:	e785      	b.n	80102f8 <_strtod_l+0x1a0>
 80103ec:	f04f 0e01 	mov.w	lr, #1
 80103f0:	e7f6      	b.n	80103e0 <_strtod_l+0x288>
 80103f2:	bf00      	nop
 80103f4:	08015de4 	.word	0x08015de4
 80103f8:	0801511f 	.word	0x0801511f
 80103fc:	7ff00000 	.word	0x7ff00000
 8010400:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010402:	1c55      	adds	r5, r2, #1
 8010404:	9511      	str	r5, [sp, #68]	; 0x44
 8010406:	7852      	ldrb	r2, [r2, #1]
 8010408:	2a30      	cmp	r2, #48	; 0x30
 801040a:	d0f9      	beq.n	8010400 <_strtod_l+0x2a8>
 801040c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8010410:	2d08      	cmp	r5, #8
 8010412:	f63f af78 	bhi.w	8010306 <_strtod_l+0x1ae>
 8010416:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801041a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801041c:	920a      	str	r2, [sp, #40]	; 0x28
 801041e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010420:	1c55      	adds	r5, r2, #1
 8010422:	9511      	str	r5, [sp, #68]	; 0x44
 8010424:	7852      	ldrb	r2, [r2, #1]
 8010426:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801042a:	2f09      	cmp	r7, #9
 801042c:	d937      	bls.n	801049e <_strtod_l+0x346>
 801042e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010430:	1bed      	subs	r5, r5, r7
 8010432:	2d08      	cmp	r5, #8
 8010434:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8010438:	dc02      	bgt.n	8010440 <_strtod_l+0x2e8>
 801043a:	4565      	cmp	r5, ip
 801043c:	bfa8      	it	ge
 801043e:	4665      	movge	r5, ip
 8010440:	f1be 0f00 	cmp.w	lr, #0
 8010444:	d000      	beq.n	8010448 <_strtod_l+0x2f0>
 8010446:	426d      	negs	r5, r5
 8010448:	2b00      	cmp	r3, #0
 801044a:	d14d      	bne.n	80104e8 <_strtod_l+0x390>
 801044c:	9b06      	ldr	r3, [sp, #24]
 801044e:	4303      	orrs	r3, r0
 8010450:	f47f aebd 	bne.w	80101ce <_strtod_l+0x76>
 8010454:	2900      	cmp	r1, #0
 8010456:	f47f aed6 	bne.w	8010206 <_strtod_l+0xae>
 801045a:	2a69      	cmp	r2, #105	; 0x69
 801045c:	d027      	beq.n	80104ae <_strtod_l+0x356>
 801045e:	dc24      	bgt.n	80104aa <_strtod_l+0x352>
 8010460:	2a49      	cmp	r2, #73	; 0x49
 8010462:	d024      	beq.n	80104ae <_strtod_l+0x356>
 8010464:	2a4e      	cmp	r2, #78	; 0x4e
 8010466:	f47f aece 	bne.w	8010206 <_strtod_l+0xae>
 801046a:	4995      	ldr	r1, [pc, #596]	; (80106c0 <_strtod_l+0x568>)
 801046c:	a811      	add	r0, sp, #68	; 0x44
 801046e:	f002 fe2b 	bl	80130c8 <__match>
 8010472:	2800      	cmp	r0, #0
 8010474:	f43f aec7 	beq.w	8010206 <_strtod_l+0xae>
 8010478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	2b28      	cmp	r3, #40	; 0x28
 801047e:	d12d      	bne.n	80104dc <_strtod_l+0x384>
 8010480:	4990      	ldr	r1, [pc, #576]	; (80106c4 <_strtod_l+0x56c>)
 8010482:	aa14      	add	r2, sp, #80	; 0x50
 8010484:	a811      	add	r0, sp, #68	; 0x44
 8010486:	f002 fe33 	bl	80130f0 <__hexnan>
 801048a:	2805      	cmp	r0, #5
 801048c:	d126      	bne.n	80104dc <_strtod_l+0x384>
 801048e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010490:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010494:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010498:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801049c:	e697      	b.n	80101ce <_strtod_l+0x76>
 801049e:	250a      	movs	r5, #10
 80104a0:	fb05 2c0c 	mla	ip, r5, ip, r2
 80104a4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80104a8:	e7b9      	b.n	801041e <_strtod_l+0x2c6>
 80104aa:	2a6e      	cmp	r2, #110	; 0x6e
 80104ac:	e7db      	b.n	8010466 <_strtod_l+0x30e>
 80104ae:	4986      	ldr	r1, [pc, #536]	; (80106c8 <_strtod_l+0x570>)
 80104b0:	a811      	add	r0, sp, #68	; 0x44
 80104b2:	f002 fe09 	bl	80130c8 <__match>
 80104b6:	2800      	cmp	r0, #0
 80104b8:	f43f aea5 	beq.w	8010206 <_strtod_l+0xae>
 80104bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104be:	4983      	ldr	r1, [pc, #524]	; (80106cc <_strtod_l+0x574>)
 80104c0:	3b01      	subs	r3, #1
 80104c2:	a811      	add	r0, sp, #68	; 0x44
 80104c4:	9311      	str	r3, [sp, #68]	; 0x44
 80104c6:	f002 fdff 	bl	80130c8 <__match>
 80104ca:	b910      	cbnz	r0, 80104d2 <_strtod_l+0x37a>
 80104cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104ce:	3301      	adds	r3, #1
 80104d0:	9311      	str	r3, [sp, #68]	; 0x44
 80104d2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80106e0 <_strtod_l+0x588>
 80104d6:	f04f 0800 	mov.w	r8, #0
 80104da:	e678      	b.n	80101ce <_strtod_l+0x76>
 80104dc:	487c      	ldr	r0, [pc, #496]	; (80106d0 <_strtod_l+0x578>)
 80104de:	f001 fce3 	bl	8011ea8 <nan>
 80104e2:	ec59 8b10 	vmov	r8, r9, d0
 80104e6:	e672      	b.n	80101ce <_strtod_l+0x76>
 80104e8:	eddd 7a07 	vldr	s15, [sp, #28]
 80104ec:	eba5 020b 	sub.w	r2, r5, fp
 80104f0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80104f4:	2e00      	cmp	r6, #0
 80104f6:	bf08      	it	eq
 80104f8:	461e      	moveq	r6, r3
 80104fa:	2b10      	cmp	r3, #16
 80104fc:	9206      	str	r2, [sp, #24]
 80104fe:	461a      	mov	r2, r3
 8010500:	bfa8      	it	ge
 8010502:	2210      	movge	r2, #16
 8010504:	2b09      	cmp	r3, #9
 8010506:	ec59 8b17 	vmov	r8, r9, d7
 801050a:	dd0c      	ble.n	8010526 <_strtod_l+0x3ce>
 801050c:	4971      	ldr	r1, [pc, #452]	; (80106d4 <_strtod_l+0x57c>)
 801050e:	eddd 6a05 	vldr	s13, [sp, #20]
 8010512:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010516:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801051a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801051e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010522:	ec59 8b16 	vmov	r8, r9, d6
 8010526:	2b0f      	cmp	r3, #15
 8010528:	dc37      	bgt.n	801059a <_strtod_l+0x442>
 801052a:	9906      	ldr	r1, [sp, #24]
 801052c:	2900      	cmp	r1, #0
 801052e:	f43f ae4e 	beq.w	80101ce <_strtod_l+0x76>
 8010532:	dd23      	ble.n	801057c <_strtod_l+0x424>
 8010534:	2916      	cmp	r1, #22
 8010536:	dc0b      	bgt.n	8010550 <_strtod_l+0x3f8>
 8010538:	4b66      	ldr	r3, [pc, #408]	; (80106d4 <_strtod_l+0x57c>)
 801053a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801053e:	ed93 7b00 	vldr	d7, [r3]
 8010542:	ec49 8b16 	vmov	d6, r8, r9
 8010546:	ee27 7b06 	vmul.f64	d7, d7, d6
 801054a:	ec59 8b17 	vmov	r8, r9, d7
 801054e:	e63e      	b.n	80101ce <_strtod_l+0x76>
 8010550:	9806      	ldr	r0, [sp, #24]
 8010552:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8010556:	4281      	cmp	r1, r0
 8010558:	db1f      	blt.n	801059a <_strtod_l+0x442>
 801055a:	4a5e      	ldr	r2, [pc, #376]	; (80106d4 <_strtod_l+0x57c>)
 801055c:	f1c3 030f 	rsb	r3, r3, #15
 8010560:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010564:	ed91 7b00 	vldr	d7, [r1]
 8010568:	ec49 8b16 	vmov	d6, r8, r9
 801056c:	1ac3      	subs	r3, r0, r3
 801056e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010572:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010576:	ed92 6b00 	vldr	d6, [r2]
 801057a:	e7e4      	b.n	8010546 <_strtod_l+0x3ee>
 801057c:	9906      	ldr	r1, [sp, #24]
 801057e:	3116      	adds	r1, #22
 8010580:	db0b      	blt.n	801059a <_strtod_l+0x442>
 8010582:	4b54      	ldr	r3, [pc, #336]	; (80106d4 <_strtod_l+0x57c>)
 8010584:	ebab 0505 	sub.w	r5, fp, r5
 8010588:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801058c:	ed95 7b00 	vldr	d7, [r5]
 8010590:	ec49 8b16 	vmov	d6, r8, r9
 8010594:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010598:	e7d7      	b.n	801054a <_strtod_l+0x3f2>
 801059a:	9906      	ldr	r1, [sp, #24]
 801059c:	1a9a      	subs	r2, r3, r2
 801059e:	440a      	add	r2, r1
 80105a0:	2a00      	cmp	r2, #0
 80105a2:	dd6e      	ble.n	8010682 <_strtod_l+0x52a>
 80105a4:	f012 000f 	ands.w	r0, r2, #15
 80105a8:	d00a      	beq.n	80105c0 <_strtod_l+0x468>
 80105aa:	494a      	ldr	r1, [pc, #296]	; (80106d4 <_strtod_l+0x57c>)
 80105ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80105b0:	ed91 7b00 	vldr	d7, [r1]
 80105b4:	ec49 8b16 	vmov	d6, r8, r9
 80105b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80105bc:	ec59 8b17 	vmov	r8, r9, d7
 80105c0:	f032 020f 	bics.w	r2, r2, #15
 80105c4:	d04e      	beq.n	8010664 <_strtod_l+0x50c>
 80105c6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80105ca:	dd22      	ble.n	8010612 <_strtod_l+0x4ba>
 80105cc:	2500      	movs	r5, #0
 80105ce:	462e      	mov	r6, r5
 80105d0:	9507      	str	r5, [sp, #28]
 80105d2:	462f      	mov	r7, r5
 80105d4:	2322      	movs	r3, #34	; 0x22
 80105d6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80106e0 <_strtod_l+0x588>
 80105da:	6023      	str	r3, [r4, #0]
 80105dc:	f04f 0800 	mov.w	r8, #0
 80105e0:	9b07      	ldr	r3, [sp, #28]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f43f adf3 	beq.w	80101ce <_strtod_l+0x76>
 80105e8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80105ea:	4620      	mov	r0, r4
 80105ec:	f002 ff22 	bl	8013434 <_Bfree>
 80105f0:	4639      	mov	r1, r7
 80105f2:	4620      	mov	r0, r4
 80105f4:	f002 ff1e 	bl	8013434 <_Bfree>
 80105f8:	4631      	mov	r1, r6
 80105fa:	4620      	mov	r0, r4
 80105fc:	f002 ff1a 	bl	8013434 <_Bfree>
 8010600:	9907      	ldr	r1, [sp, #28]
 8010602:	4620      	mov	r0, r4
 8010604:	f002 ff16 	bl	8013434 <_Bfree>
 8010608:	4629      	mov	r1, r5
 801060a:	4620      	mov	r0, r4
 801060c:	f002 ff12 	bl	8013434 <_Bfree>
 8010610:	e5dd      	b.n	80101ce <_strtod_l+0x76>
 8010612:	2000      	movs	r0, #0
 8010614:	ec49 8b17 	vmov	d7, r8, r9
 8010618:	4f2f      	ldr	r7, [pc, #188]	; (80106d8 <_strtod_l+0x580>)
 801061a:	1112      	asrs	r2, r2, #4
 801061c:	4601      	mov	r1, r0
 801061e:	2a01      	cmp	r2, #1
 8010620:	dc23      	bgt.n	801066a <_strtod_l+0x512>
 8010622:	b108      	cbz	r0, 8010628 <_strtod_l+0x4d0>
 8010624:	ec59 8b17 	vmov	r8, r9, d7
 8010628:	4a2b      	ldr	r2, [pc, #172]	; (80106d8 <_strtod_l+0x580>)
 801062a:	482c      	ldr	r0, [pc, #176]	; (80106dc <_strtod_l+0x584>)
 801062c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010630:	ed92 7b00 	vldr	d7, [r2]
 8010634:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010638:	ec49 8b16 	vmov	d6, r8, r9
 801063c:	4a28      	ldr	r2, [pc, #160]	; (80106e0 <_strtod_l+0x588>)
 801063e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010642:	ee17 1a90 	vmov	r1, s15
 8010646:	400a      	ands	r2, r1
 8010648:	4282      	cmp	r2, r0
 801064a:	ec59 8b17 	vmov	r8, r9, d7
 801064e:	d8bd      	bhi.n	80105cc <_strtod_l+0x474>
 8010650:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8010654:	4282      	cmp	r2, r0
 8010656:	bf86      	itte	hi
 8010658:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80106e4 <_strtod_l+0x58c>
 801065c:	f04f 38ff 	movhi.w	r8, #4294967295
 8010660:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8010664:	2200      	movs	r2, #0
 8010666:	9205      	str	r2, [sp, #20]
 8010668:	e076      	b.n	8010758 <_strtod_l+0x600>
 801066a:	f012 0f01 	tst.w	r2, #1
 801066e:	d004      	beq.n	801067a <_strtod_l+0x522>
 8010670:	ed97 6b00 	vldr	d6, [r7]
 8010674:	2001      	movs	r0, #1
 8010676:	ee27 7b06 	vmul.f64	d7, d7, d6
 801067a:	3101      	adds	r1, #1
 801067c:	1052      	asrs	r2, r2, #1
 801067e:	3708      	adds	r7, #8
 8010680:	e7cd      	b.n	801061e <_strtod_l+0x4c6>
 8010682:	d0ef      	beq.n	8010664 <_strtod_l+0x50c>
 8010684:	4252      	negs	r2, r2
 8010686:	f012 000f 	ands.w	r0, r2, #15
 801068a:	d00a      	beq.n	80106a2 <_strtod_l+0x54a>
 801068c:	4911      	ldr	r1, [pc, #68]	; (80106d4 <_strtod_l+0x57c>)
 801068e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010692:	ed91 7b00 	vldr	d7, [r1]
 8010696:	ec49 8b16 	vmov	d6, r8, r9
 801069a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801069e:	ec59 8b17 	vmov	r8, r9, d7
 80106a2:	1112      	asrs	r2, r2, #4
 80106a4:	d0de      	beq.n	8010664 <_strtod_l+0x50c>
 80106a6:	2a1f      	cmp	r2, #31
 80106a8:	dd1e      	ble.n	80106e8 <_strtod_l+0x590>
 80106aa:	2500      	movs	r5, #0
 80106ac:	462e      	mov	r6, r5
 80106ae:	9507      	str	r5, [sp, #28]
 80106b0:	462f      	mov	r7, r5
 80106b2:	2322      	movs	r3, #34	; 0x22
 80106b4:	f04f 0800 	mov.w	r8, #0
 80106b8:	f04f 0900 	mov.w	r9, #0
 80106bc:	6023      	str	r3, [r4, #0]
 80106be:	e78f      	b.n	80105e0 <_strtod_l+0x488>
 80106c0:	08015bed 	.word	0x08015bed
 80106c4:	08015df8 	.word	0x08015df8
 80106c8:	08015f3e 	.word	0x08015f3e
 80106cc:	08016021 	.word	0x08016021
 80106d0:	08015177 	.word	0x08015177
 80106d4:	08016178 	.word	0x08016178
 80106d8:	08016150 	.word	0x08016150
 80106dc:	7ca00000 	.word	0x7ca00000
 80106e0:	7ff00000 	.word	0x7ff00000
 80106e4:	7fefffff 	.word	0x7fefffff
 80106e8:	f012 0110 	ands.w	r1, r2, #16
 80106ec:	bf18      	it	ne
 80106ee:	216a      	movne	r1, #106	; 0x6a
 80106f0:	9105      	str	r1, [sp, #20]
 80106f2:	ec49 8b17 	vmov	d7, r8, r9
 80106f6:	49be      	ldr	r1, [pc, #760]	; (80109f0 <_strtod_l+0x898>)
 80106f8:	2000      	movs	r0, #0
 80106fa:	07d7      	lsls	r7, r2, #31
 80106fc:	d504      	bpl.n	8010708 <_strtod_l+0x5b0>
 80106fe:	ed91 6b00 	vldr	d6, [r1]
 8010702:	2001      	movs	r0, #1
 8010704:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010708:	1052      	asrs	r2, r2, #1
 801070a:	f101 0108 	add.w	r1, r1, #8
 801070e:	d1f4      	bne.n	80106fa <_strtod_l+0x5a2>
 8010710:	b108      	cbz	r0, 8010716 <_strtod_l+0x5be>
 8010712:	ec59 8b17 	vmov	r8, r9, d7
 8010716:	9a05      	ldr	r2, [sp, #20]
 8010718:	b1ba      	cbz	r2, 801074a <_strtod_l+0x5f2>
 801071a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801071e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8010722:	2a00      	cmp	r2, #0
 8010724:	4648      	mov	r0, r9
 8010726:	dd10      	ble.n	801074a <_strtod_l+0x5f2>
 8010728:	2a1f      	cmp	r2, #31
 801072a:	f340 812c 	ble.w	8010986 <_strtod_l+0x82e>
 801072e:	2a34      	cmp	r2, #52	; 0x34
 8010730:	bfde      	ittt	le
 8010732:	f04f 32ff 	movle.w	r2, #4294967295
 8010736:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801073a:	408a      	lslle	r2, r1
 801073c:	f04f 0800 	mov.w	r8, #0
 8010740:	bfcc      	ite	gt
 8010742:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010746:	ea02 0900 	andle.w	r9, r2, r0
 801074a:	ec49 8b17 	vmov	d7, r8, r9
 801074e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010756:	d0a8      	beq.n	80106aa <_strtod_l+0x552>
 8010758:	9a07      	ldr	r2, [sp, #28]
 801075a:	9200      	str	r2, [sp, #0]
 801075c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801075e:	4632      	mov	r2, r6
 8010760:	4620      	mov	r0, r4
 8010762:	f002 fecf 	bl	8013504 <__s2b>
 8010766:	9007      	str	r0, [sp, #28]
 8010768:	2800      	cmp	r0, #0
 801076a:	f43f af2f 	beq.w	80105cc <_strtod_l+0x474>
 801076e:	9a06      	ldr	r2, [sp, #24]
 8010770:	2a00      	cmp	r2, #0
 8010772:	ebab 0305 	sub.w	r3, fp, r5
 8010776:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80109d0 <_strtod_l+0x878>
 801077a:	bfa8      	it	ge
 801077c:	2300      	movge	r3, #0
 801077e:	ed9f ab96 	vldr	d10, [pc, #600]	; 80109d8 <_strtod_l+0x880>
 8010782:	ed9f bb97 	vldr	d11, [pc, #604]	; 80109e0 <_strtod_l+0x888>
 8010786:	9309      	str	r3, [sp, #36]	; 0x24
 8010788:	2500      	movs	r5, #0
 801078a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801078e:	930c      	str	r3, [sp, #48]	; 0x30
 8010790:	462e      	mov	r6, r5
 8010792:	9b07      	ldr	r3, [sp, #28]
 8010794:	4620      	mov	r0, r4
 8010796:	6859      	ldr	r1, [r3, #4]
 8010798:	f002 fe0c 	bl	80133b4 <_Balloc>
 801079c:	4607      	mov	r7, r0
 801079e:	2800      	cmp	r0, #0
 80107a0:	f43f af18 	beq.w	80105d4 <_strtod_l+0x47c>
 80107a4:	9b07      	ldr	r3, [sp, #28]
 80107a6:	691a      	ldr	r2, [r3, #16]
 80107a8:	3202      	adds	r2, #2
 80107aa:	f103 010c 	add.w	r1, r3, #12
 80107ae:	0092      	lsls	r2, r2, #2
 80107b0:	300c      	adds	r0, #12
 80107b2:	f001 fb6a 	bl	8011e8a <memcpy>
 80107b6:	ec49 8b10 	vmov	d0, r8, r9
 80107ba:	aa14      	add	r2, sp, #80	; 0x50
 80107bc:	a913      	add	r1, sp, #76	; 0x4c
 80107be:	4620      	mov	r0, r4
 80107c0:	f003 f9d4 	bl	8013b6c <__d2b>
 80107c4:	ec49 8b18 	vmov	d8, r8, r9
 80107c8:	9012      	str	r0, [sp, #72]	; 0x48
 80107ca:	2800      	cmp	r0, #0
 80107cc:	f43f af02 	beq.w	80105d4 <_strtod_l+0x47c>
 80107d0:	2101      	movs	r1, #1
 80107d2:	4620      	mov	r0, r4
 80107d4:	f002 ff2e 	bl	8013634 <__i2b>
 80107d8:	4606      	mov	r6, r0
 80107da:	2800      	cmp	r0, #0
 80107dc:	f43f aefa 	beq.w	80105d4 <_strtod_l+0x47c>
 80107e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107e2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	bfab      	itete	ge
 80107e8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80107ea:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80107ec:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80107f0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80107f4:	bfac      	ite	ge
 80107f6:	eb03 0b02 	addge.w	fp, r3, r2
 80107fa:	eba2 0a03 	sublt.w	sl, r2, r3
 80107fe:	9a05      	ldr	r2, [sp, #20]
 8010800:	1a9b      	subs	r3, r3, r2
 8010802:	440b      	add	r3, r1
 8010804:	4a7b      	ldr	r2, [pc, #492]	; (80109f4 <_strtod_l+0x89c>)
 8010806:	3b01      	subs	r3, #1
 8010808:	4293      	cmp	r3, r2
 801080a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801080e:	f280 80cd 	bge.w	80109ac <_strtod_l+0x854>
 8010812:	1ad2      	subs	r2, r2, r3
 8010814:	2a1f      	cmp	r2, #31
 8010816:	eba1 0102 	sub.w	r1, r1, r2
 801081a:	f04f 0001 	mov.w	r0, #1
 801081e:	f300 80b9 	bgt.w	8010994 <_strtod_l+0x83c>
 8010822:	fa00 f302 	lsl.w	r3, r0, r2
 8010826:	930b      	str	r3, [sp, #44]	; 0x2c
 8010828:	2300      	movs	r3, #0
 801082a:	930a      	str	r3, [sp, #40]	; 0x28
 801082c:	eb0b 0301 	add.w	r3, fp, r1
 8010830:	9a05      	ldr	r2, [sp, #20]
 8010832:	459b      	cmp	fp, r3
 8010834:	448a      	add	sl, r1
 8010836:	4492      	add	sl, r2
 8010838:	465a      	mov	r2, fp
 801083a:	bfa8      	it	ge
 801083c:	461a      	movge	r2, r3
 801083e:	4552      	cmp	r2, sl
 8010840:	bfa8      	it	ge
 8010842:	4652      	movge	r2, sl
 8010844:	2a00      	cmp	r2, #0
 8010846:	bfc2      	ittt	gt
 8010848:	1a9b      	subgt	r3, r3, r2
 801084a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801084e:	ebab 0b02 	subgt.w	fp, fp, r2
 8010852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010854:	2a00      	cmp	r2, #0
 8010856:	dd18      	ble.n	801088a <_strtod_l+0x732>
 8010858:	4631      	mov	r1, r6
 801085a:	4620      	mov	r0, r4
 801085c:	930f      	str	r3, [sp, #60]	; 0x3c
 801085e:	f002 ffa9 	bl	80137b4 <__pow5mult>
 8010862:	4606      	mov	r6, r0
 8010864:	2800      	cmp	r0, #0
 8010866:	f43f aeb5 	beq.w	80105d4 <_strtod_l+0x47c>
 801086a:	4601      	mov	r1, r0
 801086c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801086e:	4620      	mov	r0, r4
 8010870:	f002 fef6 	bl	8013660 <__multiply>
 8010874:	900e      	str	r0, [sp, #56]	; 0x38
 8010876:	2800      	cmp	r0, #0
 8010878:	f43f aeac 	beq.w	80105d4 <_strtod_l+0x47c>
 801087c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801087e:	4620      	mov	r0, r4
 8010880:	f002 fdd8 	bl	8013434 <_Bfree>
 8010884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010888:	9212      	str	r2, [sp, #72]	; 0x48
 801088a:	2b00      	cmp	r3, #0
 801088c:	f300 8093 	bgt.w	80109b6 <_strtod_l+0x85e>
 8010890:	9b06      	ldr	r3, [sp, #24]
 8010892:	2b00      	cmp	r3, #0
 8010894:	dd08      	ble.n	80108a8 <_strtod_l+0x750>
 8010896:	4639      	mov	r1, r7
 8010898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801089a:	4620      	mov	r0, r4
 801089c:	f002 ff8a 	bl	80137b4 <__pow5mult>
 80108a0:	4607      	mov	r7, r0
 80108a2:	2800      	cmp	r0, #0
 80108a4:	f43f ae96 	beq.w	80105d4 <_strtod_l+0x47c>
 80108a8:	f1ba 0f00 	cmp.w	sl, #0
 80108ac:	dd08      	ble.n	80108c0 <_strtod_l+0x768>
 80108ae:	4639      	mov	r1, r7
 80108b0:	4652      	mov	r2, sl
 80108b2:	4620      	mov	r0, r4
 80108b4:	f002 ffd8 	bl	8013868 <__lshift>
 80108b8:	4607      	mov	r7, r0
 80108ba:	2800      	cmp	r0, #0
 80108bc:	f43f ae8a 	beq.w	80105d4 <_strtod_l+0x47c>
 80108c0:	f1bb 0f00 	cmp.w	fp, #0
 80108c4:	dd08      	ble.n	80108d8 <_strtod_l+0x780>
 80108c6:	4631      	mov	r1, r6
 80108c8:	465a      	mov	r2, fp
 80108ca:	4620      	mov	r0, r4
 80108cc:	f002 ffcc 	bl	8013868 <__lshift>
 80108d0:	4606      	mov	r6, r0
 80108d2:	2800      	cmp	r0, #0
 80108d4:	f43f ae7e 	beq.w	80105d4 <_strtod_l+0x47c>
 80108d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80108da:	463a      	mov	r2, r7
 80108dc:	4620      	mov	r0, r4
 80108de:	f003 f84b 	bl	8013978 <__mdiff>
 80108e2:	4605      	mov	r5, r0
 80108e4:	2800      	cmp	r0, #0
 80108e6:	f43f ae75 	beq.w	80105d4 <_strtod_l+0x47c>
 80108ea:	2300      	movs	r3, #0
 80108ec:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80108f0:	60c3      	str	r3, [r0, #12]
 80108f2:	4631      	mov	r1, r6
 80108f4:	f003 f824 	bl	8013940 <__mcmp>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	da7f      	bge.n	80109fc <_strtod_l+0x8a4>
 80108fc:	ea5a 0a08 	orrs.w	sl, sl, r8
 8010900:	f040 80a5 	bne.w	8010a4e <_strtod_l+0x8f6>
 8010904:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010908:	2b00      	cmp	r3, #0
 801090a:	f040 80a0 	bne.w	8010a4e <_strtod_l+0x8f6>
 801090e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010912:	0d1b      	lsrs	r3, r3, #20
 8010914:	051b      	lsls	r3, r3, #20
 8010916:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801091a:	f240 8098 	bls.w	8010a4e <_strtod_l+0x8f6>
 801091e:	696b      	ldr	r3, [r5, #20]
 8010920:	b91b      	cbnz	r3, 801092a <_strtod_l+0x7d2>
 8010922:	692b      	ldr	r3, [r5, #16]
 8010924:	2b01      	cmp	r3, #1
 8010926:	f340 8092 	ble.w	8010a4e <_strtod_l+0x8f6>
 801092a:	4629      	mov	r1, r5
 801092c:	2201      	movs	r2, #1
 801092e:	4620      	mov	r0, r4
 8010930:	f002 ff9a 	bl	8013868 <__lshift>
 8010934:	4631      	mov	r1, r6
 8010936:	4605      	mov	r5, r0
 8010938:	f003 f802 	bl	8013940 <__mcmp>
 801093c:	2800      	cmp	r0, #0
 801093e:	f340 8086 	ble.w	8010a4e <_strtod_l+0x8f6>
 8010942:	9905      	ldr	r1, [sp, #20]
 8010944:	4a2c      	ldr	r2, [pc, #176]	; (80109f8 <_strtod_l+0x8a0>)
 8010946:	464b      	mov	r3, r9
 8010948:	2900      	cmp	r1, #0
 801094a:	f000 809f 	beq.w	8010a8c <_strtod_l+0x934>
 801094e:	ea02 0109 	and.w	r1, r2, r9
 8010952:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010956:	f300 8099 	bgt.w	8010a8c <_strtod_l+0x934>
 801095a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801095e:	f77f aea8 	ble.w	80106b2 <_strtod_l+0x55a>
 8010962:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80109e8 <_strtod_l+0x890>
 8010966:	ec49 8b16 	vmov	d6, r8, r9
 801096a:	4b23      	ldr	r3, [pc, #140]	; (80109f8 <_strtod_l+0x8a0>)
 801096c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010970:	ee17 2a90 	vmov	r2, s15
 8010974:	4013      	ands	r3, r2
 8010976:	ec59 8b17 	vmov	r8, r9, d7
 801097a:	2b00      	cmp	r3, #0
 801097c:	f47f ae34 	bne.w	80105e8 <_strtod_l+0x490>
 8010980:	2322      	movs	r3, #34	; 0x22
 8010982:	6023      	str	r3, [r4, #0]
 8010984:	e630      	b.n	80105e8 <_strtod_l+0x490>
 8010986:	f04f 31ff 	mov.w	r1, #4294967295
 801098a:	fa01 f202 	lsl.w	r2, r1, r2
 801098e:	ea02 0808 	and.w	r8, r2, r8
 8010992:	e6da      	b.n	801074a <_strtod_l+0x5f2>
 8010994:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8010998:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801099c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80109a0:	33e2      	adds	r3, #226	; 0xe2
 80109a2:	fa00 f303 	lsl.w	r3, r0, r3
 80109a6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80109aa:	e73f      	b.n	801082c <_strtod_l+0x6d4>
 80109ac:	2200      	movs	r2, #0
 80109ae:	2301      	movs	r3, #1
 80109b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80109b4:	e73a      	b.n	801082c <_strtod_l+0x6d4>
 80109b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80109b8:	461a      	mov	r2, r3
 80109ba:	4620      	mov	r0, r4
 80109bc:	f002 ff54 	bl	8013868 <__lshift>
 80109c0:	9012      	str	r0, [sp, #72]	; 0x48
 80109c2:	2800      	cmp	r0, #0
 80109c4:	f47f af64 	bne.w	8010890 <_strtod_l+0x738>
 80109c8:	e604      	b.n	80105d4 <_strtod_l+0x47c>
 80109ca:	bf00      	nop
 80109cc:	f3af 8000 	nop.w
 80109d0:	94a03595 	.word	0x94a03595
 80109d4:	3fcfffff 	.word	0x3fcfffff
 80109d8:	94a03595 	.word	0x94a03595
 80109dc:	3fdfffff 	.word	0x3fdfffff
 80109e0:	35afe535 	.word	0x35afe535
 80109e4:	3fe00000 	.word	0x3fe00000
 80109e8:	00000000 	.word	0x00000000
 80109ec:	39500000 	.word	0x39500000
 80109f0:	08015e10 	.word	0x08015e10
 80109f4:	fffffc02 	.word	0xfffffc02
 80109f8:	7ff00000 	.word	0x7ff00000
 80109fc:	46cb      	mov	fp, r9
 80109fe:	d15f      	bne.n	8010ac0 <_strtod_l+0x968>
 8010a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010a04:	f1ba 0f00 	cmp.w	sl, #0
 8010a08:	d02a      	beq.n	8010a60 <_strtod_l+0x908>
 8010a0a:	4aa7      	ldr	r2, [pc, #668]	; (8010ca8 <_strtod_l+0xb50>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d12b      	bne.n	8010a68 <_strtod_l+0x910>
 8010a10:	9b05      	ldr	r3, [sp, #20]
 8010a12:	4642      	mov	r2, r8
 8010a14:	b1fb      	cbz	r3, 8010a56 <_strtod_l+0x8fe>
 8010a16:	4ba5      	ldr	r3, [pc, #660]	; (8010cac <_strtod_l+0xb54>)
 8010a18:	ea09 0303 	and.w	r3, r9, r3
 8010a1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010a20:	f04f 31ff 	mov.w	r1, #4294967295
 8010a24:	d81a      	bhi.n	8010a5c <_strtod_l+0x904>
 8010a26:	0d1b      	lsrs	r3, r3, #20
 8010a28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d119      	bne.n	8010a68 <_strtod_l+0x910>
 8010a34:	4b9e      	ldr	r3, [pc, #632]	; (8010cb0 <_strtod_l+0xb58>)
 8010a36:	459b      	cmp	fp, r3
 8010a38:	d102      	bne.n	8010a40 <_strtod_l+0x8e8>
 8010a3a:	3201      	adds	r2, #1
 8010a3c:	f43f adca 	beq.w	80105d4 <_strtod_l+0x47c>
 8010a40:	4b9a      	ldr	r3, [pc, #616]	; (8010cac <_strtod_l+0xb54>)
 8010a42:	ea0b 0303 	and.w	r3, fp, r3
 8010a46:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010a4a:	f04f 0800 	mov.w	r8, #0
 8010a4e:	9b05      	ldr	r3, [sp, #20]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d186      	bne.n	8010962 <_strtod_l+0x80a>
 8010a54:	e5c8      	b.n	80105e8 <_strtod_l+0x490>
 8010a56:	f04f 33ff 	mov.w	r3, #4294967295
 8010a5a:	e7e9      	b.n	8010a30 <_strtod_l+0x8d8>
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	e7e7      	b.n	8010a30 <_strtod_l+0x8d8>
 8010a60:	ea53 0308 	orrs.w	r3, r3, r8
 8010a64:	f43f af6d 	beq.w	8010942 <_strtod_l+0x7ea>
 8010a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a6a:	b1cb      	cbz	r3, 8010aa0 <_strtod_l+0x948>
 8010a6c:	ea13 0f0b 	tst.w	r3, fp
 8010a70:	d0ed      	beq.n	8010a4e <_strtod_l+0x8f6>
 8010a72:	9a05      	ldr	r2, [sp, #20]
 8010a74:	4640      	mov	r0, r8
 8010a76:	4649      	mov	r1, r9
 8010a78:	f1ba 0f00 	cmp.w	sl, #0
 8010a7c:	d014      	beq.n	8010aa8 <_strtod_l+0x950>
 8010a7e:	f7ff fb50 	bl	8010122 <sulp>
 8010a82:	ee38 7b00 	vadd.f64	d7, d8, d0
 8010a86:	ec59 8b17 	vmov	r8, r9, d7
 8010a8a:	e7e0      	b.n	8010a4e <_strtod_l+0x8f6>
 8010a8c:	4013      	ands	r3, r2
 8010a8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010a92:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010a96:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010a9a:	f04f 38ff 	mov.w	r8, #4294967295
 8010a9e:	e7d6      	b.n	8010a4e <_strtod_l+0x8f6>
 8010aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010aa2:	ea13 0f08 	tst.w	r3, r8
 8010aa6:	e7e3      	b.n	8010a70 <_strtod_l+0x918>
 8010aa8:	f7ff fb3b 	bl	8010122 <sulp>
 8010aac:	ee38 0b40 	vsub.f64	d0, d8, d0
 8010ab0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab8:	ec59 8b10 	vmov	r8, r9, d0
 8010abc:	d1c7      	bne.n	8010a4e <_strtod_l+0x8f6>
 8010abe:	e5f8      	b.n	80106b2 <_strtod_l+0x55a>
 8010ac0:	4631      	mov	r1, r6
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	f003 f8ac 	bl	8013c20 <__ratio>
 8010ac8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010acc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad4:	d85f      	bhi.n	8010b96 <_strtod_l+0xa3e>
 8010ad6:	f1ba 0f00 	cmp.w	sl, #0
 8010ada:	d166      	bne.n	8010baa <_strtod_l+0xa52>
 8010adc:	f1b8 0f00 	cmp.w	r8, #0
 8010ae0:	d14d      	bne.n	8010b7e <_strtod_l+0xa26>
 8010ae2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ae6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d162      	bne.n	8010bb4 <_strtod_l+0xa5c>
 8010aee:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8010af2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8010af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afa:	d401      	bmi.n	8010b00 <_strtod_l+0x9a8>
 8010afc:	ee20 db0d 	vmul.f64	d13, d0, d13
 8010b00:	eeb1 cb4d 	vneg.f64	d12, d13
 8010b04:	4869      	ldr	r0, [pc, #420]	; (8010cac <_strtod_l+0xb54>)
 8010b06:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8010cb8 <_strtod_l+0xb60>
 8010b0a:	ea0b 0100 	and.w	r1, fp, r0
 8010b0e:	4561      	cmp	r1, ip
 8010b10:	ec53 2b1c 	vmov	r2, r3, d12
 8010b14:	d17a      	bne.n	8010c0c <_strtod_l+0xab4>
 8010b16:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8010b1a:	ec49 8b10 	vmov	d0, r8, r9
 8010b1e:	910a      	str	r1, [sp, #40]	; 0x28
 8010b20:	f002 ffb4 	bl	8013a8c <__ulp>
 8010b24:	ec49 8b1e 	vmov	d14, r8, r9
 8010b28:	4860      	ldr	r0, [pc, #384]	; (8010cac <_strtod_l+0xb54>)
 8010b2a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8010b2e:	ee1e 3a90 	vmov	r3, s29
 8010b32:	4a60      	ldr	r2, [pc, #384]	; (8010cb4 <_strtod_l+0xb5c>)
 8010b34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010b36:	4018      	ands	r0, r3
 8010b38:	4290      	cmp	r0, r2
 8010b3a:	ec59 8b1e 	vmov	r8, r9, d14
 8010b3e:	d93c      	bls.n	8010bba <_strtod_l+0xa62>
 8010b40:	ee18 2a90 	vmov	r2, s17
 8010b44:	4b5a      	ldr	r3, [pc, #360]	; (8010cb0 <_strtod_l+0xb58>)
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d104      	bne.n	8010b54 <_strtod_l+0x9fc>
 8010b4a:	ee18 3a10 	vmov	r3, s16
 8010b4e:	3301      	adds	r3, #1
 8010b50:	f43f ad40 	beq.w	80105d4 <_strtod_l+0x47c>
 8010b54:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8010cb0 <_strtod_l+0xb58>
 8010b58:	f04f 38ff 	mov.w	r8, #4294967295
 8010b5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f002 fc68 	bl	8013434 <_Bfree>
 8010b64:	4639      	mov	r1, r7
 8010b66:	4620      	mov	r0, r4
 8010b68:	f002 fc64 	bl	8013434 <_Bfree>
 8010b6c:	4631      	mov	r1, r6
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f002 fc60 	bl	8013434 <_Bfree>
 8010b74:	4629      	mov	r1, r5
 8010b76:	4620      	mov	r0, r4
 8010b78:	f002 fc5c 	bl	8013434 <_Bfree>
 8010b7c:	e609      	b.n	8010792 <_strtod_l+0x63a>
 8010b7e:	f1b8 0f01 	cmp.w	r8, #1
 8010b82:	d103      	bne.n	8010b8c <_strtod_l+0xa34>
 8010b84:	f1b9 0f00 	cmp.w	r9, #0
 8010b88:	f43f ad93 	beq.w	80106b2 <_strtod_l+0x55a>
 8010b8c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8010b90:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8010b94:	e7b6      	b.n	8010b04 <_strtod_l+0x9ac>
 8010b96:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8010b9a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8010b9e:	f1ba 0f00 	cmp.w	sl, #0
 8010ba2:	d0ad      	beq.n	8010b00 <_strtod_l+0x9a8>
 8010ba4:	eeb0 cb4d 	vmov.f64	d12, d13
 8010ba8:	e7ac      	b.n	8010b04 <_strtod_l+0x9ac>
 8010baa:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8010bae:	eeb0 db4c 	vmov.f64	d13, d12
 8010bb2:	e7a7      	b.n	8010b04 <_strtod_l+0x9ac>
 8010bb4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8010bb8:	e7a4      	b.n	8010b04 <_strtod_l+0x9ac>
 8010bba:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010bbe:	9b05      	ldr	r3, [sp, #20]
 8010bc0:	46cb      	mov	fp, r9
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1ca      	bne.n	8010b5c <_strtod_l+0xa04>
 8010bc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010bca:	0d1b      	lsrs	r3, r3, #20
 8010bcc:	051b      	lsls	r3, r3, #20
 8010bce:	4299      	cmp	r1, r3
 8010bd0:	d1c4      	bne.n	8010b5c <_strtod_l+0xa04>
 8010bd2:	ec51 0b1d 	vmov	r0, r1, d13
 8010bd6:	f7ef fdbf 	bl	8000758 <__aeabi_d2lz>
 8010bda:	f7ef fd77 	bl	80006cc <__aeabi_l2d>
 8010bde:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8010be2:	ec41 0b17 	vmov	d7, r0, r1
 8010be6:	ea4b 0b08 	orr.w	fp, fp, r8
 8010bea:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8010bee:	ee3d db47 	vsub.f64	d13, d13, d7
 8010bf2:	d03c      	beq.n	8010c6e <_strtod_l+0xb16>
 8010bf4:	eeb4 dbca 	vcmpe.f64	d13, d10
 8010bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfc:	f53f acf4 	bmi.w	80105e8 <_strtod_l+0x490>
 8010c00:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8010c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c08:	dda8      	ble.n	8010b5c <_strtod_l+0xa04>
 8010c0a:	e4ed      	b.n	80105e8 <_strtod_l+0x490>
 8010c0c:	9805      	ldr	r0, [sp, #20]
 8010c0e:	b1f0      	cbz	r0, 8010c4e <_strtod_l+0xaf6>
 8010c10:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8010c14:	d81b      	bhi.n	8010c4e <_strtod_l+0xaf6>
 8010c16:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8010ca0 <_strtod_l+0xb48>
 8010c1a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8010c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c22:	d811      	bhi.n	8010c48 <_strtod_l+0xaf0>
 8010c24:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8010c28:	ee1d 3a10 	vmov	r3, s26
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	bf38      	it	cc
 8010c30:	2301      	movcc	r3, #1
 8010c32:	ee0d 3a10 	vmov	s26, r3
 8010c36:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8010c3a:	f1ba 0f00 	cmp.w	sl, #0
 8010c3e:	d113      	bne.n	8010c68 <_strtod_l+0xb10>
 8010c40:	eeb1 7b4d 	vneg.f64	d7, d13
 8010c44:	ec53 2b17 	vmov	r2, r3, d7
 8010c48:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8010c4c:	1a43      	subs	r3, r0, r1
 8010c4e:	eeb0 0b48 	vmov.f64	d0, d8
 8010c52:	ec43 2b1c 	vmov	d12, r2, r3
 8010c56:	910a      	str	r1, [sp, #40]	; 0x28
 8010c58:	f002 ff18 	bl	8013a8c <__ulp>
 8010c5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010c5e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8010c62:	ec59 8b18 	vmov	r8, r9, d8
 8010c66:	e7aa      	b.n	8010bbe <_strtod_l+0xa66>
 8010c68:	eeb0 7b4d 	vmov.f64	d7, d13
 8010c6c:	e7ea      	b.n	8010c44 <_strtod_l+0xaec>
 8010c6e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8010c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c76:	f57f af71 	bpl.w	8010b5c <_strtod_l+0xa04>
 8010c7a:	e4b5      	b.n	80105e8 <_strtod_l+0x490>
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	9308      	str	r3, [sp, #32]
 8010c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c84:	6013      	str	r3, [r2, #0]
 8010c86:	f7ff baa6 	b.w	80101d6 <_strtod_l+0x7e>
 8010c8a:	2a65      	cmp	r2, #101	; 0x65
 8010c8c:	f43f aba2 	beq.w	80103d4 <_strtod_l+0x27c>
 8010c90:	2a45      	cmp	r2, #69	; 0x45
 8010c92:	f43f ab9f 	beq.w	80103d4 <_strtod_l+0x27c>
 8010c96:	2101      	movs	r1, #1
 8010c98:	f7ff bbd8 	b.w	801044c <_strtod_l+0x2f4>
 8010c9c:	f3af 8000 	nop.w
 8010ca0:	ffc00000 	.word	0xffc00000
 8010ca4:	41dfffff 	.word	0x41dfffff
 8010ca8:	000fffff 	.word	0x000fffff
 8010cac:	7ff00000 	.word	0x7ff00000
 8010cb0:	7fefffff 	.word	0x7fefffff
 8010cb4:	7c9fffff 	.word	0x7c9fffff
 8010cb8:	7fe00000 	.word	0x7fe00000

08010cbc <strtod>:
 8010cbc:	460a      	mov	r2, r1
 8010cbe:	4601      	mov	r1, r0
 8010cc0:	4802      	ldr	r0, [pc, #8]	; (8010ccc <strtod+0x10>)
 8010cc2:	4b03      	ldr	r3, [pc, #12]	; (8010cd0 <strtod+0x14>)
 8010cc4:	6800      	ldr	r0, [r0, #0]
 8010cc6:	f7ff ba47 	b.w	8010158 <_strtod_l>
 8010cca:	bf00      	nop
 8010ccc:	24000238 	.word	0x24000238
 8010cd0:	24000080 	.word	0x24000080

08010cd4 <_strtol_l.constprop.0>:
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cda:	d001      	beq.n	8010ce0 <_strtol_l.constprop.0+0xc>
 8010cdc:	2b24      	cmp	r3, #36	; 0x24
 8010cde:	d906      	bls.n	8010cee <_strtol_l.constprop.0+0x1a>
 8010ce0:	f001 f89e 	bl	8011e20 <__errno>
 8010ce4:	2316      	movs	r3, #22
 8010ce6:	6003      	str	r3, [r0, #0]
 8010ce8:	2000      	movs	r0, #0
 8010cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010dd4 <_strtol_l.constprop.0+0x100>
 8010cf2:	460d      	mov	r5, r1
 8010cf4:	462e      	mov	r6, r5
 8010cf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010cfa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010cfe:	f017 0708 	ands.w	r7, r7, #8
 8010d02:	d1f7      	bne.n	8010cf4 <_strtol_l.constprop.0+0x20>
 8010d04:	2c2d      	cmp	r4, #45	; 0x2d
 8010d06:	d132      	bne.n	8010d6e <_strtol_l.constprop.0+0x9a>
 8010d08:	782c      	ldrb	r4, [r5, #0]
 8010d0a:	2701      	movs	r7, #1
 8010d0c:	1cb5      	adds	r5, r6, #2
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d05b      	beq.n	8010dca <_strtol_l.constprop.0+0xf6>
 8010d12:	2b10      	cmp	r3, #16
 8010d14:	d109      	bne.n	8010d2a <_strtol_l.constprop.0+0x56>
 8010d16:	2c30      	cmp	r4, #48	; 0x30
 8010d18:	d107      	bne.n	8010d2a <_strtol_l.constprop.0+0x56>
 8010d1a:	782c      	ldrb	r4, [r5, #0]
 8010d1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010d20:	2c58      	cmp	r4, #88	; 0x58
 8010d22:	d14d      	bne.n	8010dc0 <_strtol_l.constprop.0+0xec>
 8010d24:	786c      	ldrb	r4, [r5, #1]
 8010d26:	2310      	movs	r3, #16
 8010d28:	3502      	adds	r5, #2
 8010d2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010d2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d32:	f04f 0e00 	mov.w	lr, #0
 8010d36:	fbb8 f9f3 	udiv	r9, r8, r3
 8010d3a:	4676      	mov	r6, lr
 8010d3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010d40:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010d44:	f1bc 0f09 	cmp.w	ip, #9
 8010d48:	d816      	bhi.n	8010d78 <_strtol_l.constprop.0+0xa4>
 8010d4a:	4664      	mov	r4, ip
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	dd24      	ble.n	8010d9a <_strtol_l.constprop.0+0xc6>
 8010d50:	f1be 3fff 	cmp.w	lr, #4294967295
 8010d54:	d008      	beq.n	8010d68 <_strtol_l.constprop.0+0x94>
 8010d56:	45b1      	cmp	r9, r6
 8010d58:	d31c      	bcc.n	8010d94 <_strtol_l.constprop.0+0xc0>
 8010d5a:	d101      	bne.n	8010d60 <_strtol_l.constprop.0+0x8c>
 8010d5c:	45a2      	cmp	sl, r4
 8010d5e:	db19      	blt.n	8010d94 <_strtol_l.constprop.0+0xc0>
 8010d60:	fb06 4603 	mla	r6, r6, r3, r4
 8010d64:	f04f 0e01 	mov.w	lr, #1
 8010d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d6c:	e7e8      	b.n	8010d40 <_strtol_l.constprop.0+0x6c>
 8010d6e:	2c2b      	cmp	r4, #43	; 0x2b
 8010d70:	bf04      	itt	eq
 8010d72:	782c      	ldrbeq	r4, [r5, #0]
 8010d74:	1cb5      	addeq	r5, r6, #2
 8010d76:	e7ca      	b.n	8010d0e <_strtol_l.constprop.0+0x3a>
 8010d78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010d7c:	f1bc 0f19 	cmp.w	ip, #25
 8010d80:	d801      	bhi.n	8010d86 <_strtol_l.constprop.0+0xb2>
 8010d82:	3c37      	subs	r4, #55	; 0x37
 8010d84:	e7e2      	b.n	8010d4c <_strtol_l.constprop.0+0x78>
 8010d86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010d8a:	f1bc 0f19 	cmp.w	ip, #25
 8010d8e:	d804      	bhi.n	8010d9a <_strtol_l.constprop.0+0xc6>
 8010d90:	3c57      	subs	r4, #87	; 0x57
 8010d92:	e7db      	b.n	8010d4c <_strtol_l.constprop.0+0x78>
 8010d94:	f04f 3eff 	mov.w	lr, #4294967295
 8010d98:	e7e6      	b.n	8010d68 <_strtol_l.constprop.0+0x94>
 8010d9a:	f1be 3fff 	cmp.w	lr, #4294967295
 8010d9e:	d105      	bne.n	8010dac <_strtol_l.constprop.0+0xd8>
 8010da0:	2322      	movs	r3, #34	; 0x22
 8010da2:	6003      	str	r3, [r0, #0]
 8010da4:	4646      	mov	r6, r8
 8010da6:	b942      	cbnz	r2, 8010dba <_strtol_l.constprop.0+0xe6>
 8010da8:	4630      	mov	r0, r6
 8010daa:	e79e      	b.n	8010cea <_strtol_l.constprop.0+0x16>
 8010dac:	b107      	cbz	r7, 8010db0 <_strtol_l.constprop.0+0xdc>
 8010dae:	4276      	negs	r6, r6
 8010db0:	2a00      	cmp	r2, #0
 8010db2:	d0f9      	beq.n	8010da8 <_strtol_l.constprop.0+0xd4>
 8010db4:	f1be 0f00 	cmp.w	lr, #0
 8010db8:	d000      	beq.n	8010dbc <_strtol_l.constprop.0+0xe8>
 8010dba:	1e69      	subs	r1, r5, #1
 8010dbc:	6011      	str	r1, [r2, #0]
 8010dbe:	e7f3      	b.n	8010da8 <_strtol_l.constprop.0+0xd4>
 8010dc0:	2430      	movs	r4, #48	; 0x30
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1b1      	bne.n	8010d2a <_strtol_l.constprop.0+0x56>
 8010dc6:	2308      	movs	r3, #8
 8010dc8:	e7af      	b.n	8010d2a <_strtol_l.constprop.0+0x56>
 8010dca:	2c30      	cmp	r4, #48	; 0x30
 8010dcc:	d0a5      	beq.n	8010d1a <_strtol_l.constprop.0+0x46>
 8010dce:	230a      	movs	r3, #10
 8010dd0:	e7ab      	b.n	8010d2a <_strtol_l.constprop.0+0x56>
 8010dd2:	bf00      	nop
 8010dd4:	08015e39 	.word	0x08015e39

08010dd8 <_strtol_r>:
 8010dd8:	f7ff bf7c 	b.w	8010cd4 <_strtol_l.constprop.0>

08010ddc <strtol>:
 8010ddc:	4613      	mov	r3, r2
 8010dde:	460a      	mov	r2, r1
 8010de0:	4601      	mov	r1, r0
 8010de2:	4802      	ldr	r0, [pc, #8]	; (8010dec <strtol+0x10>)
 8010de4:	6800      	ldr	r0, [r0, #0]
 8010de6:	f7ff bf75 	b.w	8010cd4 <_strtol_l.constprop.0>
 8010dea:	bf00      	nop
 8010dec:	24000238 	.word	0x24000238

08010df0 <__cvt>:
 8010df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010df2:	ed2d 8b02 	vpush	{d8}
 8010df6:	eeb0 8b40 	vmov.f64	d8, d0
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	4617      	mov	r7, r2
 8010dfe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010e00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010e02:	ee18 2a90 	vmov	r2, s17
 8010e06:	f025 0520 	bic.w	r5, r5, #32
 8010e0a:	2a00      	cmp	r2, #0
 8010e0c:	bfb6      	itet	lt
 8010e0e:	222d      	movlt	r2, #45	; 0x2d
 8010e10:	2200      	movge	r2, #0
 8010e12:	eeb1 8b40 	vneglt.f64	d8, d0
 8010e16:	2d46      	cmp	r5, #70	; 0x46
 8010e18:	460c      	mov	r4, r1
 8010e1a:	701a      	strb	r2, [r3, #0]
 8010e1c:	d004      	beq.n	8010e28 <__cvt+0x38>
 8010e1e:	2d45      	cmp	r5, #69	; 0x45
 8010e20:	d100      	bne.n	8010e24 <__cvt+0x34>
 8010e22:	3401      	adds	r4, #1
 8010e24:	2102      	movs	r1, #2
 8010e26:	e000      	b.n	8010e2a <__cvt+0x3a>
 8010e28:	2103      	movs	r1, #3
 8010e2a:	ab03      	add	r3, sp, #12
 8010e2c:	9301      	str	r3, [sp, #4]
 8010e2e:	ab02      	add	r3, sp, #8
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	4622      	mov	r2, r4
 8010e34:	4633      	mov	r3, r6
 8010e36:	eeb0 0b48 	vmov.f64	d0, d8
 8010e3a:	f001 f8e5 	bl	8012008 <_dtoa_r>
 8010e3e:	2d47      	cmp	r5, #71	; 0x47
 8010e40:	d101      	bne.n	8010e46 <__cvt+0x56>
 8010e42:	07fb      	lsls	r3, r7, #31
 8010e44:	d51a      	bpl.n	8010e7c <__cvt+0x8c>
 8010e46:	2d46      	cmp	r5, #70	; 0x46
 8010e48:	eb00 0204 	add.w	r2, r0, r4
 8010e4c:	d10c      	bne.n	8010e68 <__cvt+0x78>
 8010e4e:	7803      	ldrb	r3, [r0, #0]
 8010e50:	2b30      	cmp	r3, #48	; 0x30
 8010e52:	d107      	bne.n	8010e64 <__cvt+0x74>
 8010e54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5c:	bf1c      	itt	ne
 8010e5e:	f1c4 0401 	rsbne	r4, r4, #1
 8010e62:	6034      	strne	r4, [r6, #0]
 8010e64:	6833      	ldr	r3, [r6, #0]
 8010e66:	441a      	add	r2, r3
 8010e68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e70:	bf08      	it	eq
 8010e72:	9203      	streq	r2, [sp, #12]
 8010e74:	2130      	movs	r1, #48	; 0x30
 8010e76:	9b03      	ldr	r3, [sp, #12]
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d307      	bcc.n	8010e8c <__cvt+0x9c>
 8010e7c:	9b03      	ldr	r3, [sp, #12]
 8010e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e80:	1a1b      	subs	r3, r3, r0
 8010e82:	6013      	str	r3, [r2, #0]
 8010e84:	b005      	add	sp, #20
 8010e86:	ecbd 8b02 	vpop	{d8}
 8010e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e8c:	1c5c      	adds	r4, r3, #1
 8010e8e:	9403      	str	r4, [sp, #12]
 8010e90:	7019      	strb	r1, [r3, #0]
 8010e92:	e7f0      	b.n	8010e76 <__cvt+0x86>

08010e94 <__exponent>:
 8010e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e96:	4603      	mov	r3, r0
 8010e98:	2900      	cmp	r1, #0
 8010e9a:	bfb8      	it	lt
 8010e9c:	4249      	neglt	r1, r1
 8010e9e:	f803 2b02 	strb.w	r2, [r3], #2
 8010ea2:	bfb4      	ite	lt
 8010ea4:	222d      	movlt	r2, #45	; 0x2d
 8010ea6:	222b      	movge	r2, #43	; 0x2b
 8010ea8:	2909      	cmp	r1, #9
 8010eaa:	7042      	strb	r2, [r0, #1]
 8010eac:	dd2a      	ble.n	8010f04 <__exponent+0x70>
 8010eae:	f10d 0207 	add.w	r2, sp, #7
 8010eb2:	4617      	mov	r7, r2
 8010eb4:	260a      	movs	r6, #10
 8010eb6:	4694      	mov	ip, r2
 8010eb8:	fb91 f5f6 	sdiv	r5, r1, r6
 8010ebc:	fb06 1415 	mls	r4, r6, r5, r1
 8010ec0:	3430      	adds	r4, #48	; 0x30
 8010ec2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	2c63      	cmp	r4, #99	; 0x63
 8010eca:	f102 32ff 	add.w	r2, r2, #4294967295
 8010ece:	4629      	mov	r1, r5
 8010ed0:	dcf1      	bgt.n	8010eb6 <__exponent+0x22>
 8010ed2:	3130      	adds	r1, #48	; 0x30
 8010ed4:	f1ac 0402 	sub.w	r4, ip, #2
 8010ed8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010edc:	1c41      	adds	r1, r0, #1
 8010ede:	4622      	mov	r2, r4
 8010ee0:	42ba      	cmp	r2, r7
 8010ee2:	d30a      	bcc.n	8010efa <__exponent+0x66>
 8010ee4:	f10d 0209 	add.w	r2, sp, #9
 8010ee8:	eba2 020c 	sub.w	r2, r2, ip
 8010eec:	42bc      	cmp	r4, r7
 8010eee:	bf88      	it	hi
 8010ef0:	2200      	movhi	r2, #0
 8010ef2:	4413      	add	r3, r2
 8010ef4:	1a18      	subs	r0, r3, r0
 8010ef6:	b003      	add	sp, #12
 8010ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010efa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010efe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010f02:	e7ed      	b.n	8010ee0 <__exponent+0x4c>
 8010f04:	2330      	movs	r3, #48	; 0x30
 8010f06:	3130      	adds	r1, #48	; 0x30
 8010f08:	7083      	strb	r3, [r0, #2]
 8010f0a:	70c1      	strb	r1, [r0, #3]
 8010f0c:	1d03      	adds	r3, r0, #4
 8010f0e:	e7f1      	b.n	8010ef4 <__exponent+0x60>

08010f10 <_printf_float>:
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	b08b      	sub	sp, #44	; 0x2c
 8010f16:	460c      	mov	r4, r1
 8010f18:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010f1c:	4616      	mov	r6, r2
 8010f1e:	461f      	mov	r7, r3
 8010f20:	4605      	mov	r5, r0
 8010f22:	f000 fedd 	bl	8011ce0 <_localeconv_r>
 8010f26:	f8d0 b000 	ldr.w	fp, [r0]
 8010f2a:	4658      	mov	r0, fp
 8010f2c:	f7ef fa38 	bl	80003a0 <strlen>
 8010f30:	2300      	movs	r3, #0
 8010f32:	9308      	str	r3, [sp, #32]
 8010f34:	f8d8 3000 	ldr.w	r3, [r8]
 8010f38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010f3c:	6822      	ldr	r2, [r4, #0]
 8010f3e:	3307      	adds	r3, #7
 8010f40:	f023 0307 	bic.w	r3, r3, #7
 8010f44:	f103 0108 	add.w	r1, r3, #8
 8010f48:	f8c8 1000 	str.w	r1, [r8]
 8010f4c:	ed93 0b00 	vldr	d0, [r3]
 8010f50:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80111b0 <_printf_float+0x2a0>
 8010f54:	eeb0 7bc0 	vabs.f64	d7, d0
 8010f58:	eeb4 7b46 	vcmp.f64	d7, d6
 8010f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f60:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8010f64:	4682      	mov	sl, r0
 8010f66:	dd24      	ble.n	8010fb2 <_printf_float+0xa2>
 8010f68:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f70:	d502      	bpl.n	8010f78 <_printf_float+0x68>
 8010f72:	232d      	movs	r3, #45	; 0x2d
 8010f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f78:	498f      	ldr	r1, [pc, #572]	; (80111b8 <_printf_float+0x2a8>)
 8010f7a:	4b90      	ldr	r3, [pc, #576]	; (80111bc <_printf_float+0x2ac>)
 8010f7c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010f80:	bf94      	ite	ls
 8010f82:	4688      	movls	r8, r1
 8010f84:	4698      	movhi	r8, r3
 8010f86:	2303      	movs	r3, #3
 8010f88:	6123      	str	r3, [r4, #16]
 8010f8a:	f022 0204 	bic.w	r2, r2, #4
 8010f8e:	2300      	movs	r3, #0
 8010f90:	6022      	str	r2, [r4, #0]
 8010f92:	9304      	str	r3, [sp, #16]
 8010f94:	9700      	str	r7, [sp, #0]
 8010f96:	4633      	mov	r3, r6
 8010f98:	aa09      	add	r2, sp, #36	; 0x24
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f000 f9d1 	bl	8011344 <_printf_common>
 8010fa2:	3001      	adds	r0, #1
 8010fa4:	f040 808a 	bne.w	80110bc <_printf_float+0x1ac>
 8010fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fac:	b00b      	add	sp, #44	; 0x2c
 8010fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb2:	eeb4 0b40 	vcmp.f64	d0, d0
 8010fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fba:	d709      	bvc.n	8010fd0 <_printf_float+0xc0>
 8010fbc:	ee10 3a90 	vmov	r3, s1
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	bfbc      	itt	lt
 8010fc4:	232d      	movlt	r3, #45	; 0x2d
 8010fc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010fca:	497d      	ldr	r1, [pc, #500]	; (80111c0 <_printf_float+0x2b0>)
 8010fcc:	4b7d      	ldr	r3, [pc, #500]	; (80111c4 <_printf_float+0x2b4>)
 8010fce:	e7d5      	b.n	8010f7c <_printf_float+0x6c>
 8010fd0:	6863      	ldr	r3, [r4, #4]
 8010fd2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010fd6:	9104      	str	r1, [sp, #16]
 8010fd8:	1c59      	adds	r1, r3, #1
 8010fda:	d13c      	bne.n	8011056 <_printf_float+0x146>
 8010fdc:	2306      	movs	r3, #6
 8010fde:	6063      	str	r3, [r4, #4]
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	9303      	str	r3, [sp, #12]
 8010fe4:	ab08      	add	r3, sp, #32
 8010fe6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010fea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010fee:	ab07      	add	r3, sp, #28
 8010ff0:	6861      	ldr	r1, [r4, #4]
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	6022      	str	r2, [r4, #0]
 8010ff6:	f10d 031b 	add.w	r3, sp, #27
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	f7ff fef8 	bl	8010df0 <__cvt>
 8011000:	9b04      	ldr	r3, [sp, #16]
 8011002:	9907      	ldr	r1, [sp, #28]
 8011004:	2b47      	cmp	r3, #71	; 0x47
 8011006:	4680      	mov	r8, r0
 8011008:	d108      	bne.n	801101c <_printf_float+0x10c>
 801100a:	1cc8      	adds	r0, r1, #3
 801100c:	db02      	blt.n	8011014 <_printf_float+0x104>
 801100e:	6863      	ldr	r3, [r4, #4]
 8011010:	4299      	cmp	r1, r3
 8011012:	dd41      	ble.n	8011098 <_printf_float+0x188>
 8011014:	f1a9 0902 	sub.w	r9, r9, #2
 8011018:	fa5f f989 	uxtb.w	r9, r9
 801101c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011020:	d820      	bhi.n	8011064 <_printf_float+0x154>
 8011022:	3901      	subs	r1, #1
 8011024:	464a      	mov	r2, r9
 8011026:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801102a:	9107      	str	r1, [sp, #28]
 801102c:	f7ff ff32 	bl	8010e94 <__exponent>
 8011030:	9a08      	ldr	r2, [sp, #32]
 8011032:	9004      	str	r0, [sp, #16]
 8011034:	1813      	adds	r3, r2, r0
 8011036:	2a01      	cmp	r2, #1
 8011038:	6123      	str	r3, [r4, #16]
 801103a:	dc02      	bgt.n	8011042 <_printf_float+0x132>
 801103c:	6822      	ldr	r2, [r4, #0]
 801103e:	07d2      	lsls	r2, r2, #31
 8011040:	d501      	bpl.n	8011046 <_printf_float+0x136>
 8011042:	3301      	adds	r3, #1
 8011044:	6123      	str	r3, [r4, #16]
 8011046:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d0a2      	beq.n	8010f94 <_printf_float+0x84>
 801104e:	232d      	movs	r3, #45	; 0x2d
 8011050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011054:	e79e      	b.n	8010f94 <_printf_float+0x84>
 8011056:	9904      	ldr	r1, [sp, #16]
 8011058:	2947      	cmp	r1, #71	; 0x47
 801105a:	d1c1      	bne.n	8010fe0 <_printf_float+0xd0>
 801105c:	2b00      	cmp	r3, #0
 801105e:	d1bf      	bne.n	8010fe0 <_printf_float+0xd0>
 8011060:	2301      	movs	r3, #1
 8011062:	e7bc      	b.n	8010fde <_printf_float+0xce>
 8011064:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011068:	d118      	bne.n	801109c <_printf_float+0x18c>
 801106a:	2900      	cmp	r1, #0
 801106c:	6863      	ldr	r3, [r4, #4]
 801106e:	dd0b      	ble.n	8011088 <_printf_float+0x178>
 8011070:	6121      	str	r1, [r4, #16]
 8011072:	b913      	cbnz	r3, 801107a <_printf_float+0x16a>
 8011074:	6822      	ldr	r2, [r4, #0]
 8011076:	07d0      	lsls	r0, r2, #31
 8011078:	d502      	bpl.n	8011080 <_printf_float+0x170>
 801107a:	3301      	adds	r3, #1
 801107c:	440b      	add	r3, r1
 801107e:	6123      	str	r3, [r4, #16]
 8011080:	2300      	movs	r3, #0
 8011082:	65a1      	str	r1, [r4, #88]	; 0x58
 8011084:	9304      	str	r3, [sp, #16]
 8011086:	e7de      	b.n	8011046 <_printf_float+0x136>
 8011088:	b913      	cbnz	r3, 8011090 <_printf_float+0x180>
 801108a:	6822      	ldr	r2, [r4, #0]
 801108c:	07d2      	lsls	r2, r2, #31
 801108e:	d501      	bpl.n	8011094 <_printf_float+0x184>
 8011090:	3302      	adds	r3, #2
 8011092:	e7f4      	b.n	801107e <_printf_float+0x16e>
 8011094:	2301      	movs	r3, #1
 8011096:	e7f2      	b.n	801107e <_printf_float+0x16e>
 8011098:	f04f 0967 	mov.w	r9, #103	; 0x67
 801109c:	9b08      	ldr	r3, [sp, #32]
 801109e:	4299      	cmp	r1, r3
 80110a0:	db05      	blt.n	80110ae <_printf_float+0x19e>
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	6121      	str	r1, [r4, #16]
 80110a6:	07d8      	lsls	r0, r3, #31
 80110a8:	d5ea      	bpl.n	8011080 <_printf_float+0x170>
 80110aa:	1c4b      	adds	r3, r1, #1
 80110ac:	e7e7      	b.n	801107e <_printf_float+0x16e>
 80110ae:	2900      	cmp	r1, #0
 80110b0:	bfd4      	ite	le
 80110b2:	f1c1 0202 	rsble	r2, r1, #2
 80110b6:	2201      	movgt	r2, #1
 80110b8:	4413      	add	r3, r2
 80110ba:	e7e0      	b.n	801107e <_printf_float+0x16e>
 80110bc:	6823      	ldr	r3, [r4, #0]
 80110be:	055a      	lsls	r2, r3, #21
 80110c0:	d407      	bmi.n	80110d2 <_printf_float+0x1c2>
 80110c2:	6923      	ldr	r3, [r4, #16]
 80110c4:	4642      	mov	r2, r8
 80110c6:	4631      	mov	r1, r6
 80110c8:	4628      	mov	r0, r5
 80110ca:	47b8      	blx	r7
 80110cc:	3001      	adds	r0, #1
 80110ce:	d12a      	bne.n	8011126 <_printf_float+0x216>
 80110d0:	e76a      	b.n	8010fa8 <_printf_float+0x98>
 80110d2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80110d6:	f240 80e0 	bls.w	801129a <_printf_float+0x38a>
 80110da:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80110de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80110e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e6:	d133      	bne.n	8011150 <_printf_float+0x240>
 80110e8:	4a37      	ldr	r2, [pc, #220]	; (80111c8 <_printf_float+0x2b8>)
 80110ea:	2301      	movs	r3, #1
 80110ec:	4631      	mov	r1, r6
 80110ee:	4628      	mov	r0, r5
 80110f0:	47b8      	blx	r7
 80110f2:	3001      	adds	r0, #1
 80110f4:	f43f af58 	beq.w	8010fa8 <_printf_float+0x98>
 80110f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	db02      	blt.n	8011106 <_printf_float+0x1f6>
 8011100:	6823      	ldr	r3, [r4, #0]
 8011102:	07d8      	lsls	r0, r3, #31
 8011104:	d50f      	bpl.n	8011126 <_printf_float+0x216>
 8011106:	4653      	mov	r3, sl
 8011108:	465a      	mov	r2, fp
 801110a:	4631      	mov	r1, r6
 801110c:	4628      	mov	r0, r5
 801110e:	47b8      	blx	r7
 8011110:	3001      	adds	r0, #1
 8011112:	f43f af49 	beq.w	8010fa8 <_printf_float+0x98>
 8011116:	f04f 0800 	mov.w	r8, #0
 801111a:	f104 091a 	add.w	r9, r4, #26
 801111e:	9b08      	ldr	r3, [sp, #32]
 8011120:	3b01      	subs	r3, #1
 8011122:	4543      	cmp	r3, r8
 8011124:	dc09      	bgt.n	801113a <_printf_float+0x22a>
 8011126:	6823      	ldr	r3, [r4, #0]
 8011128:	079b      	lsls	r3, r3, #30
 801112a:	f100 8106 	bmi.w	801133a <_printf_float+0x42a>
 801112e:	68e0      	ldr	r0, [r4, #12]
 8011130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011132:	4298      	cmp	r0, r3
 8011134:	bfb8      	it	lt
 8011136:	4618      	movlt	r0, r3
 8011138:	e738      	b.n	8010fac <_printf_float+0x9c>
 801113a:	2301      	movs	r3, #1
 801113c:	464a      	mov	r2, r9
 801113e:	4631      	mov	r1, r6
 8011140:	4628      	mov	r0, r5
 8011142:	47b8      	blx	r7
 8011144:	3001      	adds	r0, #1
 8011146:	f43f af2f 	beq.w	8010fa8 <_printf_float+0x98>
 801114a:	f108 0801 	add.w	r8, r8, #1
 801114e:	e7e6      	b.n	801111e <_printf_float+0x20e>
 8011150:	9b07      	ldr	r3, [sp, #28]
 8011152:	2b00      	cmp	r3, #0
 8011154:	dc3a      	bgt.n	80111cc <_printf_float+0x2bc>
 8011156:	4a1c      	ldr	r2, [pc, #112]	; (80111c8 <_printf_float+0x2b8>)
 8011158:	2301      	movs	r3, #1
 801115a:	4631      	mov	r1, r6
 801115c:	4628      	mov	r0, r5
 801115e:	47b8      	blx	r7
 8011160:	3001      	adds	r0, #1
 8011162:	f43f af21 	beq.w	8010fa8 <_printf_float+0x98>
 8011166:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801116a:	4313      	orrs	r3, r2
 801116c:	d102      	bne.n	8011174 <_printf_float+0x264>
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	07d9      	lsls	r1, r3, #31
 8011172:	d5d8      	bpl.n	8011126 <_printf_float+0x216>
 8011174:	4653      	mov	r3, sl
 8011176:	465a      	mov	r2, fp
 8011178:	4631      	mov	r1, r6
 801117a:	4628      	mov	r0, r5
 801117c:	47b8      	blx	r7
 801117e:	3001      	adds	r0, #1
 8011180:	f43f af12 	beq.w	8010fa8 <_printf_float+0x98>
 8011184:	f04f 0900 	mov.w	r9, #0
 8011188:	f104 0a1a 	add.w	sl, r4, #26
 801118c:	9b07      	ldr	r3, [sp, #28]
 801118e:	425b      	negs	r3, r3
 8011190:	454b      	cmp	r3, r9
 8011192:	dc01      	bgt.n	8011198 <_printf_float+0x288>
 8011194:	9b08      	ldr	r3, [sp, #32]
 8011196:	e795      	b.n	80110c4 <_printf_float+0x1b4>
 8011198:	2301      	movs	r3, #1
 801119a:	4652      	mov	r2, sl
 801119c:	4631      	mov	r1, r6
 801119e:	4628      	mov	r0, r5
 80111a0:	47b8      	blx	r7
 80111a2:	3001      	adds	r0, #1
 80111a4:	f43f af00 	beq.w	8010fa8 <_printf_float+0x98>
 80111a8:	f109 0901 	add.w	r9, r9, #1
 80111ac:	e7ee      	b.n	801118c <_printf_float+0x27c>
 80111ae:	bf00      	nop
 80111b0:	ffffffff 	.word	0xffffffff
 80111b4:	7fefffff 	.word	0x7fefffff
 80111b8:	08015f39 	.word	0x08015f39
 80111bc:	08015f3d 	.word	0x08015f3d
 80111c0:	08015f41 	.word	0x08015f41
 80111c4:	08015f45 	.word	0x08015f45
 80111c8:	08016273 	.word	0x08016273
 80111cc:	9a08      	ldr	r2, [sp, #32]
 80111ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80111d0:	429a      	cmp	r2, r3
 80111d2:	bfa8      	it	ge
 80111d4:	461a      	movge	r2, r3
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	4691      	mov	r9, r2
 80111da:	dc38      	bgt.n	801124e <_printf_float+0x33e>
 80111dc:	2300      	movs	r3, #0
 80111de:	9305      	str	r3, [sp, #20]
 80111e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111e4:	f104 021a 	add.w	r2, r4, #26
 80111e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80111ea:	9905      	ldr	r1, [sp, #20]
 80111ec:	9304      	str	r3, [sp, #16]
 80111ee:	eba3 0309 	sub.w	r3, r3, r9
 80111f2:	428b      	cmp	r3, r1
 80111f4:	dc33      	bgt.n	801125e <_printf_float+0x34e>
 80111f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	db3c      	blt.n	8011278 <_printf_float+0x368>
 80111fe:	6823      	ldr	r3, [r4, #0]
 8011200:	07da      	lsls	r2, r3, #31
 8011202:	d439      	bmi.n	8011278 <_printf_float+0x368>
 8011204:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8011208:	eba2 0903 	sub.w	r9, r2, r3
 801120c:	9b04      	ldr	r3, [sp, #16]
 801120e:	1ad2      	subs	r2, r2, r3
 8011210:	4591      	cmp	r9, r2
 8011212:	bfa8      	it	ge
 8011214:	4691      	movge	r9, r2
 8011216:	f1b9 0f00 	cmp.w	r9, #0
 801121a:	dc35      	bgt.n	8011288 <_printf_float+0x378>
 801121c:	f04f 0800 	mov.w	r8, #0
 8011220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011224:	f104 0a1a 	add.w	sl, r4, #26
 8011228:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801122c:	1a9b      	subs	r3, r3, r2
 801122e:	eba3 0309 	sub.w	r3, r3, r9
 8011232:	4543      	cmp	r3, r8
 8011234:	f77f af77 	ble.w	8011126 <_printf_float+0x216>
 8011238:	2301      	movs	r3, #1
 801123a:	4652      	mov	r2, sl
 801123c:	4631      	mov	r1, r6
 801123e:	4628      	mov	r0, r5
 8011240:	47b8      	blx	r7
 8011242:	3001      	adds	r0, #1
 8011244:	f43f aeb0 	beq.w	8010fa8 <_printf_float+0x98>
 8011248:	f108 0801 	add.w	r8, r8, #1
 801124c:	e7ec      	b.n	8011228 <_printf_float+0x318>
 801124e:	4613      	mov	r3, r2
 8011250:	4631      	mov	r1, r6
 8011252:	4642      	mov	r2, r8
 8011254:	4628      	mov	r0, r5
 8011256:	47b8      	blx	r7
 8011258:	3001      	adds	r0, #1
 801125a:	d1bf      	bne.n	80111dc <_printf_float+0x2cc>
 801125c:	e6a4      	b.n	8010fa8 <_printf_float+0x98>
 801125e:	2301      	movs	r3, #1
 8011260:	4631      	mov	r1, r6
 8011262:	4628      	mov	r0, r5
 8011264:	9204      	str	r2, [sp, #16]
 8011266:	47b8      	blx	r7
 8011268:	3001      	adds	r0, #1
 801126a:	f43f ae9d 	beq.w	8010fa8 <_printf_float+0x98>
 801126e:	9b05      	ldr	r3, [sp, #20]
 8011270:	9a04      	ldr	r2, [sp, #16]
 8011272:	3301      	adds	r3, #1
 8011274:	9305      	str	r3, [sp, #20]
 8011276:	e7b7      	b.n	80111e8 <_printf_float+0x2d8>
 8011278:	4653      	mov	r3, sl
 801127a:	465a      	mov	r2, fp
 801127c:	4631      	mov	r1, r6
 801127e:	4628      	mov	r0, r5
 8011280:	47b8      	blx	r7
 8011282:	3001      	adds	r0, #1
 8011284:	d1be      	bne.n	8011204 <_printf_float+0x2f4>
 8011286:	e68f      	b.n	8010fa8 <_printf_float+0x98>
 8011288:	9a04      	ldr	r2, [sp, #16]
 801128a:	464b      	mov	r3, r9
 801128c:	4442      	add	r2, r8
 801128e:	4631      	mov	r1, r6
 8011290:	4628      	mov	r0, r5
 8011292:	47b8      	blx	r7
 8011294:	3001      	adds	r0, #1
 8011296:	d1c1      	bne.n	801121c <_printf_float+0x30c>
 8011298:	e686      	b.n	8010fa8 <_printf_float+0x98>
 801129a:	9a08      	ldr	r2, [sp, #32]
 801129c:	2a01      	cmp	r2, #1
 801129e:	dc01      	bgt.n	80112a4 <_printf_float+0x394>
 80112a0:	07db      	lsls	r3, r3, #31
 80112a2:	d537      	bpl.n	8011314 <_printf_float+0x404>
 80112a4:	2301      	movs	r3, #1
 80112a6:	4642      	mov	r2, r8
 80112a8:	4631      	mov	r1, r6
 80112aa:	4628      	mov	r0, r5
 80112ac:	47b8      	blx	r7
 80112ae:	3001      	adds	r0, #1
 80112b0:	f43f ae7a 	beq.w	8010fa8 <_printf_float+0x98>
 80112b4:	4653      	mov	r3, sl
 80112b6:	465a      	mov	r2, fp
 80112b8:	4631      	mov	r1, r6
 80112ba:	4628      	mov	r0, r5
 80112bc:	47b8      	blx	r7
 80112be:	3001      	adds	r0, #1
 80112c0:	f43f ae72 	beq.w	8010fa8 <_printf_float+0x98>
 80112c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80112c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80112cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d0:	9b08      	ldr	r3, [sp, #32]
 80112d2:	d01a      	beq.n	801130a <_printf_float+0x3fa>
 80112d4:	3b01      	subs	r3, #1
 80112d6:	f108 0201 	add.w	r2, r8, #1
 80112da:	4631      	mov	r1, r6
 80112dc:	4628      	mov	r0, r5
 80112de:	47b8      	blx	r7
 80112e0:	3001      	adds	r0, #1
 80112e2:	d10e      	bne.n	8011302 <_printf_float+0x3f2>
 80112e4:	e660      	b.n	8010fa8 <_printf_float+0x98>
 80112e6:	2301      	movs	r3, #1
 80112e8:	464a      	mov	r2, r9
 80112ea:	4631      	mov	r1, r6
 80112ec:	4628      	mov	r0, r5
 80112ee:	47b8      	blx	r7
 80112f0:	3001      	adds	r0, #1
 80112f2:	f43f ae59 	beq.w	8010fa8 <_printf_float+0x98>
 80112f6:	f108 0801 	add.w	r8, r8, #1
 80112fa:	9b08      	ldr	r3, [sp, #32]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	4543      	cmp	r3, r8
 8011300:	dcf1      	bgt.n	80112e6 <_printf_float+0x3d6>
 8011302:	9b04      	ldr	r3, [sp, #16]
 8011304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011308:	e6dd      	b.n	80110c6 <_printf_float+0x1b6>
 801130a:	f04f 0800 	mov.w	r8, #0
 801130e:	f104 091a 	add.w	r9, r4, #26
 8011312:	e7f2      	b.n	80112fa <_printf_float+0x3ea>
 8011314:	2301      	movs	r3, #1
 8011316:	4642      	mov	r2, r8
 8011318:	e7df      	b.n	80112da <_printf_float+0x3ca>
 801131a:	2301      	movs	r3, #1
 801131c:	464a      	mov	r2, r9
 801131e:	4631      	mov	r1, r6
 8011320:	4628      	mov	r0, r5
 8011322:	47b8      	blx	r7
 8011324:	3001      	adds	r0, #1
 8011326:	f43f ae3f 	beq.w	8010fa8 <_printf_float+0x98>
 801132a:	f108 0801 	add.w	r8, r8, #1
 801132e:	68e3      	ldr	r3, [r4, #12]
 8011330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011332:	1a5b      	subs	r3, r3, r1
 8011334:	4543      	cmp	r3, r8
 8011336:	dcf0      	bgt.n	801131a <_printf_float+0x40a>
 8011338:	e6f9      	b.n	801112e <_printf_float+0x21e>
 801133a:	f04f 0800 	mov.w	r8, #0
 801133e:	f104 0919 	add.w	r9, r4, #25
 8011342:	e7f4      	b.n	801132e <_printf_float+0x41e>

08011344 <_printf_common>:
 8011344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011348:	4616      	mov	r6, r2
 801134a:	4699      	mov	r9, r3
 801134c:	688a      	ldr	r2, [r1, #8]
 801134e:	690b      	ldr	r3, [r1, #16]
 8011350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011354:	4293      	cmp	r3, r2
 8011356:	bfb8      	it	lt
 8011358:	4613      	movlt	r3, r2
 801135a:	6033      	str	r3, [r6, #0]
 801135c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011360:	4607      	mov	r7, r0
 8011362:	460c      	mov	r4, r1
 8011364:	b10a      	cbz	r2, 801136a <_printf_common+0x26>
 8011366:	3301      	adds	r3, #1
 8011368:	6033      	str	r3, [r6, #0]
 801136a:	6823      	ldr	r3, [r4, #0]
 801136c:	0699      	lsls	r1, r3, #26
 801136e:	bf42      	ittt	mi
 8011370:	6833      	ldrmi	r3, [r6, #0]
 8011372:	3302      	addmi	r3, #2
 8011374:	6033      	strmi	r3, [r6, #0]
 8011376:	6825      	ldr	r5, [r4, #0]
 8011378:	f015 0506 	ands.w	r5, r5, #6
 801137c:	d106      	bne.n	801138c <_printf_common+0x48>
 801137e:	f104 0a19 	add.w	sl, r4, #25
 8011382:	68e3      	ldr	r3, [r4, #12]
 8011384:	6832      	ldr	r2, [r6, #0]
 8011386:	1a9b      	subs	r3, r3, r2
 8011388:	42ab      	cmp	r3, r5
 801138a:	dc26      	bgt.n	80113da <_printf_common+0x96>
 801138c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011390:	1e13      	subs	r3, r2, #0
 8011392:	6822      	ldr	r2, [r4, #0]
 8011394:	bf18      	it	ne
 8011396:	2301      	movne	r3, #1
 8011398:	0692      	lsls	r2, r2, #26
 801139a:	d42b      	bmi.n	80113f4 <_printf_common+0xb0>
 801139c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80113a0:	4649      	mov	r1, r9
 80113a2:	4638      	mov	r0, r7
 80113a4:	47c0      	blx	r8
 80113a6:	3001      	adds	r0, #1
 80113a8:	d01e      	beq.n	80113e8 <_printf_common+0xa4>
 80113aa:	6823      	ldr	r3, [r4, #0]
 80113ac:	6922      	ldr	r2, [r4, #16]
 80113ae:	f003 0306 	and.w	r3, r3, #6
 80113b2:	2b04      	cmp	r3, #4
 80113b4:	bf02      	ittt	eq
 80113b6:	68e5      	ldreq	r5, [r4, #12]
 80113b8:	6833      	ldreq	r3, [r6, #0]
 80113ba:	1aed      	subeq	r5, r5, r3
 80113bc:	68a3      	ldr	r3, [r4, #8]
 80113be:	bf0c      	ite	eq
 80113c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113c4:	2500      	movne	r5, #0
 80113c6:	4293      	cmp	r3, r2
 80113c8:	bfc4      	itt	gt
 80113ca:	1a9b      	subgt	r3, r3, r2
 80113cc:	18ed      	addgt	r5, r5, r3
 80113ce:	2600      	movs	r6, #0
 80113d0:	341a      	adds	r4, #26
 80113d2:	42b5      	cmp	r5, r6
 80113d4:	d11a      	bne.n	801140c <_printf_common+0xc8>
 80113d6:	2000      	movs	r0, #0
 80113d8:	e008      	b.n	80113ec <_printf_common+0xa8>
 80113da:	2301      	movs	r3, #1
 80113dc:	4652      	mov	r2, sl
 80113de:	4649      	mov	r1, r9
 80113e0:	4638      	mov	r0, r7
 80113e2:	47c0      	blx	r8
 80113e4:	3001      	adds	r0, #1
 80113e6:	d103      	bne.n	80113f0 <_printf_common+0xac>
 80113e8:	f04f 30ff 	mov.w	r0, #4294967295
 80113ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113f0:	3501      	adds	r5, #1
 80113f2:	e7c6      	b.n	8011382 <_printf_common+0x3e>
 80113f4:	18e1      	adds	r1, r4, r3
 80113f6:	1c5a      	adds	r2, r3, #1
 80113f8:	2030      	movs	r0, #48	; 0x30
 80113fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113fe:	4422      	add	r2, r4
 8011400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011408:	3302      	adds	r3, #2
 801140a:	e7c7      	b.n	801139c <_printf_common+0x58>
 801140c:	2301      	movs	r3, #1
 801140e:	4622      	mov	r2, r4
 8011410:	4649      	mov	r1, r9
 8011412:	4638      	mov	r0, r7
 8011414:	47c0      	blx	r8
 8011416:	3001      	adds	r0, #1
 8011418:	d0e6      	beq.n	80113e8 <_printf_common+0xa4>
 801141a:	3601      	adds	r6, #1
 801141c:	e7d9      	b.n	80113d2 <_printf_common+0x8e>
	...

08011420 <_printf_i>:
 8011420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011424:	7e0f      	ldrb	r7, [r1, #24]
 8011426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011428:	2f78      	cmp	r7, #120	; 0x78
 801142a:	4691      	mov	r9, r2
 801142c:	4680      	mov	r8, r0
 801142e:	460c      	mov	r4, r1
 8011430:	469a      	mov	sl, r3
 8011432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011436:	d807      	bhi.n	8011448 <_printf_i+0x28>
 8011438:	2f62      	cmp	r7, #98	; 0x62
 801143a:	d80a      	bhi.n	8011452 <_printf_i+0x32>
 801143c:	2f00      	cmp	r7, #0
 801143e:	f000 80d4 	beq.w	80115ea <_printf_i+0x1ca>
 8011442:	2f58      	cmp	r7, #88	; 0x58
 8011444:	f000 80c0 	beq.w	80115c8 <_printf_i+0x1a8>
 8011448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801144c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011450:	e03a      	b.n	80114c8 <_printf_i+0xa8>
 8011452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011456:	2b15      	cmp	r3, #21
 8011458:	d8f6      	bhi.n	8011448 <_printf_i+0x28>
 801145a:	a101      	add	r1, pc, #4	; (adr r1, 8011460 <_printf_i+0x40>)
 801145c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011460:	080114b9 	.word	0x080114b9
 8011464:	080114cd 	.word	0x080114cd
 8011468:	08011449 	.word	0x08011449
 801146c:	08011449 	.word	0x08011449
 8011470:	08011449 	.word	0x08011449
 8011474:	08011449 	.word	0x08011449
 8011478:	080114cd 	.word	0x080114cd
 801147c:	08011449 	.word	0x08011449
 8011480:	08011449 	.word	0x08011449
 8011484:	08011449 	.word	0x08011449
 8011488:	08011449 	.word	0x08011449
 801148c:	080115d1 	.word	0x080115d1
 8011490:	080114f9 	.word	0x080114f9
 8011494:	0801158b 	.word	0x0801158b
 8011498:	08011449 	.word	0x08011449
 801149c:	08011449 	.word	0x08011449
 80114a0:	080115f3 	.word	0x080115f3
 80114a4:	08011449 	.word	0x08011449
 80114a8:	080114f9 	.word	0x080114f9
 80114ac:	08011449 	.word	0x08011449
 80114b0:	08011449 	.word	0x08011449
 80114b4:	08011593 	.word	0x08011593
 80114b8:	682b      	ldr	r3, [r5, #0]
 80114ba:	1d1a      	adds	r2, r3, #4
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	602a      	str	r2, [r5, #0]
 80114c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114c8:	2301      	movs	r3, #1
 80114ca:	e09f      	b.n	801160c <_printf_i+0x1ec>
 80114cc:	6820      	ldr	r0, [r4, #0]
 80114ce:	682b      	ldr	r3, [r5, #0]
 80114d0:	0607      	lsls	r7, r0, #24
 80114d2:	f103 0104 	add.w	r1, r3, #4
 80114d6:	6029      	str	r1, [r5, #0]
 80114d8:	d501      	bpl.n	80114de <_printf_i+0xbe>
 80114da:	681e      	ldr	r6, [r3, #0]
 80114dc:	e003      	b.n	80114e6 <_printf_i+0xc6>
 80114de:	0646      	lsls	r6, r0, #25
 80114e0:	d5fb      	bpl.n	80114da <_printf_i+0xba>
 80114e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80114e6:	2e00      	cmp	r6, #0
 80114e8:	da03      	bge.n	80114f2 <_printf_i+0xd2>
 80114ea:	232d      	movs	r3, #45	; 0x2d
 80114ec:	4276      	negs	r6, r6
 80114ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114f2:	485a      	ldr	r0, [pc, #360]	; (801165c <_printf_i+0x23c>)
 80114f4:	230a      	movs	r3, #10
 80114f6:	e012      	b.n	801151e <_printf_i+0xfe>
 80114f8:	682b      	ldr	r3, [r5, #0]
 80114fa:	6820      	ldr	r0, [r4, #0]
 80114fc:	1d19      	adds	r1, r3, #4
 80114fe:	6029      	str	r1, [r5, #0]
 8011500:	0605      	lsls	r5, r0, #24
 8011502:	d501      	bpl.n	8011508 <_printf_i+0xe8>
 8011504:	681e      	ldr	r6, [r3, #0]
 8011506:	e002      	b.n	801150e <_printf_i+0xee>
 8011508:	0641      	lsls	r1, r0, #25
 801150a:	d5fb      	bpl.n	8011504 <_printf_i+0xe4>
 801150c:	881e      	ldrh	r6, [r3, #0]
 801150e:	4853      	ldr	r0, [pc, #332]	; (801165c <_printf_i+0x23c>)
 8011510:	2f6f      	cmp	r7, #111	; 0x6f
 8011512:	bf0c      	ite	eq
 8011514:	2308      	moveq	r3, #8
 8011516:	230a      	movne	r3, #10
 8011518:	2100      	movs	r1, #0
 801151a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801151e:	6865      	ldr	r5, [r4, #4]
 8011520:	60a5      	str	r5, [r4, #8]
 8011522:	2d00      	cmp	r5, #0
 8011524:	bfa2      	ittt	ge
 8011526:	6821      	ldrge	r1, [r4, #0]
 8011528:	f021 0104 	bicge.w	r1, r1, #4
 801152c:	6021      	strge	r1, [r4, #0]
 801152e:	b90e      	cbnz	r6, 8011534 <_printf_i+0x114>
 8011530:	2d00      	cmp	r5, #0
 8011532:	d04b      	beq.n	80115cc <_printf_i+0x1ac>
 8011534:	4615      	mov	r5, r2
 8011536:	fbb6 f1f3 	udiv	r1, r6, r3
 801153a:	fb03 6711 	mls	r7, r3, r1, r6
 801153e:	5dc7      	ldrb	r7, [r0, r7]
 8011540:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011544:	4637      	mov	r7, r6
 8011546:	42bb      	cmp	r3, r7
 8011548:	460e      	mov	r6, r1
 801154a:	d9f4      	bls.n	8011536 <_printf_i+0x116>
 801154c:	2b08      	cmp	r3, #8
 801154e:	d10b      	bne.n	8011568 <_printf_i+0x148>
 8011550:	6823      	ldr	r3, [r4, #0]
 8011552:	07de      	lsls	r6, r3, #31
 8011554:	d508      	bpl.n	8011568 <_printf_i+0x148>
 8011556:	6923      	ldr	r3, [r4, #16]
 8011558:	6861      	ldr	r1, [r4, #4]
 801155a:	4299      	cmp	r1, r3
 801155c:	bfde      	ittt	le
 801155e:	2330      	movle	r3, #48	; 0x30
 8011560:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011564:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011568:	1b52      	subs	r2, r2, r5
 801156a:	6122      	str	r2, [r4, #16]
 801156c:	f8cd a000 	str.w	sl, [sp]
 8011570:	464b      	mov	r3, r9
 8011572:	aa03      	add	r2, sp, #12
 8011574:	4621      	mov	r1, r4
 8011576:	4640      	mov	r0, r8
 8011578:	f7ff fee4 	bl	8011344 <_printf_common>
 801157c:	3001      	adds	r0, #1
 801157e:	d14a      	bne.n	8011616 <_printf_i+0x1f6>
 8011580:	f04f 30ff 	mov.w	r0, #4294967295
 8011584:	b004      	add	sp, #16
 8011586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801158a:	6823      	ldr	r3, [r4, #0]
 801158c:	f043 0320 	orr.w	r3, r3, #32
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	4833      	ldr	r0, [pc, #204]	; (8011660 <_printf_i+0x240>)
 8011594:	2778      	movs	r7, #120	; 0x78
 8011596:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801159a:	6823      	ldr	r3, [r4, #0]
 801159c:	6829      	ldr	r1, [r5, #0]
 801159e:	061f      	lsls	r7, r3, #24
 80115a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80115a4:	d402      	bmi.n	80115ac <_printf_i+0x18c>
 80115a6:	065f      	lsls	r7, r3, #25
 80115a8:	bf48      	it	mi
 80115aa:	b2b6      	uxthmi	r6, r6
 80115ac:	07df      	lsls	r7, r3, #31
 80115ae:	bf48      	it	mi
 80115b0:	f043 0320 	orrmi.w	r3, r3, #32
 80115b4:	6029      	str	r1, [r5, #0]
 80115b6:	bf48      	it	mi
 80115b8:	6023      	strmi	r3, [r4, #0]
 80115ba:	b91e      	cbnz	r6, 80115c4 <_printf_i+0x1a4>
 80115bc:	6823      	ldr	r3, [r4, #0]
 80115be:	f023 0320 	bic.w	r3, r3, #32
 80115c2:	6023      	str	r3, [r4, #0]
 80115c4:	2310      	movs	r3, #16
 80115c6:	e7a7      	b.n	8011518 <_printf_i+0xf8>
 80115c8:	4824      	ldr	r0, [pc, #144]	; (801165c <_printf_i+0x23c>)
 80115ca:	e7e4      	b.n	8011596 <_printf_i+0x176>
 80115cc:	4615      	mov	r5, r2
 80115ce:	e7bd      	b.n	801154c <_printf_i+0x12c>
 80115d0:	682b      	ldr	r3, [r5, #0]
 80115d2:	6826      	ldr	r6, [r4, #0]
 80115d4:	6961      	ldr	r1, [r4, #20]
 80115d6:	1d18      	adds	r0, r3, #4
 80115d8:	6028      	str	r0, [r5, #0]
 80115da:	0635      	lsls	r5, r6, #24
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	d501      	bpl.n	80115e4 <_printf_i+0x1c4>
 80115e0:	6019      	str	r1, [r3, #0]
 80115e2:	e002      	b.n	80115ea <_printf_i+0x1ca>
 80115e4:	0670      	lsls	r0, r6, #25
 80115e6:	d5fb      	bpl.n	80115e0 <_printf_i+0x1c0>
 80115e8:	8019      	strh	r1, [r3, #0]
 80115ea:	2300      	movs	r3, #0
 80115ec:	6123      	str	r3, [r4, #16]
 80115ee:	4615      	mov	r5, r2
 80115f0:	e7bc      	b.n	801156c <_printf_i+0x14c>
 80115f2:	682b      	ldr	r3, [r5, #0]
 80115f4:	1d1a      	adds	r2, r3, #4
 80115f6:	602a      	str	r2, [r5, #0]
 80115f8:	681d      	ldr	r5, [r3, #0]
 80115fa:	6862      	ldr	r2, [r4, #4]
 80115fc:	2100      	movs	r1, #0
 80115fe:	4628      	mov	r0, r5
 8011600:	f7ee fe7e 	bl	8000300 <memchr>
 8011604:	b108      	cbz	r0, 801160a <_printf_i+0x1ea>
 8011606:	1b40      	subs	r0, r0, r5
 8011608:	6060      	str	r0, [r4, #4]
 801160a:	6863      	ldr	r3, [r4, #4]
 801160c:	6123      	str	r3, [r4, #16]
 801160e:	2300      	movs	r3, #0
 8011610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011614:	e7aa      	b.n	801156c <_printf_i+0x14c>
 8011616:	6923      	ldr	r3, [r4, #16]
 8011618:	462a      	mov	r2, r5
 801161a:	4649      	mov	r1, r9
 801161c:	4640      	mov	r0, r8
 801161e:	47d0      	blx	sl
 8011620:	3001      	adds	r0, #1
 8011622:	d0ad      	beq.n	8011580 <_printf_i+0x160>
 8011624:	6823      	ldr	r3, [r4, #0]
 8011626:	079b      	lsls	r3, r3, #30
 8011628:	d413      	bmi.n	8011652 <_printf_i+0x232>
 801162a:	68e0      	ldr	r0, [r4, #12]
 801162c:	9b03      	ldr	r3, [sp, #12]
 801162e:	4298      	cmp	r0, r3
 8011630:	bfb8      	it	lt
 8011632:	4618      	movlt	r0, r3
 8011634:	e7a6      	b.n	8011584 <_printf_i+0x164>
 8011636:	2301      	movs	r3, #1
 8011638:	4632      	mov	r2, r6
 801163a:	4649      	mov	r1, r9
 801163c:	4640      	mov	r0, r8
 801163e:	47d0      	blx	sl
 8011640:	3001      	adds	r0, #1
 8011642:	d09d      	beq.n	8011580 <_printf_i+0x160>
 8011644:	3501      	adds	r5, #1
 8011646:	68e3      	ldr	r3, [r4, #12]
 8011648:	9903      	ldr	r1, [sp, #12]
 801164a:	1a5b      	subs	r3, r3, r1
 801164c:	42ab      	cmp	r3, r5
 801164e:	dcf2      	bgt.n	8011636 <_printf_i+0x216>
 8011650:	e7eb      	b.n	801162a <_printf_i+0x20a>
 8011652:	2500      	movs	r5, #0
 8011654:	f104 0619 	add.w	r6, r4, #25
 8011658:	e7f5      	b.n	8011646 <_printf_i+0x226>
 801165a:	bf00      	nop
 801165c:	08015f49 	.word	0x08015f49
 8011660:	08015f5a 	.word	0x08015f5a

08011664 <std>:
 8011664:	2300      	movs	r3, #0
 8011666:	b510      	push	{r4, lr}
 8011668:	4604      	mov	r4, r0
 801166a:	e9c0 3300 	strd	r3, r3, [r0]
 801166e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011672:	6083      	str	r3, [r0, #8]
 8011674:	8181      	strh	r1, [r0, #12]
 8011676:	6643      	str	r3, [r0, #100]	; 0x64
 8011678:	81c2      	strh	r2, [r0, #14]
 801167a:	6183      	str	r3, [r0, #24]
 801167c:	4619      	mov	r1, r3
 801167e:	2208      	movs	r2, #8
 8011680:	305c      	adds	r0, #92	; 0x5c
 8011682:	f000 fa81 	bl	8011b88 <memset>
 8011686:	4b0d      	ldr	r3, [pc, #52]	; (80116bc <std+0x58>)
 8011688:	6263      	str	r3, [r4, #36]	; 0x24
 801168a:	4b0d      	ldr	r3, [pc, #52]	; (80116c0 <std+0x5c>)
 801168c:	62a3      	str	r3, [r4, #40]	; 0x28
 801168e:	4b0d      	ldr	r3, [pc, #52]	; (80116c4 <std+0x60>)
 8011690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011692:	4b0d      	ldr	r3, [pc, #52]	; (80116c8 <std+0x64>)
 8011694:	6323      	str	r3, [r4, #48]	; 0x30
 8011696:	4b0d      	ldr	r3, [pc, #52]	; (80116cc <std+0x68>)
 8011698:	6224      	str	r4, [r4, #32]
 801169a:	429c      	cmp	r4, r3
 801169c:	d006      	beq.n	80116ac <std+0x48>
 801169e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80116a2:	4294      	cmp	r4, r2
 80116a4:	d002      	beq.n	80116ac <std+0x48>
 80116a6:	33d0      	adds	r3, #208	; 0xd0
 80116a8:	429c      	cmp	r4, r3
 80116aa:	d105      	bne.n	80116b8 <std+0x54>
 80116ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80116b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116b4:	f000 bbde 	b.w	8011e74 <__retarget_lock_init_recursive>
 80116b8:	bd10      	pop	{r4, pc}
 80116ba:	bf00      	nop
 80116bc:	080119d5 	.word	0x080119d5
 80116c0:	080119fb 	.word	0x080119fb
 80116c4:	08011a33 	.word	0x08011a33
 80116c8:	08011a57 	.word	0x08011a57
 80116cc:	240452f0 	.word	0x240452f0

080116d0 <stdio_exit_handler>:
 80116d0:	4a02      	ldr	r2, [pc, #8]	; (80116dc <stdio_exit_handler+0xc>)
 80116d2:	4903      	ldr	r1, [pc, #12]	; (80116e0 <stdio_exit_handler+0x10>)
 80116d4:	4803      	ldr	r0, [pc, #12]	; (80116e4 <stdio_exit_handler+0x14>)
 80116d6:	f000 b869 	b.w	80117ac <_fwalk_sglue>
 80116da:	bf00      	nop
 80116dc:	24000074 	.word	0x24000074
 80116e0:	080149a9 	.word	0x080149a9
 80116e4:	240001ec 	.word	0x240001ec

080116e8 <cleanup_stdio>:
 80116e8:	6841      	ldr	r1, [r0, #4]
 80116ea:	4b0c      	ldr	r3, [pc, #48]	; (801171c <cleanup_stdio+0x34>)
 80116ec:	4299      	cmp	r1, r3
 80116ee:	b510      	push	{r4, lr}
 80116f0:	4604      	mov	r4, r0
 80116f2:	d001      	beq.n	80116f8 <cleanup_stdio+0x10>
 80116f4:	f003 f958 	bl	80149a8 <_fflush_r>
 80116f8:	68a1      	ldr	r1, [r4, #8]
 80116fa:	4b09      	ldr	r3, [pc, #36]	; (8011720 <cleanup_stdio+0x38>)
 80116fc:	4299      	cmp	r1, r3
 80116fe:	d002      	beq.n	8011706 <cleanup_stdio+0x1e>
 8011700:	4620      	mov	r0, r4
 8011702:	f003 f951 	bl	80149a8 <_fflush_r>
 8011706:	68e1      	ldr	r1, [r4, #12]
 8011708:	4b06      	ldr	r3, [pc, #24]	; (8011724 <cleanup_stdio+0x3c>)
 801170a:	4299      	cmp	r1, r3
 801170c:	d004      	beq.n	8011718 <cleanup_stdio+0x30>
 801170e:	4620      	mov	r0, r4
 8011710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011714:	f003 b948 	b.w	80149a8 <_fflush_r>
 8011718:	bd10      	pop	{r4, pc}
 801171a:	bf00      	nop
 801171c:	240452f0 	.word	0x240452f0
 8011720:	24045358 	.word	0x24045358
 8011724:	240453c0 	.word	0x240453c0

08011728 <global_stdio_init.part.0>:
 8011728:	b510      	push	{r4, lr}
 801172a:	4b0b      	ldr	r3, [pc, #44]	; (8011758 <global_stdio_init.part.0+0x30>)
 801172c:	4c0b      	ldr	r4, [pc, #44]	; (801175c <global_stdio_init.part.0+0x34>)
 801172e:	4a0c      	ldr	r2, [pc, #48]	; (8011760 <global_stdio_init.part.0+0x38>)
 8011730:	601a      	str	r2, [r3, #0]
 8011732:	4620      	mov	r0, r4
 8011734:	2200      	movs	r2, #0
 8011736:	2104      	movs	r1, #4
 8011738:	f7ff ff94 	bl	8011664 <std>
 801173c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011740:	2201      	movs	r2, #1
 8011742:	2109      	movs	r1, #9
 8011744:	f7ff ff8e 	bl	8011664 <std>
 8011748:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801174c:	2202      	movs	r2, #2
 801174e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011752:	2112      	movs	r1, #18
 8011754:	f7ff bf86 	b.w	8011664 <std>
 8011758:	24045428 	.word	0x24045428
 801175c:	240452f0 	.word	0x240452f0
 8011760:	080116d1 	.word	0x080116d1

08011764 <__sfp_lock_acquire>:
 8011764:	4801      	ldr	r0, [pc, #4]	; (801176c <__sfp_lock_acquire+0x8>)
 8011766:	f000 bb86 	b.w	8011e76 <__retarget_lock_acquire_recursive>
 801176a:	bf00      	nop
 801176c:	24045431 	.word	0x24045431

08011770 <__sfp_lock_release>:
 8011770:	4801      	ldr	r0, [pc, #4]	; (8011778 <__sfp_lock_release+0x8>)
 8011772:	f000 bb81 	b.w	8011e78 <__retarget_lock_release_recursive>
 8011776:	bf00      	nop
 8011778:	24045431 	.word	0x24045431

0801177c <__sinit>:
 801177c:	b510      	push	{r4, lr}
 801177e:	4604      	mov	r4, r0
 8011780:	f7ff fff0 	bl	8011764 <__sfp_lock_acquire>
 8011784:	6a23      	ldr	r3, [r4, #32]
 8011786:	b11b      	cbz	r3, 8011790 <__sinit+0x14>
 8011788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801178c:	f7ff bff0 	b.w	8011770 <__sfp_lock_release>
 8011790:	4b04      	ldr	r3, [pc, #16]	; (80117a4 <__sinit+0x28>)
 8011792:	6223      	str	r3, [r4, #32]
 8011794:	4b04      	ldr	r3, [pc, #16]	; (80117a8 <__sinit+0x2c>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d1f5      	bne.n	8011788 <__sinit+0xc>
 801179c:	f7ff ffc4 	bl	8011728 <global_stdio_init.part.0>
 80117a0:	e7f2      	b.n	8011788 <__sinit+0xc>
 80117a2:	bf00      	nop
 80117a4:	080116e9 	.word	0x080116e9
 80117a8:	24045428 	.word	0x24045428

080117ac <_fwalk_sglue>:
 80117ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117b0:	4607      	mov	r7, r0
 80117b2:	4688      	mov	r8, r1
 80117b4:	4614      	mov	r4, r2
 80117b6:	2600      	movs	r6, #0
 80117b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80117bc:	f1b9 0901 	subs.w	r9, r9, #1
 80117c0:	d505      	bpl.n	80117ce <_fwalk_sglue+0x22>
 80117c2:	6824      	ldr	r4, [r4, #0]
 80117c4:	2c00      	cmp	r4, #0
 80117c6:	d1f7      	bne.n	80117b8 <_fwalk_sglue+0xc>
 80117c8:	4630      	mov	r0, r6
 80117ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117ce:	89ab      	ldrh	r3, [r5, #12]
 80117d0:	2b01      	cmp	r3, #1
 80117d2:	d907      	bls.n	80117e4 <_fwalk_sglue+0x38>
 80117d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80117d8:	3301      	adds	r3, #1
 80117da:	d003      	beq.n	80117e4 <_fwalk_sglue+0x38>
 80117dc:	4629      	mov	r1, r5
 80117de:	4638      	mov	r0, r7
 80117e0:	47c0      	blx	r8
 80117e2:	4306      	orrs	r6, r0
 80117e4:	3568      	adds	r5, #104	; 0x68
 80117e6:	e7e9      	b.n	80117bc <_fwalk_sglue+0x10>

080117e8 <iprintf>:
 80117e8:	b40f      	push	{r0, r1, r2, r3}
 80117ea:	b507      	push	{r0, r1, r2, lr}
 80117ec:	4906      	ldr	r1, [pc, #24]	; (8011808 <iprintf+0x20>)
 80117ee:	ab04      	add	r3, sp, #16
 80117f0:	6808      	ldr	r0, [r1, #0]
 80117f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80117f6:	6881      	ldr	r1, [r0, #8]
 80117f8:	9301      	str	r3, [sp, #4]
 80117fa:	f002 fde7 	bl	80143cc <_vfiprintf_r>
 80117fe:	b003      	add	sp, #12
 8011800:	f85d eb04 	ldr.w	lr, [sp], #4
 8011804:	b004      	add	sp, #16
 8011806:	4770      	bx	lr
 8011808:	24000238 	.word	0x24000238

0801180c <putchar>:
 801180c:	4b02      	ldr	r3, [pc, #8]	; (8011818 <putchar+0xc>)
 801180e:	4601      	mov	r1, r0
 8011810:	6818      	ldr	r0, [r3, #0]
 8011812:	6882      	ldr	r2, [r0, #8]
 8011814:	f003 b964 	b.w	8014ae0 <_putc_r>
 8011818:	24000238 	.word	0x24000238

0801181c <_puts_r>:
 801181c:	6a03      	ldr	r3, [r0, #32]
 801181e:	b570      	push	{r4, r5, r6, lr}
 8011820:	6884      	ldr	r4, [r0, #8]
 8011822:	4605      	mov	r5, r0
 8011824:	460e      	mov	r6, r1
 8011826:	b90b      	cbnz	r3, 801182c <_puts_r+0x10>
 8011828:	f7ff ffa8 	bl	801177c <__sinit>
 801182c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801182e:	07db      	lsls	r3, r3, #31
 8011830:	d405      	bmi.n	801183e <_puts_r+0x22>
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	0598      	lsls	r0, r3, #22
 8011836:	d402      	bmi.n	801183e <_puts_r+0x22>
 8011838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801183a:	f000 fb1c 	bl	8011e76 <__retarget_lock_acquire_recursive>
 801183e:	89a3      	ldrh	r3, [r4, #12]
 8011840:	0719      	lsls	r1, r3, #28
 8011842:	d513      	bpl.n	801186c <_puts_r+0x50>
 8011844:	6923      	ldr	r3, [r4, #16]
 8011846:	b18b      	cbz	r3, 801186c <_puts_r+0x50>
 8011848:	3e01      	subs	r6, #1
 801184a:	68a3      	ldr	r3, [r4, #8]
 801184c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011850:	3b01      	subs	r3, #1
 8011852:	60a3      	str	r3, [r4, #8]
 8011854:	b9e9      	cbnz	r1, 8011892 <_puts_r+0x76>
 8011856:	2b00      	cmp	r3, #0
 8011858:	da2e      	bge.n	80118b8 <_puts_r+0x9c>
 801185a:	4622      	mov	r2, r4
 801185c:	210a      	movs	r1, #10
 801185e:	4628      	mov	r0, r5
 8011860:	f000 f8fd 	bl	8011a5e <__swbuf_r>
 8011864:	3001      	adds	r0, #1
 8011866:	d007      	beq.n	8011878 <_puts_r+0x5c>
 8011868:	250a      	movs	r5, #10
 801186a:	e007      	b.n	801187c <_puts_r+0x60>
 801186c:	4621      	mov	r1, r4
 801186e:	4628      	mov	r0, r5
 8011870:	f000 f932 	bl	8011ad8 <__swsetup_r>
 8011874:	2800      	cmp	r0, #0
 8011876:	d0e7      	beq.n	8011848 <_puts_r+0x2c>
 8011878:	f04f 35ff 	mov.w	r5, #4294967295
 801187c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801187e:	07da      	lsls	r2, r3, #31
 8011880:	d405      	bmi.n	801188e <_puts_r+0x72>
 8011882:	89a3      	ldrh	r3, [r4, #12]
 8011884:	059b      	lsls	r3, r3, #22
 8011886:	d402      	bmi.n	801188e <_puts_r+0x72>
 8011888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801188a:	f000 faf5 	bl	8011e78 <__retarget_lock_release_recursive>
 801188e:	4628      	mov	r0, r5
 8011890:	bd70      	pop	{r4, r5, r6, pc}
 8011892:	2b00      	cmp	r3, #0
 8011894:	da04      	bge.n	80118a0 <_puts_r+0x84>
 8011896:	69a2      	ldr	r2, [r4, #24]
 8011898:	429a      	cmp	r2, r3
 801189a:	dc06      	bgt.n	80118aa <_puts_r+0x8e>
 801189c:	290a      	cmp	r1, #10
 801189e:	d004      	beq.n	80118aa <_puts_r+0x8e>
 80118a0:	6823      	ldr	r3, [r4, #0]
 80118a2:	1c5a      	adds	r2, r3, #1
 80118a4:	6022      	str	r2, [r4, #0]
 80118a6:	7019      	strb	r1, [r3, #0]
 80118a8:	e7cf      	b.n	801184a <_puts_r+0x2e>
 80118aa:	4622      	mov	r2, r4
 80118ac:	4628      	mov	r0, r5
 80118ae:	f000 f8d6 	bl	8011a5e <__swbuf_r>
 80118b2:	3001      	adds	r0, #1
 80118b4:	d1c9      	bne.n	801184a <_puts_r+0x2e>
 80118b6:	e7df      	b.n	8011878 <_puts_r+0x5c>
 80118b8:	6823      	ldr	r3, [r4, #0]
 80118ba:	250a      	movs	r5, #10
 80118bc:	1c5a      	adds	r2, r3, #1
 80118be:	6022      	str	r2, [r4, #0]
 80118c0:	701d      	strb	r5, [r3, #0]
 80118c2:	e7db      	b.n	801187c <_puts_r+0x60>

080118c4 <puts>:
 80118c4:	4b02      	ldr	r3, [pc, #8]	; (80118d0 <puts+0xc>)
 80118c6:	4601      	mov	r1, r0
 80118c8:	6818      	ldr	r0, [r3, #0]
 80118ca:	f7ff bfa7 	b.w	801181c <_puts_r>
 80118ce:	bf00      	nop
 80118d0:	24000238 	.word	0x24000238

080118d4 <sniprintf>:
 80118d4:	b40c      	push	{r2, r3}
 80118d6:	b530      	push	{r4, r5, lr}
 80118d8:	4b17      	ldr	r3, [pc, #92]	; (8011938 <sniprintf+0x64>)
 80118da:	1e0c      	subs	r4, r1, #0
 80118dc:	681d      	ldr	r5, [r3, #0]
 80118de:	b09d      	sub	sp, #116	; 0x74
 80118e0:	da08      	bge.n	80118f4 <sniprintf+0x20>
 80118e2:	238b      	movs	r3, #139	; 0x8b
 80118e4:	602b      	str	r3, [r5, #0]
 80118e6:	f04f 30ff 	mov.w	r0, #4294967295
 80118ea:	b01d      	add	sp, #116	; 0x74
 80118ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118f0:	b002      	add	sp, #8
 80118f2:	4770      	bx	lr
 80118f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80118f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80118fc:	bf14      	ite	ne
 80118fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011902:	4623      	moveq	r3, r4
 8011904:	9304      	str	r3, [sp, #16]
 8011906:	9307      	str	r3, [sp, #28]
 8011908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801190c:	9002      	str	r0, [sp, #8]
 801190e:	9006      	str	r0, [sp, #24]
 8011910:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011914:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011916:	ab21      	add	r3, sp, #132	; 0x84
 8011918:	a902      	add	r1, sp, #8
 801191a:	4628      	mov	r0, r5
 801191c:	9301      	str	r3, [sp, #4]
 801191e:	f002 fa5b 	bl	8013dd8 <_svfiprintf_r>
 8011922:	1c43      	adds	r3, r0, #1
 8011924:	bfbc      	itt	lt
 8011926:	238b      	movlt	r3, #139	; 0x8b
 8011928:	602b      	strlt	r3, [r5, #0]
 801192a:	2c00      	cmp	r4, #0
 801192c:	d0dd      	beq.n	80118ea <sniprintf+0x16>
 801192e:	9b02      	ldr	r3, [sp, #8]
 8011930:	2200      	movs	r2, #0
 8011932:	701a      	strb	r2, [r3, #0]
 8011934:	e7d9      	b.n	80118ea <sniprintf+0x16>
 8011936:	bf00      	nop
 8011938:	24000238 	.word	0x24000238

0801193c <siprintf>:
 801193c:	b40e      	push	{r1, r2, r3}
 801193e:	b500      	push	{lr}
 8011940:	b09c      	sub	sp, #112	; 0x70
 8011942:	ab1d      	add	r3, sp, #116	; 0x74
 8011944:	9002      	str	r0, [sp, #8]
 8011946:	9006      	str	r0, [sp, #24]
 8011948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801194c:	4809      	ldr	r0, [pc, #36]	; (8011974 <siprintf+0x38>)
 801194e:	9107      	str	r1, [sp, #28]
 8011950:	9104      	str	r1, [sp, #16]
 8011952:	4909      	ldr	r1, [pc, #36]	; (8011978 <siprintf+0x3c>)
 8011954:	f853 2b04 	ldr.w	r2, [r3], #4
 8011958:	9105      	str	r1, [sp, #20]
 801195a:	6800      	ldr	r0, [r0, #0]
 801195c:	9301      	str	r3, [sp, #4]
 801195e:	a902      	add	r1, sp, #8
 8011960:	f002 fa3a 	bl	8013dd8 <_svfiprintf_r>
 8011964:	9b02      	ldr	r3, [sp, #8]
 8011966:	2200      	movs	r2, #0
 8011968:	701a      	strb	r2, [r3, #0]
 801196a:	b01c      	add	sp, #112	; 0x70
 801196c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011970:	b003      	add	sp, #12
 8011972:	4770      	bx	lr
 8011974:	24000238 	.word	0x24000238
 8011978:	ffff0208 	.word	0xffff0208

0801197c <siscanf>:
 801197c:	b40e      	push	{r1, r2, r3}
 801197e:	b510      	push	{r4, lr}
 8011980:	b09f      	sub	sp, #124	; 0x7c
 8011982:	ac21      	add	r4, sp, #132	; 0x84
 8011984:	f44f 7101 	mov.w	r1, #516	; 0x204
 8011988:	f854 2b04 	ldr.w	r2, [r4], #4
 801198c:	9201      	str	r2, [sp, #4]
 801198e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011992:	9004      	str	r0, [sp, #16]
 8011994:	9008      	str	r0, [sp, #32]
 8011996:	f7ee fd03 	bl	80003a0 <strlen>
 801199a:	4b0c      	ldr	r3, [pc, #48]	; (80119cc <siscanf+0x50>)
 801199c:	9005      	str	r0, [sp, #20]
 801199e:	9009      	str	r0, [sp, #36]	; 0x24
 80119a0:	930d      	str	r3, [sp, #52]	; 0x34
 80119a2:	480b      	ldr	r0, [pc, #44]	; (80119d0 <siscanf+0x54>)
 80119a4:	9a01      	ldr	r2, [sp, #4]
 80119a6:	6800      	ldr	r0, [r0, #0]
 80119a8:	9403      	str	r4, [sp, #12]
 80119aa:	2300      	movs	r3, #0
 80119ac:	9311      	str	r3, [sp, #68]	; 0x44
 80119ae:	9316      	str	r3, [sp, #88]	; 0x58
 80119b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80119b8:	a904      	add	r1, sp, #16
 80119ba:	4623      	mov	r3, r4
 80119bc:	f002 fb64 	bl	8014088 <__ssvfiscanf_r>
 80119c0:	b01f      	add	sp, #124	; 0x7c
 80119c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119c6:	b003      	add	sp, #12
 80119c8:	4770      	bx	lr
 80119ca:	bf00      	nop
 80119cc:	080119f7 	.word	0x080119f7
 80119d0:	24000238 	.word	0x24000238

080119d4 <__sread>:
 80119d4:	b510      	push	{r4, lr}
 80119d6:	460c      	mov	r4, r1
 80119d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119dc:	f000 f9fc 	bl	8011dd8 <_read_r>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	bfab      	itete	ge
 80119e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80119e6:	89a3      	ldrhlt	r3, [r4, #12]
 80119e8:	181b      	addge	r3, r3, r0
 80119ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80119ee:	bfac      	ite	ge
 80119f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80119f2:	81a3      	strhlt	r3, [r4, #12]
 80119f4:	bd10      	pop	{r4, pc}

080119f6 <__seofread>:
 80119f6:	2000      	movs	r0, #0
 80119f8:	4770      	bx	lr

080119fa <__swrite>:
 80119fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119fe:	461f      	mov	r7, r3
 8011a00:	898b      	ldrh	r3, [r1, #12]
 8011a02:	05db      	lsls	r3, r3, #23
 8011a04:	4605      	mov	r5, r0
 8011a06:	460c      	mov	r4, r1
 8011a08:	4616      	mov	r6, r2
 8011a0a:	d505      	bpl.n	8011a18 <__swrite+0x1e>
 8011a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a10:	2302      	movs	r3, #2
 8011a12:	2200      	movs	r2, #0
 8011a14:	f000 f9ce 	bl	8011db4 <_lseek_r>
 8011a18:	89a3      	ldrh	r3, [r4, #12]
 8011a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a22:	81a3      	strh	r3, [r4, #12]
 8011a24:	4632      	mov	r2, r6
 8011a26:	463b      	mov	r3, r7
 8011a28:	4628      	mov	r0, r5
 8011a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2e:	f000 b9e5 	b.w	8011dfc <_write_r>

08011a32 <__sseek>:
 8011a32:	b510      	push	{r4, lr}
 8011a34:	460c      	mov	r4, r1
 8011a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a3a:	f000 f9bb 	bl	8011db4 <_lseek_r>
 8011a3e:	1c43      	adds	r3, r0, #1
 8011a40:	89a3      	ldrh	r3, [r4, #12]
 8011a42:	bf15      	itete	ne
 8011a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a4e:	81a3      	strheq	r3, [r4, #12]
 8011a50:	bf18      	it	ne
 8011a52:	81a3      	strhne	r3, [r4, #12]
 8011a54:	bd10      	pop	{r4, pc}

08011a56 <__sclose>:
 8011a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a5a:	f000 b945 	b.w	8011ce8 <_close_r>

08011a5e <__swbuf_r>:
 8011a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a60:	460e      	mov	r6, r1
 8011a62:	4614      	mov	r4, r2
 8011a64:	4605      	mov	r5, r0
 8011a66:	b118      	cbz	r0, 8011a70 <__swbuf_r+0x12>
 8011a68:	6a03      	ldr	r3, [r0, #32]
 8011a6a:	b90b      	cbnz	r3, 8011a70 <__swbuf_r+0x12>
 8011a6c:	f7ff fe86 	bl	801177c <__sinit>
 8011a70:	69a3      	ldr	r3, [r4, #24]
 8011a72:	60a3      	str	r3, [r4, #8]
 8011a74:	89a3      	ldrh	r3, [r4, #12]
 8011a76:	071a      	lsls	r2, r3, #28
 8011a78:	d525      	bpl.n	8011ac6 <__swbuf_r+0x68>
 8011a7a:	6923      	ldr	r3, [r4, #16]
 8011a7c:	b31b      	cbz	r3, 8011ac6 <__swbuf_r+0x68>
 8011a7e:	6823      	ldr	r3, [r4, #0]
 8011a80:	6922      	ldr	r2, [r4, #16]
 8011a82:	1a98      	subs	r0, r3, r2
 8011a84:	6963      	ldr	r3, [r4, #20]
 8011a86:	b2f6      	uxtb	r6, r6
 8011a88:	4283      	cmp	r3, r0
 8011a8a:	4637      	mov	r7, r6
 8011a8c:	dc04      	bgt.n	8011a98 <__swbuf_r+0x3a>
 8011a8e:	4621      	mov	r1, r4
 8011a90:	4628      	mov	r0, r5
 8011a92:	f002 ff89 	bl	80149a8 <_fflush_r>
 8011a96:	b9e0      	cbnz	r0, 8011ad2 <__swbuf_r+0x74>
 8011a98:	68a3      	ldr	r3, [r4, #8]
 8011a9a:	3b01      	subs	r3, #1
 8011a9c:	60a3      	str	r3, [r4, #8]
 8011a9e:	6823      	ldr	r3, [r4, #0]
 8011aa0:	1c5a      	adds	r2, r3, #1
 8011aa2:	6022      	str	r2, [r4, #0]
 8011aa4:	701e      	strb	r6, [r3, #0]
 8011aa6:	6962      	ldr	r2, [r4, #20]
 8011aa8:	1c43      	adds	r3, r0, #1
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d004      	beq.n	8011ab8 <__swbuf_r+0x5a>
 8011aae:	89a3      	ldrh	r3, [r4, #12]
 8011ab0:	07db      	lsls	r3, r3, #31
 8011ab2:	d506      	bpl.n	8011ac2 <__swbuf_r+0x64>
 8011ab4:	2e0a      	cmp	r6, #10
 8011ab6:	d104      	bne.n	8011ac2 <__swbuf_r+0x64>
 8011ab8:	4621      	mov	r1, r4
 8011aba:	4628      	mov	r0, r5
 8011abc:	f002 ff74 	bl	80149a8 <_fflush_r>
 8011ac0:	b938      	cbnz	r0, 8011ad2 <__swbuf_r+0x74>
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ac6:	4621      	mov	r1, r4
 8011ac8:	4628      	mov	r0, r5
 8011aca:	f000 f805 	bl	8011ad8 <__swsetup_r>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d0d5      	beq.n	8011a7e <__swbuf_r+0x20>
 8011ad2:	f04f 37ff 	mov.w	r7, #4294967295
 8011ad6:	e7f4      	b.n	8011ac2 <__swbuf_r+0x64>

08011ad8 <__swsetup_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	4b2a      	ldr	r3, [pc, #168]	; (8011b84 <__swsetup_r+0xac>)
 8011adc:	4605      	mov	r5, r0
 8011ade:	6818      	ldr	r0, [r3, #0]
 8011ae0:	460c      	mov	r4, r1
 8011ae2:	b118      	cbz	r0, 8011aec <__swsetup_r+0x14>
 8011ae4:	6a03      	ldr	r3, [r0, #32]
 8011ae6:	b90b      	cbnz	r3, 8011aec <__swsetup_r+0x14>
 8011ae8:	f7ff fe48 	bl	801177c <__sinit>
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011af2:	0718      	lsls	r0, r3, #28
 8011af4:	d422      	bmi.n	8011b3c <__swsetup_r+0x64>
 8011af6:	06d9      	lsls	r1, r3, #27
 8011af8:	d407      	bmi.n	8011b0a <__swsetup_r+0x32>
 8011afa:	2309      	movs	r3, #9
 8011afc:	602b      	str	r3, [r5, #0]
 8011afe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b02:	81a3      	strh	r3, [r4, #12]
 8011b04:	f04f 30ff 	mov.w	r0, #4294967295
 8011b08:	e034      	b.n	8011b74 <__swsetup_r+0x9c>
 8011b0a:	0758      	lsls	r0, r3, #29
 8011b0c:	d512      	bpl.n	8011b34 <__swsetup_r+0x5c>
 8011b0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b10:	b141      	cbz	r1, 8011b24 <__swsetup_r+0x4c>
 8011b12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b16:	4299      	cmp	r1, r3
 8011b18:	d002      	beq.n	8011b20 <__swsetup_r+0x48>
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	f000 ffe0 	bl	8012ae0 <_free_r>
 8011b20:	2300      	movs	r3, #0
 8011b22:	6363      	str	r3, [r4, #52]	; 0x34
 8011b24:	89a3      	ldrh	r3, [r4, #12]
 8011b26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b2a:	81a3      	strh	r3, [r4, #12]
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	6063      	str	r3, [r4, #4]
 8011b30:	6923      	ldr	r3, [r4, #16]
 8011b32:	6023      	str	r3, [r4, #0]
 8011b34:	89a3      	ldrh	r3, [r4, #12]
 8011b36:	f043 0308 	orr.w	r3, r3, #8
 8011b3a:	81a3      	strh	r3, [r4, #12]
 8011b3c:	6923      	ldr	r3, [r4, #16]
 8011b3e:	b94b      	cbnz	r3, 8011b54 <__swsetup_r+0x7c>
 8011b40:	89a3      	ldrh	r3, [r4, #12]
 8011b42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b4a:	d003      	beq.n	8011b54 <__swsetup_r+0x7c>
 8011b4c:	4621      	mov	r1, r4
 8011b4e:	4628      	mov	r0, r5
 8011b50:	f002 ff8a 	bl	8014a68 <__smakebuf_r>
 8011b54:	89a0      	ldrh	r0, [r4, #12]
 8011b56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b5a:	f010 0301 	ands.w	r3, r0, #1
 8011b5e:	d00a      	beq.n	8011b76 <__swsetup_r+0x9e>
 8011b60:	2300      	movs	r3, #0
 8011b62:	60a3      	str	r3, [r4, #8]
 8011b64:	6963      	ldr	r3, [r4, #20]
 8011b66:	425b      	negs	r3, r3
 8011b68:	61a3      	str	r3, [r4, #24]
 8011b6a:	6923      	ldr	r3, [r4, #16]
 8011b6c:	b943      	cbnz	r3, 8011b80 <__swsetup_r+0xa8>
 8011b6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b72:	d1c4      	bne.n	8011afe <__swsetup_r+0x26>
 8011b74:	bd38      	pop	{r3, r4, r5, pc}
 8011b76:	0781      	lsls	r1, r0, #30
 8011b78:	bf58      	it	pl
 8011b7a:	6963      	ldrpl	r3, [r4, #20]
 8011b7c:	60a3      	str	r3, [r4, #8]
 8011b7e:	e7f4      	b.n	8011b6a <__swsetup_r+0x92>
 8011b80:	2000      	movs	r0, #0
 8011b82:	e7f7      	b.n	8011b74 <__swsetup_r+0x9c>
 8011b84:	24000238 	.word	0x24000238

08011b88 <memset>:
 8011b88:	4402      	add	r2, r0
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d100      	bne.n	8011b92 <memset+0xa>
 8011b90:	4770      	bx	lr
 8011b92:	f803 1b01 	strb.w	r1, [r3], #1
 8011b96:	e7f9      	b.n	8011b8c <memset+0x4>

08011b98 <strcat>:
 8011b98:	b510      	push	{r4, lr}
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	7814      	ldrb	r4, [r2, #0]
 8011b9e:	4613      	mov	r3, r2
 8011ba0:	3201      	adds	r2, #1
 8011ba2:	2c00      	cmp	r4, #0
 8011ba4:	d1fa      	bne.n	8011b9c <strcat+0x4>
 8011ba6:	3b01      	subs	r3, #1
 8011ba8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bb0:	2a00      	cmp	r2, #0
 8011bb2:	d1f9      	bne.n	8011ba8 <strcat+0x10>
 8011bb4:	bd10      	pop	{r4, pc}

08011bb6 <strncat>:
 8011bb6:	b530      	push	{r4, r5, lr}
 8011bb8:	4604      	mov	r4, r0
 8011bba:	7825      	ldrb	r5, [r4, #0]
 8011bbc:	4623      	mov	r3, r4
 8011bbe:	3401      	adds	r4, #1
 8011bc0:	2d00      	cmp	r5, #0
 8011bc2:	d1fa      	bne.n	8011bba <strncat+0x4>
 8011bc4:	3a01      	subs	r2, #1
 8011bc6:	d304      	bcc.n	8011bd2 <strncat+0x1c>
 8011bc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bcc:	f803 4b01 	strb.w	r4, [r3], #1
 8011bd0:	b904      	cbnz	r4, 8011bd4 <strncat+0x1e>
 8011bd2:	bd30      	pop	{r4, r5, pc}
 8011bd4:	2a00      	cmp	r2, #0
 8011bd6:	d1f5      	bne.n	8011bc4 <strncat+0xe>
 8011bd8:	701a      	strb	r2, [r3, #0]
 8011bda:	e7f3      	b.n	8011bc4 <strncat+0xe>

08011bdc <strncmp>:
 8011bdc:	b510      	push	{r4, lr}
 8011bde:	b16a      	cbz	r2, 8011bfc <strncmp+0x20>
 8011be0:	3901      	subs	r1, #1
 8011be2:	1884      	adds	r4, r0, r2
 8011be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011be8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d103      	bne.n	8011bf8 <strncmp+0x1c>
 8011bf0:	42a0      	cmp	r0, r4
 8011bf2:	d001      	beq.n	8011bf8 <strncmp+0x1c>
 8011bf4:	2a00      	cmp	r2, #0
 8011bf6:	d1f5      	bne.n	8011be4 <strncmp+0x8>
 8011bf8:	1ad0      	subs	r0, r2, r3
 8011bfa:	bd10      	pop	{r4, pc}
 8011bfc:	4610      	mov	r0, r2
 8011bfe:	e7fc      	b.n	8011bfa <strncmp+0x1e>

08011c00 <strncpy>:
 8011c00:	b510      	push	{r4, lr}
 8011c02:	3901      	subs	r1, #1
 8011c04:	4603      	mov	r3, r0
 8011c06:	b132      	cbz	r2, 8011c16 <strncpy+0x16>
 8011c08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011c0c:	f803 4b01 	strb.w	r4, [r3], #1
 8011c10:	3a01      	subs	r2, #1
 8011c12:	2c00      	cmp	r4, #0
 8011c14:	d1f7      	bne.n	8011c06 <strncpy+0x6>
 8011c16:	441a      	add	r2, r3
 8011c18:	2100      	movs	r1, #0
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d100      	bne.n	8011c20 <strncpy+0x20>
 8011c1e:	bd10      	pop	{r4, pc}
 8011c20:	f803 1b01 	strb.w	r1, [r3], #1
 8011c24:	e7f9      	b.n	8011c1a <strncpy+0x1a>
	...

08011c28 <strtok>:
 8011c28:	4b16      	ldr	r3, [pc, #88]	; (8011c84 <strtok+0x5c>)
 8011c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c2c:	681e      	ldr	r6, [r3, #0]
 8011c2e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011c30:	4605      	mov	r5, r0
 8011c32:	b9fc      	cbnz	r4, 8011c74 <strtok+0x4c>
 8011c34:	2050      	movs	r0, #80	; 0x50
 8011c36:	9101      	str	r1, [sp, #4]
 8011c38:	f001 faf6 	bl	8013228 <malloc>
 8011c3c:	9901      	ldr	r1, [sp, #4]
 8011c3e:	6470      	str	r0, [r6, #68]	; 0x44
 8011c40:	4602      	mov	r2, r0
 8011c42:	b920      	cbnz	r0, 8011c4e <strtok+0x26>
 8011c44:	4b10      	ldr	r3, [pc, #64]	; (8011c88 <strtok+0x60>)
 8011c46:	4811      	ldr	r0, [pc, #68]	; (8011c8c <strtok+0x64>)
 8011c48:	215b      	movs	r1, #91	; 0x5b
 8011c4a:	f000 f935 	bl	8011eb8 <__assert_func>
 8011c4e:	e9c0 4400 	strd	r4, r4, [r0]
 8011c52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011c56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011c5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011c5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011c62:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011c66:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011c6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011c6e:	6184      	str	r4, [r0, #24]
 8011c70:	7704      	strb	r4, [r0, #28]
 8011c72:	6244      	str	r4, [r0, #36]	; 0x24
 8011c74:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8011c76:	2301      	movs	r3, #1
 8011c78:	4628      	mov	r0, r5
 8011c7a:	b002      	add	sp, #8
 8011c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c80:	f000 b806 	b.w	8011c90 <__strtok_r>
 8011c84:	24000238 	.word	0x24000238
 8011c88:	08015f6b 	.word	0x08015f6b
 8011c8c:	08015f82 	.word	0x08015f82

08011c90 <__strtok_r>:
 8011c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c92:	b908      	cbnz	r0, 8011c98 <__strtok_r+0x8>
 8011c94:	6810      	ldr	r0, [r2, #0]
 8011c96:	b188      	cbz	r0, 8011cbc <__strtok_r+0x2c>
 8011c98:	4604      	mov	r4, r0
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011ca0:	460f      	mov	r7, r1
 8011ca2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011ca6:	b91e      	cbnz	r6, 8011cb0 <__strtok_r+0x20>
 8011ca8:	b965      	cbnz	r5, 8011cc4 <__strtok_r+0x34>
 8011caa:	6015      	str	r5, [r2, #0]
 8011cac:	4628      	mov	r0, r5
 8011cae:	e005      	b.n	8011cbc <__strtok_r+0x2c>
 8011cb0:	42b5      	cmp	r5, r6
 8011cb2:	d1f6      	bne.n	8011ca2 <__strtok_r+0x12>
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d1f0      	bne.n	8011c9a <__strtok_r+0xa>
 8011cb8:	6014      	str	r4, [r2, #0]
 8011cba:	7003      	strb	r3, [r0, #0]
 8011cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cbe:	461c      	mov	r4, r3
 8011cc0:	e00c      	b.n	8011cdc <__strtok_r+0x4c>
 8011cc2:	b915      	cbnz	r5, 8011cca <__strtok_r+0x3a>
 8011cc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011cc8:	460e      	mov	r6, r1
 8011cca:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011cce:	42ab      	cmp	r3, r5
 8011cd0:	d1f7      	bne.n	8011cc2 <__strtok_r+0x32>
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d0f3      	beq.n	8011cbe <__strtok_r+0x2e>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011cdc:	6014      	str	r4, [r2, #0]
 8011cde:	e7ed      	b.n	8011cbc <__strtok_r+0x2c>

08011ce0 <_localeconv_r>:
 8011ce0:	4800      	ldr	r0, [pc, #0]	; (8011ce4 <_localeconv_r+0x4>)
 8011ce2:	4770      	bx	lr
 8011ce4:	24000170 	.word	0x24000170

08011ce8 <_close_r>:
 8011ce8:	b538      	push	{r3, r4, r5, lr}
 8011cea:	4d06      	ldr	r5, [pc, #24]	; (8011d04 <_close_r+0x1c>)
 8011cec:	2300      	movs	r3, #0
 8011cee:	4604      	mov	r4, r0
 8011cf0:	4608      	mov	r0, r1
 8011cf2:	602b      	str	r3, [r5, #0]
 8011cf4:	f7f4 fb1b 	bl	800632e <_close>
 8011cf8:	1c43      	adds	r3, r0, #1
 8011cfa:	d102      	bne.n	8011d02 <_close_r+0x1a>
 8011cfc:	682b      	ldr	r3, [r5, #0]
 8011cfe:	b103      	cbz	r3, 8011d02 <_close_r+0x1a>
 8011d00:	6023      	str	r3, [r4, #0]
 8011d02:	bd38      	pop	{r3, r4, r5, pc}
 8011d04:	2404542c 	.word	0x2404542c

08011d08 <_reclaim_reent>:
 8011d08:	4b29      	ldr	r3, [pc, #164]	; (8011db0 <_reclaim_reent+0xa8>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4283      	cmp	r3, r0
 8011d0e:	b570      	push	{r4, r5, r6, lr}
 8011d10:	4604      	mov	r4, r0
 8011d12:	d04b      	beq.n	8011dac <_reclaim_reent+0xa4>
 8011d14:	69c3      	ldr	r3, [r0, #28]
 8011d16:	b143      	cbz	r3, 8011d2a <_reclaim_reent+0x22>
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d144      	bne.n	8011da8 <_reclaim_reent+0xa0>
 8011d1e:	69e3      	ldr	r3, [r4, #28]
 8011d20:	6819      	ldr	r1, [r3, #0]
 8011d22:	b111      	cbz	r1, 8011d2a <_reclaim_reent+0x22>
 8011d24:	4620      	mov	r0, r4
 8011d26:	f000 fedb 	bl	8012ae0 <_free_r>
 8011d2a:	6961      	ldr	r1, [r4, #20]
 8011d2c:	b111      	cbz	r1, 8011d34 <_reclaim_reent+0x2c>
 8011d2e:	4620      	mov	r0, r4
 8011d30:	f000 fed6 	bl	8012ae0 <_free_r>
 8011d34:	69e1      	ldr	r1, [r4, #28]
 8011d36:	b111      	cbz	r1, 8011d3e <_reclaim_reent+0x36>
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f000 fed1 	bl	8012ae0 <_free_r>
 8011d3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011d40:	b111      	cbz	r1, 8011d48 <_reclaim_reent+0x40>
 8011d42:	4620      	mov	r0, r4
 8011d44:	f000 fecc 	bl	8012ae0 <_free_r>
 8011d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d4a:	b111      	cbz	r1, 8011d52 <_reclaim_reent+0x4a>
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f000 fec7 	bl	8012ae0 <_free_r>
 8011d52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011d54:	b111      	cbz	r1, 8011d5c <_reclaim_reent+0x54>
 8011d56:	4620      	mov	r0, r4
 8011d58:	f000 fec2 	bl	8012ae0 <_free_r>
 8011d5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011d5e:	b111      	cbz	r1, 8011d66 <_reclaim_reent+0x5e>
 8011d60:	4620      	mov	r0, r4
 8011d62:	f000 febd 	bl	8012ae0 <_free_r>
 8011d66:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011d68:	b111      	cbz	r1, 8011d70 <_reclaim_reent+0x68>
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f000 feb8 	bl	8012ae0 <_free_r>
 8011d70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011d72:	b111      	cbz	r1, 8011d7a <_reclaim_reent+0x72>
 8011d74:	4620      	mov	r0, r4
 8011d76:	f000 feb3 	bl	8012ae0 <_free_r>
 8011d7a:	6a23      	ldr	r3, [r4, #32]
 8011d7c:	b1b3      	cbz	r3, 8011dac <_reclaim_reent+0xa4>
 8011d7e:	4620      	mov	r0, r4
 8011d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d84:	4718      	bx	r3
 8011d86:	5949      	ldr	r1, [r1, r5]
 8011d88:	b941      	cbnz	r1, 8011d9c <_reclaim_reent+0x94>
 8011d8a:	3504      	adds	r5, #4
 8011d8c:	69e3      	ldr	r3, [r4, #28]
 8011d8e:	2d80      	cmp	r5, #128	; 0x80
 8011d90:	68d9      	ldr	r1, [r3, #12]
 8011d92:	d1f8      	bne.n	8011d86 <_reclaim_reent+0x7e>
 8011d94:	4620      	mov	r0, r4
 8011d96:	f000 fea3 	bl	8012ae0 <_free_r>
 8011d9a:	e7c0      	b.n	8011d1e <_reclaim_reent+0x16>
 8011d9c:	680e      	ldr	r6, [r1, #0]
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 fe9e 	bl	8012ae0 <_free_r>
 8011da4:	4631      	mov	r1, r6
 8011da6:	e7ef      	b.n	8011d88 <_reclaim_reent+0x80>
 8011da8:	2500      	movs	r5, #0
 8011daa:	e7ef      	b.n	8011d8c <_reclaim_reent+0x84>
 8011dac:	bd70      	pop	{r4, r5, r6, pc}
 8011dae:	bf00      	nop
 8011db0:	24000238 	.word	0x24000238

08011db4 <_lseek_r>:
 8011db4:	b538      	push	{r3, r4, r5, lr}
 8011db6:	4d07      	ldr	r5, [pc, #28]	; (8011dd4 <_lseek_r+0x20>)
 8011db8:	4604      	mov	r4, r0
 8011dba:	4608      	mov	r0, r1
 8011dbc:	4611      	mov	r1, r2
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	602a      	str	r2, [r5, #0]
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	f7f4 fabd 	bl	8006342 <_lseek>
 8011dc8:	1c43      	adds	r3, r0, #1
 8011dca:	d102      	bne.n	8011dd2 <_lseek_r+0x1e>
 8011dcc:	682b      	ldr	r3, [r5, #0]
 8011dce:	b103      	cbz	r3, 8011dd2 <_lseek_r+0x1e>
 8011dd0:	6023      	str	r3, [r4, #0]
 8011dd2:	bd38      	pop	{r3, r4, r5, pc}
 8011dd4:	2404542c 	.word	0x2404542c

08011dd8 <_read_r>:
 8011dd8:	b538      	push	{r3, r4, r5, lr}
 8011dda:	4d07      	ldr	r5, [pc, #28]	; (8011df8 <_read_r+0x20>)
 8011ddc:	4604      	mov	r4, r0
 8011dde:	4608      	mov	r0, r1
 8011de0:	4611      	mov	r1, r2
 8011de2:	2200      	movs	r2, #0
 8011de4:	602a      	str	r2, [r5, #0]
 8011de6:	461a      	mov	r2, r3
 8011de8:	f7f4 fa86 	bl	80062f8 <_read>
 8011dec:	1c43      	adds	r3, r0, #1
 8011dee:	d102      	bne.n	8011df6 <_read_r+0x1e>
 8011df0:	682b      	ldr	r3, [r5, #0]
 8011df2:	b103      	cbz	r3, 8011df6 <_read_r+0x1e>
 8011df4:	6023      	str	r3, [r4, #0]
 8011df6:	bd38      	pop	{r3, r4, r5, pc}
 8011df8:	2404542c 	.word	0x2404542c

08011dfc <_write_r>:
 8011dfc:	b538      	push	{r3, r4, r5, lr}
 8011dfe:	4d07      	ldr	r5, [pc, #28]	; (8011e1c <_write_r+0x20>)
 8011e00:	4604      	mov	r4, r0
 8011e02:	4608      	mov	r0, r1
 8011e04:	4611      	mov	r1, r2
 8011e06:	2200      	movs	r2, #0
 8011e08:	602a      	str	r2, [r5, #0]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	f7f4 fa82 	bl	8006314 <_write>
 8011e10:	1c43      	adds	r3, r0, #1
 8011e12:	d102      	bne.n	8011e1a <_write_r+0x1e>
 8011e14:	682b      	ldr	r3, [r5, #0]
 8011e16:	b103      	cbz	r3, 8011e1a <_write_r+0x1e>
 8011e18:	6023      	str	r3, [r4, #0]
 8011e1a:	bd38      	pop	{r3, r4, r5, pc}
 8011e1c:	2404542c 	.word	0x2404542c

08011e20 <__errno>:
 8011e20:	4b01      	ldr	r3, [pc, #4]	; (8011e28 <__errno+0x8>)
 8011e22:	6818      	ldr	r0, [r3, #0]
 8011e24:	4770      	bx	lr
 8011e26:	bf00      	nop
 8011e28:	24000238 	.word	0x24000238

08011e2c <__libc_init_array>:
 8011e2c:	b570      	push	{r4, r5, r6, lr}
 8011e2e:	4d0d      	ldr	r5, [pc, #52]	; (8011e64 <__libc_init_array+0x38>)
 8011e30:	4c0d      	ldr	r4, [pc, #52]	; (8011e68 <__libc_init_array+0x3c>)
 8011e32:	1b64      	subs	r4, r4, r5
 8011e34:	10a4      	asrs	r4, r4, #2
 8011e36:	2600      	movs	r6, #0
 8011e38:	42a6      	cmp	r6, r4
 8011e3a:	d109      	bne.n	8011e50 <__libc_init_array+0x24>
 8011e3c:	4d0b      	ldr	r5, [pc, #44]	; (8011e6c <__libc_init_array+0x40>)
 8011e3e:	4c0c      	ldr	r4, [pc, #48]	; (8011e70 <__libc_init_array+0x44>)
 8011e40:	f003 f84e 	bl	8014ee0 <_init>
 8011e44:	1b64      	subs	r4, r4, r5
 8011e46:	10a4      	asrs	r4, r4, #2
 8011e48:	2600      	movs	r6, #0
 8011e4a:	42a6      	cmp	r6, r4
 8011e4c:	d105      	bne.n	8011e5a <__libc_init_array+0x2e>
 8011e4e:	bd70      	pop	{r4, r5, r6, pc}
 8011e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e54:	4798      	blx	r3
 8011e56:	3601      	adds	r6, #1
 8011e58:	e7ee      	b.n	8011e38 <__libc_init_array+0xc>
 8011e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e5e:	4798      	blx	r3
 8011e60:	3601      	adds	r6, #1
 8011e62:	e7f2      	b.n	8011e4a <__libc_init_array+0x1e>
 8011e64:	08016280 	.word	0x08016280
 8011e68:	08016280 	.word	0x08016280
 8011e6c:	08016280 	.word	0x08016280
 8011e70:	08016284 	.word	0x08016284

08011e74 <__retarget_lock_init_recursive>:
 8011e74:	4770      	bx	lr

08011e76 <__retarget_lock_acquire_recursive>:
 8011e76:	4770      	bx	lr

08011e78 <__retarget_lock_release_recursive>:
 8011e78:	4770      	bx	lr

08011e7a <strcpy>:
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e80:	f803 2b01 	strb.w	r2, [r3], #1
 8011e84:	2a00      	cmp	r2, #0
 8011e86:	d1f9      	bne.n	8011e7c <strcpy+0x2>
 8011e88:	4770      	bx	lr

08011e8a <memcpy>:
 8011e8a:	440a      	add	r2, r1
 8011e8c:	4291      	cmp	r1, r2
 8011e8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e92:	d100      	bne.n	8011e96 <memcpy+0xc>
 8011e94:	4770      	bx	lr
 8011e96:	b510      	push	{r4, lr}
 8011e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ea0:	4291      	cmp	r1, r2
 8011ea2:	d1f9      	bne.n	8011e98 <memcpy+0xe>
 8011ea4:	bd10      	pop	{r4, pc}
	...

08011ea8 <nan>:
 8011ea8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011eb0 <nan+0x8>
 8011eac:	4770      	bx	lr
 8011eae:	bf00      	nop
 8011eb0:	00000000 	.word	0x00000000
 8011eb4:	7ff80000 	.word	0x7ff80000

08011eb8 <__assert_func>:
 8011eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011eba:	4614      	mov	r4, r2
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	4b09      	ldr	r3, [pc, #36]	; (8011ee4 <__assert_func+0x2c>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	4605      	mov	r5, r0
 8011ec4:	68d8      	ldr	r0, [r3, #12]
 8011ec6:	b14c      	cbz	r4, 8011edc <__assert_func+0x24>
 8011ec8:	4b07      	ldr	r3, [pc, #28]	; (8011ee8 <__assert_func+0x30>)
 8011eca:	9100      	str	r1, [sp, #0]
 8011ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ed0:	4906      	ldr	r1, [pc, #24]	; (8011eec <__assert_func+0x34>)
 8011ed2:	462b      	mov	r3, r5
 8011ed4:	f002 fd90 	bl	80149f8 <fiprintf>
 8011ed8:	f002 fef6 	bl	8014cc8 <abort>
 8011edc:	4b04      	ldr	r3, [pc, #16]	; (8011ef0 <__assert_func+0x38>)
 8011ede:	461c      	mov	r4, r3
 8011ee0:	e7f3      	b.n	8011eca <__assert_func+0x12>
 8011ee2:	bf00      	nop
 8011ee4:	24000238 	.word	0x24000238
 8011ee8:	08015fe2 	.word	0x08015fe2
 8011eec:	08015fef 	.word	0x08015fef
 8011ef0:	08015177 	.word	0x08015177

08011ef4 <quorem>:
 8011ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef8:	6903      	ldr	r3, [r0, #16]
 8011efa:	690c      	ldr	r4, [r1, #16]
 8011efc:	42a3      	cmp	r3, r4
 8011efe:	4607      	mov	r7, r0
 8011f00:	db7e      	blt.n	8012000 <quorem+0x10c>
 8011f02:	3c01      	subs	r4, #1
 8011f04:	f101 0814 	add.w	r8, r1, #20
 8011f08:	f100 0514 	add.w	r5, r0, #20
 8011f0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f10:	9301      	str	r3, [sp, #4]
 8011f12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011f22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f26:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f2a:	d331      	bcc.n	8011f90 <quorem+0x9c>
 8011f2c:	f04f 0e00 	mov.w	lr, #0
 8011f30:	4640      	mov	r0, r8
 8011f32:	46ac      	mov	ip, r5
 8011f34:	46f2      	mov	sl, lr
 8011f36:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f3a:	b293      	uxth	r3, r2
 8011f3c:	fb06 e303 	mla	r3, r6, r3, lr
 8011f40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f44:	0c1a      	lsrs	r2, r3, #16
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	ebaa 0303 	sub.w	r3, sl, r3
 8011f4c:	f8dc a000 	ldr.w	sl, [ip]
 8011f50:	fa13 f38a 	uxtah	r3, r3, sl
 8011f54:	fb06 220e 	mla	r2, r6, lr, r2
 8011f58:	9300      	str	r3, [sp, #0]
 8011f5a:	9b00      	ldr	r3, [sp, #0]
 8011f5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f60:	b292      	uxth	r2, r2
 8011f62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011f66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f6a:	f8bd 3000 	ldrh.w	r3, [sp]
 8011f6e:	4581      	cmp	r9, r0
 8011f70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f74:	f84c 3b04 	str.w	r3, [ip], #4
 8011f78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011f7c:	d2db      	bcs.n	8011f36 <quorem+0x42>
 8011f7e:	f855 300b 	ldr.w	r3, [r5, fp]
 8011f82:	b92b      	cbnz	r3, 8011f90 <quorem+0x9c>
 8011f84:	9b01      	ldr	r3, [sp, #4]
 8011f86:	3b04      	subs	r3, #4
 8011f88:	429d      	cmp	r5, r3
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	d32c      	bcc.n	8011fe8 <quorem+0xf4>
 8011f8e:	613c      	str	r4, [r7, #16]
 8011f90:	4638      	mov	r0, r7
 8011f92:	f001 fcd5 	bl	8013940 <__mcmp>
 8011f96:	2800      	cmp	r0, #0
 8011f98:	db22      	blt.n	8011fe0 <quorem+0xec>
 8011f9a:	3601      	adds	r6, #1
 8011f9c:	4629      	mov	r1, r5
 8011f9e:	2000      	movs	r0, #0
 8011fa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8011fa4:	f8d1 c000 	ldr.w	ip, [r1]
 8011fa8:	b293      	uxth	r3, r2
 8011faa:	1ac3      	subs	r3, r0, r3
 8011fac:	0c12      	lsrs	r2, r2, #16
 8011fae:	fa13 f38c 	uxtah	r3, r3, ip
 8011fb2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011fb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011fba:	b29b      	uxth	r3, r3
 8011fbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fc0:	45c1      	cmp	r9, r8
 8011fc2:	f841 3b04 	str.w	r3, [r1], #4
 8011fc6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011fca:	d2e9      	bcs.n	8011fa0 <quorem+0xac>
 8011fcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fd4:	b922      	cbnz	r2, 8011fe0 <quorem+0xec>
 8011fd6:	3b04      	subs	r3, #4
 8011fd8:	429d      	cmp	r5, r3
 8011fda:	461a      	mov	r2, r3
 8011fdc:	d30a      	bcc.n	8011ff4 <quorem+0x100>
 8011fde:	613c      	str	r4, [r7, #16]
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	b003      	add	sp, #12
 8011fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe8:	6812      	ldr	r2, [r2, #0]
 8011fea:	3b04      	subs	r3, #4
 8011fec:	2a00      	cmp	r2, #0
 8011fee:	d1ce      	bne.n	8011f8e <quorem+0x9a>
 8011ff0:	3c01      	subs	r4, #1
 8011ff2:	e7c9      	b.n	8011f88 <quorem+0x94>
 8011ff4:	6812      	ldr	r2, [r2, #0]
 8011ff6:	3b04      	subs	r3, #4
 8011ff8:	2a00      	cmp	r2, #0
 8011ffa:	d1f0      	bne.n	8011fde <quorem+0xea>
 8011ffc:	3c01      	subs	r4, #1
 8011ffe:	e7eb      	b.n	8011fd8 <quorem+0xe4>
 8012000:	2000      	movs	r0, #0
 8012002:	e7ee      	b.n	8011fe2 <quorem+0xee>
 8012004:	0000      	movs	r0, r0
	...

08012008 <_dtoa_r>:
 8012008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200c:	ed2d 8b02 	vpush	{d8}
 8012010:	69c5      	ldr	r5, [r0, #28]
 8012012:	b091      	sub	sp, #68	; 0x44
 8012014:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012018:	ec59 8b10 	vmov	r8, r9, d0
 801201c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801201e:	9106      	str	r1, [sp, #24]
 8012020:	4606      	mov	r6, r0
 8012022:	9208      	str	r2, [sp, #32]
 8012024:	930c      	str	r3, [sp, #48]	; 0x30
 8012026:	b975      	cbnz	r5, 8012046 <_dtoa_r+0x3e>
 8012028:	2010      	movs	r0, #16
 801202a:	f001 f8fd 	bl	8013228 <malloc>
 801202e:	4602      	mov	r2, r0
 8012030:	61f0      	str	r0, [r6, #28]
 8012032:	b920      	cbnz	r0, 801203e <_dtoa_r+0x36>
 8012034:	4ba6      	ldr	r3, [pc, #664]	; (80122d0 <_dtoa_r+0x2c8>)
 8012036:	21ef      	movs	r1, #239	; 0xef
 8012038:	48a6      	ldr	r0, [pc, #664]	; (80122d4 <_dtoa_r+0x2cc>)
 801203a:	f7ff ff3d 	bl	8011eb8 <__assert_func>
 801203e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012042:	6005      	str	r5, [r0, #0]
 8012044:	60c5      	str	r5, [r0, #12]
 8012046:	69f3      	ldr	r3, [r6, #28]
 8012048:	6819      	ldr	r1, [r3, #0]
 801204a:	b151      	cbz	r1, 8012062 <_dtoa_r+0x5a>
 801204c:	685a      	ldr	r2, [r3, #4]
 801204e:	604a      	str	r2, [r1, #4]
 8012050:	2301      	movs	r3, #1
 8012052:	4093      	lsls	r3, r2
 8012054:	608b      	str	r3, [r1, #8]
 8012056:	4630      	mov	r0, r6
 8012058:	f001 f9ec 	bl	8013434 <_Bfree>
 801205c:	69f3      	ldr	r3, [r6, #28]
 801205e:	2200      	movs	r2, #0
 8012060:	601a      	str	r2, [r3, #0]
 8012062:	f1b9 0300 	subs.w	r3, r9, #0
 8012066:	bfbb      	ittet	lt
 8012068:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801206c:	9303      	strlt	r3, [sp, #12]
 801206e:	2300      	movge	r3, #0
 8012070:	2201      	movlt	r2, #1
 8012072:	bfac      	ite	ge
 8012074:	6023      	strge	r3, [r4, #0]
 8012076:	6022      	strlt	r2, [r4, #0]
 8012078:	4b97      	ldr	r3, [pc, #604]	; (80122d8 <_dtoa_r+0x2d0>)
 801207a:	9c03      	ldr	r4, [sp, #12]
 801207c:	43a3      	bics	r3, r4
 801207e:	d11c      	bne.n	80120ba <_dtoa_r+0xb2>
 8012080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012082:	f242 730f 	movw	r3, #9999	; 0x270f
 8012086:	6013      	str	r3, [r2, #0]
 8012088:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801208c:	ea53 0308 	orrs.w	r3, r3, r8
 8012090:	f000 84fb 	beq.w	8012a8a <_dtoa_r+0xa82>
 8012094:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012096:	b963      	cbnz	r3, 80120b2 <_dtoa_r+0xaa>
 8012098:	4b90      	ldr	r3, [pc, #576]	; (80122dc <_dtoa_r+0x2d4>)
 801209a:	e020      	b.n	80120de <_dtoa_r+0xd6>
 801209c:	4b90      	ldr	r3, [pc, #576]	; (80122e0 <_dtoa_r+0x2d8>)
 801209e:	9301      	str	r3, [sp, #4]
 80120a0:	3308      	adds	r3, #8
 80120a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80120a4:	6013      	str	r3, [r2, #0]
 80120a6:	9801      	ldr	r0, [sp, #4]
 80120a8:	b011      	add	sp, #68	; 0x44
 80120aa:	ecbd 8b02 	vpop	{d8}
 80120ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b2:	4b8a      	ldr	r3, [pc, #552]	; (80122dc <_dtoa_r+0x2d4>)
 80120b4:	9301      	str	r3, [sp, #4]
 80120b6:	3303      	adds	r3, #3
 80120b8:	e7f3      	b.n	80120a2 <_dtoa_r+0x9a>
 80120ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80120be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80120c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c6:	d10c      	bne.n	80120e2 <_dtoa_r+0xda>
 80120c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120ca:	2301      	movs	r3, #1
 80120cc:	6013      	str	r3, [r2, #0]
 80120ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f000 84d7 	beq.w	8012a84 <_dtoa_r+0xa7c>
 80120d6:	4b83      	ldr	r3, [pc, #524]	; (80122e4 <_dtoa_r+0x2dc>)
 80120d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80120da:	6013      	str	r3, [r2, #0]
 80120dc:	3b01      	subs	r3, #1
 80120de:	9301      	str	r3, [sp, #4]
 80120e0:	e7e1      	b.n	80120a6 <_dtoa_r+0x9e>
 80120e2:	aa0e      	add	r2, sp, #56	; 0x38
 80120e4:	a90f      	add	r1, sp, #60	; 0x3c
 80120e6:	4630      	mov	r0, r6
 80120e8:	eeb0 0b48 	vmov.f64	d0, d8
 80120ec:	f001 fd3e 	bl	8013b6c <__d2b>
 80120f0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80120f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120f6:	4605      	mov	r5, r0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d046      	beq.n	801218a <_dtoa_r+0x182>
 80120fc:	eeb0 7b48 	vmov.f64	d7, d8
 8012100:	ee18 1a90 	vmov	r1, s17
 8012104:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012108:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801210c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012114:	2000      	movs	r0, #0
 8012116:	ee07 1a90 	vmov	s15, r1
 801211a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801211e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80122b8 <_dtoa_r+0x2b0>
 8012122:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012126:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80122c0 <_dtoa_r+0x2b8>
 801212a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801212e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80122c8 <_dtoa_r+0x2c0>
 8012132:	ee07 3a90 	vmov	s15, r3
 8012136:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801213a:	eeb0 7b46 	vmov.f64	d7, d6
 801213e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012142:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012146:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214e:	ee16 ba90 	vmov	fp, s13
 8012152:	9009      	str	r0, [sp, #36]	; 0x24
 8012154:	d508      	bpl.n	8012168 <_dtoa_r+0x160>
 8012156:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801215a:	eeb4 6b47 	vcmp.f64	d6, d7
 801215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012162:	bf18      	it	ne
 8012164:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012168:	f1bb 0f16 	cmp.w	fp, #22
 801216c:	d82b      	bhi.n	80121c6 <_dtoa_r+0x1be>
 801216e:	495e      	ldr	r1, [pc, #376]	; (80122e8 <_dtoa_r+0x2e0>)
 8012170:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8012174:	ed91 7b00 	vldr	d7, [r1]
 8012178:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012180:	d501      	bpl.n	8012186 <_dtoa_r+0x17e>
 8012182:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012186:	2100      	movs	r1, #0
 8012188:	e01e      	b.n	80121c8 <_dtoa_r+0x1c0>
 801218a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801218c:	4413      	add	r3, r2
 801218e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8012192:	2920      	cmp	r1, #32
 8012194:	bfc1      	itttt	gt
 8012196:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801219a:	408c      	lslgt	r4, r1
 801219c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80121a0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80121a4:	bfd6      	itet	le
 80121a6:	f1c1 0120 	rsble	r1, r1, #32
 80121aa:	4321      	orrgt	r1, r4
 80121ac:	fa08 f101 	lslle.w	r1, r8, r1
 80121b0:	ee07 1a90 	vmov	s15, r1
 80121b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80121b8:	3b01      	subs	r3, #1
 80121ba:	ee17 1a90 	vmov	r1, s15
 80121be:	2001      	movs	r0, #1
 80121c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80121c4:	e7a7      	b.n	8012116 <_dtoa_r+0x10e>
 80121c6:	2101      	movs	r1, #1
 80121c8:	1ad2      	subs	r2, r2, r3
 80121ca:	1e53      	subs	r3, r2, #1
 80121cc:	9305      	str	r3, [sp, #20]
 80121ce:	bf45      	ittet	mi
 80121d0:	f1c2 0301 	rsbmi	r3, r2, #1
 80121d4:	9304      	strmi	r3, [sp, #16]
 80121d6:	2300      	movpl	r3, #0
 80121d8:	2300      	movmi	r3, #0
 80121da:	bf4c      	ite	mi
 80121dc:	9305      	strmi	r3, [sp, #20]
 80121de:	9304      	strpl	r3, [sp, #16]
 80121e0:	f1bb 0f00 	cmp.w	fp, #0
 80121e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80121e6:	db18      	blt.n	801221a <_dtoa_r+0x212>
 80121e8:	9b05      	ldr	r3, [sp, #20]
 80121ea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80121ee:	445b      	add	r3, fp
 80121f0:	9305      	str	r3, [sp, #20]
 80121f2:	2300      	movs	r3, #0
 80121f4:	9a06      	ldr	r2, [sp, #24]
 80121f6:	2a09      	cmp	r2, #9
 80121f8:	d848      	bhi.n	801228c <_dtoa_r+0x284>
 80121fa:	2a05      	cmp	r2, #5
 80121fc:	bfc4      	itt	gt
 80121fe:	3a04      	subgt	r2, #4
 8012200:	9206      	strgt	r2, [sp, #24]
 8012202:	9a06      	ldr	r2, [sp, #24]
 8012204:	f1a2 0202 	sub.w	r2, r2, #2
 8012208:	bfcc      	ite	gt
 801220a:	2400      	movgt	r4, #0
 801220c:	2401      	movle	r4, #1
 801220e:	2a03      	cmp	r2, #3
 8012210:	d847      	bhi.n	80122a2 <_dtoa_r+0x29a>
 8012212:	e8df f002 	tbb	[pc, r2]
 8012216:	2d0b      	.short	0x2d0b
 8012218:	392b      	.short	0x392b
 801221a:	9b04      	ldr	r3, [sp, #16]
 801221c:	2200      	movs	r2, #0
 801221e:	eba3 030b 	sub.w	r3, r3, fp
 8012222:	9304      	str	r3, [sp, #16]
 8012224:	920a      	str	r2, [sp, #40]	; 0x28
 8012226:	f1cb 0300 	rsb	r3, fp, #0
 801222a:	e7e3      	b.n	80121f4 <_dtoa_r+0x1ec>
 801222c:	2200      	movs	r2, #0
 801222e:	9207      	str	r2, [sp, #28]
 8012230:	9a08      	ldr	r2, [sp, #32]
 8012232:	2a00      	cmp	r2, #0
 8012234:	dc38      	bgt.n	80122a8 <_dtoa_r+0x2a0>
 8012236:	f04f 0a01 	mov.w	sl, #1
 801223a:	46d1      	mov	r9, sl
 801223c:	4652      	mov	r2, sl
 801223e:	f8cd a020 	str.w	sl, [sp, #32]
 8012242:	69f7      	ldr	r7, [r6, #28]
 8012244:	2100      	movs	r1, #0
 8012246:	2004      	movs	r0, #4
 8012248:	f100 0c14 	add.w	ip, r0, #20
 801224c:	4594      	cmp	ip, r2
 801224e:	d930      	bls.n	80122b2 <_dtoa_r+0x2aa>
 8012250:	6079      	str	r1, [r7, #4]
 8012252:	4630      	mov	r0, r6
 8012254:	930d      	str	r3, [sp, #52]	; 0x34
 8012256:	f001 f8ad 	bl	80133b4 <_Balloc>
 801225a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801225c:	9001      	str	r0, [sp, #4]
 801225e:	4602      	mov	r2, r0
 8012260:	2800      	cmp	r0, #0
 8012262:	d145      	bne.n	80122f0 <_dtoa_r+0x2e8>
 8012264:	4b21      	ldr	r3, [pc, #132]	; (80122ec <_dtoa_r+0x2e4>)
 8012266:	f240 11af 	movw	r1, #431	; 0x1af
 801226a:	e6e5      	b.n	8012038 <_dtoa_r+0x30>
 801226c:	2201      	movs	r2, #1
 801226e:	e7de      	b.n	801222e <_dtoa_r+0x226>
 8012270:	2200      	movs	r2, #0
 8012272:	9207      	str	r2, [sp, #28]
 8012274:	9a08      	ldr	r2, [sp, #32]
 8012276:	eb0b 0a02 	add.w	sl, fp, r2
 801227a:	f10a 0901 	add.w	r9, sl, #1
 801227e:	464a      	mov	r2, r9
 8012280:	2a01      	cmp	r2, #1
 8012282:	bfb8      	it	lt
 8012284:	2201      	movlt	r2, #1
 8012286:	e7dc      	b.n	8012242 <_dtoa_r+0x23a>
 8012288:	2201      	movs	r2, #1
 801228a:	e7f2      	b.n	8012272 <_dtoa_r+0x26a>
 801228c:	2401      	movs	r4, #1
 801228e:	2200      	movs	r2, #0
 8012290:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8012294:	f04f 3aff 	mov.w	sl, #4294967295
 8012298:	2100      	movs	r1, #0
 801229a:	46d1      	mov	r9, sl
 801229c:	2212      	movs	r2, #18
 801229e:	9108      	str	r1, [sp, #32]
 80122a0:	e7cf      	b.n	8012242 <_dtoa_r+0x23a>
 80122a2:	2201      	movs	r2, #1
 80122a4:	9207      	str	r2, [sp, #28]
 80122a6:	e7f5      	b.n	8012294 <_dtoa_r+0x28c>
 80122a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80122ac:	46d1      	mov	r9, sl
 80122ae:	4652      	mov	r2, sl
 80122b0:	e7c7      	b.n	8012242 <_dtoa_r+0x23a>
 80122b2:	3101      	adds	r1, #1
 80122b4:	0040      	lsls	r0, r0, #1
 80122b6:	e7c7      	b.n	8012248 <_dtoa_r+0x240>
 80122b8:	636f4361 	.word	0x636f4361
 80122bc:	3fd287a7 	.word	0x3fd287a7
 80122c0:	8b60c8b3 	.word	0x8b60c8b3
 80122c4:	3fc68a28 	.word	0x3fc68a28
 80122c8:	509f79fb 	.word	0x509f79fb
 80122cc:	3fd34413 	.word	0x3fd34413
 80122d0:	08015f6b 	.word	0x08015f6b
 80122d4:	0801602b 	.word	0x0801602b
 80122d8:	7ff00000 	.word	0x7ff00000
 80122dc:	08016027 	.word	0x08016027
 80122e0:	0801601e 	.word	0x0801601e
 80122e4:	08016274 	.word	0x08016274
 80122e8:	08016178 	.word	0x08016178
 80122ec:	08016083 	.word	0x08016083
 80122f0:	69f2      	ldr	r2, [r6, #28]
 80122f2:	9901      	ldr	r1, [sp, #4]
 80122f4:	6011      	str	r1, [r2, #0]
 80122f6:	f1b9 0f0e 	cmp.w	r9, #14
 80122fa:	d86c      	bhi.n	80123d6 <_dtoa_r+0x3ce>
 80122fc:	2c00      	cmp	r4, #0
 80122fe:	d06a      	beq.n	80123d6 <_dtoa_r+0x3ce>
 8012300:	f1bb 0f00 	cmp.w	fp, #0
 8012304:	f340 80a0 	ble.w	8012448 <_dtoa_r+0x440>
 8012308:	4ac1      	ldr	r2, [pc, #772]	; (8012610 <_dtoa_r+0x608>)
 801230a:	f00b 010f 	and.w	r1, fp, #15
 801230e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012312:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012316:	ed92 7b00 	vldr	d7, [r2]
 801231a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801231e:	f000 8087 	beq.w	8012430 <_dtoa_r+0x428>
 8012322:	49bc      	ldr	r1, [pc, #752]	; (8012614 <_dtoa_r+0x60c>)
 8012324:	ed91 6b08 	vldr	d6, [r1, #32]
 8012328:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801232c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012330:	f002 020f 	and.w	r2, r2, #15
 8012334:	2103      	movs	r1, #3
 8012336:	48b7      	ldr	r0, [pc, #732]	; (8012614 <_dtoa_r+0x60c>)
 8012338:	2a00      	cmp	r2, #0
 801233a:	d17b      	bne.n	8012434 <_dtoa_r+0x42c>
 801233c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012340:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012344:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012348:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801234a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801234e:	2a00      	cmp	r2, #0
 8012350:	f000 80a0 	beq.w	8012494 <_dtoa_r+0x48c>
 8012354:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012358:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012360:	f140 8098 	bpl.w	8012494 <_dtoa_r+0x48c>
 8012364:	f1b9 0f00 	cmp.w	r9, #0
 8012368:	f000 8094 	beq.w	8012494 <_dtoa_r+0x48c>
 801236c:	f1ba 0f00 	cmp.w	sl, #0
 8012370:	dd2f      	ble.n	80123d2 <_dtoa_r+0x3ca>
 8012372:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012376:	ee27 7b06 	vmul.f64	d7, d7, d6
 801237a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801237e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012382:	3101      	adds	r1, #1
 8012384:	4654      	mov	r4, sl
 8012386:	ed9d 6b02 	vldr	d6, [sp, #8]
 801238a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801238e:	ee07 1a90 	vmov	s15, r1
 8012392:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012396:	eea7 5b06 	vfma.f64	d5, d7, d6
 801239a:	ee15 7a90 	vmov	r7, s11
 801239e:	ec51 0b15 	vmov	r0, r1, d5
 80123a2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80123a6:	2c00      	cmp	r4, #0
 80123a8:	d177      	bne.n	801249a <_dtoa_r+0x492>
 80123aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80123ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 80123b2:	ec41 0b17 	vmov	d7, r0, r1
 80123b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123be:	f300 826a 	bgt.w	8012896 <_dtoa_r+0x88e>
 80123c2:	eeb1 7b47 	vneg.f64	d7, d7
 80123c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ce:	f100 8260 	bmi.w	8012892 <_dtoa_r+0x88a>
 80123d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80123d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80123d8:	2a00      	cmp	r2, #0
 80123da:	f2c0 811d 	blt.w	8012618 <_dtoa_r+0x610>
 80123de:	f1bb 0f0e 	cmp.w	fp, #14
 80123e2:	f300 8119 	bgt.w	8012618 <_dtoa_r+0x610>
 80123e6:	4b8a      	ldr	r3, [pc, #552]	; (8012610 <_dtoa_r+0x608>)
 80123e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80123ec:	ed93 6b00 	vldr	d6, [r3]
 80123f0:	9b08      	ldr	r3, [sp, #32]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	f280 80b7 	bge.w	8012566 <_dtoa_r+0x55e>
 80123f8:	f1b9 0f00 	cmp.w	r9, #0
 80123fc:	f300 80b3 	bgt.w	8012566 <_dtoa_r+0x55e>
 8012400:	f040 8246 	bne.w	8012890 <_dtoa_r+0x888>
 8012404:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012408:	ee26 6b07 	vmul.f64	d6, d6, d7
 801240c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012410:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012418:	464c      	mov	r4, r9
 801241a:	464f      	mov	r7, r9
 801241c:	f280 821c 	bge.w	8012858 <_dtoa_r+0x850>
 8012420:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012424:	2331      	movs	r3, #49	; 0x31
 8012426:	f808 3b01 	strb.w	r3, [r8], #1
 801242a:	f10b 0b01 	add.w	fp, fp, #1
 801242e:	e218      	b.n	8012862 <_dtoa_r+0x85a>
 8012430:	2102      	movs	r1, #2
 8012432:	e780      	b.n	8012336 <_dtoa_r+0x32e>
 8012434:	07d4      	lsls	r4, r2, #31
 8012436:	d504      	bpl.n	8012442 <_dtoa_r+0x43a>
 8012438:	ed90 6b00 	vldr	d6, [r0]
 801243c:	3101      	adds	r1, #1
 801243e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012442:	1052      	asrs	r2, r2, #1
 8012444:	3008      	adds	r0, #8
 8012446:	e777      	b.n	8012338 <_dtoa_r+0x330>
 8012448:	d022      	beq.n	8012490 <_dtoa_r+0x488>
 801244a:	f1cb 0200 	rsb	r2, fp, #0
 801244e:	4970      	ldr	r1, [pc, #448]	; (8012610 <_dtoa_r+0x608>)
 8012450:	f002 000f 	and.w	r0, r2, #15
 8012454:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012458:	ed91 7b00 	vldr	d7, [r1]
 801245c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012460:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012464:	486b      	ldr	r0, [pc, #428]	; (8012614 <_dtoa_r+0x60c>)
 8012466:	1112      	asrs	r2, r2, #4
 8012468:	2400      	movs	r4, #0
 801246a:	2102      	movs	r1, #2
 801246c:	b92a      	cbnz	r2, 801247a <_dtoa_r+0x472>
 801246e:	2c00      	cmp	r4, #0
 8012470:	f43f af6a 	beq.w	8012348 <_dtoa_r+0x340>
 8012474:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012478:	e766      	b.n	8012348 <_dtoa_r+0x340>
 801247a:	07d7      	lsls	r7, r2, #31
 801247c:	d505      	bpl.n	801248a <_dtoa_r+0x482>
 801247e:	ed90 6b00 	vldr	d6, [r0]
 8012482:	3101      	adds	r1, #1
 8012484:	2401      	movs	r4, #1
 8012486:	ee27 7b06 	vmul.f64	d7, d7, d6
 801248a:	1052      	asrs	r2, r2, #1
 801248c:	3008      	adds	r0, #8
 801248e:	e7ed      	b.n	801246c <_dtoa_r+0x464>
 8012490:	2102      	movs	r1, #2
 8012492:	e759      	b.n	8012348 <_dtoa_r+0x340>
 8012494:	465a      	mov	r2, fp
 8012496:	464c      	mov	r4, r9
 8012498:	e775      	b.n	8012386 <_dtoa_r+0x37e>
 801249a:	ec41 0b17 	vmov	d7, r0, r1
 801249e:	495c      	ldr	r1, [pc, #368]	; (8012610 <_dtoa_r+0x608>)
 80124a0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80124a4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80124a8:	9901      	ldr	r1, [sp, #4]
 80124aa:	440c      	add	r4, r1
 80124ac:	9907      	ldr	r1, [sp, #28]
 80124ae:	b351      	cbz	r1, 8012506 <_dtoa_r+0x4fe>
 80124b0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80124b4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80124b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80124bc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80124c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80124c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80124c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80124cc:	ee14 1a90 	vmov	r1, s9
 80124d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80124d4:	3130      	adds	r1, #48	; 0x30
 80124d6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80124da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80124de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e2:	f808 1b01 	strb.w	r1, [r8], #1
 80124e6:	d439      	bmi.n	801255c <_dtoa_r+0x554>
 80124e8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80124ec:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80124f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f4:	d472      	bmi.n	80125dc <_dtoa_r+0x5d4>
 80124f6:	45a0      	cmp	r8, r4
 80124f8:	f43f af6b 	beq.w	80123d2 <_dtoa_r+0x3ca>
 80124fc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012500:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012504:	e7e0      	b.n	80124c8 <_dtoa_r+0x4c0>
 8012506:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801250a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801250e:	4620      	mov	r0, r4
 8012510:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012514:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012518:	ee14 1a90 	vmov	r1, s9
 801251c:	3130      	adds	r1, #48	; 0x30
 801251e:	f808 1b01 	strb.w	r1, [r8], #1
 8012522:	45a0      	cmp	r8, r4
 8012524:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012528:	ee36 6b45 	vsub.f64	d6, d6, d5
 801252c:	d118      	bne.n	8012560 <_dtoa_r+0x558>
 801252e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012532:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012536:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801253e:	dc4d      	bgt.n	80125dc <_dtoa_r+0x5d4>
 8012540:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012544:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801254c:	f57f af41 	bpl.w	80123d2 <_dtoa_r+0x3ca>
 8012550:	4680      	mov	r8, r0
 8012552:	3801      	subs	r0, #1
 8012554:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012558:	2b30      	cmp	r3, #48	; 0x30
 801255a:	d0f9      	beq.n	8012550 <_dtoa_r+0x548>
 801255c:	4693      	mov	fp, r2
 801255e:	e02a      	b.n	80125b6 <_dtoa_r+0x5ae>
 8012560:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012564:	e7d6      	b.n	8012514 <_dtoa_r+0x50c>
 8012566:	ed9d 7b02 	vldr	d7, [sp, #8]
 801256a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801256e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012572:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012576:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801257a:	ee15 3a10 	vmov	r3, s10
 801257e:	3330      	adds	r3, #48	; 0x30
 8012580:	f808 3b01 	strb.w	r3, [r8], #1
 8012584:	9b01      	ldr	r3, [sp, #4]
 8012586:	eba8 0303 	sub.w	r3, r8, r3
 801258a:	4599      	cmp	r9, r3
 801258c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012590:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012594:	d133      	bne.n	80125fe <_dtoa_r+0x5f6>
 8012596:	ee37 7b07 	vadd.f64	d7, d7, d7
 801259a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a2:	dc1a      	bgt.n	80125da <_dtoa_r+0x5d2>
 80125a4:	eeb4 7b46 	vcmp.f64	d7, d6
 80125a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ac:	d103      	bne.n	80125b6 <_dtoa_r+0x5ae>
 80125ae:	ee15 3a10 	vmov	r3, s10
 80125b2:	07d9      	lsls	r1, r3, #31
 80125b4:	d411      	bmi.n	80125da <_dtoa_r+0x5d2>
 80125b6:	4629      	mov	r1, r5
 80125b8:	4630      	mov	r0, r6
 80125ba:	f000 ff3b 	bl	8013434 <_Bfree>
 80125be:	2300      	movs	r3, #0
 80125c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125c2:	f888 3000 	strb.w	r3, [r8]
 80125c6:	f10b 0301 	add.w	r3, fp, #1
 80125ca:	6013      	str	r3, [r2, #0]
 80125cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	f43f ad69 	beq.w	80120a6 <_dtoa_r+0x9e>
 80125d4:	f8c3 8000 	str.w	r8, [r3]
 80125d8:	e565      	b.n	80120a6 <_dtoa_r+0x9e>
 80125da:	465a      	mov	r2, fp
 80125dc:	4643      	mov	r3, r8
 80125de:	4698      	mov	r8, r3
 80125e0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80125e4:	2939      	cmp	r1, #57	; 0x39
 80125e6:	d106      	bne.n	80125f6 <_dtoa_r+0x5ee>
 80125e8:	9901      	ldr	r1, [sp, #4]
 80125ea:	4299      	cmp	r1, r3
 80125ec:	d1f7      	bne.n	80125de <_dtoa_r+0x5d6>
 80125ee:	9801      	ldr	r0, [sp, #4]
 80125f0:	2130      	movs	r1, #48	; 0x30
 80125f2:	3201      	adds	r2, #1
 80125f4:	7001      	strb	r1, [r0, #0]
 80125f6:	7819      	ldrb	r1, [r3, #0]
 80125f8:	3101      	adds	r1, #1
 80125fa:	7019      	strb	r1, [r3, #0]
 80125fc:	e7ae      	b.n	801255c <_dtoa_r+0x554>
 80125fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012602:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801260a:	d1b2      	bne.n	8012572 <_dtoa_r+0x56a>
 801260c:	e7d3      	b.n	80125b6 <_dtoa_r+0x5ae>
 801260e:	bf00      	nop
 8012610:	08016178 	.word	0x08016178
 8012614:	08016150 	.word	0x08016150
 8012618:	9907      	ldr	r1, [sp, #28]
 801261a:	2900      	cmp	r1, #0
 801261c:	f000 80d0 	beq.w	80127c0 <_dtoa_r+0x7b8>
 8012620:	9906      	ldr	r1, [sp, #24]
 8012622:	2901      	cmp	r1, #1
 8012624:	f300 80b4 	bgt.w	8012790 <_dtoa_r+0x788>
 8012628:	9909      	ldr	r1, [sp, #36]	; 0x24
 801262a:	2900      	cmp	r1, #0
 801262c:	f000 80ac 	beq.w	8012788 <_dtoa_r+0x780>
 8012630:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012634:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012638:	461c      	mov	r4, r3
 801263a:	9309      	str	r3, [sp, #36]	; 0x24
 801263c:	9b04      	ldr	r3, [sp, #16]
 801263e:	4413      	add	r3, r2
 8012640:	9304      	str	r3, [sp, #16]
 8012642:	9b05      	ldr	r3, [sp, #20]
 8012644:	2101      	movs	r1, #1
 8012646:	4413      	add	r3, r2
 8012648:	4630      	mov	r0, r6
 801264a:	9305      	str	r3, [sp, #20]
 801264c:	f000 fff2 	bl	8013634 <__i2b>
 8012650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012652:	4607      	mov	r7, r0
 8012654:	f1b8 0f00 	cmp.w	r8, #0
 8012658:	d00d      	beq.n	8012676 <_dtoa_r+0x66e>
 801265a:	9a05      	ldr	r2, [sp, #20]
 801265c:	2a00      	cmp	r2, #0
 801265e:	dd0a      	ble.n	8012676 <_dtoa_r+0x66e>
 8012660:	4542      	cmp	r2, r8
 8012662:	9904      	ldr	r1, [sp, #16]
 8012664:	bfa8      	it	ge
 8012666:	4642      	movge	r2, r8
 8012668:	1a89      	subs	r1, r1, r2
 801266a:	9104      	str	r1, [sp, #16]
 801266c:	9905      	ldr	r1, [sp, #20]
 801266e:	eba8 0802 	sub.w	r8, r8, r2
 8012672:	1a8a      	subs	r2, r1, r2
 8012674:	9205      	str	r2, [sp, #20]
 8012676:	b303      	cbz	r3, 80126ba <_dtoa_r+0x6b2>
 8012678:	9a07      	ldr	r2, [sp, #28]
 801267a:	2a00      	cmp	r2, #0
 801267c:	f000 80a5 	beq.w	80127ca <_dtoa_r+0x7c2>
 8012680:	2c00      	cmp	r4, #0
 8012682:	dd13      	ble.n	80126ac <_dtoa_r+0x6a4>
 8012684:	4639      	mov	r1, r7
 8012686:	4622      	mov	r2, r4
 8012688:	4630      	mov	r0, r6
 801268a:	930d      	str	r3, [sp, #52]	; 0x34
 801268c:	f001 f892 	bl	80137b4 <__pow5mult>
 8012690:	462a      	mov	r2, r5
 8012692:	4601      	mov	r1, r0
 8012694:	4607      	mov	r7, r0
 8012696:	4630      	mov	r0, r6
 8012698:	f000 ffe2 	bl	8013660 <__multiply>
 801269c:	4629      	mov	r1, r5
 801269e:	9009      	str	r0, [sp, #36]	; 0x24
 80126a0:	4630      	mov	r0, r6
 80126a2:	f000 fec7 	bl	8013434 <_Bfree>
 80126a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126aa:	4615      	mov	r5, r2
 80126ac:	1b1a      	subs	r2, r3, r4
 80126ae:	d004      	beq.n	80126ba <_dtoa_r+0x6b2>
 80126b0:	4629      	mov	r1, r5
 80126b2:	4630      	mov	r0, r6
 80126b4:	f001 f87e 	bl	80137b4 <__pow5mult>
 80126b8:	4605      	mov	r5, r0
 80126ba:	2101      	movs	r1, #1
 80126bc:	4630      	mov	r0, r6
 80126be:	f000 ffb9 	bl	8013634 <__i2b>
 80126c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	4604      	mov	r4, r0
 80126c8:	f340 8081 	ble.w	80127ce <_dtoa_r+0x7c6>
 80126cc:	461a      	mov	r2, r3
 80126ce:	4601      	mov	r1, r0
 80126d0:	4630      	mov	r0, r6
 80126d2:	f001 f86f 	bl	80137b4 <__pow5mult>
 80126d6:	9b06      	ldr	r3, [sp, #24]
 80126d8:	2b01      	cmp	r3, #1
 80126da:	4604      	mov	r4, r0
 80126dc:	dd7a      	ble.n	80127d4 <_dtoa_r+0x7cc>
 80126de:	2300      	movs	r3, #0
 80126e0:	9309      	str	r3, [sp, #36]	; 0x24
 80126e2:	6922      	ldr	r2, [r4, #16]
 80126e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80126e8:	6910      	ldr	r0, [r2, #16]
 80126ea:	f000 ff55 	bl	8013598 <__hi0bits>
 80126ee:	f1c0 0020 	rsb	r0, r0, #32
 80126f2:	9b05      	ldr	r3, [sp, #20]
 80126f4:	4418      	add	r0, r3
 80126f6:	f010 001f 	ands.w	r0, r0, #31
 80126fa:	f000 8093 	beq.w	8012824 <_dtoa_r+0x81c>
 80126fe:	f1c0 0220 	rsb	r2, r0, #32
 8012702:	2a04      	cmp	r2, #4
 8012704:	f340 8085 	ble.w	8012812 <_dtoa_r+0x80a>
 8012708:	9b04      	ldr	r3, [sp, #16]
 801270a:	f1c0 001c 	rsb	r0, r0, #28
 801270e:	4403      	add	r3, r0
 8012710:	9304      	str	r3, [sp, #16]
 8012712:	9b05      	ldr	r3, [sp, #20]
 8012714:	4480      	add	r8, r0
 8012716:	4403      	add	r3, r0
 8012718:	9305      	str	r3, [sp, #20]
 801271a:	9b04      	ldr	r3, [sp, #16]
 801271c:	2b00      	cmp	r3, #0
 801271e:	dd05      	ble.n	801272c <_dtoa_r+0x724>
 8012720:	4629      	mov	r1, r5
 8012722:	461a      	mov	r2, r3
 8012724:	4630      	mov	r0, r6
 8012726:	f001 f89f 	bl	8013868 <__lshift>
 801272a:	4605      	mov	r5, r0
 801272c:	9b05      	ldr	r3, [sp, #20]
 801272e:	2b00      	cmp	r3, #0
 8012730:	dd05      	ble.n	801273e <_dtoa_r+0x736>
 8012732:	4621      	mov	r1, r4
 8012734:	461a      	mov	r2, r3
 8012736:	4630      	mov	r0, r6
 8012738:	f001 f896 	bl	8013868 <__lshift>
 801273c:	4604      	mov	r4, r0
 801273e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012740:	2b00      	cmp	r3, #0
 8012742:	d071      	beq.n	8012828 <_dtoa_r+0x820>
 8012744:	4621      	mov	r1, r4
 8012746:	4628      	mov	r0, r5
 8012748:	f001 f8fa 	bl	8013940 <__mcmp>
 801274c:	2800      	cmp	r0, #0
 801274e:	da6b      	bge.n	8012828 <_dtoa_r+0x820>
 8012750:	2300      	movs	r3, #0
 8012752:	4629      	mov	r1, r5
 8012754:	220a      	movs	r2, #10
 8012756:	4630      	mov	r0, r6
 8012758:	f000 fe8e 	bl	8013478 <__multadd>
 801275c:	9b07      	ldr	r3, [sp, #28]
 801275e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012762:	4605      	mov	r5, r0
 8012764:	2b00      	cmp	r3, #0
 8012766:	f000 8197 	beq.w	8012a98 <_dtoa_r+0xa90>
 801276a:	4639      	mov	r1, r7
 801276c:	2300      	movs	r3, #0
 801276e:	220a      	movs	r2, #10
 8012770:	4630      	mov	r0, r6
 8012772:	f000 fe81 	bl	8013478 <__multadd>
 8012776:	f1ba 0f00 	cmp.w	sl, #0
 801277a:	4607      	mov	r7, r0
 801277c:	f300 8093 	bgt.w	80128a6 <_dtoa_r+0x89e>
 8012780:	9b06      	ldr	r3, [sp, #24]
 8012782:	2b02      	cmp	r3, #2
 8012784:	dc57      	bgt.n	8012836 <_dtoa_r+0x82e>
 8012786:	e08e      	b.n	80128a6 <_dtoa_r+0x89e>
 8012788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801278a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801278e:	e751      	b.n	8012634 <_dtoa_r+0x62c>
 8012790:	f109 34ff 	add.w	r4, r9, #4294967295
 8012794:	42a3      	cmp	r3, r4
 8012796:	bfbf      	itttt	lt
 8012798:	1ae2      	sublt	r2, r4, r3
 801279a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801279c:	189b      	addlt	r3, r3, r2
 801279e:	930a      	strlt	r3, [sp, #40]	; 0x28
 80127a0:	bfae      	itee	ge
 80127a2:	1b1c      	subge	r4, r3, r4
 80127a4:	4623      	movlt	r3, r4
 80127a6:	2400      	movlt	r4, #0
 80127a8:	f1b9 0f00 	cmp.w	r9, #0
 80127ac:	bfb5      	itete	lt
 80127ae:	9a04      	ldrlt	r2, [sp, #16]
 80127b0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80127b4:	eba2 0809 	sublt.w	r8, r2, r9
 80127b8:	464a      	movge	r2, r9
 80127ba:	bfb8      	it	lt
 80127bc:	2200      	movlt	r2, #0
 80127be:	e73c      	b.n	801263a <_dtoa_r+0x632>
 80127c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80127c4:	9f07      	ldr	r7, [sp, #28]
 80127c6:	461c      	mov	r4, r3
 80127c8:	e744      	b.n	8012654 <_dtoa_r+0x64c>
 80127ca:	461a      	mov	r2, r3
 80127cc:	e770      	b.n	80126b0 <_dtoa_r+0x6a8>
 80127ce:	9b06      	ldr	r3, [sp, #24]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	dc18      	bgt.n	8012806 <_dtoa_r+0x7fe>
 80127d4:	9b02      	ldr	r3, [sp, #8]
 80127d6:	b9b3      	cbnz	r3, 8012806 <_dtoa_r+0x7fe>
 80127d8:	9b03      	ldr	r3, [sp, #12]
 80127da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80127de:	b9a2      	cbnz	r2, 801280a <_dtoa_r+0x802>
 80127e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80127e4:	0d12      	lsrs	r2, r2, #20
 80127e6:	0512      	lsls	r2, r2, #20
 80127e8:	b18a      	cbz	r2, 801280e <_dtoa_r+0x806>
 80127ea:	9b04      	ldr	r3, [sp, #16]
 80127ec:	3301      	adds	r3, #1
 80127ee:	9304      	str	r3, [sp, #16]
 80127f0:	9b05      	ldr	r3, [sp, #20]
 80127f2:	3301      	adds	r3, #1
 80127f4:	9305      	str	r3, [sp, #20]
 80127f6:	2301      	movs	r3, #1
 80127f8:	9309      	str	r3, [sp, #36]	; 0x24
 80127fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	f47f af70 	bne.w	80126e2 <_dtoa_r+0x6da>
 8012802:	2001      	movs	r0, #1
 8012804:	e775      	b.n	80126f2 <_dtoa_r+0x6ea>
 8012806:	2300      	movs	r3, #0
 8012808:	e7f6      	b.n	80127f8 <_dtoa_r+0x7f0>
 801280a:	9b02      	ldr	r3, [sp, #8]
 801280c:	e7f4      	b.n	80127f8 <_dtoa_r+0x7f0>
 801280e:	9209      	str	r2, [sp, #36]	; 0x24
 8012810:	e7f3      	b.n	80127fa <_dtoa_r+0x7f2>
 8012812:	d082      	beq.n	801271a <_dtoa_r+0x712>
 8012814:	9b04      	ldr	r3, [sp, #16]
 8012816:	321c      	adds	r2, #28
 8012818:	4413      	add	r3, r2
 801281a:	9304      	str	r3, [sp, #16]
 801281c:	9b05      	ldr	r3, [sp, #20]
 801281e:	4490      	add	r8, r2
 8012820:	4413      	add	r3, r2
 8012822:	e779      	b.n	8012718 <_dtoa_r+0x710>
 8012824:	4602      	mov	r2, r0
 8012826:	e7f5      	b.n	8012814 <_dtoa_r+0x80c>
 8012828:	f1b9 0f00 	cmp.w	r9, #0
 801282c:	dc36      	bgt.n	801289c <_dtoa_r+0x894>
 801282e:	9b06      	ldr	r3, [sp, #24]
 8012830:	2b02      	cmp	r3, #2
 8012832:	dd33      	ble.n	801289c <_dtoa_r+0x894>
 8012834:	46ca      	mov	sl, r9
 8012836:	f1ba 0f00 	cmp.w	sl, #0
 801283a:	d10d      	bne.n	8012858 <_dtoa_r+0x850>
 801283c:	4621      	mov	r1, r4
 801283e:	4653      	mov	r3, sl
 8012840:	2205      	movs	r2, #5
 8012842:	4630      	mov	r0, r6
 8012844:	f000 fe18 	bl	8013478 <__multadd>
 8012848:	4601      	mov	r1, r0
 801284a:	4604      	mov	r4, r0
 801284c:	4628      	mov	r0, r5
 801284e:	f001 f877 	bl	8013940 <__mcmp>
 8012852:	2800      	cmp	r0, #0
 8012854:	f73f ade4 	bgt.w	8012420 <_dtoa_r+0x418>
 8012858:	9b08      	ldr	r3, [sp, #32]
 801285a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801285e:	ea6f 0b03 	mvn.w	fp, r3
 8012862:	f04f 0900 	mov.w	r9, #0
 8012866:	4621      	mov	r1, r4
 8012868:	4630      	mov	r0, r6
 801286a:	f000 fde3 	bl	8013434 <_Bfree>
 801286e:	2f00      	cmp	r7, #0
 8012870:	f43f aea1 	beq.w	80125b6 <_dtoa_r+0x5ae>
 8012874:	f1b9 0f00 	cmp.w	r9, #0
 8012878:	d005      	beq.n	8012886 <_dtoa_r+0x87e>
 801287a:	45b9      	cmp	r9, r7
 801287c:	d003      	beq.n	8012886 <_dtoa_r+0x87e>
 801287e:	4649      	mov	r1, r9
 8012880:	4630      	mov	r0, r6
 8012882:	f000 fdd7 	bl	8013434 <_Bfree>
 8012886:	4639      	mov	r1, r7
 8012888:	4630      	mov	r0, r6
 801288a:	f000 fdd3 	bl	8013434 <_Bfree>
 801288e:	e692      	b.n	80125b6 <_dtoa_r+0x5ae>
 8012890:	2400      	movs	r4, #0
 8012892:	4627      	mov	r7, r4
 8012894:	e7e0      	b.n	8012858 <_dtoa_r+0x850>
 8012896:	4693      	mov	fp, r2
 8012898:	4627      	mov	r7, r4
 801289a:	e5c1      	b.n	8012420 <_dtoa_r+0x418>
 801289c:	9b07      	ldr	r3, [sp, #28]
 801289e:	46ca      	mov	sl, r9
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 8100 	beq.w	8012aa6 <_dtoa_r+0xa9e>
 80128a6:	f1b8 0f00 	cmp.w	r8, #0
 80128aa:	dd05      	ble.n	80128b8 <_dtoa_r+0x8b0>
 80128ac:	4639      	mov	r1, r7
 80128ae:	4642      	mov	r2, r8
 80128b0:	4630      	mov	r0, r6
 80128b2:	f000 ffd9 	bl	8013868 <__lshift>
 80128b6:	4607      	mov	r7, r0
 80128b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d05d      	beq.n	801297a <_dtoa_r+0x972>
 80128be:	6879      	ldr	r1, [r7, #4]
 80128c0:	4630      	mov	r0, r6
 80128c2:	f000 fd77 	bl	80133b4 <_Balloc>
 80128c6:	4680      	mov	r8, r0
 80128c8:	b928      	cbnz	r0, 80128d6 <_dtoa_r+0x8ce>
 80128ca:	4b82      	ldr	r3, [pc, #520]	; (8012ad4 <_dtoa_r+0xacc>)
 80128cc:	4602      	mov	r2, r0
 80128ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80128d2:	f7ff bbb1 	b.w	8012038 <_dtoa_r+0x30>
 80128d6:	693a      	ldr	r2, [r7, #16]
 80128d8:	3202      	adds	r2, #2
 80128da:	0092      	lsls	r2, r2, #2
 80128dc:	f107 010c 	add.w	r1, r7, #12
 80128e0:	300c      	adds	r0, #12
 80128e2:	f7ff fad2 	bl	8011e8a <memcpy>
 80128e6:	2201      	movs	r2, #1
 80128e8:	4641      	mov	r1, r8
 80128ea:	4630      	mov	r0, r6
 80128ec:	f000 ffbc 	bl	8013868 <__lshift>
 80128f0:	9b01      	ldr	r3, [sp, #4]
 80128f2:	3301      	adds	r3, #1
 80128f4:	9304      	str	r3, [sp, #16]
 80128f6:	9b01      	ldr	r3, [sp, #4]
 80128f8:	4453      	add	r3, sl
 80128fa:	9308      	str	r3, [sp, #32]
 80128fc:	9b02      	ldr	r3, [sp, #8]
 80128fe:	f003 0301 	and.w	r3, r3, #1
 8012902:	46b9      	mov	r9, r7
 8012904:	9307      	str	r3, [sp, #28]
 8012906:	4607      	mov	r7, r0
 8012908:	9b04      	ldr	r3, [sp, #16]
 801290a:	4621      	mov	r1, r4
 801290c:	3b01      	subs	r3, #1
 801290e:	4628      	mov	r0, r5
 8012910:	9302      	str	r3, [sp, #8]
 8012912:	f7ff faef 	bl	8011ef4 <quorem>
 8012916:	4603      	mov	r3, r0
 8012918:	3330      	adds	r3, #48	; 0x30
 801291a:	9005      	str	r0, [sp, #20]
 801291c:	4649      	mov	r1, r9
 801291e:	4628      	mov	r0, r5
 8012920:	9309      	str	r3, [sp, #36]	; 0x24
 8012922:	f001 f80d 	bl	8013940 <__mcmp>
 8012926:	463a      	mov	r2, r7
 8012928:	4682      	mov	sl, r0
 801292a:	4621      	mov	r1, r4
 801292c:	4630      	mov	r0, r6
 801292e:	f001 f823 	bl	8013978 <__mdiff>
 8012932:	68c2      	ldr	r2, [r0, #12]
 8012934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012936:	4680      	mov	r8, r0
 8012938:	bb0a      	cbnz	r2, 801297e <_dtoa_r+0x976>
 801293a:	4601      	mov	r1, r0
 801293c:	4628      	mov	r0, r5
 801293e:	f000 ffff 	bl	8013940 <__mcmp>
 8012942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012944:	4602      	mov	r2, r0
 8012946:	4641      	mov	r1, r8
 8012948:	4630      	mov	r0, r6
 801294a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801294e:	f000 fd71 	bl	8013434 <_Bfree>
 8012952:	9b06      	ldr	r3, [sp, #24]
 8012954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012956:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801295a:	ea43 0102 	orr.w	r1, r3, r2
 801295e:	9b07      	ldr	r3, [sp, #28]
 8012960:	4319      	orrs	r1, r3
 8012962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012964:	d10d      	bne.n	8012982 <_dtoa_r+0x97a>
 8012966:	2b39      	cmp	r3, #57	; 0x39
 8012968:	d029      	beq.n	80129be <_dtoa_r+0x9b6>
 801296a:	f1ba 0f00 	cmp.w	sl, #0
 801296e:	dd01      	ble.n	8012974 <_dtoa_r+0x96c>
 8012970:	9b05      	ldr	r3, [sp, #20]
 8012972:	3331      	adds	r3, #49	; 0x31
 8012974:	9a02      	ldr	r2, [sp, #8]
 8012976:	7013      	strb	r3, [r2, #0]
 8012978:	e775      	b.n	8012866 <_dtoa_r+0x85e>
 801297a:	4638      	mov	r0, r7
 801297c:	e7b8      	b.n	80128f0 <_dtoa_r+0x8e8>
 801297e:	2201      	movs	r2, #1
 8012980:	e7e1      	b.n	8012946 <_dtoa_r+0x93e>
 8012982:	f1ba 0f00 	cmp.w	sl, #0
 8012986:	db06      	blt.n	8012996 <_dtoa_r+0x98e>
 8012988:	9906      	ldr	r1, [sp, #24]
 801298a:	ea41 0a0a 	orr.w	sl, r1, sl
 801298e:	9907      	ldr	r1, [sp, #28]
 8012990:	ea5a 0a01 	orrs.w	sl, sl, r1
 8012994:	d120      	bne.n	80129d8 <_dtoa_r+0x9d0>
 8012996:	2a00      	cmp	r2, #0
 8012998:	ddec      	ble.n	8012974 <_dtoa_r+0x96c>
 801299a:	4629      	mov	r1, r5
 801299c:	2201      	movs	r2, #1
 801299e:	4630      	mov	r0, r6
 80129a0:	9304      	str	r3, [sp, #16]
 80129a2:	f000 ff61 	bl	8013868 <__lshift>
 80129a6:	4621      	mov	r1, r4
 80129a8:	4605      	mov	r5, r0
 80129aa:	f000 ffc9 	bl	8013940 <__mcmp>
 80129ae:	2800      	cmp	r0, #0
 80129b0:	9b04      	ldr	r3, [sp, #16]
 80129b2:	dc02      	bgt.n	80129ba <_dtoa_r+0x9b2>
 80129b4:	d1de      	bne.n	8012974 <_dtoa_r+0x96c>
 80129b6:	07da      	lsls	r2, r3, #31
 80129b8:	d5dc      	bpl.n	8012974 <_dtoa_r+0x96c>
 80129ba:	2b39      	cmp	r3, #57	; 0x39
 80129bc:	d1d8      	bne.n	8012970 <_dtoa_r+0x968>
 80129be:	9a02      	ldr	r2, [sp, #8]
 80129c0:	2339      	movs	r3, #57	; 0x39
 80129c2:	7013      	strb	r3, [r2, #0]
 80129c4:	4643      	mov	r3, r8
 80129c6:	4698      	mov	r8, r3
 80129c8:	3b01      	subs	r3, #1
 80129ca:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80129ce:	2a39      	cmp	r2, #57	; 0x39
 80129d0:	d051      	beq.n	8012a76 <_dtoa_r+0xa6e>
 80129d2:	3201      	adds	r2, #1
 80129d4:	701a      	strb	r2, [r3, #0]
 80129d6:	e746      	b.n	8012866 <_dtoa_r+0x85e>
 80129d8:	2a00      	cmp	r2, #0
 80129da:	dd03      	ble.n	80129e4 <_dtoa_r+0x9dc>
 80129dc:	2b39      	cmp	r3, #57	; 0x39
 80129de:	d0ee      	beq.n	80129be <_dtoa_r+0x9b6>
 80129e0:	3301      	adds	r3, #1
 80129e2:	e7c7      	b.n	8012974 <_dtoa_r+0x96c>
 80129e4:	9a04      	ldr	r2, [sp, #16]
 80129e6:	9908      	ldr	r1, [sp, #32]
 80129e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80129ec:	428a      	cmp	r2, r1
 80129ee:	d02b      	beq.n	8012a48 <_dtoa_r+0xa40>
 80129f0:	4629      	mov	r1, r5
 80129f2:	2300      	movs	r3, #0
 80129f4:	220a      	movs	r2, #10
 80129f6:	4630      	mov	r0, r6
 80129f8:	f000 fd3e 	bl	8013478 <__multadd>
 80129fc:	45b9      	cmp	r9, r7
 80129fe:	4605      	mov	r5, r0
 8012a00:	f04f 0300 	mov.w	r3, #0
 8012a04:	f04f 020a 	mov.w	r2, #10
 8012a08:	4649      	mov	r1, r9
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	d107      	bne.n	8012a1e <_dtoa_r+0xa16>
 8012a0e:	f000 fd33 	bl	8013478 <__multadd>
 8012a12:	4681      	mov	r9, r0
 8012a14:	4607      	mov	r7, r0
 8012a16:	9b04      	ldr	r3, [sp, #16]
 8012a18:	3301      	adds	r3, #1
 8012a1a:	9304      	str	r3, [sp, #16]
 8012a1c:	e774      	b.n	8012908 <_dtoa_r+0x900>
 8012a1e:	f000 fd2b 	bl	8013478 <__multadd>
 8012a22:	4639      	mov	r1, r7
 8012a24:	4681      	mov	r9, r0
 8012a26:	2300      	movs	r3, #0
 8012a28:	220a      	movs	r2, #10
 8012a2a:	4630      	mov	r0, r6
 8012a2c:	f000 fd24 	bl	8013478 <__multadd>
 8012a30:	4607      	mov	r7, r0
 8012a32:	e7f0      	b.n	8012a16 <_dtoa_r+0xa0e>
 8012a34:	f1ba 0f00 	cmp.w	sl, #0
 8012a38:	9a01      	ldr	r2, [sp, #4]
 8012a3a:	bfcc      	ite	gt
 8012a3c:	46d0      	movgt	r8, sl
 8012a3e:	f04f 0801 	movle.w	r8, #1
 8012a42:	4490      	add	r8, r2
 8012a44:	f04f 0900 	mov.w	r9, #0
 8012a48:	4629      	mov	r1, r5
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	9302      	str	r3, [sp, #8]
 8012a50:	f000 ff0a 	bl	8013868 <__lshift>
 8012a54:	4621      	mov	r1, r4
 8012a56:	4605      	mov	r5, r0
 8012a58:	f000 ff72 	bl	8013940 <__mcmp>
 8012a5c:	2800      	cmp	r0, #0
 8012a5e:	dcb1      	bgt.n	80129c4 <_dtoa_r+0x9bc>
 8012a60:	d102      	bne.n	8012a68 <_dtoa_r+0xa60>
 8012a62:	9b02      	ldr	r3, [sp, #8]
 8012a64:	07db      	lsls	r3, r3, #31
 8012a66:	d4ad      	bmi.n	80129c4 <_dtoa_r+0x9bc>
 8012a68:	4643      	mov	r3, r8
 8012a6a:	4698      	mov	r8, r3
 8012a6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a70:	2a30      	cmp	r2, #48	; 0x30
 8012a72:	d0fa      	beq.n	8012a6a <_dtoa_r+0xa62>
 8012a74:	e6f7      	b.n	8012866 <_dtoa_r+0x85e>
 8012a76:	9a01      	ldr	r2, [sp, #4]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d1a4      	bne.n	80129c6 <_dtoa_r+0x9be>
 8012a7c:	f10b 0b01 	add.w	fp, fp, #1
 8012a80:	2331      	movs	r3, #49	; 0x31
 8012a82:	e778      	b.n	8012976 <_dtoa_r+0x96e>
 8012a84:	4b14      	ldr	r3, [pc, #80]	; (8012ad8 <_dtoa_r+0xad0>)
 8012a86:	f7ff bb2a 	b.w	80120de <_dtoa_r+0xd6>
 8012a8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	f47f ab05 	bne.w	801209c <_dtoa_r+0x94>
 8012a92:	4b12      	ldr	r3, [pc, #72]	; (8012adc <_dtoa_r+0xad4>)
 8012a94:	f7ff bb23 	b.w	80120de <_dtoa_r+0xd6>
 8012a98:	f1ba 0f00 	cmp.w	sl, #0
 8012a9c:	dc03      	bgt.n	8012aa6 <_dtoa_r+0xa9e>
 8012a9e:	9b06      	ldr	r3, [sp, #24]
 8012aa0:	2b02      	cmp	r3, #2
 8012aa2:	f73f aec8 	bgt.w	8012836 <_dtoa_r+0x82e>
 8012aa6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012aaa:	4621      	mov	r1, r4
 8012aac:	4628      	mov	r0, r5
 8012aae:	f7ff fa21 	bl	8011ef4 <quorem>
 8012ab2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012ab6:	f808 3b01 	strb.w	r3, [r8], #1
 8012aba:	9a01      	ldr	r2, [sp, #4]
 8012abc:	eba8 0202 	sub.w	r2, r8, r2
 8012ac0:	4592      	cmp	sl, r2
 8012ac2:	ddb7      	ble.n	8012a34 <_dtoa_r+0xa2c>
 8012ac4:	4629      	mov	r1, r5
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	220a      	movs	r2, #10
 8012aca:	4630      	mov	r0, r6
 8012acc:	f000 fcd4 	bl	8013478 <__multadd>
 8012ad0:	4605      	mov	r5, r0
 8012ad2:	e7ea      	b.n	8012aaa <_dtoa_r+0xaa2>
 8012ad4:	08016083 	.word	0x08016083
 8012ad8:	08016273 	.word	0x08016273
 8012adc:	0801601e 	.word	0x0801601e

08012ae0 <_free_r>:
 8012ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ae2:	2900      	cmp	r1, #0
 8012ae4:	d044      	beq.n	8012b70 <_free_r+0x90>
 8012ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012aea:	9001      	str	r0, [sp, #4]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f1a1 0404 	sub.w	r4, r1, #4
 8012af2:	bfb8      	it	lt
 8012af4:	18e4      	addlt	r4, r4, r3
 8012af6:	f000 fc51 	bl	801339c <__malloc_lock>
 8012afa:	4a1e      	ldr	r2, [pc, #120]	; (8012b74 <_free_r+0x94>)
 8012afc:	9801      	ldr	r0, [sp, #4]
 8012afe:	6813      	ldr	r3, [r2, #0]
 8012b00:	b933      	cbnz	r3, 8012b10 <_free_r+0x30>
 8012b02:	6063      	str	r3, [r4, #4]
 8012b04:	6014      	str	r4, [r2, #0]
 8012b06:	b003      	add	sp, #12
 8012b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b0c:	f000 bc4c 	b.w	80133a8 <__malloc_unlock>
 8012b10:	42a3      	cmp	r3, r4
 8012b12:	d908      	bls.n	8012b26 <_free_r+0x46>
 8012b14:	6825      	ldr	r5, [r4, #0]
 8012b16:	1961      	adds	r1, r4, r5
 8012b18:	428b      	cmp	r3, r1
 8012b1a:	bf01      	itttt	eq
 8012b1c:	6819      	ldreq	r1, [r3, #0]
 8012b1e:	685b      	ldreq	r3, [r3, #4]
 8012b20:	1949      	addeq	r1, r1, r5
 8012b22:	6021      	streq	r1, [r4, #0]
 8012b24:	e7ed      	b.n	8012b02 <_free_r+0x22>
 8012b26:	461a      	mov	r2, r3
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	b10b      	cbz	r3, 8012b30 <_free_r+0x50>
 8012b2c:	42a3      	cmp	r3, r4
 8012b2e:	d9fa      	bls.n	8012b26 <_free_r+0x46>
 8012b30:	6811      	ldr	r1, [r2, #0]
 8012b32:	1855      	adds	r5, r2, r1
 8012b34:	42a5      	cmp	r5, r4
 8012b36:	d10b      	bne.n	8012b50 <_free_r+0x70>
 8012b38:	6824      	ldr	r4, [r4, #0]
 8012b3a:	4421      	add	r1, r4
 8012b3c:	1854      	adds	r4, r2, r1
 8012b3e:	42a3      	cmp	r3, r4
 8012b40:	6011      	str	r1, [r2, #0]
 8012b42:	d1e0      	bne.n	8012b06 <_free_r+0x26>
 8012b44:	681c      	ldr	r4, [r3, #0]
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	6053      	str	r3, [r2, #4]
 8012b4a:	440c      	add	r4, r1
 8012b4c:	6014      	str	r4, [r2, #0]
 8012b4e:	e7da      	b.n	8012b06 <_free_r+0x26>
 8012b50:	d902      	bls.n	8012b58 <_free_r+0x78>
 8012b52:	230c      	movs	r3, #12
 8012b54:	6003      	str	r3, [r0, #0]
 8012b56:	e7d6      	b.n	8012b06 <_free_r+0x26>
 8012b58:	6825      	ldr	r5, [r4, #0]
 8012b5a:	1961      	adds	r1, r4, r5
 8012b5c:	428b      	cmp	r3, r1
 8012b5e:	bf04      	itt	eq
 8012b60:	6819      	ldreq	r1, [r3, #0]
 8012b62:	685b      	ldreq	r3, [r3, #4]
 8012b64:	6063      	str	r3, [r4, #4]
 8012b66:	bf04      	itt	eq
 8012b68:	1949      	addeq	r1, r1, r5
 8012b6a:	6021      	streq	r1, [r4, #0]
 8012b6c:	6054      	str	r4, [r2, #4]
 8012b6e:	e7ca      	b.n	8012b06 <_free_r+0x26>
 8012b70:	b003      	add	sp, #12
 8012b72:	bd30      	pop	{r4, r5, pc}
 8012b74:	24045434 	.word	0x24045434

08012b78 <rshift>:
 8012b78:	6903      	ldr	r3, [r0, #16]
 8012b7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012b7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012b86:	f100 0414 	add.w	r4, r0, #20
 8012b8a:	dd45      	ble.n	8012c18 <rshift+0xa0>
 8012b8c:	f011 011f 	ands.w	r1, r1, #31
 8012b90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012b94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012b98:	d10c      	bne.n	8012bb4 <rshift+0x3c>
 8012b9a:	f100 0710 	add.w	r7, r0, #16
 8012b9e:	4629      	mov	r1, r5
 8012ba0:	42b1      	cmp	r1, r6
 8012ba2:	d334      	bcc.n	8012c0e <rshift+0x96>
 8012ba4:	1a9b      	subs	r3, r3, r2
 8012ba6:	009b      	lsls	r3, r3, #2
 8012ba8:	1eea      	subs	r2, r5, #3
 8012baa:	4296      	cmp	r6, r2
 8012bac:	bf38      	it	cc
 8012bae:	2300      	movcc	r3, #0
 8012bb0:	4423      	add	r3, r4
 8012bb2:	e015      	b.n	8012be0 <rshift+0x68>
 8012bb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012bb8:	f1c1 0820 	rsb	r8, r1, #32
 8012bbc:	40cf      	lsrs	r7, r1
 8012bbe:	f105 0e04 	add.w	lr, r5, #4
 8012bc2:	46a1      	mov	r9, r4
 8012bc4:	4576      	cmp	r6, lr
 8012bc6:	46f4      	mov	ip, lr
 8012bc8:	d815      	bhi.n	8012bf6 <rshift+0x7e>
 8012bca:	1a9a      	subs	r2, r3, r2
 8012bcc:	0092      	lsls	r2, r2, #2
 8012bce:	3a04      	subs	r2, #4
 8012bd0:	3501      	adds	r5, #1
 8012bd2:	42ae      	cmp	r6, r5
 8012bd4:	bf38      	it	cc
 8012bd6:	2200      	movcc	r2, #0
 8012bd8:	18a3      	adds	r3, r4, r2
 8012bda:	50a7      	str	r7, [r4, r2]
 8012bdc:	b107      	cbz	r7, 8012be0 <rshift+0x68>
 8012bde:	3304      	adds	r3, #4
 8012be0:	1b1a      	subs	r2, r3, r4
 8012be2:	42a3      	cmp	r3, r4
 8012be4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012be8:	bf08      	it	eq
 8012bea:	2300      	moveq	r3, #0
 8012bec:	6102      	str	r2, [r0, #16]
 8012bee:	bf08      	it	eq
 8012bf0:	6143      	streq	r3, [r0, #20]
 8012bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bf6:	f8dc c000 	ldr.w	ip, [ip]
 8012bfa:	fa0c fc08 	lsl.w	ip, ip, r8
 8012bfe:	ea4c 0707 	orr.w	r7, ip, r7
 8012c02:	f849 7b04 	str.w	r7, [r9], #4
 8012c06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012c0a:	40cf      	lsrs	r7, r1
 8012c0c:	e7da      	b.n	8012bc4 <rshift+0x4c>
 8012c0e:	f851 cb04 	ldr.w	ip, [r1], #4
 8012c12:	f847 cf04 	str.w	ip, [r7, #4]!
 8012c16:	e7c3      	b.n	8012ba0 <rshift+0x28>
 8012c18:	4623      	mov	r3, r4
 8012c1a:	e7e1      	b.n	8012be0 <rshift+0x68>

08012c1c <__hexdig_fun>:
 8012c1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012c20:	2b09      	cmp	r3, #9
 8012c22:	d802      	bhi.n	8012c2a <__hexdig_fun+0xe>
 8012c24:	3820      	subs	r0, #32
 8012c26:	b2c0      	uxtb	r0, r0
 8012c28:	4770      	bx	lr
 8012c2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012c2e:	2b05      	cmp	r3, #5
 8012c30:	d801      	bhi.n	8012c36 <__hexdig_fun+0x1a>
 8012c32:	3847      	subs	r0, #71	; 0x47
 8012c34:	e7f7      	b.n	8012c26 <__hexdig_fun+0xa>
 8012c36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012c3a:	2b05      	cmp	r3, #5
 8012c3c:	d801      	bhi.n	8012c42 <__hexdig_fun+0x26>
 8012c3e:	3827      	subs	r0, #39	; 0x27
 8012c40:	e7f1      	b.n	8012c26 <__hexdig_fun+0xa>
 8012c42:	2000      	movs	r0, #0
 8012c44:	4770      	bx	lr
	...

08012c48 <__gethex>:
 8012c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c4c:	4617      	mov	r7, r2
 8012c4e:	680a      	ldr	r2, [r1, #0]
 8012c50:	b085      	sub	sp, #20
 8012c52:	f102 0b02 	add.w	fp, r2, #2
 8012c56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012c5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012c5e:	4681      	mov	r9, r0
 8012c60:	468a      	mov	sl, r1
 8012c62:	9302      	str	r3, [sp, #8]
 8012c64:	32fe      	adds	r2, #254	; 0xfe
 8012c66:	eb02 030b 	add.w	r3, r2, fp
 8012c6a:	46d8      	mov	r8, fp
 8012c6c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012c70:	9301      	str	r3, [sp, #4]
 8012c72:	2830      	cmp	r0, #48	; 0x30
 8012c74:	d0f7      	beq.n	8012c66 <__gethex+0x1e>
 8012c76:	f7ff ffd1 	bl	8012c1c <__hexdig_fun>
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	d138      	bne.n	8012cf2 <__gethex+0xaa>
 8012c80:	49a7      	ldr	r1, [pc, #668]	; (8012f20 <__gethex+0x2d8>)
 8012c82:	2201      	movs	r2, #1
 8012c84:	4640      	mov	r0, r8
 8012c86:	f7fe ffa9 	bl	8011bdc <strncmp>
 8012c8a:	4606      	mov	r6, r0
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d169      	bne.n	8012d64 <__gethex+0x11c>
 8012c90:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012c94:	465d      	mov	r5, fp
 8012c96:	f7ff ffc1 	bl	8012c1c <__hexdig_fun>
 8012c9a:	2800      	cmp	r0, #0
 8012c9c:	d064      	beq.n	8012d68 <__gethex+0x120>
 8012c9e:	465a      	mov	r2, fp
 8012ca0:	7810      	ldrb	r0, [r2, #0]
 8012ca2:	2830      	cmp	r0, #48	; 0x30
 8012ca4:	4690      	mov	r8, r2
 8012ca6:	f102 0201 	add.w	r2, r2, #1
 8012caa:	d0f9      	beq.n	8012ca0 <__gethex+0x58>
 8012cac:	f7ff ffb6 	bl	8012c1c <__hexdig_fun>
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	fab0 f480 	clz	r4, r0
 8012cb6:	0964      	lsrs	r4, r4, #5
 8012cb8:	465e      	mov	r6, fp
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	4642      	mov	r2, r8
 8012cbe:	4615      	mov	r5, r2
 8012cc0:	3201      	adds	r2, #1
 8012cc2:	7828      	ldrb	r0, [r5, #0]
 8012cc4:	f7ff ffaa 	bl	8012c1c <__hexdig_fun>
 8012cc8:	2800      	cmp	r0, #0
 8012cca:	d1f8      	bne.n	8012cbe <__gethex+0x76>
 8012ccc:	4994      	ldr	r1, [pc, #592]	; (8012f20 <__gethex+0x2d8>)
 8012cce:	2201      	movs	r2, #1
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	f7fe ff83 	bl	8011bdc <strncmp>
 8012cd6:	b978      	cbnz	r0, 8012cf8 <__gethex+0xb0>
 8012cd8:	b946      	cbnz	r6, 8012cec <__gethex+0xa4>
 8012cda:	1c6e      	adds	r6, r5, #1
 8012cdc:	4632      	mov	r2, r6
 8012cde:	4615      	mov	r5, r2
 8012ce0:	3201      	adds	r2, #1
 8012ce2:	7828      	ldrb	r0, [r5, #0]
 8012ce4:	f7ff ff9a 	bl	8012c1c <__hexdig_fun>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	d1f8      	bne.n	8012cde <__gethex+0x96>
 8012cec:	1b73      	subs	r3, r6, r5
 8012cee:	009e      	lsls	r6, r3, #2
 8012cf0:	e004      	b.n	8012cfc <__gethex+0xb4>
 8012cf2:	2400      	movs	r4, #0
 8012cf4:	4626      	mov	r6, r4
 8012cf6:	e7e1      	b.n	8012cbc <__gethex+0x74>
 8012cf8:	2e00      	cmp	r6, #0
 8012cfa:	d1f7      	bne.n	8012cec <__gethex+0xa4>
 8012cfc:	782b      	ldrb	r3, [r5, #0]
 8012cfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012d02:	2b50      	cmp	r3, #80	; 0x50
 8012d04:	d13d      	bne.n	8012d82 <__gethex+0x13a>
 8012d06:	786b      	ldrb	r3, [r5, #1]
 8012d08:	2b2b      	cmp	r3, #43	; 0x2b
 8012d0a:	d02f      	beq.n	8012d6c <__gethex+0x124>
 8012d0c:	2b2d      	cmp	r3, #45	; 0x2d
 8012d0e:	d031      	beq.n	8012d74 <__gethex+0x12c>
 8012d10:	1c69      	adds	r1, r5, #1
 8012d12:	f04f 0b00 	mov.w	fp, #0
 8012d16:	7808      	ldrb	r0, [r1, #0]
 8012d18:	f7ff ff80 	bl	8012c1c <__hexdig_fun>
 8012d1c:	1e42      	subs	r2, r0, #1
 8012d1e:	b2d2      	uxtb	r2, r2
 8012d20:	2a18      	cmp	r2, #24
 8012d22:	d82e      	bhi.n	8012d82 <__gethex+0x13a>
 8012d24:	f1a0 0210 	sub.w	r2, r0, #16
 8012d28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d2c:	f7ff ff76 	bl	8012c1c <__hexdig_fun>
 8012d30:	f100 3cff 	add.w	ip, r0, #4294967295
 8012d34:	fa5f fc8c 	uxtb.w	ip, ip
 8012d38:	f1bc 0f18 	cmp.w	ip, #24
 8012d3c:	d91d      	bls.n	8012d7a <__gethex+0x132>
 8012d3e:	f1bb 0f00 	cmp.w	fp, #0
 8012d42:	d000      	beq.n	8012d46 <__gethex+0xfe>
 8012d44:	4252      	negs	r2, r2
 8012d46:	4416      	add	r6, r2
 8012d48:	f8ca 1000 	str.w	r1, [sl]
 8012d4c:	b1dc      	cbz	r4, 8012d86 <__gethex+0x13e>
 8012d4e:	9b01      	ldr	r3, [sp, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	bf14      	ite	ne
 8012d54:	f04f 0800 	movne.w	r8, #0
 8012d58:	f04f 0806 	moveq.w	r8, #6
 8012d5c:	4640      	mov	r0, r8
 8012d5e:	b005      	add	sp, #20
 8012d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d64:	4645      	mov	r5, r8
 8012d66:	4626      	mov	r6, r4
 8012d68:	2401      	movs	r4, #1
 8012d6a:	e7c7      	b.n	8012cfc <__gethex+0xb4>
 8012d6c:	f04f 0b00 	mov.w	fp, #0
 8012d70:	1ca9      	adds	r1, r5, #2
 8012d72:	e7d0      	b.n	8012d16 <__gethex+0xce>
 8012d74:	f04f 0b01 	mov.w	fp, #1
 8012d78:	e7fa      	b.n	8012d70 <__gethex+0x128>
 8012d7a:	230a      	movs	r3, #10
 8012d7c:	fb03 0002 	mla	r0, r3, r2, r0
 8012d80:	e7d0      	b.n	8012d24 <__gethex+0xdc>
 8012d82:	4629      	mov	r1, r5
 8012d84:	e7e0      	b.n	8012d48 <__gethex+0x100>
 8012d86:	eba5 0308 	sub.w	r3, r5, r8
 8012d8a:	3b01      	subs	r3, #1
 8012d8c:	4621      	mov	r1, r4
 8012d8e:	2b07      	cmp	r3, #7
 8012d90:	dc0a      	bgt.n	8012da8 <__gethex+0x160>
 8012d92:	4648      	mov	r0, r9
 8012d94:	f000 fb0e 	bl	80133b4 <_Balloc>
 8012d98:	4604      	mov	r4, r0
 8012d9a:	b940      	cbnz	r0, 8012dae <__gethex+0x166>
 8012d9c:	4b61      	ldr	r3, [pc, #388]	; (8012f24 <__gethex+0x2dc>)
 8012d9e:	4602      	mov	r2, r0
 8012da0:	21e4      	movs	r1, #228	; 0xe4
 8012da2:	4861      	ldr	r0, [pc, #388]	; (8012f28 <__gethex+0x2e0>)
 8012da4:	f7ff f888 	bl	8011eb8 <__assert_func>
 8012da8:	3101      	adds	r1, #1
 8012daa:	105b      	asrs	r3, r3, #1
 8012dac:	e7ef      	b.n	8012d8e <__gethex+0x146>
 8012dae:	f100 0a14 	add.w	sl, r0, #20
 8012db2:	2300      	movs	r3, #0
 8012db4:	495a      	ldr	r1, [pc, #360]	; (8012f20 <__gethex+0x2d8>)
 8012db6:	f8cd a004 	str.w	sl, [sp, #4]
 8012dba:	469b      	mov	fp, r3
 8012dbc:	45a8      	cmp	r8, r5
 8012dbe:	d342      	bcc.n	8012e46 <__gethex+0x1fe>
 8012dc0:	9801      	ldr	r0, [sp, #4]
 8012dc2:	f840 bb04 	str.w	fp, [r0], #4
 8012dc6:	eba0 000a 	sub.w	r0, r0, sl
 8012dca:	1080      	asrs	r0, r0, #2
 8012dcc:	6120      	str	r0, [r4, #16]
 8012dce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012dd2:	4658      	mov	r0, fp
 8012dd4:	f000 fbe0 	bl	8013598 <__hi0bits>
 8012dd8:	683d      	ldr	r5, [r7, #0]
 8012dda:	eba8 0000 	sub.w	r0, r8, r0
 8012dde:	42a8      	cmp	r0, r5
 8012de0:	dd59      	ble.n	8012e96 <__gethex+0x24e>
 8012de2:	eba0 0805 	sub.w	r8, r0, r5
 8012de6:	4641      	mov	r1, r8
 8012de8:	4620      	mov	r0, r4
 8012dea:	f000 ff6c 	bl	8013cc6 <__any_on>
 8012dee:	4683      	mov	fp, r0
 8012df0:	b1b8      	cbz	r0, 8012e22 <__gethex+0x1da>
 8012df2:	f108 33ff 	add.w	r3, r8, #4294967295
 8012df6:	1159      	asrs	r1, r3, #5
 8012df8:	f003 021f 	and.w	r2, r3, #31
 8012dfc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012e00:	f04f 0b01 	mov.w	fp, #1
 8012e04:	fa0b f202 	lsl.w	r2, fp, r2
 8012e08:	420a      	tst	r2, r1
 8012e0a:	d00a      	beq.n	8012e22 <__gethex+0x1da>
 8012e0c:	455b      	cmp	r3, fp
 8012e0e:	dd06      	ble.n	8012e1e <__gethex+0x1d6>
 8012e10:	f1a8 0102 	sub.w	r1, r8, #2
 8012e14:	4620      	mov	r0, r4
 8012e16:	f000 ff56 	bl	8013cc6 <__any_on>
 8012e1a:	2800      	cmp	r0, #0
 8012e1c:	d138      	bne.n	8012e90 <__gethex+0x248>
 8012e1e:	f04f 0b02 	mov.w	fp, #2
 8012e22:	4641      	mov	r1, r8
 8012e24:	4620      	mov	r0, r4
 8012e26:	f7ff fea7 	bl	8012b78 <rshift>
 8012e2a:	4446      	add	r6, r8
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	42b3      	cmp	r3, r6
 8012e30:	da41      	bge.n	8012eb6 <__gethex+0x26e>
 8012e32:	4621      	mov	r1, r4
 8012e34:	4648      	mov	r0, r9
 8012e36:	f000 fafd 	bl	8013434 <_Bfree>
 8012e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	6013      	str	r3, [r2, #0]
 8012e40:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012e44:	e78a      	b.n	8012d5c <__gethex+0x114>
 8012e46:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8012e4a:	2a2e      	cmp	r2, #46	; 0x2e
 8012e4c:	d014      	beq.n	8012e78 <__gethex+0x230>
 8012e4e:	2b20      	cmp	r3, #32
 8012e50:	d106      	bne.n	8012e60 <__gethex+0x218>
 8012e52:	9b01      	ldr	r3, [sp, #4]
 8012e54:	f843 bb04 	str.w	fp, [r3], #4
 8012e58:	f04f 0b00 	mov.w	fp, #0
 8012e5c:	9301      	str	r3, [sp, #4]
 8012e5e:	465b      	mov	r3, fp
 8012e60:	7828      	ldrb	r0, [r5, #0]
 8012e62:	9303      	str	r3, [sp, #12]
 8012e64:	f7ff feda 	bl	8012c1c <__hexdig_fun>
 8012e68:	9b03      	ldr	r3, [sp, #12]
 8012e6a:	f000 000f 	and.w	r0, r0, #15
 8012e6e:	4098      	lsls	r0, r3
 8012e70:	ea4b 0b00 	orr.w	fp, fp, r0
 8012e74:	3304      	adds	r3, #4
 8012e76:	e7a1      	b.n	8012dbc <__gethex+0x174>
 8012e78:	45a8      	cmp	r8, r5
 8012e7a:	d8e8      	bhi.n	8012e4e <__gethex+0x206>
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	4628      	mov	r0, r5
 8012e80:	9303      	str	r3, [sp, #12]
 8012e82:	f7fe feab 	bl	8011bdc <strncmp>
 8012e86:	4926      	ldr	r1, [pc, #152]	; (8012f20 <__gethex+0x2d8>)
 8012e88:	9b03      	ldr	r3, [sp, #12]
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	d1df      	bne.n	8012e4e <__gethex+0x206>
 8012e8e:	e795      	b.n	8012dbc <__gethex+0x174>
 8012e90:	f04f 0b03 	mov.w	fp, #3
 8012e94:	e7c5      	b.n	8012e22 <__gethex+0x1da>
 8012e96:	da0b      	bge.n	8012eb0 <__gethex+0x268>
 8012e98:	eba5 0800 	sub.w	r8, r5, r0
 8012e9c:	4621      	mov	r1, r4
 8012e9e:	4642      	mov	r2, r8
 8012ea0:	4648      	mov	r0, r9
 8012ea2:	f000 fce1 	bl	8013868 <__lshift>
 8012ea6:	eba6 0608 	sub.w	r6, r6, r8
 8012eaa:	4604      	mov	r4, r0
 8012eac:	f100 0a14 	add.w	sl, r0, #20
 8012eb0:	f04f 0b00 	mov.w	fp, #0
 8012eb4:	e7ba      	b.n	8012e2c <__gethex+0x1e4>
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	42b3      	cmp	r3, r6
 8012eba:	dd73      	ble.n	8012fa4 <__gethex+0x35c>
 8012ebc:	1b9e      	subs	r6, r3, r6
 8012ebe:	42b5      	cmp	r5, r6
 8012ec0:	dc34      	bgt.n	8012f2c <__gethex+0x2e4>
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	2b02      	cmp	r3, #2
 8012ec6:	d023      	beq.n	8012f10 <__gethex+0x2c8>
 8012ec8:	2b03      	cmp	r3, #3
 8012eca:	d025      	beq.n	8012f18 <__gethex+0x2d0>
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d115      	bne.n	8012efc <__gethex+0x2b4>
 8012ed0:	42b5      	cmp	r5, r6
 8012ed2:	d113      	bne.n	8012efc <__gethex+0x2b4>
 8012ed4:	2d01      	cmp	r5, #1
 8012ed6:	d10b      	bne.n	8012ef0 <__gethex+0x2a8>
 8012ed8:	9a02      	ldr	r2, [sp, #8]
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6013      	str	r3, [r2, #0]
 8012ede:	2301      	movs	r3, #1
 8012ee0:	6123      	str	r3, [r4, #16]
 8012ee2:	f8ca 3000 	str.w	r3, [sl]
 8012ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ee8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012eec:	601c      	str	r4, [r3, #0]
 8012eee:	e735      	b.n	8012d5c <__gethex+0x114>
 8012ef0:	1e69      	subs	r1, r5, #1
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f000 fee7 	bl	8013cc6 <__any_on>
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	d1ed      	bne.n	8012ed8 <__gethex+0x290>
 8012efc:	4621      	mov	r1, r4
 8012efe:	4648      	mov	r0, r9
 8012f00:	f000 fa98 	bl	8013434 <_Bfree>
 8012f04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f06:	2300      	movs	r3, #0
 8012f08:	6013      	str	r3, [r2, #0]
 8012f0a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8012f0e:	e725      	b.n	8012d5c <__gethex+0x114>
 8012f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d1f2      	bne.n	8012efc <__gethex+0x2b4>
 8012f16:	e7df      	b.n	8012ed8 <__gethex+0x290>
 8012f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d1dc      	bne.n	8012ed8 <__gethex+0x290>
 8012f1e:	e7ed      	b.n	8012efc <__gethex+0x2b4>
 8012f20:	0801511f 	.word	0x0801511f
 8012f24:	08016083 	.word	0x08016083
 8012f28:	08016094 	.word	0x08016094
 8012f2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8012f30:	f1bb 0f00 	cmp.w	fp, #0
 8012f34:	d133      	bne.n	8012f9e <__gethex+0x356>
 8012f36:	f1b8 0f00 	cmp.w	r8, #0
 8012f3a:	d004      	beq.n	8012f46 <__gethex+0x2fe>
 8012f3c:	4641      	mov	r1, r8
 8012f3e:	4620      	mov	r0, r4
 8012f40:	f000 fec1 	bl	8013cc6 <__any_on>
 8012f44:	4683      	mov	fp, r0
 8012f46:	ea4f 1268 	mov.w	r2, r8, asr #5
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012f50:	f008 081f 	and.w	r8, r8, #31
 8012f54:	fa03 f308 	lsl.w	r3, r3, r8
 8012f58:	4213      	tst	r3, r2
 8012f5a:	4631      	mov	r1, r6
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	bf18      	it	ne
 8012f60:	f04b 0b02 	orrne.w	fp, fp, #2
 8012f64:	1bad      	subs	r5, r5, r6
 8012f66:	f7ff fe07 	bl	8012b78 <rshift>
 8012f6a:	687e      	ldr	r6, [r7, #4]
 8012f6c:	f04f 0802 	mov.w	r8, #2
 8012f70:	f1bb 0f00 	cmp.w	fp, #0
 8012f74:	d04a      	beq.n	801300c <__gethex+0x3c4>
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2b02      	cmp	r3, #2
 8012f7a:	d016      	beq.n	8012faa <__gethex+0x362>
 8012f7c:	2b03      	cmp	r3, #3
 8012f7e:	d018      	beq.n	8012fb2 <__gethex+0x36a>
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d109      	bne.n	8012f98 <__gethex+0x350>
 8012f84:	f01b 0f02 	tst.w	fp, #2
 8012f88:	d006      	beq.n	8012f98 <__gethex+0x350>
 8012f8a:	f8da 3000 	ldr.w	r3, [sl]
 8012f8e:	ea4b 0b03 	orr.w	fp, fp, r3
 8012f92:	f01b 0f01 	tst.w	fp, #1
 8012f96:	d10f      	bne.n	8012fb8 <__gethex+0x370>
 8012f98:	f048 0810 	orr.w	r8, r8, #16
 8012f9c:	e036      	b.n	801300c <__gethex+0x3c4>
 8012f9e:	f04f 0b01 	mov.w	fp, #1
 8012fa2:	e7d0      	b.n	8012f46 <__gethex+0x2fe>
 8012fa4:	f04f 0801 	mov.w	r8, #1
 8012fa8:	e7e2      	b.n	8012f70 <__gethex+0x328>
 8012faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012fac:	f1c3 0301 	rsb	r3, r3, #1
 8012fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8012fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d0ef      	beq.n	8012f98 <__gethex+0x350>
 8012fb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012fbc:	f104 0214 	add.w	r2, r4, #20
 8012fc0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012fc4:	9301      	str	r3, [sp, #4]
 8012fc6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8012fca:	2300      	movs	r3, #0
 8012fcc:	4694      	mov	ip, r2
 8012fce:	f852 1b04 	ldr.w	r1, [r2], #4
 8012fd2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012fd6:	d01e      	beq.n	8013016 <__gethex+0x3ce>
 8012fd8:	3101      	adds	r1, #1
 8012fda:	f8cc 1000 	str.w	r1, [ip]
 8012fde:	f1b8 0f02 	cmp.w	r8, #2
 8012fe2:	f104 0214 	add.w	r2, r4, #20
 8012fe6:	d13d      	bne.n	8013064 <__gethex+0x41c>
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	3b01      	subs	r3, #1
 8012fec:	42ab      	cmp	r3, r5
 8012fee:	d10b      	bne.n	8013008 <__gethex+0x3c0>
 8012ff0:	1169      	asrs	r1, r5, #5
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	f005 051f 	and.w	r5, r5, #31
 8012ff8:	fa03 f505 	lsl.w	r5, r3, r5
 8012ffc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013000:	421d      	tst	r5, r3
 8013002:	bf18      	it	ne
 8013004:	f04f 0801 	movne.w	r8, #1
 8013008:	f048 0820 	orr.w	r8, r8, #32
 801300c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801300e:	601c      	str	r4, [r3, #0]
 8013010:	9b02      	ldr	r3, [sp, #8]
 8013012:	601e      	str	r6, [r3, #0]
 8013014:	e6a2      	b.n	8012d5c <__gethex+0x114>
 8013016:	4290      	cmp	r0, r2
 8013018:	f842 3c04 	str.w	r3, [r2, #-4]
 801301c:	d8d6      	bhi.n	8012fcc <__gethex+0x384>
 801301e:	68a2      	ldr	r2, [r4, #8]
 8013020:	4593      	cmp	fp, r2
 8013022:	db17      	blt.n	8013054 <__gethex+0x40c>
 8013024:	6861      	ldr	r1, [r4, #4]
 8013026:	4648      	mov	r0, r9
 8013028:	3101      	adds	r1, #1
 801302a:	f000 f9c3 	bl	80133b4 <_Balloc>
 801302e:	4682      	mov	sl, r0
 8013030:	b918      	cbnz	r0, 801303a <__gethex+0x3f2>
 8013032:	4b1b      	ldr	r3, [pc, #108]	; (80130a0 <__gethex+0x458>)
 8013034:	4602      	mov	r2, r0
 8013036:	2184      	movs	r1, #132	; 0x84
 8013038:	e6b3      	b.n	8012da2 <__gethex+0x15a>
 801303a:	6922      	ldr	r2, [r4, #16]
 801303c:	3202      	adds	r2, #2
 801303e:	f104 010c 	add.w	r1, r4, #12
 8013042:	0092      	lsls	r2, r2, #2
 8013044:	300c      	adds	r0, #12
 8013046:	f7fe ff20 	bl	8011e8a <memcpy>
 801304a:	4621      	mov	r1, r4
 801304c:	4648      	mov	r0, r9
 801304e:	f000 f9f1 	bl	8013434 <_Bfree>
 8013052:	4654      	mov	r4, sl
 8013054:	6922      	ldr	r2, [r4, #16]
 8013056:	1c51      	adds	r1, r2, #1
 8013058:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801305c:	6121      	str	r1, [r4, #16]
 801305e:	2101      	movs	r1, #1
 8013060:	6151      	str	r1, [r2, #20]
 8013062:	e7bc      	b.n	8012fde <__gethex+0x396>
 8013064:	6921      	ldr	r1, [r4, #16]
 8013066:	4559      	cmp	r1, fp
 8013068:	dd0b      	ble.n	8013082 <__gethex+0x43a>
 801306a:	2101      	movs	r1, #1
 801306c:	4620      	mov	r0, r4
 801306e:	f7ff fd83 	bl	8012b78 <rshift>
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	3601      	adds	r6, #1
 8013076:	42b3      	cmp	r3, r6
 8013078:	f6ff aedb 	blt.w	8012e32 <__gethex+0x1ea>
 801307c:	f04f 0801 	mov.w	r8, #1
 8013080:	e7c2      	b.n	8013008 <__gethex+0x3c0>
 8013082:	f015 051f 	ands.w	r5, r5, #31
 8013086:	d0f9      	beq.n	801307c <__gethex+0x434>
 8013088:	9b01      	ldr	r3, [sp, #4]
 801308a:	441a      	add	r2, r3
 801308c:	f1c5 0520 	rsb	r5, r5, #32
 8013090:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013094:	f000 fa80 	bl	8013598 <__hi0bits>
 8013098:	42a8      	cmp	r0, r5
 801309a:	dbe6      	blt.n	801306a <__gethex+0x422>
 801309c:	e7ee      	b.n	801307c <__gethex+0x434>
 801309e:	bf00      	nop
 80130a0:	08016083 	.word	0x08016083

080130a4 <L_shift>:
 80130a4:	f1c2 0208 	rsb	r2, r2, #8
 80130a8:	0092      	lsls	r2, r2, #2
 80130aa:	b570      	push	{r4, r5, r6, lr}
 80130ac:	f1c2 0620 	rsb	r6, r2, #32
 80130b0:	6843      	ldr	r3, [r0, #4]
 80130b2:	6804      	ldr	r4, [r0, #0]
 80130b4:	fa03 f506 	lsl.w	r5, r3, r6
 80130b8:	432c      	orrs	r4, r5
 80130ba:	40d3      	lsrs	r3, r2
 80130bc:	6004      	str	r4, [r0, #0]
 80130be:	f840 3f04 	str.w	r3, [r0, #4]!
 80130c2:	4288      	cmp	r0, r1
 80130c4:	d3f4      	bcc.n	80130b0 <L_shift+0xc>
 80130c6:	bd70      	pop	{r4, r5, r6, pc}

080130c8 <__match>:
 80130c8:	b530      	push	{r4, r5, lr}
 80130ca:	6803      	ldr	r3, [r0, #0]
 80130cc:	3301      	adds	r3, #1
 80130ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130d2:	b914      	cbnz	r4, 80130da <__match+0x12>
 80130d4:	6003      	str	r3, [r0, #0]
 80130d6:	2001      	movs	r0, #1
 80130d8:	bd30      	pop	{r4, r5, pc}
 80130da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80130e2:	2d19      	cmp	r5, #25
 80130e4:	bf98      	it	ls
 80130e6:	3220      	addls	r2, #32
 80130e8:	42a2      	cmp	r2, r4
 80130ea:	d0f0      	beq.n	80130ce <__match+0x6>
 80130ec:	2000      	movs	r0, #0
 80130ee:	e7f3      	b.n	80130d8 <__match+0x10>

080130f0 <__hexnan>:
 80130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f4:	680b      	ldr	r3, [r1, #0]
 80130f6:	6801      	ldr	r1, [r0, #0]
 80130f8:	115e      	asrs	r6, r3, #5
 80130fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80130fe:	f013 031f 	ands.w	r3, r3, #31
 8013102:	b087      	sub	sp, #28
 8013104:	bf18      	it	ne
 8013106:	3604      	addne	r6, #4
 8013108:	2500      	movs	r5, #0
 801310a:	1f37      	subs	r7, r6, #4
 801310c:	4682      	mov	sl, r0
 801310e:	4690      	mov	r8, r2
 8013110:	9301      	str	r3, [sp, #4]
 8013112:	f846 5c04 	str.w	r5, [r6, #-4]
 8013116:	46b9      	mov	r9, r7
 8013118:	463c      	mov	r4, r7
 801311a:	9502      	str	r5, [sp, #8]
 801311c:	46ab      	mov	fp, r5
 801311e:	784a      	ldrb	r2, [r1, #1]
 8013120:	1c4b      	adds	r3, r1, #1
 8013122:	9303      	str	r3, [sp, #12]
 8013124:	b342      	cbz	r2, 8013178 <__hexnan+0x88>
 8013126:	4610      	mov	r0, r2
 8013128:	9105      	str	r1, [sp, #20]
 801312a:	9204      	str	r2, [sp, #16]
 801312c:	f7ff fd76 	bl	8012c1c <__hexdig_fun>
 8013130:	2800      	cmp	r0, #0
 8013132:	d14f      	bne.n	80131d4 <__hexnan+0xe4>
 8013134:	9a04      	ldr	r2, [sp, #16]
 8013136:	9905      	ldr	r1, [sp, #20]
 8013138:	2a20      	cmp	r2, #32
 801313a:	d818      	bhi.n	801316e <__hexnan+0x7e>
 801313c:	9b02      	ldr	r3, [sp, #8]
 801313e:	459b      	cmp	fp, r3
 8013140:	dd13      	ble.n	801316a <__hexnan+0x7a>
 8013142:	454c      	cmp	r4, r9
 8013144:	d206      	bcs.n	8013154 <__hexnan+0x64>
 8013146:	2d07      	cmp	r5, #7
 8013148:	dc04      	bgt.n	8013154 <__hexnan+0x64>
 801314a:	462a      	mov	r2, r5
 801314c:	4649      	mov	r1, r9
 801314e:	4620      	mov	r0, r4
 8013150:	f7ff ffa8 	bl	80130a4 <L_shift>
 8013154:	4544      	cmp	r4, r8
 8013156:	d950      	bls.n	80131fa <__hexnan+0x10a>
 8013158:	2300      	movs	r3, #0
 801315a:	f1a4 0904 	sub.w	r9, r4, #4
 801315e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013162:	f8cd b008 	str.w	fp, [sp, #8]
 8013166:	464c      	mov	r4, r9
 8013168:	461d      	mov	r5, r3
 801316a:	9903      	ldr	r1, [sp, #12]
 801316c:	e7d7      	b.n	801311e <__hexnan+0x2e>
 801316e:	2a29      	cmp	r2, #41	; 0x29
 8013170:	d155      	bne.n	801321e <__hexnan+0x12e>
 8013172:	3102      	adds	r1, #2
 8013174:	f8ca 1000 	str.w	r1, [sl]
 8013178:	f1bb 0f00 	cmp.w	fp, #0
 801317c:	d04f      	beq.n	801321e <__hexnan+0x12e>
 801317e:	454c      	cmp	r4, r9
 8013180:	d206      	bcs.n	8013190 <__hexnan+0xa0>
 8013182:	2d07      	cmp	r5, #7
 8013184:	dc04      	bgt.n	8013190 <__hexnan+0xa0>
 8013186:	462a      	mov	r2, r5
 8013188:	4649      	mov	r1, r9
 801318a:	4620      	mov	r0, r4
 801318c:	f7ff ff8a 	bl	80130a4 <L_shift>
 8013190:	4544      	cmp	r4, r8
 8013192:	d934      	bls.n	80131fe <__hexnan+0x10e>
 8013194:	f1a8 0204 	sub.w	r2, r8, #4
 8013198:	4623      	mov	r3, r4
 801319a:	f853 1b04 	ldr.w	r1, [r3], #4
 801319e:	f842 1f04 	str.w	r1, [r2, #4]!
 80131a2:	429f      	cmp	r7, r3
 80131a4:	d2f9      	bcs.n	801319a <__hexnan+0xaa>
 80131a6:	1b3b      	subs	r3, r7, r4
 80131a8:	f023 0303 	bic.w	r3, r3, #3
 80131ac:	3304      	adds	r3, #4
 80131ae:	3e03      	subs	r6, #3
 80131b0:	3401      	adds	r4, #1
 80131b2:	42a6      	cmp	r6, r4
 80131b4:	bf38      	it	cc
 80131b6:	2304      	movcc	r3, #4
 80131b8:	4443      	add	r3, r8
 80131ba:	2200      	movs	r2, #0
 80131bc:	f843 2b04 	str.w	r2, [r3], #4
 80131c0:	429f      	cmp	r7, r3
 80131c2:	d2fb      	bcs.n	80131bc <__hexnan+0xcc>
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	b91b      	cbnz	r3, 80131d0 <__hexnan+0xe0>
 80131c8:	4547      	cmp	r7, r8
 80131ca:	d126      	bne.n	801321a <__hexnan+0x12a>
 80131cc:	2301      	movs	r3, #1
 80131ce:	603b      	str	r3, [r7, #0]
 80131d0:	2005      	movs	r0, #5
 80131d2:	e025      	b.n	8013220 <__hexnan+0x130>
 80131d4:	3501      	adds	r5, #1
 80131d6:	2d08      	cmp	r5, #8
 80131d8:	f10b 0b01 	add.w	fp, fp, #1
 80131dc:	dd06      	ble.n	80131ec <__hexnan+0xfc>
 80131de:	4544      	cmp	r4, r8
 80131e0:	d9c3      	bls.n	801316a <__hexnan+0x7a>
 80131e2:	2300      	movs	r3, #0
 80131e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80131e8:	2501      	movs	r5, #1
 80131ea:	3c04      	subs	r4, #4
 80131ec:	6822      	ldr	r2, [r4, #0]
 80131ee:	f000 000f 	and.w	r0, r0, #15
 80131f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80131f6:	6020      	str	r0, [r4, #0]
 80131f8:	e7b7      	b.n	801316a <__hexnan+0x7a>
 80131fa:	2508      	movs	r5, #8
 80131fc:	e7b5      	b.n	801316a <__hexnan+0x7a>
 80131fe:	9b01      	ldr	r3, [sp, #4]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d0df      	beq.n	80131c4 <__hexnan+0xd4>
 8013204:	f1c3 0320 	rsb	r3, r3, #32
 8013208:	f04f 32ff 	mov.w	r2, #4294967295
 801320c:	40da      	lsrs	r2, r3
 801320e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013212:	4013      	ands	r3, r2
 8013214:	f846 3c04 	str.w	r3, [r6, #-4]
 8013218:	e7d4      	b.n	80131c4 <__hexnan+0xd4>
 801321a:	3f04      	subs	r7, #4
 801321c:	e7d2      	b.n	80131c4 <__hexnan+0xd4>
 801321e:	2004      	movs	r0, #4
 8013220:	b007      	add	sp, #28
 8013222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013228 <malloc>:
 8013228:	4b02      	ldr	r3, [pc, #8]	; (8013234 <malloc+0xc>)
 801322a:	4601      	mov	r1, r0
 801322c:	6818      	ldr	r0, [r3, #0]
 801322e:	f000 b823 	b.w	8013278 <_malloc_r>
 8013232:	bf00      	nop
 8013234:	24000238 	.word	0x24000238

08013238 <sbrk_aligned>:
 8013238:	b570      	push	{r4, r5, r6, lr}
 801323a:	4e0e      	ldr	r6, [pc, #56]	; (8013274 <sbrk_aligned+0x3c>)
 801323c:	460c      	mov	r4, r1
 801323e:	6831      	ldr	r1, [r6, #0]
 8013240:	4605      	mov	r5, r0
 8013242:	b911      	cbnz	r1, 801324a <sbrk_aligned+0x12>
 8013244:	f001 fd30 	bl	8014ca8 <_sbrk_r>
 8013248:	6030      	str	r0, [r6, #0]
 801324a:	4621      	mov	r1, r4
 801324c:	4628      	mov	r0, r5
 801324e:	f001 fd2b 	bl	8014ca8 <_sbrk_r>
 8013252:	1c43      	adds	r3, r0, #1
 8013254:	d00a      	beq.n	801326c <sbrk_aligned+0x34>
 8013256:	1cc4      	adds	r4, r0, #3
 8013258:	f024 0403 	bic.w	r4, r4, #3
 801325c:	42a0      	cmp	r0, r4
 801325e:	d007      	beq.n	8013270 <sbrk_aligned+0x38>
 8013260:	1a21      	subs	r1, r4, r0
 8013262:	4628      	mov	r0, r5
 8013264:	f001 fd20 	bl	8014ca8 <_sbrk_r>
 8013268:	3001      	adds	r0, #1
 801326a:	d101      	bne.n	8013270 <sbrk_aligned+0x38>
 801326c:	f04f 34ff 	mov.w	r4, #4294967295
 8013270:	4620      	mov	r0, r4
 8013272:	bd70      	pop	{r4, r5, r6, pc}
 8013274:	24045438 	.word	0x24045438

08013278 <_malloc_r>:
 8013278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801327c:	1ccd      	adds	r5, r1, #3
 801327e:	f025 0503 	bic.w	r5, r5, #3
 8013282:	3508      	adds	r5, #8
 8013284:	2d0c      	cmp	r5, #12
 8013286:	bf38      	it	cc
 8013288:	250c      	movcc	r5, #12
 801328a:	2d00      	cmp	r5, #0
 801328c:	4607      	mov	r7, r0
 801328e:	db01      	blt.n	8013294 <_malloc_r+0x1c>
 8013290:	42a9      	cmp	r1, r5
 8013292:	d905      	bls.n	80132a0 <_malloc_r+0x28>
 8013294:	230c      	movs	r3, #12
 8013296:	603b      	str	r3, [r7, #0]
 8013298:	2600      	movs	r6, #0
 801329a:	4630      	mov	r0, r6
 801329c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013374 <_malloc_r+0xfc>
 80132a4:	f000 f87a 	bl	801339c <__malloc_lock>
 80132a8:	f8d8 3000 	ldr.w	r3, [r8]
 80132ac:	461c      	mov	r4, r3
 80132ae:	bb5c      	cbnz	r4, 8013308 <_malloc_r+0x90>
 80132b0:	4629      	mov	r1, r5
 80132b2:	4638      	mov	r0, r7
 80132b4:	f7ff ffc0 	bl	8013238 <sbrk_aligned>
 80132b8:	1c43      	adds	r3, r0, #1
 80132ba:	4604      	mov	r4, r0
 80132bc:	d155      	bne.n	801336a <_malloc_r+0xf2>
 80132be:	f8d8 4000 	ldr.w	r4, [r8]
 80132c2:	4626      	mov	r6, r4
 80132c4:	2e00      	cmp	r6, #0
 80132c6:	d145      	bne.n	8013354 <_malloc_r+0xdc>
 80132c8:	2c00      	cmp	r4, #0
 80132ca:	d048      	beq.n	801335e <_malloc_r+0xe6>
 80132cc:	6823      	ldr	r3, [r4, #0]
 80132ce:	4631      	mov	r1, r6
 80132d0:	4638      	mov	r0, r7
 80132d2:	eb04 0903 	add.w	r9, r4, r3
 80132d6:	f001 fce7 	bl	8014ca8 <_sbrk_r>
 80132da:	4581      	cmp	r9, r0
 80132dc:	d13f      	bne.n	801335e <_malloc_r+0xe6>
 80132de:	6821      	ldr	r1, [r4, #0]
 80132e0:	1a6d      	subs	r5, r5, r1
 80132e2:	4629      	mov	r1, r5
 80132e4:	4638      	mov	r0, r7
 80132e6:	f7ff ffa7 	bl	8013238 <sbrk_aligned>
 80132ea:	3001      	adds	r0, #1
 80132ec:	d037      	beq.n	801335e <_malloc_r+0xe6>
 80132ee:	6823      	ldr	r3, [r4, #0]
 80132f0:	442b      	add	r3, r5
 80132f2:	6023      	str	r3, [r4, #0]
 80132f4:	f8d8 3000 	ldr.w	r3, [r8]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d038      	beq.n	801336e <_malloc_r+0xf6>
 80132fc:	685a      	ldr	r2, [r3, #4]
 80132fe:	42a2      	cmp	r2, r4
 8013300:	d12b      	bne.n	801335a <_malloc_r+0xe2>
 8013302:	2200      	movs	r2, #0
 8013304:	605a      	str	r2, [r3, #4]
 8013306:	e00f      	b.n	8013328 <_malloc_r+0xb0>
 8013308:	6822      	ldr	r2, [r4, #0]
 801330a:	1b52      	subs	r2, r2, r5
 801330c:	d41f      	bmi.n	801334e <_malloc_r+0xd6>
 801330e:	2a0b      	cmp	r2, #11
 8013310:	d917      	bls.n	8013342 <_malloc_r+0xca>
 8013312:	1961      	adds	r1, r4, r5
 8013314:	42a3      	cmp	r3, r4
 8013316:	6025      	str	r5, [r4, #0]
 8013318:	bf18      	it	ne
 801331a:	6059      	strne	r1, [r3, #4]
 801331c:	6863      	ldr	r3, [r4, #4]
 801331e:	bf08      	it	eq
 8013320:	f8c8 1000 	streq.w	r1, [r8]
 8013324:	5162      	str	r2, [r4, r5]
 8013326:	604b      	str	r3, [r1, #4]
 8013328:	4638      	mov	r0, r7
 801332a:	f104 060b 	add.w	r6, r4, #11
 801332e:	f000 f83b 	bl	80133a8 <__malloc_unlock>
 8013332:	f026 0607 	bic.w	r6, r6, #7
 8013336:	1d23      	adds	r3, r4, #4
 8013338:	1af2      	subs	r2, r6, r3
 801333a:	d0ae      	beq.n	801329a <_malloc_r+0x22>
 801333c:	1b9b      	subs	r3, r3, r6
 801333e:	50a3      	str	r3, [r4, r2]
 8013340:	e7ab      	b.n	801329a <_malloc_r+0x22>
 8013342:	42a3      	cmp	r3, r4
 8013344:	6862      	ldr	r2, [r4, #4]
 8013346:	d1dd      	bne.n	8013304 <_malloc_r+0x8c>
 8013348:	f8c8 2000 	str.w	r2, [r8]
 801334c:	e7ec      	b.n	8013328 <_malloc_r+0xb0>
 801334e:	4623      	mov	r3, r4
 8013350:	6864      	ldr	r4, [r4, #4]
 8013352:	e7ac      	b.n	80132ae <_malloc_r+0x36>
 8013354:	4634      	mov	r4, r6
 8013356:	6876      	ldr	r6, [r6, #4]
 8013358:	e7b4      	b.n	80132c4 <_malloc_r+0x4c>
 801335a:	4613      	mov	r3, r2
 801335c:	e7cc      	b.n	80132f8 <_malloc_r+0x80>
 801335e:	230c      	movs	r3, #12
 8013360:	603b      	str	r3, [r7, #0]
 8013362:	4638      	mov	r0, r7
 8013364:	f000 f820 	bl	80133a8 <__malloc_unlock>
 8013368:	e797      	b.n	801329a <_malloc_r+0x22>
 801336a:	6025      	str	r5, [r4, #0]
 801336c:	e7dc      	b.n	8013328 <_malloc_r+0xb0>
 801336e:	605b      	str	r3, [r3, #4]
 8013370:	deff      	udf	#255	; 0xff
 8013372:	bf00      	nop
 8013374:	24045434 	.word	0x24045434

08013378 <__ascii_mbtowc>:
 8013378:	b082      	sub	sp, #8
 801337a:	b901      	cbnz	r1, 801337e <__ascii_mbtowc+0x6>
 801337c:	a901      	add	r1, sp, #4
 801337e:	b142      	cbz	r2, 8013392 <__ascii_mbtowc+0x1a>
 8013380:	b14b      	cbz	r3, 8013396 <__ascii_mbtowc+0x1e>
 8013382:	7813      	ldrb	r3, [r2, #0]
 8013384:	600b      	str	r3, [r1, #0]
 8013386:	7812      	ldrb	r2, [r2, #0]
 8013388:	1e10      	subs	r0, r2, #0
 801338a:	bf18      	it	ne
 801338c:	2001      	movne	r0, #1
 801338e:	b002      	add	sp, #8
 8013390:	4770      	bx	lr
 8013392:	4610      	mov	r0, r2
 8013394:	e7fb      	b.n	801338e <__ascii_mbtowc+0x16>
 8013396:	f06f 0001 	mvn.w	r0, #1
 801339a:	e7f8      	b.n	801338e <__ascii_mbtowc+0x16>

0801339c <__malloc_lock>:
 801339c:	4801      	ldr	r0, [pc, #4]	; (80133a4 <__malloc_lock+0x8>)
 801339e:	f7fe bd6a 	b.w	8011e76 <__retarget_lock_acquire_recursive>
 80133a2:	bf00      	nop
 80133a4:	24045430 	.word	0x24045430

080133a8 <__malloc_unlock>:
 80133a8:	4801      	ldr	r0, [pc, #4]	; (80133b0 <__malloc_unlock+0x8>)
 80133aa:	f7fe bd65 	b.w	8011e78 <__retarget_lock_release_recursive>
 80133ae:	bf00      	nop
 80133b0:	24045430 	.word	0x24045430

080133b4 <_Balloc>:
 80133b4:	b570      	push	{r4, r5, r6, lr}
 80133b6:	69c6      	ldr	r6, [r0, #28]
 80133b8:	4604      	mov	r4, r0
 80133ba:	460d      	mov	r5, r1
 80133bc:	b976      	cbnz	r6, 80133dc <_Balloc+0x28>
 80133be:	2010      	movs	r0, #16
 80133c0:	f7ff ff32 	bl	8013228 <malloc>
 80133c4:	4602      	mov	r2, r0
 80133c6:	61e0      	str	r0, [r4, #28]
 80133c8:	b920      	cbnz	r0, 80133d4 <_Balloc+0x20>
 80133ca:	4b18      	ldr	r3, [pc, #96]	; (801342c <_Balloc+0x78>)
 80133cc:	4818      	ldr	r0, [pc, #96]	; (8013430 <_Balloc+0x7c>)
 80133ce:	216b      	movs	r1, #107	; 0x6b
 80133d0:	f7fe fd72 	bl	8011eb8 <__assert_func>
 80133d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133d8:	6006      	str	r6, [r0, #0]
 80133da:	60c6      	str	r6, [r0, #12]
 80133dc:	69e6      	ldr	r6, [r4, #28]
 80133de:	68f3      	ldr	r3, [r6, #12]
 80133e0:	b183      	cbz	r3, 8013404 <_Balloc+0x50>
 80133e2:	69e3      	ldr	r3, [r4, #28]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80133ea:	b9b8      	cbnz	r0, 801341c <_Balloc+0x68>
 80133ec:	2101      	movs	r1, #1
 80133ee:	fa01 f605 	lsl.w	r6, r1, r5
 80133f2:	1d72      	adds	r2, r6, #5
 80133f4:	0092      	lsls	r2, r2, #2
 80133f6:	4620      	mov	r0, r4
 80133f8:	f001 fc6d 	bl	8014cd6 <_calloc_r>
 80133fc:	b160      	cbz	r0, 8013418 <_Balloc+0x64>
 80133fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013402:	e00e      	b.n	8013422 <_Balloc+0x6e>
 8013404:	2221      	movs	r2, #33	; 0x21
 8013406:	2104      	movs	r1, #4
 8013408:	4620      	mov	r0, r4
 801340a:	f001 fc64 	bl	8014cd6 <_calloc_r>
 801340e:	69e3      	ldr	r3, [r4, #28]
 8013410:	60f0      	str	r0, [r6, #12]
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d1e4      	bne.n	80133e2 <_Balloc+0x2e>
 8013418:	2000      	movs	r0, #0
 801341a:	bd70      	pop	{r4, r5, r6, pc}
 801341c:	6802      	ldr	r2, [r0, #0]
 801341e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013422:	2300      	movs	r3, #0
 8013424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013428:	e7f7      	b.n	801341a <_Balloc+0x66>
 801342a:	bf00      	nop
 801342c:	08015f6b 	.word	0x08015f6b
 8013430:	080160f4 	.word	0x080160f4

08013434 <_Bfree>:
 8013434:	b570      	push	{r4, r5, r6, lr}
 8013436:	69c6      	ldr	r6, [r0, #28]
 8013438:	4605      	mov	r5, r0
 801343a:	460c      	mov	r4, r1
 801343c:	b976      	cbnz	r6, 801345c <_Bfree+0x28>
 801343e:	2010      	movs	r0, #16
 8013440:	f7ff fef2 	bl	8013228 <malloc>
 8013444:	4602      	mov	r2, r0
 8013446:	61e8      	str	r0, [r5, #28]
 8013448:	b920      	cbnz	r0, 8013454 <_Bfree+0x20>
 801344a:	4b09      	ldr	r3, [pc, #36]	; (8013470 <_Bfree+0x3c>)
 801344c:	4809      	ldr	r0, [pc, #36]	; (8013474 <_Bfree+0x40>)
 801344e:	218f      	movs	r1, #143	; 0x8f
 8013450:	f7fe fd32 	bl	8011eb8 <__assert_func>
 8013454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013458:	6006      	str	r6, [r0, #0]
 801345a:	60c6      	str	r6, [r0, #12]
 801345c:	b13c      	cbz	r4, 801346e <_Bfree+0x3a>
 801345e:	69eb      	ldr	r3, [r5, #28]
 8013460:	6862      	ldr	r2, [r4, #4]
 8013462:	68db      	ldr	r3, [r3, #12]
 8013464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013468:	6021      	str	r1, [r4, #0]
 801346a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801346e:	bd70      	pop	{r4, r5, r6, pc}
 8013470:	08015f6b 	.word	0x08015f6b
 8013474:	080160f4 	.word	0x080160f4

08013478 <__multadd>:
 8013478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801347c:	690d      	ldr	r5, [r1, #16]
 801347e:	4607      	mov	r7, r0
 8013480:	460c      	mov	r4, r1
 8013482:	461e      	mov	r6, r3
 8013484:	f101 0c14 	add.w	ip, r1, #20
 8013488:	2000      	movs	r0, #0
 801348a:	f8dc 3000 	ldr.w	r3, [ip]
 801348e:	b299      	uxth	r1, r3
 8013490:	fb02 6101 	mla	r1, r2, r1, r6
 8013494:	0c1e      	lsrs	r6, r3, #16
 8013496:	0c0b      	lsrs	r3, r1, #16
 8013498:	fb02 3306 	mla	r3, r2, r6, r3
 801349c:	b289      	uxth	r1, r1
 801349e:	3001      	adds	r0, #1
 80134a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80134a4:	4285      	cmp	r5, r0
 80134a6:	f84c 1b04 	str.w	r1, [ip], #4
 80134aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80134ae:	dcec      	bgt.n	801348a <__multadd+0x12>
 80134b0:	b30e      	cbz	r6, 80134f6 <__multadd+0x7e>
 80134b2:	68a3      	ldr	r3, [r4, #8]
 80134b4:	42ab      	cmp	r3, r5
 80134b6:	dc19      	bgt.n	80134ec <__multadd+0x74>
 80134b8:	6861      	ldr	r1, [r4, #4]
 80134ba:	4638      	mov	r0, r7
 80134bc:	3101      	adds	r1, #1
 80134be:	f7ff ff79 	bl	80133b4 <_Balloc>
 80134c2:	4680      	mov	r8, r0
 80134c4:	b928      	cbnz	r0, 80134d2 <__multadd+0x5a>
 80134c6:	4602      	mov	r2, r0
 80134c8:	4b0c      	ldr	r3, [pc, #48]	; (80134fc <__multadd+0x84>)
 80134ca:	480d      	ldr	r0, [pc, #52]	; (8013500 <__multadd+0x88>)
 80134cc:	21ba      	movs	r1, #186	; 0xba
 80134ce:	f7fe fcf3 	bl	8011eb8 <__assert_func>
 80134d2:	6922      	ldr	r2, [r4, #16]
 80134d4:	3202      	adds	r2, #2
 80134d6:	f104 010c 	add.w	r1, r4, #12
 80134da:	0092      	lsls	r2, r2, #2
 80134dc:	300c      	adds	r0, #12
 80134de:	f7fe fcd4 	bl	8011e8a <memcpy>
 80134e2:	4621      	mov	r1, r4
 80134e4:	4638      	mov	r0, r7
 80134e6:	f7ff ffa5 	bl	8013434 <_Bfree>
 80134ea:	4644      	mov	r4, r8
 80134ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80134f0:	3501      	adds	r5, #1
 80134f2:	615e      	str	r6, [r3, #20]
 80134f4:	6125      	str	r5, [r4, #16]
 80134f6:	4620      	mov	r0, r4
 80134f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134fc:	08016083 	.word	0x08016083
 8013500:	080160f4 	.word	0x080160f4

08013504 <__s2b>:
 8013504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013508:	460c      	mov	r4, r1
 801350a:	4615      	mov	r5, r2
 801350c:	461f      	mov	r7, r3
 801350e:	2209      	movs	r2, #9
 8013510:	3308      	adds	r3, #8
 8013512:	4606      	mov	r6, r0
 8013514:	fb93 f3f2 	sdiv	r3, r3, r2
 8013518:	2100      	movs	r1, #0
 801351a:	2201      	movs	r2, #1
 801351c:	429a      	cmp	r2, r3
 801351e:	db09      	blt.n	8013534 <__s2b+0x30>
 8013520:	4630      	mov	r0, r6
 8013522:	f7ff ff47 	bl	80133b4 <_Balloc>
 8013526:	b940      	cbnz	r0, 801353a <__s2b+0x36>
 8013528:	4602      	mov	r2, r0
 801352a:	4b19      	ldr	r3, [pc, #100]	; (8013590 <__s2b+0x8c>)
 801352c:	4819      	ldr	r0, [pc, #100]	; (8013594 <__s2b+0x90>)
 801352e:	21d3      	movs	r1, #211	; 0xd3
 8013530:	f7fe fcc2 	bl	8011eb8 <__assert_func>
 8013534:	0052      	lsls	r2, r2, #1
 8013536:	3101      	adds	r1, #1
 8013538:	e7f0      	b.n	801351c <__s2b+0x18>
 801353a:	9b08      	ldr	r3, [sp, #32]
 801353c:	6143      	str	r3, [r0, #20]
 801353e:	2d09      	cmp	r5, #9
 8013540:	f04f 0301 	mov.w	r3, #1
 8013544:	6103      	str	r3, [r0, #16]
 8013546:	dd16      	ble.n	8013576 <__s2b+0x72>
 8013548:	f104 0909 	add.w	r9, r4, #9
 801354c:	46c8      	mov	r8, r9
 801354e:	442c      	add	r4, r5
 8013550:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013554:	4601      	mov	r1, r0
 8013556:	3b30      	subs	r3, #48	; 0x30
 8013558:	220a      	movs	r2, #10
 801355a:	4630      	mov	r0, r6
 801355c:	f7ff ff8c 	bl	8013478 <__multadd>
 8013560:	45a0      	cmp	r8, r4
 8013562:	d1f5      	bne.n	8013550 <__s2b+0x4c>
 8013564:	f1a5 0408 	sub.w	r4, r5, #8
 8013568:	444c      	add	r4, r9
 801356a:	1b2d      	subs	r5, r5, r4
 801356c:	1963      	adds	r3, r4, r5
 801356e:	42bb      	cmp	r3, r7
 8013570:	db04      	blt.n	801357c <__s2b+0x78>
 8013572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013576:	340a      	adds	r4, #10
 8013578:	2509      	movs	r5, #9
 801357a:	e7f6      	b.n	801356a <__s2b+0x66>
 801357c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013580:	4601      	mov	r1, r0
 8013582:	3b30      	subs	r3, #48	; 0x30
 8013584:	220a      	movs	r2, #10
 8013586:	4630      	mov	r0, r6
 8013588:	f7ff ff76 	bl	8013478 <__multadd>
 801358c:	e7ee      	b.n	801356c <__s2b+0x68>
 801358e:	bf00      	nop
 8013590:	08016083 	.word	0x08016083
 8013594:	080160f4 	.word	0x080160f4

08013598 <__hi0bits>:
 8013598:	0c03      	lsrs	r3, r0, #16
 801359a:	041b      	lsls	r3, r3, #16
 801359c:	b9d3      	cbnz	r3, 80135d4 <__hi0bits+0x3c>
 801359e:	0400      	lsls	r0, r0, #16
 80135a0:	2310      	movs	r3, #16
 80135a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80135a6:	bf04      	itt	eq
 80135a8:	0200      	lsleq	r0, r0, #8
 80135aa:	3308      	addeq	r3, #8
 80135ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80135b0:	bf04      	itt	eq
 80135b2:	0100      	lsleq	r0, r0, #4
 80135b4:	3304      	addeq	r3, #4
 80135b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80135ba:	bf04      	itt	eq
 80135bc:	0080      	lsleq	r0, r0, #2
 80135be:	3302      	addeq	r3, #2
 80135c0:	2800      	cmp	r0, #0
 80135c2:	db05      	blt.n	80135d0 <__hi0bits+0x38>
 80135c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80135c8:	f103 0301 	add.w	r3, r3, #1
 80135cc:	bf08      	it	eq
 80135ce:	2320      	moveq	r3, #32
 80135d0:	4618      	mov	r0, r3
 80135d2:	4770      	bx	lr
 80135d4:	2300      	movs	r3, #0
 80135d6:	e7e4      	b.n	80135a2 <__hi0bits+0xa>

080135d8 <__lo0bits>:
 80135d8:	6803      	ldr	r3, [r0, #0]
 80135da:	f013 0207 	ands.w	r2, r3, #7
 80135de:	d00c      	beq.n	80135fa <__lo0bits+0x22>
 80135e0:	07d9      	lsls	r1, r3, #31
 80135e2:	d422      	bmi.n	801362a <__lo0bits+0x52>
 80135e4:	079a      	lsls	r2, r3, #30
 80135e6:	bf49      	itett	mi
 80135e8:	085b      	lsrmi	r3, r3, #1
 80135ea:	089b      	lsrpl	r3, r3, #2
 80135ec:	6003      	strmi	r3, [r0, #0]
 80135ee:	2201      	movmi	r2, #1
 80135f0:	bf5c      	itt	pl
 80135f2:	6003      	strpl	r3, [r0, #0]
 80135f4:	2202      	movpl	r2, #2
 80135f6:	4610      	mov	r0, r2
 80135f8:	4770      	bx	lr
 80135fa:	b299      	uxth	r1, r3
 80135fc:	b909      	cbnz	r1, 8013602 <__lo0bits+0x2a>
 80135fe:	0c1b      	lsrs	r3, r3, #16
 8013600:	2210      	movs	r2, #16
 8013602:	b2d9      	uxtb	r1, r3
 8013604:	b909      	cbnz	r1, 801360a <__lo0bits+0x32>
 8013606:	3208      	adds	r2, #8
 8013608:	0a1b      	lsrs	r3, r3, #8
 801360a:	0719      	lsls	r1, r3, #28
 801360c:	bf04      	itt	eq
 801360e:	091b      	lsreq	r3, r3, #4
 8013610:	3204      	addeq	r2, #4
 8013612:	0799      	lsls	r1, r3, #30
 8013614:	bf04      	itt	eq
 8013616:	089b      	lsreq	r3, r3, #2
 8013618:	3202      	addeq	r2, #2
 801361a:	07d9      	lsls	r1, r3, #31
 801361c:	d403      	bmi.n	8013626 <__lo0bits+0x4e>
 801361e:	085b      	lsrs	r3, r3, #1
 8013620:	f102 0201 	add.w	r2, r2, #1
 8013624:	d003      	beq.n	801362e <__lo0bits+0x56>
 8013626:	6003      	str	r3, [r0, #0]
 8013628:	e7e5      	b.n	80135f6 <__lo0bits+0x1e>
 801362a:	2200      	movs	r2, #0
 801362c:	e7e3      	b.n	80135f6 <__lo0bits+0x1e>
 801362e:	2220      	movs	r2, #32
 8013630:	e7e1      	b.n	80135f6 <__lo0bits+0x1e>
	...

08013634 <__i2b>:
 8013634:	b510      	push	{r4, lr}
 8013636:	460c      	mov	r4, r1
 8013638:	2101      	movs	r1, #1
 801363a:	f7ff febb 	bl	80133b4 <_Balloc>
 801363e:	4602      	mov	r2, r0
 8013640:	b928      	cbnz	r0, 801364e <__i2b+0x1a>
 8013642:	4b05      	ldr	r3, [pc, #20]	; (8013658 <__i2b+0x24>)
 8013644:	4805      	ldr	r0, [pc, #20]	; (801365c <__i2b+0x28>)
 8013646:	f240 1145 	movw	r1, #325	; 0x145
 801364a:	f7fe fc35 	bl	8011eb8 <__assert_func>
 801364e:	2301      	movs	r3, #1
 8013650:	6144      	str	r4, [r0, #20]
 8013652:	6103      	str	r3, [r0, #16]
 8013654:	bd10      	pop	{r4, pc}
 8013656:	bf00      	nop
 8013658:	08016083 	.word	0x08016083
 801365c:	080160f4 	.word	0x080160f4

08013660 <__multiply>:
 8013660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013664:	4691      	mov	r9, r2
 8013666:	690a      	ldr	r2, [r1, #16]
 8013668:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801366c:	429a      	cmp	r2, r3
 801366e:	bfb8      	it	lt
 8013670:	460b      	movlt	r3, r1
 8013672:	460c      	mov	r4, r1
 8013674:	bfbc      	itt	lt
 8013676:	464c      	movlt	r4, r9
 8013678:	4699      	movlt	r9, r3
 801367a:	6927      	ldr	r7, [r4, #16]
 801367c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013680:	68a3      	ldr	r3, [r4, #8]
 8013682:	6861      	ldr	r1, [r4, #4]
 8013684:	eb07 060a 	add.w	r6, r7, sl
 8013688:	42b3      	cmp	r3, r6
 801368a:	b085      	sub	sp, #20
 801368c:	bfb8      	it	lt
 801368e:	3101      	addlt	r1, #1
 8013690:	f7ff fe90 	bl	80133b4 <_Balloc>
 8013694:	b930      	cbnz	r0, 80136a4 <__multiply+0x44>
 8013696:	4602      	mov	r2, r0
 8013698:	4b44      	ldr	r3, [pc, #272]	; (80137ac <__multiply+0x14c>)
 801369a:	4845      	ldr	r0, [pc, #276]	; (80137b0 <__multiply+0x150>)
 801369c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80136a0:	f7fe fc0a 	bl	8011eb8 <__assert_func>
 80136a4:	f100 0514 	add.w	r5, r0, #20
 80136a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80136ac:	462b      	mov	r3, r5
 80136ae:	2200      	movs	r2, #0
 80136b0:	4543      	cmp	r3, r8
 80136b2:	d321      	bcc.n	80136f8 <__multiply+0x98>
 80136b4:	f104 0314 	add.w	r3, r4, #20
 80136b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80136bc:	f109 0314 	add.w	r3, r9, #20
 80136c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80136c4:	9202      	str	r2, [sp, #8]
 80136c6:	1b3a      	subs	r2, r7, r4
 80136c8:	3a15      	subs	r2, #21
 80136ca:	f022 0203 	bic.w	r2, r2, #3
 80136ce:	3204      	adds	r2, #4
 80136d0:	f104 0115 	add.w	r1, r4, #21
 80136d4:	428f      	cmp	r7, r1
 80136d6:	bf38      	it	cc
 80136d8:	2204      	movcc	r2, #4
 80136da:	9201      	str	r2, [sp, #4]
 80136dc:	9a02      	ldr	r2, [sp, #8]
 80136de:	9303      	str	r3, [sp, #12]
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d80c      	bhi.n	80136fe <__multiply+0x9e>
 80136e4:	2e00      	cmp	r6, #0
 80136e6:	dd03      	ble.n	80136f0 <__multiply+0x90>
 80136e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d05b      	beq.n	80137a8 <__multiply+0x148>
 80136f0:	6106      	str	r6, [r0, #16]
 80136f2:	b005      	add	sp, #20
 80136f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f8:	f843 2b04 	str.w	r2, [r3], #4
 80136fc:	e7d8      	b.n	80136b0 <__multiply+0x50>
 80136fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8013702:	f1ba 0f00 	cmp.w	sl, #0
 8013706:	d024      	beq.n	8013752 <__multiply+0xf2>
 8013708:	f104 0e14 	add.w	lr, r4, #20
 801370c:	46a9      	mov	r9, r5
 801370e:	f04f 0c00 	mov.w	ip, #0
 8013712:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013716:	f8d9 1000 	ldr.w	r1, [r9]
 801371a:	fa1f fb82 	uxth.w	fp, r2
 801371e:	b289      	uxth	r1, r1
 8013720:	fb0a 110b 	mla	r1, sl, fp, r1
 8013724:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013728:	f8d9 2000 	ldr.w	r2, [r9]
 801372c:	4461      	add	r1, ip
 801372e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013732:	fb0a c20b 	mla	r2, sl, fp, ip
 8013736:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801373a:	b289      	uxth	r1, r1
 801373c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013740:	4577      	cmp	r7, lr
 8013742:	f849 1b04 	str.w	r1, [r9], #4
 8013746:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801374a:	d8e2      	bhi.n	8013712 <__multiply+0xb2>
 801374c:	9a01      	ldr	r2, [sp, #4]
 801374e:	f845 c002 	str.w	ip, [r5, r2]
 8013752:	9a03      	ldr	r2, [sp, #12]
 8013754:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013758:	3304      	adds	r3, #4
 801375a:	f1b9 0f00 	cmp.w	r9, #0
 801375e:	d021      	beq.n	80137a4 <__multiply+0x144>
 8013760:	6829      	ldr	r1, [r5, #0]
 8013762:	f104 0c14 	add.w	ip, r4, #20
 8013766:	46ae      	mov	lr, r5
 8013768:	f04f 0a00 	mov.w	sl, #0
 801376c:	f8bc b000 	ldrh.w	fp, [ip]
 8013770:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013774:	fb09 220b 	mla	r2, r9, fp, r2
 8013778:	4452      	add	r2, sl
 801377a:	b289      	uxth	r1, r1
 801377c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013780:	f84e 1b04 	str.w	r1, [lr], #4
 8013784:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013788:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801378c:	f8be 1000 	ldrh.w	r1, [lr]
 8013790:	fb09 110a 	mla	r1, r9, sl, r1
 8013794:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013798:	4567      	cmp	r7, ip
 801379a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801379e:	d8e5      	bhi.n	801376c <__multiply+0x10c>
 80137a0:	9a01      	ldr	r2, [sp, #4]
 80137a2:	50a9      	str	r1, [r5, r2]
 80137a4:	3504      	adds	r5, #4
 80137a6:	e799      	b.n	80136dc <__multiply+0x7c>
 80137a8:	3e01      	subs	r6, #1
 80137aa:	e79b      	b.n	80136e4 <__multiply+0x84>
 80137ac:	08016083 	.word	0x08016083
 80137b0:	080160f4 	.word	0x080160f4

080137b4 <__pow5mult>:
 80137b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137b8:	4615      	mov	r5, r2
 80137ba:	f012 0203 	ands.w	r2, r2, #3
 80137be:	4606      	mov	r6, r0
 80137c0:	460f      	mov	r7, r1
 80137c2:	d007      	beq.n	80137d4 <__pow5mult+0x20>
 80137c4:	4c25      	ldr	r4, [pc, #148]	; (801385c <__pow5mult+0xa8>)
 80137c6:	3a01      	subs	r2, #1
 80137c8:	2300      	movs	r3, #0
 80137ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80137ce:	f7ff fe53 	bl	8013478 <__multadd>
 80137d2:	4607      	mov	r7, r0
 80137d4:	10ad      	asrs	r5, r5, #2
 80137d6:	d03d      	beq.n	8013854 <__pow5mult+0xa0>
 80137d8:	69f4      	ldr	r4, [r6, #28]
 80137da:	b97c      	cbnz	r4, 80137fc <__pow5mult+0x48>
 80137dc:	2010      	movs	r0, #16
 80137de:	f7ff fd23 	bl	8013228 <malloc>
 80137e2:	4602      	mov	r2, r0
 80137e4:	61f0      	str	r0, [r6, #28]
 80137e6:	b928      	cbnz	r0, 80137f4 <__pow5mult+0x40>
 80137e8:	4b1d      	ldr	r3, [pc, #116]	; (8013860 <__pow5mult+0xac>)
 80137ea:	481e      	ldr	r0, [pc, #120]	; (8013864 <__pow5mult+0xb0>)
 80137ec:	f240 11b3 	movw	r1, #435	; 0x1b3
 80137f0:	f7fe fb62 	bl	8011eb8 <__assert_func>
 80137f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80137f8:	6004      	str	r4, [r0, #0]
 80137fa:	60c4      	str	r4, [r0, #12]
 80137fc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013800:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013804:	b94c      	cbnz	r4, 801381a <__pow5mult+0x66>
 8013806:	f240 2171 	movw	r1, #625	; 0x271
 801380a:	4630      	mov	r0, r6
 801380c:	f7ff ff12 	bl	8013634 <__i2b>
 8013810:	2300      	movs	r3, #0
 8013812:	f8c8 0008 	str.w	r0, [r8, #8]
 8013816:	4604      	mov	r4, r0
 8013818:	6003      	str	r3, [r0, #0]
 801381a:	f04f 0900 	mov.w	r9, #0
 801381e:	07eb      	lsls	r3, r5, #31
 8013820:	d50a      	bpl.n	8013838 <__pow5mult+0x84>
 8013822:	4639      	mov	r1, r7
 8013824:	4622      	mov	r2, r4
 8013826:	4630      	mov	r0, r6
 8013828:	f7ff ff1a 	bl	8013660 <__multiply>
 801382c:	4639      	mov	r1, r7
 801382e:	4680      	mov	r8, r0
 8013830:	4630      	mov	r0, r6
 8013832:	f7ff fdff 	bl	8013434 <_Bfree>
 8013836:	4647      	mov	r7, r8
 8013838:	106d      	asrs	r5, r5, #1
 801383a:	d00b      	beq.n	8013854 <__pow5mult+0xa0>
 801383c:	6820      	ldr	r0, [r4, #0]
 801383e:	b938      	cbnz	r0, 8013850 <__pow5mult+0x9c>
 8013840:	4622      	mov	r2, r4
 8013842:	4621      	mov	r1, r4
 8013844:	4630      	mov	r0, r6
 8013846:	f7ff ff0b 	bl	8013660 <__multiply>
 801384a:	6020      	str	r0, [r4, #0]
 801384c:	f8c0 9000 	str.w	r9, [r0]
 8013850:	4604      	mov	r4, r0
 8013852:	e7e4      	b.n	801381e <__pow5mult+0x6a>
 8013854:	4638      	mov	r0, r7
 8013856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801385a:	bf00      	nop
 801385c:	08016240 	.word	0x08016240
 8013860:	08015f6b 	.word	0x08015f6b
 8013864:	080160f4 	.word	0x080160f4

08013868 <__lshift>:
 8013868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801386c:	460c      	mov	r4, r1
 801386e:	6849      	ldr	r1, [r1, #4]
 8013870:	6923      	ldr	r3, [r4, #16]
 8013872:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013876:	68a3      	ldr	r3, [r4, #8]
 8013878:	4607      	mov	r7, r0
 801387a:	4691      	mov	r9, r2
 801387c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013880:	f108 0601 	add.w	r6, r8, #1
 8013884:	42b3      	cmp	r3, r6
 8013886:	db0b      	blt.n	80138a0 <__lshift+0x38>
 8013888:	4638      	mov	r0, r7
 801388a:	f7ff fd93 	bl	80133b4 <_Balloc>
 801388e:	4605      	mov	r5, r0
 8013890:	b948      	cbnz	r0, 80138a6 <__lshift+0x3e>
 8013892:	4602      	mov	r2, r0
 8013894:	4b28      	ldr	r3, [pc, #160]	; (8013938 <__lshift+0xd0>)
 8013896:	4829      	ldr	r0, [pc, #164]	; (801393c <__lshift+0xd4>)
 8013898:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801389c:	f7fe fb0c 	bl	8011eb8 <__assert_func>
 80138a0:	3101      	adds	r1, #1
 80138a2:	005b      	lsls	r3, r3, #1
 80138a4:	e7ee      	b.n	8013884 <__lshift+0x1c>
 80138a6:	2300      	movs	r3, #0
 80138a8:	f100 0114 	add.w	r1, r0, #20
 80138ac:	f100 0210 	add.w	r2, r0, #16
 80138b0:	4618      	mov	r0, r3
 80138b2:	4553      	cmp	r3, sl
 80138b4:	db33      	blt.n	801391e <__lshift+0xb6>
 80138b6:	6920      	ldr	r0, [r4, #16]
 80138b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80138bc:	f104 0314 	add.w	r3, r4, #20
 80138c0:	f019 091f 	ands.w	r9, r9, #31
 80138c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80138c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80138cc:	d02b      	beq.n	8013926 <__lshift+0xbe>
 80138ce:	f1c9 0e20 	rsb	lr, r9, #32
 80138d2:	468a      	mov	sl, r1
 80138d4:	2200      	movs	r2, #0
 80138d6:	6818      	ldr	r0, [r3, #0]
 80138d8:	fa00 f009 	lsl.w	r0, r0, r9
 80138dc:	4310      	orrs	r0, r2
 80138de:	f84a 0b04 	str.w	r0, [sl], #4
 80138e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80138e6:	459c      	cmp	ip, r3
 80138e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80138ec:	d8f3      	bhi.n	80138d6 <__lshift+0x6e>
 80138ee:	ebac 0304 	sub.w	r3, ip, r4
 80138f2:	3b15      	subs	r3, #21
 80138f4:	f023 0303 	bic.w	r3, r3, #3
 80138f8:	3304      	adds	r3, #4
 80138fa:	f104 0015 	add.w	r0, r4, #21
 80138fe:	4584      	cmp	ip, r0
 8013900:	bf38      	it	cc
 8013902:	2304      	movcc	r3, #4
 8013904:	50ca      	str	r2, [r1, r3]
 8013906:	b10a      	cbz	r2, 801390c <__lshift+0xa4>
 8013908:	f108 0602 	add.w	r6, r8, #2
 801390c:	3e01      	subs	r6, #1
 801390e:	4638      	mov	r0, r7
 8013910:	612e      	str	r6, [r5, #16]
 8013912:	4621      	mov	r1, r4
 8013914:	f7ff fd8e 	bl	8013434 <_Bfree>
 8013918:	4628      	mov	r0, r5
 801391a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801391e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013922:	3301      	adds	r3, #1
 8013924:	e7c5      	b.n	80138b2 <__lshift+0x4a>
 8013926:	3904      	subs	r1, #4
 8013928:	f853 2b04 	ldr.w	r2, [r3], #4
 801392c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013930:	459c      	cmp	ip, r3
 8013932:	d8f9      	bhi.n	8013928 <__lshift+0xc0>
 8013934:	e7ea      	b.n	801390c <__lshift+0xa4>
 8013936:	bf00      	nop
 8013938:	08016083 	.word	0x08016083
 801393c:	080160f4 	.word	0x080160f4

08013940 <__mcmp>:
 8013940:	b530      	push	{r4, r5, lr}
 8013942:	6902      	ldr	r2, [r0, #16]
 8013944:	690c      	ldr	r4, [r1, #16]
 8013946:	1b12      	subs	r2, r2, r4
 8013948:	d10e      	bne.n	8013968 <__mcmp+0x28>
 801394a:	f100 0314 	add.w	r3, r0, #20
 801394e:	3114      	adds	r1, #20
 8013950:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013954:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013958:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801395c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013960:	42a5      	cmp	r5, r4
 8013962:	d003      	beq.n	801396c <__mcmp+0x2c>
 8013964:	d305      	bcc.n	8013972 <__mcmp+0x32>
 8013966:	2201      	movs	r2, #1
 8013968:	4610      	mov	r0, r2
 801396a:	bd30      	pop	{r4, r5, pc}
 801396c:	4283      	cmp	r3, r0
 801396e:	d3f3      	bcc.n	8013958 <__mcmp+0x18>
 8013970:	e7fa      	b.n	8013968 <__mcmp+0x28>
 8013972:	f04f 32ff 	mov.w	r2, #4294967295
 8013976:	e7f7      	b.n	8013968 <__mcmp+0x28>

08013978 <__mdiff>:
 8013978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801397c:	460c      	mov	r4, r1
 801397e:	4606      	mov	r6, r0
 8013980:	4611      	mov	r1, r2
 8013982:	4620      	mov	r0, r4
 8013984:	4690      	mov	r8, r2
 8013986:	f7ff ffdb 	bl	8013940 <__mcmp>
 801398a:	1e05      	subs	r5, r0, #0
 801398c:	d110      	bne.n	80139b0 <__mdiff+0x38>
 801398e:	4629      	mov	r1, r5
 8013990:	4630      	mov	r0, r6
 8013992:	f7ff fd0f 	bl	80133b4 <_Balloc>
 8013996:	b930      	cbnz	r0, 80139a6 <__mdiff+0x2e>
 8013998:	4b3a      	ldr	r3, [pc, #232]	; (8013a84 <__mdiff+0x10c>)
 801399a:	4602      	mov	r2, r0
 801399c:	f240 2137 	movw	r1, #567	; 0x237
 80139a0:	4839      	ldr	r0, [pc, #228]	; (8013a88 <__mdiff+0x110>)
 80139a2:	f7fe fa89 	bl	8011eb8 <__assert_func>
 80139a6:	2301      	movs	r3, #1
 80139a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80139ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b0:	bfa4      	itt	ge
 80139b2:	4643      	movge	r3, r8
 80139b4:	46a0      	movge	r8, r4
 80139b6:	4630      	mov	r0, r6
 80139b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80139bc:	bfa6      	itte	ge
 80139be:	461c      	movge	r4, r3
 80139c0:	2500      	movge	r5, #0
 80139c2:	2501      	movlt	r5, #1
 80139c4:	f7ff fcf6 	bl	80133b4 <_Balloc>
 80139c8:	b920      	cbnz	r0, 80139d4 <__mdiff+0x5c>
 80139ca:	4b2e      	ldr	r3, [pc, #184]	; (8013a84 <__mdiff+0x10c>)
 80139cc:	4602      	mov	r2, r0
 80139ce:	f240 2145 	movw	r1, #581	; 0x245
 80139d2:	e7e5      	b.n	80139a0 <__mdiff+0x28>
 80139d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80139d8:	6926      	ldr	r6, [r4, #16]
 80139da:	60c5      	str	r5, [r0, #12]
 80139dc:	f104 0914 	add.w	r9, r4, #20
 80139e0:	f108 0514 	add.w	r5, r8, #20
 80139e4:	f100 0e14 	add.w	lr, r0, #20
 80139e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80139ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80139f0:	f108 0210 	add.w	r2, r8, #16
 80139f4:	46f2      	mov	sl, lr
 80139f6:	2100      	movs	r1, #0
 80139f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80139fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013a00:	fa11 f88b 	uxtah	r8, r1, fp
 8013a04:	b299      	uxth	r1, r3
 8013a06:	0c1b      	lsrs	r3, r3, #16
 8013a08:	eba8 0801 	sub.w	r8, r8, r1
 8013a0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013a10:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013a14:	fa1f f888 	uxth.w	r8, r8
 8013a18:	1419      	asrs	r1, r3, #16
 8013a1a:	454e      	cmp	r6, r9
 8013a1c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013a20:	f84a 3b04 	str.w	r3, [sl], #4
 8013a24:	d8e8      	bhi.n	80139f8 <__mdiff+0x80>
 8013a26:	1b33      	subs	r3, r6, r4
 8013a28:	3b15      	subs	r3, #21
 8013a2a:	f023 0303 	bic.w	r3, r3, #3
 8013a2e:	3304      	adds	r3, #4
 8013a30:	3415      	adds	r4, #21
 8013a32:	42a6      	cmp	r6, r4
 8013a34:	bf38      	it	cc
 8013a36:	2304      	movcc	r3, #4
 8013a38:	441d      	add	r5, r3
 8013a3a:	4473      	add	r3, lr
 8013a3c:	469e      	mov	lr, r3
 8013a3e:	462e      	mov	r6, r5
 8013a40:	4566      	cmp	r6, ip
 8013a42:	d30e      	bcc.n	8013a62 <__mdiff+0xea>
 8013a44:	f10c 0203 	add.w	r2, ip, #3
 8013a48:	1b52      	subs	r2, r2, r5
 8013a4a:	f022 0203 	bic.w	r2, r2, #3
 8013a4e:	3d03      	subs	r5, #3
 8013a50:	45ac      	cmp	ip, r5
 8013a52:	bf38      	it	cc
 8013a54:	2200      	movcc	r2, #0
 8013a56:	4413      	add	r3, r2
 8013a58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013a5c:	b17a      	cbz	r2, 8013a7e <__mdiff+0x106>
 8013a5e:	6107      	str	r7, [r0, #16]
 8013a60:	e7a4      	b.n	80139ac <__mdiff+0x34>
 8013a62:	f856 8b04 	ldr.w	r8, [r6], #4
 8013a66:	fa11 f288 	uxtah	r2, r1, r8
 8013a6a:	1414      	asrs	r4, r2, #16
 8013a6c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013a70:	b292      	uxth	r2, r2
 8013a72:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013a76:	f84e 2b04 	str.w	r2, [lr], #4
 8013a7a:	1421      	asrs	r1, r4, #16
 8013a7c:	e7e0      	b.n	8013a40 <__mdiff+0xc8>
 8013a7e:	3f01      	subs	r7, #1
 8013a80:	e7ea      	b.n	8013a58 <__mdiff+0xe0>
 8013a82:	bf00      	nop
 8013a84:	08016083 	.word	0x08016083
 8013a88:	080160f4 	.word	0x080160f4

08013a8c <__ulp>:
 8013a8c:	b082      	sub	sp, #8
 8013a8e:	ed8d 0b00 	vstr	d0, [sp]
 8013a92:	9a01      	ldr	r2, [sp, #4]
 8013a94:	4b0f      	ldr	r3, [pc, #60]	; (8013ad4 <__ulp+0x48>)
 8013a96:	4013      	ands	r3, r2
 8013a98:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	dc08      	bgt.n	8013ab2 <__ulp+0x26>
 8013aa0:	425b      	negs	r3, r3
 8013aa2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8013aa6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013aaa:	da04      	bge.n	8013ab6 <__ulp+0x2a>
 8013aac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013ab0:	4113      	asrs	r3, r2
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	e008      	b.n	8013ac8 <__ulp+0x3c>
 8013ab6:	f1a2 0314 	sub.w	r3, r2, #20
 8013aba:	2b1e      	cmp	r3, #30
 8013abc:	bfda      	itte	le
 8013abe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013ac2:	40da      	lsrle	r2, r3
 8013ac4:	2201      	movgt	r2, #1
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	4619      	mov	r1, r3
 8013aca:	4610      	mov	r0, r2
 8013acc:	ec41 0b10 	vmov	d0, r0, r1
 8013ad0:	b002      	add	sp, #8
 8013ad2:	4770      	bx	lr
 8013ad4:	7ff00000 	.word	0x7ff00000

08013ad8 <__b2d>:
 8013ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013adc:	6906      	ldr	r6, [r0, #16]
 8013ade:	f100 0814 	add.w	r8, r0, #20
 8013ae2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013ae6:	1f37      	subs	r7, r6, #4
 8013ae8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013aec:	4610      	mov	r0, r2
 8013aee:	f7ff fd53 	bl	8013598 <__hi0bits>
 8013af2:	f1c0 0320 	rsb	r3, r0, #32
 8013af6:	280a      	cmp	r0, #10
 8013af8:	600b      	str	r3, [r1, #0]
 8013afa:	491b      	ldr	r1, [pc, #108]	; (8013b68 <__b2d+0x90>)
 8013afc:	dc15      	bgt.n	8013b2a <__b2d+0x52>
 8013afe:	f1c0 0c0b 	rsb	ip, r0, #11
 8013b02:	fa22 f30c 	lsr.w	r3, r2, ip
 8013b06:	45b8      	cmp	r8, r7
 8013b08:	ea43 0501 	orr.w	r5, r3, r1
 8013b0c:	bf34      	ite	cc
 8013b0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013b12:	2300      	movcs	r3, #0
 8013b14:	3015      	adds	r0, #21
 8013b16:	fa02 f000 	lsl.w	r0, r2, r0
 8013b1a:	fa23 f30c 	lsr.w	r3, r3, ip
 8013b1e:	4303      	orrs	r3, r0
 8013b20:	461c      	mov	r4, r3
 8013b22:	ec45 4b10 	vmov	d0, r4, r5
 8013b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b2a:	45b8      	cmp	r8, r7
 8013b2c:	bf3a      	itte	cc
 8013b2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013b32:	f1a6 0708 	subcc.w	r7, r6, #8
 8013b36:	2300      	movcs	r3, #0
 8013b38:	380b      	subs	r0, #11
 8013b3a:	d012      	beq.n	8013b62 <__b2d+0x8a>
 8013b3c:	f1c0 0120 	rsb	r1, r0, #32
 8013b40:	fa23 f401 	lsr.w	r4, r3, r1
 8013b44:	4082      	lsls	r2, r0
 8013b46:	4322      	orrs	r2, r4
 8013b48:	4547      	cmp	r7, r8
 8013b4a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013b4e:	bf8c      	ite	hi
 8013b50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013b54:	2200      	movls	r2, #0
 8013b56:	4083      	lsls	r3, r0
 8013b58:	40ca      	lsrs	r2, r1
 8013b5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013b5e:	4313      	orrs	r3, r2
 8013b60:	e7de      	b.n	8013b20 <__b2d+0x48>
 8013b62:	ea42 0501 	orr.w	r5, r2, r1
 8013b66:	e7db      	b.n	8013b20 <__b2d+0x48>
 8013b68:	3ff00000 	.word	0x3ff00000

08013b6c <__d2b>:
 8013b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013b70:	460f      	mov	r7, r1
 8013b72:	2101      	movs	r1, #1
 8013b74:	ec59 8b10 	vmov	r8, r9, d0
 8013b78:	4616      	mov	r6, r2
 8013b7a:	f7ff fc1b 	bl	80133b4 <_Balloc>
 8013b7e:	4604      	mov	r4, r0
 8013b80:	b930      	cbnz	r0, 8013b90 <__d2b+0x24>
 8013b82:	4602      	mov	r2, r0
 8013b84:	4b24      	ldr	r3, [pc, #144]	; (8013c18 <__d2b+0xac>)
 8013b86:	4825      	ldr	r0, [pc, #148]	; (8013c1c <__d2b+0xb0>)
 8013b88:	f240 310f 	movw	r1, #783	; 0x30f
 8013b8c:	f7fe f994 	bl	8011eb8 <__assert_func>
 8013b90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013b94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b98:	bb2d      	cbnz	r5, 8013be6 <__d2b+0x7a>
 8013b9a:	9301      	str	r3, [sp, #4]
 8013b9c:	f1b8 0300 	subs.w	r3, r8, #0
 8013ba0:	d026      	beq.n	8013bf0 <__d2b+0x84>
 8013ba2:	4668      	mov	r0, sp
 8013ba4:	9300      	str	r3, [sp, #0]
 8013ba6:	f7ff fd17 	bl	80135d8 <__lo0bits>
 8013baa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013bae:	b1e8      	cbz	r0, 8013bec <__d2b+0x80>
 8013bb0:	f1c0 0320 	rsb	r3, r0, #32
 8013bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8013bb8:	430b      	orrs	r3, r1
 8013bba:	40c2      	lsrs	r2, r0
 8013bbc:	6163      	str	r3, [r4, #20]
 8013bbe:	9201      	str	r2, [sp, #4]
 8013bc0:	9b01      	ldr	r3, [sp, #4]
 8013bc2:	61a3      	str	r3, [r4, #24]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	bf14      	ite	ne
 8013bc8:	2202      	movne	r2, #2
 8013bca:	2201      	moveq	r2, #1
 8013bcc:	6122      	str	r2, [r4, #16]
 8013bce:	b1bd      	cbz	r5, 8013c00 <__d2b+0x94>
 8013bd0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013bd4:	4405      	add	r5, r0
 8013bd6:	603d      	str	r5, [r7, #0]
 8013bd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013bdc:	6030      	str	r0, [r6, #0]
 8013bde:	4620      	mov	r0, r4
 8013be0:	b003      	add	sp, #12
 8013be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013bea:	e7d6      	b.n	8013b9a <__d2b+0x2e>
 8013bec:	6161      	str	r1, [r4, #20]
 8013bee:	e7e7      	b.n	8013bc0 <__d2b+0x54>
 8013bf0:	a801      	add	r0, sp, #4
 8013bf2:	f7ff fcf1 	bl	80135d8 <__lo0bits>
 8013bf6:	9b01      	ldr	r3, [sp, #4]
 8013bf8:	6163      	str	r3, [r4, #20]
 8013bfa:	3020      	adds	r0, #32
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	e7e5      	b.n	8013bcc <__d2b+0x60>
 8013c00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c08:	6038      	str	r0, [r7, #0]
 8013c0a:	6918      	ldr	r0, [r3, #16]
 8013c0c:	f7ff fcc4 	bl	8013598 <__hi0bits>
 8013c10:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c14:	e7e2      	b.n	8013bdc <__d2b+0x70>
 8013c16:	bf00      	nop
 8013c18:	08016083 	.word	0x08016083
 8013c1c:	080160f4 	.word	0x080160f4

08013c20 <__ratio>:
 8013c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c24:	4688      	mov	r8, r1
 8013c26:	4669      	mov	r1, sp
 8013c28:	4681      	mov	r9, r0
 8013c2a:	f7ff ff55 	bl	8013ad8 <__b2d>
 8013c2e:	a901      	add	r1, sp, #4
 8013c30:	4640      	mov	r0, r8
 8013c32:	ec55 4b10 	vmov	r4, r5, d0
 8013c36:	ee10 aa10 	vmov	sl, s0
 8013c3a:	f7ff ff4d 	bl	8013ad8 <__b2d>
 8013c3e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013c42:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013c46:	1ad2      	subs	r2, r2, r3
 8013c48:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013c4c:	1a5b      	subs	r3, r3, r1
 8013c4e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8013c52:	ec57 6b10 	vmov	r6, r7, d0
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	bfd6      	itet	le
 8013c5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013c5e:	462a      	movgt	r2, r5
 8013c60:	463a      	movle	r2, r7
 8013c62:	46ab      	mov	fp, r5
 8013c64:	bfd6      	itet	le
 8013c66:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8013c6a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013c6e:	ee00 3a90 	vmovle	s1, r3
 8013c72:	ec4b ab17 	vmov	d7, sl, fp
 8013c76:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013c7a:	b003      	add	sp, #12
 8013c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c80 <__copybits>:
 8013c80:	3901      	subs	r1, #1
 8013c82:	b570      	push	{r4, r5, r6, lr}
 8013c84:	1149      	asrs	r1, r1, #5
 8013c86:	6914      	ldr	r4, [r2, #16]
 8013c88:	3101      	adds	r1, #1
 8013c8a:	f102 0314 	add.w	r3, r2, #20
 8013c8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013c92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013c96:	1f05      	subs	r5, r0, #4
 8013c98:	42a3      	cmp	r3, r4
 8013c9a:	d30c      	bcc.n	8013cb6 <__copybits+0x36>
 8013c9c:	1aa3      	subs	r3, r4, r2
 8013c9e:	3b11      	subs	r3, #17
 8013ca0:	f023 0303 	bic.w	r3, r3, #3
 8013ca4:	3211      	adds	r2, #17
 8013ca6:	42a2      	cmp	r2, r4
 8013ca8:	bf88      	it	hi
 8013caa:	2300      	movhi	r3, #0
 8013cac:	4418      	add	r0, r3
 8013cae:	2300      	movs	r3, #0
 8013cb0:	4288      	cmp	r0, r1
 8013cb2:	d305      	bcc.n	8013cc0 <__copybits+0x40>
 8013cb4:	bd70      	pop	{r4, r5, r6, pc}
 8013cb6:	f853 6b04 	ldr.w	r6, [r3], #4
 8013cba:	f845 6f04 	str.w	r6, [r5, #4]!
 8013cbe:	e7eb      	b.n	8013c98 <__copybits+0x18>
 8013cc0:	f840 3b04 	str.w	r3, [r0], #4
 8013cc4:	e7f4      	b.n	8013cb0 <__copybits+0x30>

08013cc6 <__any_on>:
 8013cc6:	f100 0214 	add.w	r2, r0, #20
 8013cca:	6900      	ldr	r0, [r0, #16]
 8013ccc:	114b      	asrs	r3, r1, #5
 8013cce:	4298      	cmp	r0, r3
 8013cd0:	b510      	push	{r4, lr}
 8013cd2:	db11      	blt.n	8013cf8 <__any_on+0x32>
 8013cd4:	dd0a      	ble.n	8013cec <__any_on+0x26>
 8013cd6:	f011 011f 	ands.w	r1, r1, #31
 8013cda:	d007      	beq.n	8013cec <__any_on+0x26>
 8013cdc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013ce0:	fa24 f001 	lsr.w	r0, r4, r1
 8013ce4:	fa00 f101 	lsl.w	r1, r0, r1
 8013ce8:	428c      	cmp	r4, r1
 8013cea:	d10b      	bne.n	8013d04 <__any_on+0x3e>
 8013cec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d803      	bhi.n	8013cfc <__any_on+0x36>
 8013cf4:	2000      	movs	r0, #0
 8013cf6:	bd10      	pop	{r4, pc}
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	e7f7      	b.n	8013cec <__any_on+0x26>
 8013cfc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013d00:	2900      	cmp	r1, #0
 8013d02:	d0f5      	beq.n	8013cf0 <__any_on+0x2a>
 8013d04:	2001      	movs	r0, #1
 8013d06:	e7f6      	b.n	8013cf6 <__any_on+0x30>

08013d08 <__ascii_wctomb>:
 8013d08:	b149      	cbz	r1, 8013d1e <__ascii_wctomb+0x16>
 8013d0a:	2aff      	cmp	r2, #255	; 0xff
 8013d0c:	bf85      	ittet	hi
 8013d0e:	238a      	movhi	r3, #138	; 0x8a
 8013d10:	6003      	strhi	r3, [r0, #0]
 8013d12:	700a      	strbls	r2, [r1, #0]
 8013d14:	f04f 30ff 	movhi.w	r0, #4294967295
 8013d18:	bf98      	it	ls
 8013d1a:	2001      	movls	r0, #1
 8013d1c:	4770      	bx	lr
 8013d1e:	4608      	mov	r0, r1
 8013d20:	4770      	bx	lr

08013d22 <__ssputs_r>:
 8013d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d26:	688e      	ldr	r6, [r1, #8]
 8013d28:	461f      	mov	r7, r3
 8013d2a:	42be      	cmp	r6, r7
 8013d2c:	680b      	ldr	r3, [r1, #0]
 8013d2e:	4682      	mov	sl, r0
 8013d30:	460c      	mov	r4, r1
 8013d32:	4690      	mov	r8, r2
 8013d34:	d82c      	bhi.n	8013d90 <__ssputs_r+0x6e>
 8013d36:	898a      	ldrh	r2, [r1, #12]
 8013d38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013d3c:	d026      	beq.n	8013d8c <__ssputs_r+0x6a>
 8013d3e:	6965      	ldr	r5, [r4, #20]
 8013d40:	6909      	ldr	r1, [r1, #16]
 8013d42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d46:	eba3 0901 	sub.w	r9, r3, r1
 8013d4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d4e:	1c7b      	adds	r3, r7, #1
 8013d50:	444b      	add	r3, r9
 8013d52:	106d      	asrs	r5, r5, #1
 8013d54:	429d      	cmp	r5, r3
 8013d56:	bf38      	it	cc
 8013d58:	461d      	movcc	r5, r3
 8013d5a:	0553      	lsls	r3, r2, #21
 8013d5c:	d527      	bpl.n	8013dae <__ssputs_r+0x8c>
 8013d5e:	4629      	mov	r1, r5
 8013d60:	f7ff fa8a 	bl	8013278 <_malloc_r>
 8013d64:	4606      	mov	r6, r0
 8013d66:	b360      	cbz	r0, 8013dc2 <__ssputs_r+0xa0>
 8013d68:	6921      	ldr	r1, [r4, #16]
 8013d6a:	464a      	mov	r2, r9
 8013d6c:	f7fe f88d 	bl	8011e8a <memcpy>
 8013d70:	89a3      	ldrh	r3, [r4, #12]
 8013d72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d7a:	81a3      	strh	r3, [r4, #12]
 8013d7c:	6126      	str	r6, [r4, #16]
 8013d7e:	6165      	str	r5, [r4, #20]
 8013d80:	444e      	add	r6, r9
 8013d82:	eba5 0509 	sub.w	r5, r5, r9
 8013d86:	6026      	str	r6, [r4, #0]
 8013d88:	60a5      	str	r5, [r4, #8]
 8013d8a:	463e      	mov	r6, r7
 8013d8c:	42be      	cmp	r6, r7
 8013d8e:	d900      	bls.n	8013d92 <__ssputs_r+0x70>
 8013d90:	463e      	mov	r6, r7
 8013d92:	6820      	ldr	r0, [r4, #0]
 8013d94:	4632      	mov	r2, r6
 8013d96:	4641      	mov	r1, r8
 8013d98:	f000 ff49 	bl	8014c2e <memmove>
 8013d9c:	68a3      	ldr	r3, [r4, #8]
 8013d9e:	1b9b      	subs	r3, r3, r6
 8013da0:	60a3      	str	r3, [r4, #8]
 8013da2:	6823      	ldr	r3, [r4, #0]
 8013da4:	4433      	add	r3, r6
 8013da6:	6023      	str	r3, [r4, #0]
 8013da8:	2000      	movs	r0, #0
 8013daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dae:	462a      	mov	r2, r5
 8013db0:	f000 ffa7 	bl	8014d02 <_realloc_r>
 8013db4:	4606      	mov	r6, r0
 8013db6:	2800      	cmp	r0, #0
 8013db8:	d1e0      	bne.n	8013d7c <__ssputs_r+0x5a>
 8013dba:	6921      	ldr	r1, [r4, #16]
 8013dbc:	4650      	mov	r0, sl
 8013dbe:	f7fe fe8f 	bl	8012ae0 <_free_r>
 8013dc2:	230c      	movs	r3, #12
 8013dc4:	f8ca 3000 	str.w	r3, [sl]
 8013dc8:	89a3      	ldrh	r3, [r4, #12]
 8013dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dce:	81a3      	strh	r3, [r4, #12]
 8013dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd4:	e7e9      	b.n	8013daa <__ssputs_r+0x88>
	...

08013dd8 <_svfiprintf_r>:
 8013dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ddc:	4698      	mov	r8, r3
 8013dde:	898b      	ldrh	r3, [r1, #12]
 8013de0:	061b      	lsls	r3, r3, #24
 8013de2:	b09d      	sub	sp, #116	; 0x74
 8013de4:	4607      	mov	r7, r0
 8013de6:	460d      	mov	r5, r1
 8013de8:	4614      	mov	r4, r2
 8013dea:	d50e      	bpl.n	8013e0a <_svfiprintf_r+0x32>
 8013dec:	690b      	ldr	r3, [r1, #16]
 8013dee:	b963      	cbnz	r3, 8013e0a <_svfiprintf_r+0x32>
 8013df0:	2140      	movs	r1, #64	; 0x40
 8013df2:	f7ff fa41 	bl	8013278 <_malloc_r>
 8013df6:	6028      	str	r0, [r5, #0]
 8013df8:	6128      	str	r0, [r5, #16]
 8013dfa:	b920      	cbnz	r0, 8013e06 <_svfiprintf_r+0x2e>
 8013dfc:	230c      	movs	r3, #12
 8013dfe:	603b      	str	r3, [r7, #0]
 8013e00:	f04f 30ff 	mov.w	r0, #4294967295
 8013e04:	e0d0      	b.n	8013fa8 <_svfiprintf_r+0x1d0>
 8013e06:	2340      	movs	r3, #64	; 0x40
 8013e08:	616b      	str	r3, [r5, #20]
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8013e0e:	2320      	movs	r3, #32
 8013e10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e18:	2330      	movs	r3, #48	; 0x30
 8013e1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013fc0 <_svfiprintf_r+0x1e8>
 8013e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e22:	f04f 0901 	mov.w	r9, #1
 8013e26:	4623      	mov	r3, r4
 8013e28:	469a      	mov	sl, r3
 8013e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e2e:	b10a      	cbz	r2, 8013e34 <_svfiprintf_r+0x5c>
 8013e30:	2a25      	cmp	r2, #37	; 0x25
 8013e32:	d1f9      	bne.n	8013e28 <_svfiprintf_r+0x50>
 8013e34:	ebba 0b04 	subs.w	fp, sl, r4
 8013e38:	d00b      	beq.n	8013e52 <_svfiprintf_r+0x7a>
 8013e3a:	465b      	mov	r3, fp
 8013e3c:	4622      	mov	r2, r4
 8013e3e:	4629      	mov	r1, r5
 8013e40:	4638      	mov	r0, r7
 8013e42:	f7ff ff6e 	bl	8013d22 <__ssputs_r>
 8013e46:	3001      	adds	r0, #1
 8013e48:	f000 80a9 	beq.w	8013f9e <_svfiprintf_r+0x1c6>
 8013e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e4e:	445a      	add	r2, fp
 8013e50:	9209      	str	r2, [sp, #36]	; 0x24
 8013e52:	f89a 3000 	ldrb.w	r3, [sl]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	f000 80a1 	beq.w	8013f9e <_svfiprintf_r+0x1c6>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e66:	f10a 0a01 	add.w	sl, sl, #1
 8013e6a:	9304      	str	r3, [sp, #16]
 8013e6c:	9307      	str	r3, [sp, #28]
 8013e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e72:	931a      	str	r3, [sp, #104]	; 0x68
 8013e74:	4654      	mov	r4, sl
 8013e76:	2205      	movs	r2, #5
 8013e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e7c:	4850      	ldr	r0, [pc, #320]	; (8013fc0 <_svfiprintf_r+0x1e8>)
 8013e7e:	f7ec fa3f 	bl	8000300 <memchr>
 8013e82:	9a04      	ldr	r2, [sp, #16]
 8013e84:	b9d8      	cbnz	r0, 8013ebe <_svfiprintf_r+0xe6>
 8013e86:	06d0      	lsls	r0, r2, #27
 8013e88:	bf44      	itt	mi
 8013e8a:	2320      	movmi	r3, #32
 8013e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e90:	0711      	lsls	r1, r2, #28
 8013e92:	bf44      	itt	mi
 8013e94:	232b      	movmi	r3, #43	; 0x2b
 8013e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8013e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8013ea0:	d015      	beq.n	8013ece <_svfiprintf_r+0xf6>
 8013ea2:	9a07      	ldr	r2, [sp, #28]
 8013ea4:	4654      	mov	r4, sl
 8013ea6:	2000      	movs	r0, #0
 8013ea8:	f04f 0c0a 	mov.w	ip, #10
 8013eac:	4621      	mov	r1, r4
 8013eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013eb2:	3b30      	subs	r3, #48	; 0x30
 8013eb4:	2b09      	cmp	r3, #9
 8013eb6:	d94d      	bls.n	8013f54 <_svfiprintf_r+0x17c>
 8013eb8:	b1b0      	cbz	r0, 8013ee8 <_svfiprintf_r+0x110>
 8013eba:	9207      	str	r2, [sp, #28]
 8013ebc:	e014      	b.n	8013ee8 <_svfiprintf_r+0x110>
 8013ebe:	eba0 0308 	sub.w	r3, r0, r8
 8013ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8013ec6:	4313      	orrs	r3, r2
 8013ec8:	9304      	str	r3, [sp, #16]
 8013eca:	46a2      	mov	sl, r4
 8013ecc:	e7d2      	b.n	8013e74 <_svfiprintf_r+0x9c>
 8013ece:	9b03      	ldr	r3, [sp, #12]
 8013ed0:	1d19      	adds	r1, r3, #4
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	9103      	str	r1, [sp, #12]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	bfbb      	ittet	lt
 8013eda:	425b      	neglt	r3, r3
 8013edc:	f042 0202 	orrlt.w	r2, r2, #2
 8013ee0:	9307      	strge	r3, [sp, #28]
 8013ee2:	9307      	strlt	r3, [sp, #28]
 8013ee4:	bfb8      	it	lt
 8013ee6:	9204      	strlt	r2, [sp, #16]
 8013ee8:	7823      	ldrb	r3, [r4, #0]
 8013eea:	2b2e      	cmp	r3, #46	; 0x2e
 8013eec:	d10c      	bne.n	8013f08 <_svfiprintf_r+0x130>
 8013eee:	7863      	ldrb	r3, [r4, #1]
 8013ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8013ef2:	d134      	bne.n	8013f5e <_svfiprintf_r+0x186>
 8013ef4:	9b03      	ldr	r3, [sp, #12]
 8013ef6:	1d1a      	adds	r2, r3, #4
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	9203      	str	r2, [sp, #12]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	bfb8      	it	lt
 8013f00:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f04:	3402      	adds	r4, #2
 8013f06:	9305      	str	r3, [sp, #20]
 8013f08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013fd0 <_svfiprintf_r+0x1f8>
 8013f0c:	7821      	ldrb	r1, [r4, #0]
 8013f0e:	2203      	movs	r2, #3
 8013f10:	4650      	mov	r0, sl
 8013f12:	f7ec f9f5 	bl	8000300 <memchr>
 8013f16:	b138      	cbz	r0, 8013f28 <_svfiprintf_r+0x150>
 8013f18:	9b04      	ldr	r3, [sp, #16]
 8013f1a:	eba0 000a 	sub.w	r0, r0, sl
 8013f1e:	2240      	movs	r2, #64	; 0x40
 8013f20:	4082      	lsls	r2, r0
 8013f22:	4313      	orrs	r3, r2
 8013f24:	3401      	adds	r4, #1
 8013f26:	9304      	str	r3, [sp, #16]
 8013f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f2c:	4825      	ldr	r0, [pc, #148]	; (8013fc4 <_svfiprintf_r+0x1ec>)
 8013f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f32:	2206      	movs	r2, #6
 8013f34:	f7ec f9e4 	bl	8000300 <memchr>
 8013f38:	2800      	cmp	r0, #0
 8013f3a:	d038      	beq.n	8013fae <_svfiprintf_r+0x1d6>
 8013f3c:	4b22      	ldr	r3, [pc, #136]	; (8013fc8 <_svfiprintf_r+0x1f0>)
 8013f3e:	bb1b      	cbnz	r3, 8013f88 <_svfiprintf_r+0x1b0>
 8013f40:	9b03      	ldr	r3, [sp, #12]
 8013f42:	3307      	adds	r3, #7
 8013f44:	f023 0307 	bic.w	r3, r3, #7
 8013f48:	3308      	adds	r3, #8
 8013f4a:	9303      	str	r3, [sp, #12]
 8013f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f4e:	4433      	add	r3, r6
 8013f50:	9309      	str	r3, [sp, #36]	; 0x24
 8013f52:	e768      	b.n	8013e26 <_svfiprintf_r+0x4e>
 8013f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f58:	460c      	mov	r4, r1
 8013f5a:	2001      	movs	r0, #1
 8013f5c:	e7a6      	b.n	8013eac <_svfiprintf_r+0xd4>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	3401      	adds	r4, #1
 8013f62:	9305      	str	r3, [sp, #20]
 8013f64:	4619      	mov	r1, r3
 8013f66:	f04f 0c0a 	mov.w	ip, #10
 8013f6a:	4620      	mov	r0, r4
 8013f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f70:	3a30      	subs	r2, #48	; 0x30
 8013f72:	2a09      	cmp	r2, #9
 8013f74:	d903      	bls.n	8013f7e <_svfiprintf_r+0x1a6>
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d0c6      	beq.n	8013f08 <_svfiprintf_r+0x130>
 8013f7a:	9105      	str	r1, [sp, #20]
 8013f7c:	e7c4      	b.n	8013f08 <_svfiprintf_r+0x130>
 8013f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f82:	4604      	mov	r4, r0
 8013f84:	2301      	movs	r3, #1
 8013f86:	e7f0      	b.n	8013f6a <_svfiprintf_r+0x192>
 8013f88:	ab03      	add	r3, sp, #12
 8013f8a:	9300      	str	r3, [sp, #0]
 8013f8c:	462a      	mov	r2, r5
 8013f8e:	4b0f      	ldr	r3, [pc, #60]	; (8013fcc <_svfiprintf_r+0x1f4>)
 8013f90:	a904      	add	r1, sp, #16
 8013f92:	4638      	mov	r0, r7
 8013f94:	f7fc ffbc 	bl	8010f10 <_printf_float>
 8013f98:	1c42      	adds	r2, r0, #1
 8013f9a:	4606      	mov	r6, r0
 8013f9c:	d1d6      	bne.n	8013f4c <_svfiprintf_r+0x174>
 8013f9e:	89ab      	ldrh	r3, [r5, #12]
 8013fa0:	065b      	lsls	r3, r3, #25
 8013fa2:	f53f af2d 	bmi.w	8013e00 <_svfiprintf_r+0x28>
 8013fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fa8:	b01d      	add	sp, #116	; 0x74
 8013faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fae:	ab03      	add	r3, sp, #12
 8013fb0:	9300      	str	r3, [sp, #0]
 8013fb2:	462a      	mov	r2, r5
 8013fb4:	4b05      	ldr	r3, [pc, #20]	; (8013fcc <_svfiprintf_r+0x1f4>)
 8013fb6:	a904      	add	r1, sp, #16
 8013fb8:	4638      	mov	r0, r7
 8013fba:	f7fd fa31 	bl	8011420 <_printf_i>
 8013fbe:	e7eb      	b.n	8013f98 <_svfiprintf_r+0x1c0>
 8013fc0:	0801624c 	.word	0x0801624c
 8013fc4:	08016256 	.word	0x08016256
 8013fc8:	08010f11 	.word	0x08010f11
 8013fcc:	08013d23 	.word	0x08013d23
 8013fd0:	08016252 	.word	0x08016252

08013fd4 <_sungetc_r>:
 8013fd4:	b538      	push	{r3, r4, r5, lr}
 8013fd6:	1c4b      	adds	r3, r1, #1
 8013fd8:	4614      	mov	r4, r2
 8013fda:	d103      	bne.n	8013fe4 <_sungetc_r+0x10>
 8013fdc:	f04f 35ff 	mov.w	r5, #4294967295
 8013fe0:	4628      	mov	r0, r5
 8013fe2:	bd38      	pop	{r3, r4, r5, pc}
 8013fe4:	8993      	ldrh	r3, [r2, #12]
 8013fe6:	f023 0320 	bic.w	r3, r3, #32
 8013fea:	8193      	strh	r3, [r2, #12]
 8013fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013fee:	6852      	ldr	r2, [r2, #4]
 8013ff0:	b2cd      	uxtb	r5, r1
 8013ff2:	b18b      	cbz	r3, 8014018 <_sungetc_r+0x44>
 8013ff4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013ff6:	4293      	cmp	r3, r2
 8013ff8:	dd08      	ble.n	801400c <_sungetc_r+0x38>
 8013ffa:	6823      	ldr	r3, [r4, #0]
 8013ffc:	1e5a      	subs	r2, r3, #1
 8013ffe:	6022      	str	r2, [r4, #0]
 8014000:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014004:	6863      	ldr	r3, [r4, #4]
 8014006:	3301      	adds	r3, #1
 8014008:	6063      	str	r3, [r4, #4]
 801400a:	e7e9      	b.n	8013fe0 <_sungetc_r+0xc>
 801400c:	4621      	mov	r1, r4
 801400e:	f000 fdd4 	bl	8014bba <__submore>
 8014012:	2800      	cmp	r0, #0
 8014014:	d0f1      	beq.n	8013ffa <_sungetc_r+0x26>
 8014016:	e7e1      	b.n	8013fdc <_sungetc_r+0x8>
 8014018:	6921      	ldr	r1, [r4, #16]
 801401a:	6823      	ldr	r3, [r4, #0]
 801401c:	b151      	cbz	r1, 8014034 <_sungetc_r+0x60>
 801401e:	4299      	cmp	r1, r3
 8014020:	d208      	bcs.n	8014034 <_sungetc_r+0x60>
 8014022:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014026:	42a9      	cmp	r1, r5
 8014028:	d104      	bne.n	8014034 <_sungetc_r+0x60>
 801402a:	3b01      	subs	r3, #1
 801402c:	3201      	adds	r2, #1
 801402e:	6023      	str	r3, [r4, #0]
 8014030:	6062      	str	r2, [r4, #4]
 8014032:	e7d5      	b.n	8013fe0 <_sungetc_r+0xc>
 8014034:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801403c:	6363      	str	r3, [r4, #52]	; 0x34
 801403e:	2303      	movs	r3, #3
 8014040:	63a3      	str	r3, [r4, #56]	; 0x38
 8014042:	4623      	mov	r3, r4
 8014044:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014048:	6023      	str	r3, [r4, #0]
 801404a:	2301      	movs	r3, #1
 801404c:	e7dc      	b.n	8014008 <_sungetc_r+0x34>

0801404e <__ssrefill_r>:
 801404e:	b510      	push	{r4, lr}
 8014050:	460c      	mov	r4, r1
 8014052:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014054:	b169      	cbz	r1, 8014072 <__ssrefill_r+0x24>
 8014056:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801405a:	4299      	cmp	r1, r3
 801405c:	d001      	beq.n	8014062 <__ssrefill_r+0x14>
 801405e:	f7fe fd3f 	bl	8012ae0 <_free_r>
 8014062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014064:	6063      	str	r3, [r4, #4]
 8014066:	2000      	movs	r0, #0
 8014068:	6360      	str	r0, [r4, #52]	; 0x34
 801406a:	b113      	cbz	r3, 8014072 <__ssrefill_r+0x24>
 801406c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801406e:	6023      	str	r3, [r4, #0]
 8014070:	bd10      	pop	{r4, pc}
 8014072:	6923      	ldr	r3, [r4, #16]
 8014074:	6023      	str	r3, [r4, #0]
 8014076:	2300      	movs	r3, #0
 8014078:	6063      	str	r3, [r4, #4]
 801407a:	89a3      	ldrh	r3, [r4, #12]
 801407c:	f043 0320 	orr.w	r3, r3, #32
 8014080:	81a3      	strh	r3, [r4, #12]
 8014082:	f04f 30ff 	mov.w	r0, #4294967295
 8014086:	e7f3      	b.n	8014070 <__ssrefill_r+0x22>

08014088 <__ssvfiscanf_r>:
 8014088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801408c:	460c      	mov	r4, r1
 801408e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8014092:	2100      	movs	r1, #0
 8014094:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014098:	49a6      	ldr	r1, [pc, #664]	; (8014334 <__ssvfiscanf_r+0x2ac>)
 801409a:	91a0      	str	r1, [sp, #640]	; 0x280
 801409c:	f10d 0804 	add.w	r8, sp, #4
 80140a0:	49a5      	ldr	r1, [pc, #660]	; (8014338 <__ssvfiscanf_r+0x2b0>)
 80140a2:	4fa6      	ldr	r7, [pc, #664]	; (801433c <__ssvfiscanf_r+0x2b4>)
 80140a4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014340 <__ssvfiscanf_r+0x2b8>
 80140a8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80140ac:	4606      	mov	r6, r0
 80140ae:	91a1      	str	r1, [sp, #644]	; 0x284
 80140b0:	9300      	str	r3, [sp, #0]
 80140b2:	7813      	ldrb	r3, [r2, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f000 815a 	beq.w	801436e <__ssvfiscanf_r+0x2e6>
 80140ba:	5cf9      	ldrb	r1, [r7, r3]
 80140bc:	f011 0108 	ands.w	r1, r1, #8
 80140c0:	f102 0501 	add.w	r5, r2, #1
 80140c4:	d019      	beq.n	80140fa <__ssvfiscanf_r+0x72>
 80140c6:	6863      	ldr	r3, [r4, #4]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	dd0f      	ble.n	80140ec <__ssvfiscanf_r+0x64>
 80140cc:	6823      	ldr	r3, [r4, #0]
 80140ce:	781a      	ldrb	r2, [r3, #0]
 80140d0:	5cba      	ldrb	r2, [r7, r2]
 80140d2:	0712      	lsls	r2, r2, #28
 80140d4:	d401      	bmi.n	80140da <__ssvfiscanf_r+0x52>
 80140d6:	462a      	mov	r2, r5
 80140d8:	e7eb      	b.n	80140b2 <__ssvfiscanf_r+0x2a>
 80140da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80140dc:	3201      	adds	r2, #1
 80140de:	9245      	str	r2, [sp, #276]	; 0x114
 80140e0:	6862      	ldr	r2, [r4, #4]
 80140e2:	3301      	adds	r3, #1
 80140e4:	3a01      	subs	r2, #1
 80140e6:	6062      	str	r2, [r4, #4]
 80140e8:	6023      	str	r3, [r4, #0]
 80140ea:	e7ec      	b.n	80140c6 <__ssvfiscanf_r+0x3e>
 80140ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80140ee:	4621      	mov	r1, r4
 80140f0:	4630      	mov	r0, r6
 80140f2:	4798      	blx	r3
 80140f4:	2800      	cmp	r0, #0
 80140f6:	d0e9      	beq.n	80140cc <__ssvfiscanf_r+0x44>
 80140f8:	e7ed      	b.n	80140d6 <__ssvfiscanf_r+0x4e>
 80140fa:	2b25      	cmp	r3, #37	; 0x25
 80140fc:	d012      	beq.n	8014124 <__ssvfiscanf_r+0x9c>
 80140fe:	469a      	mov	sl, r3
 8014100:	6863      	ldr	r3, [r4, #4]
 8014102:	2b00      	cmp	r3, #0
 8014104:	f340 8091 	ble.w	801422a <__ssvfiscanf_r+0x1a2>
 8014108:	6822      	ldr	r2, [r4, #0]
 801410a:	7813      	ldrb	r3, [r2, #0]
 801410c:	4553      	cmp	r3, sl
 801410e:	f040 812e 	bne.w	801436e <__ssvfiscanf_r+0x2e6>
 8014112:	6863      	ldr	r3, [r4, #4]
 8014114:	3b01      	subs	r3, #1
 8014116:	6063      	str	r3, [r4, #4]
 8014118:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801411a:	3201      	adds	r2, #1
 801411c:	3301      	adds	r3, #1
 801411e:	6022      	str	r2, [r4, #0]
 8014120:	9345      	str	r3, [sp, #276]	; 0x114
 8014122:	e7d8      	b.n	80140d6 <__ssvfiscanf_r+0x4e>
 8014124:	9141      	str	r1, [sp, #260]	; 0x104
 8014126:	9143      	str	r1, [sp, #268]	; 0x10c
 8014128:	7853      	ldrb	r3, [r2, #1]
 801412a:	2b2a      	cmp	r3, #42	; 0x2a
 801412c:	bf02      	ittt	eq
 801412e:	2310      	moveq	r3, #16
 8014130:	1c95      	addeq	r5, r2, #2
 8014132:	9341      	streq	r3, [sp, #260]	; 0x104
 8014134:	220a      	movs	r2, #10
 8014136:	46aa      	mov	sl, r5
 8014138:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801413c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014140:	2b09      	cmp	r3, #9
 8014142:	d91c      	bls.n	801417e <__ssvfiscanf_r+0xf6>
 8014144:	487e      	ldr	r0, [pc, #504]	; (8014340 <__ssvfiscanf_r+0x2b8>)
 8014146:	2203      	movs	r2, #3
 8014148:	f7ec f8da 	bl	8000300 <memchr>
 801414c:	b138      	cbz	r0, 801415e <__ssvfiscanf_r+0xd6>
 801414e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014150:	eba0 0009 	sub.w	r0, r0, r9
 8014154:	2301      	movs	r3, #1
 8014156:	4083      	lsls	r3, r0
 8014158:	4313      	orrs	r3, r2
 801415a:	9341      	str	r3, [sp, #260]	; 0x104
 801415c:	4655      	mov	r5, sl
 801415e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014162:	2b78      	cmp	r3, #120	; 0x78
 8014164:	d806      	bhi.n	8014174 <__ssvfiscanf_r+0xec>
 8014166:	2b57      	cmp	r3, #87	; 0x57
 8014168:	d810      	bhi.n	801418c <__ssvfiscanf_r+0x104>
 801416a:	2b25      	cmp	r3, #37	; 0x25
 801416c:	d0c7      	beq.n	80140fe <__ssvfiscanf_r+0x76>
 801416e:	d857      	bhi.n	8014220 <__ssvfiscanf_r+0x198>
 8014170:	2b00      	cmp	r3, #0
 8014172:	d065      	beq.n	8014240 <__ssvfiscanf_r+0x1b8>
 8014174:	2303      	movs	r3, #3
 8014176:	9347      	str	r3, [sp, #284]	; 0x11c
 8014178:	230a      	movs	r3, #10
 801417a:	9342      	str	r3, [sp, #264]	; 0x108
 801417c:	e076      	b.n	801426c <__ssvfiscanf_r+0x1e4>
 801417e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014180:	fb02 1103 	mla	r1, r2, r3, r1
 8014184:	3930      	subs	r1, #48	; 0x30
 8014186:	9143      	str	r1, [sp, #268]	; 0x10c
 8014188:	4655      	mov	r5, sl
 801418a:	e7d4      	b.n	8014136 <__ssvfiscanf_r+0xae>
 801418c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014190:	2a20      	cmp	r2, #32
 8014192:	d8ef      	bhi.n	8014174 <__ssvfiscanf_r+0xec>
 8014194:	a101      	add	r1, pc, #4	; (adr r1, 801419c <__ssvfiscanf_r+0x114>)
 8014196:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801419a:	bf00      	nop
 801419c:	0801424f 	.word	0x0801424f
 80141a0:	08014175 	.word	0x08014175
 80141a4:	08014175 	.word	0x08014175
 80141a8:	080142ad 	.word	0x080142ad
 80141ac:	08014175 	.word	0x08014175
 80141b0:	08014175 	.word	0x08014175
 80141b4:	08014175 	.word	0x08014175
 80141b8:	08014175 	.word	0x08014175
 80141bc:	08014175 	.word	0x08014175
 80141c0:	08014175 	.word	0x08014175
 80141c4:	08014175 	.word	0x08014175
 80141c8:	080142c3 	.word	0x080142c3
 80141cc:	080142a9 	.word	0x080142a9
 80141d0:	08014227 	.word	0x08014227
 80141d4:	08014227 	.word	0x08014227
 80141d8:	08014227 	.word	0x08014227
 80141dc:	08014175 	.word	0x08014175
 80141e0:	08014265 	.word	0x08014265
 80141e4:	08014175 	.word	0x08014175
 80141e8:	08014175 	.word	0x08014175
 80141ec:	08014175 	.word	0x08014175
 80141f0:	08014175 	.word	0x08014175
 80141f4:	080142d3 	.word	0x080142d3
 80141f8:	080142a1 	.word	0x080142a1
 80141fc:	08014247 	.word	0x08014247
 8014200:	08014175 	.word	0x08014175
 8014204:	08014175 	.word	0x08014175
 8014208:	080142cf 	.word	0x080142cf
 801420c:	08014175 	.word	0x08014175
 8014210:	080142a9 	.word	0x080142a9
 8014214:	08014175 	.word	0x08014175
 8014218:	08014175 	.word	0x08014175
 801421c:	0801424f 	.word	0x0801424f
 8014220:	3b45      	subs	r3, #69	; 0x45
 8014222:	2b02      	cmp	r3, #2
 8014224:	d8a6      	bhi.n	8014174 <__ssvfiscanf_r+0xec>
 8014226:	2305      	movs	r3, #5
 8014228:	e01f      	b.n	801426a <__ssvfiscanf_r+0x1e2>
 801422a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801422c:	4621      	mov	r1, r4
 801422e:	4630      	mov	r0, r6
 8014230:	4798      	blx	r3
 8014232:	2800      	cmp	r0, #0
 8014234:	f43f af68 	beq.w	8014108 <__ssvfiscanf_r+0x80>
 8014238:	9844      	ldr	r0, [sp, #272]	; 0x110
 801423a:	2800      	cmp	r0, #0
 801423c:	f040 808d 	bne.w	801435a <__ssvfiscanf_r+0x2d2>
 8014240:	f04f 30ff 	mov.w	r0, #4294967295
 8014244:	e08f      	b.n	8014366 <__ssvfiscanf_r+0x2de>
 8014246:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014248:	f042 0220 	orr.w	r2, r2, #32
 801424c:	9241      	str	r2, [sp, #260]	; 0x104
 801424e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014254:	9241      	str	r2, [sp, #260]	; 0x104
 8014256:	2210      	movs	r2, #16
 8014258:	2b6f      	cmp	r3, #111	; 0x6f
 801425a:	9242      	str	r2, [sp, #264]	; 0x108
 801425c:	bf34      	ite	cc
 801425e:	2303      	movcc	r3, #3
 8014260:	2304      	movcs	r3, #4
 8014262:	e002      	b.n	801426a <__ssvfiscanf_r+0x1e2>
 8014264:	2300      	movs	r3, #0
 8014266:	9342      	str	r3, [sp, #264]	; 0x108
 8014268:	2303      	movs	r3, #3
 801426a:	9347      	str	r3, [sp, #284]	; 0x11c
 801426c:	6863      	ldr	r3, [r4, #4]
 801426e:	2b00      	cmp	r3, #0
 8014270:	dd3d      	ble.n	80142ee <__ssvfiscanf_r+0x266>
 8014272:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014274:	0659      	lsls	r1, r3, #25
 8014276:	d404      	bmi.n	8014282 <__ssvfiscanf_r+0x1fa>
 8014278:	6823      	ldr	r3, [r4, #0]
 801427a:	781a      	ldrb	r2, [r3, #0]
 801427c:	5cba      	ldrb	r2, [r7, r2]
 801427e:	0712      	lsls	r2, r2, #28
 8014280:	d43c      	bmi.n	80142fc <__ssvfiscanf_r+0x274>
 8014282:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014284:	2b02      	cmp	r3, #2
 8014286:	dc4b      	bgt.n	8014320 <__ssvfiscanf_r+0x298>
 8014288:	466b      	mov	r3, sp
 801428a:	4622      	mov	r2, r4
 801428c:	a941      	add	r1, sp, #260	; 0x104
 801428e:	4630      	mov	r0, r6
 8014290:	f000 f9b6 	bl	8014600 <_scanf_chars>
 8014294:	2801      	cmp	r0, #1
 8014296:	d06a      	beq.n	801436e <__ssvfiscanf_r+0x2e6>
 8014298:	2802      	cmp	r0, #2
 801429a:	f47f af1c 	bne.w	80140d6 <__ssvfiscanf_r+0x4e>
 801429e:	e7cb      	b.n	8014238 <__ssvfiscanf_r+0x1b0>
 80142a0:	2308      	movs	r3, #8
 80142a2:	9342      	str	r3, [sp, #264]	; 0x108
 80142a4:	2304      	movs	r3, #4
 80142a6:	e7e0      	b.n	801426a <__ssvfiscanf_r+0x1e2>
 80142a8:	220a      	movs	r2, #10
 80142aa:	e7d5      	b.n	8014258 <__ssvfiscanf_r+0x1d0>
 80142ac:	4629      	mov	r1, r5
 80142ae:	4640      	mov	r0, r8
 80142b0:	f000 fc4a 	bl	8014b48 <__sccl>
 80142b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80142b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142ba:	9341      	str	r3, [sp, #260]	; 0x104
 80142bc:	4605      	mov	r5, r0
 80142be:	2301      	movs	r3, #1
 80142c0:	e7d3      	b.n	801426a <__ssvfiscanf_r+0x1e2>
 80142c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80142c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142c8:	9341      	str	r3, [sp, #260]	; 0x104
 80142ca:	2300      	movs	r3, #0
 80142cc:	e7cd      	b.n	801426a <__ssvfiscanf_r+0x1e2>
 80142ce:	2302      	movs	r3, #2
 80142d0:	e7cb      	b.n	801426a <__ssvfiscanf_r+0x1e2>
 80142d2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80142d4:	06c3      	lsls	r3, r0, #27
 80142d6:	f53f aefe 	bmi.w	80140d6 <__ssvfiscanf_r+0x4e>
 80142da:	9b00      	ldr	r3, [sp, #0]
 80142dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80142de:	1d19      	adds	r1, r3, #4
 80142e0:	9100      	str	r1, [sp, #0]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	07c0      	lsls	r0, r0, #31
 80142e6:	bf4c      	ite	mi
 80142e8:	801a      	strhmi	r2, [r3, #0]
 80142ea:	601a      	strpl	r2, [r3, #0]
 80142ec:	e6f3      	b.n	80140d6 <__ssvfiscanf_r+0x4e>
 80142ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80142f0:	4621      	mov	r1, r4
 80142f2:	4630      	mov	r0, r6
 80142f4:	4798      	blx	r3
 80142f6:	2800      	cmp	r0, #0
 80142f8:	d0bb      	beq.n	8014272 <__ssvfiscanf_r+0x1ea>
 80142fa:	e79d      	b.n	8014238 <__ssvfiscanf_r+0x1b0>
 80142fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80142fe:	3201      	adds	r2, #1
 8014300:	9245      	str	r2, [sp, #276]	; 0x114
 8014302:	6862      	ldr	r2, [r4, #4]
 8014304:	3a01      	subs	r2, #1
 8014306:	2a00      	cmp	r2, #0
 8014308:	6062      	str	r2, [r4, #4]
 801430a:	dd02      	ble.n	8014312 <__ssvfiscanf_r+0x28a>
 801430c:	3301      	adds	r3, #1
 801430e:	6023      	str	r3, [r4, #0]
 8014310:	e7b2      	b.n	8014278 <__ssvfiscanf_r+0x1f0>
 8014312:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014314:	4621      	mov	r1, r4
 8014316:	4630      	mov	r0, r6
 8014318:	4798      	blx	r3
 801431a:	2800      	cmp	r0, #0
 801431c:	d0ac      	beq.n	8014278 <__ssvfiscanf_r+0x1f0>
 801431e:	e78b      	b.n	8014238 <__ssvfiscanf_r+0x1b0>
 8014320:	2b04      	cmp	r3, #4
 8014322:	dc0f      	bgt.n	8014344 <__ssvfiscanf_r+0x2bc>
 8014324:	466b      	mov	r3, sp
 8014326:	4622      	mov	r2, r4
 8014328:	a941      	add	r1, sp, #260	; 0x104
 801432a:	4630      	mov	r0, r6
 801432c:	f000 f9c2 	bl	80146b4 <_scanf_i>
 8014330:	e7b0      	b.n	8014294 <__ssvfiscanf_r+0x20c>
 8014332:	bf00      	nop
 8014334:	08013fd5 	.word	0x08013fd5
 8014338:	0801404f 	.word	0x0801404f
 801433c:	08015e39 	.word	0x08015e39
 8014340:	08016252 	.word	0x08016252
 8014344:	4b0b      	ldr	r3, [pc, #44]	; (8014374 <__ssvfiscanf_r+0x2ec>)
 8014346:	2b00      	cmp	r3, #0
 8014348:	f43f aec5 	beq.w	80140d6 <__ssvfiscanf_r+0x4e>
 801434c:	466b      	mov	r3, sp
 801434e:	4622      	mov	r2, r4
 8014350:	a941      	add	r1, sp, #260	; 0x104
 8014352:	4630      	mov	r0, r6
 8014354:	f3af 8000 	nop.w
 8014358:	e79c      	b.n	8014294 <__ssvfiscanf_r+0x20c>
 801435a:	89a3      	ldrh	r3, [r4, #12]
 801435c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014360:	bf18      	it	ne
 8014362:	f04f 30ff 	movne.w	r0, #4294967295
 8014366:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801436a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801436e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014370:	e7f9      	b.n	8014366 <__ssvfiscanf_r+0x2de>
 8014372:	bf00      	nop
 8014374:	00000000 	.word	0x00000000

08014378 <__sfputc_r>:
 8014378:	6893      	ldr	r3, [r2, #8]
 801437a:	3b01      	subs	r3, #1
 801437c:	2b00      	cmp	r3, #0
 801437e:	b410      	push	{r4}
 8014380:	6093      	str	r3, [r2, #8]
 8014382:	da08      	bge.n	8014396 <__sfputc_r+0x1e>
 8014384:	6994      	ldr	r4, [r2, #24]
 8014386:	42a3      	cmp	r3, r4
 8014388:	db01      	blt.n	801438e <__sfputc_r+0x16>
 801438a:	290a      	cmp	r1, #10
 801438c:	d103      	bne.n	8014396 <__sfputc_r+0x1e>
 801438e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014392:	f7fd bb64 	b.w	8011a5e <__swbuf_r>
 8014396:	6813      	ldr	r3, [r2, #0]
 8014398:	1c58      	adds	r0, r3, #1
 801439a:	6010      	str	r0, [r2, #0]
 801439c:	7019      	strb	r1, [r3, #0]
 801439e:	4608      	mov	r0, r1
 80143a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143a4:	4770      	bx	lr

080143a6 <__sfputs_r>:
 80143a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a8:	4606      	mov	r6, r0
 80143aa:	460f      	mov	r7, r1
 80143ac:	4614      	mov	r4, r2
 80143ae:	18d5      	adds	r5, r2, r3
 80143b0:	42ac      	cmp	r4, r5
 80143b2:	d101      	bne.n	80143b8 <__sfputs_r+0x12>
 80143b4:	2000      	movs	r0, #0
 80143b6:	e007      	b.n	80143c8 <__sfputs_r+0x22>
 80143b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143bc:	463a      	mov	r2, r7
 80143be:	4630      	mov	r0, r6
 80143c0:	f7ff ffda 	bl	8014378 <__sfputc_r>
 80143c4:	1c43      	adds	r3, r0, #1
 80143c6:	d1f3      	bne.n	80143b0 <__sfputs_r+0xa>
 80143c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080143cc <_vfiprintf_r>:
 80143cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143d0:	460d      	mov	r5, r1
 80143d2:	b09d      	sub	sp, #116	; 0x74
 80143d4:	4614      	mov	r4, r2
 80143d6:	4698      	mov	r8, r3
 80143d8:	4606      	mov	r6, r0
 80143da:	b118      	cbz	r0, 80143e4 <_vfiprintf_r+0x18>
 80143dc:	6a03      	ldr	r3, [r0, #32]
 80143de:	b90b      	cbnz	r3, 80143e4 <_vfiprintf_r+0x18>
 80143e0:	f7fd f9cc 	bl	801177c <__sinit>
 80143e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143e6:	07d9      	lsls	r1, r3, #31
 80143e8:	d405      	bmi.n	80143f6 <_vfiprintf_r+0x2a>
 80143ea:	89ab      	ldrh	r3, [r5, #12]
 80143ec:	059a      	lsls	r2, r3, #22
 80143ee:	d402      	bmi.n	80143f6 <_vfiprintf_r+0x2a>
 80143f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143f2:	f7fd fd40 	bl	8011e76 <__retarget_lock_acquire_recursive>
 80143f6:	89ab      	ldrh	r3, [r5, #12]
 80143f8:	071b      	lsls	r3, r3, #28
 80143fa:	d501      	bpl.n	8014400 <_vfiprintf_r+0x34>
 80143fc:	692b      	ldr	r3, [r5, #16]
 80143fe:	b99b      	cbnz	r3, 8014428 <_vfiprintf_r+0x5c>
 8014400:	4629      	mov	r1, r5
 8014402:	4630      	mov	r0, r6
 8014404:	f7fd fb68 	bl	8011ad8 <__swsetup_r>
 8014408:	b170      	cbz	r0, 8014428 <_vfiprintf_r+0x5c>
 801440a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801440c:	07dc      	lsls	r4, r3, #31
 801440e:	d504      	bpl.n	801441a <_vfiprintf_r+0x4e>
 8014410:	f04f 30ff 	mov.w	r0, #4294967295
 8014414:	b01d      	add	sp, #116	; 0x74
 8014416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801441a:	89ab      	ldrh	r3, [r5, #12]
 801441c:	0598      	lsls	r0, r3, #22
 801441e:	d4f7      	bmi.n	8014410 <_vfiprintf_r+0x44>
 8014420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014422:	f7fd fd29 	bl	8011e78 <__retarget_lock_release_recursive>
 8014426:	e7f3      	b.n	8014410 <_vfiprintf_r+0x44>
 8014428:	2300      	movs	r3, #0
 801442a:	9309      	str	r3, [sp, #36]	; 0x24
 801442c:	2320      	movs	r3, #32
 801442e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014432:	f8cd 800c 	str.w	r8, [sp, #12]
 8014436:	2330      	movs	r3, #48	; 0x30
 8014438:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80145ec <_vfiprintf_r+0x220>
 801443c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014440:	f04f 0901 	mov.w	r9, #1
 8014444:	4623      	mov	r3, r4
 8014446:	469a      	mov	sl, r3
 8014448:	f813 2b01 	ldrb.w	r2, [r3], #1
 801444c:	b10a      	cbz	r2, 8014452 <_vfiprintf_r+0x86>
 801444e:	2a25      	cmp	r2, #37	; 0x25
 8014450:	d1f9      	bne.n	8014446 <_vfiprintf_r+0x7a>
 8014452:	ebba 0b04 	subs.w	fp, sl, r4
 8014456:	d00b      	beq.n	8014470 <_vfiprintf_r+0xa4>
 8014458:	465b      	mov	r3, fp
 801445a:	4622      	mov	r2, r4
 801445c:	4629      	mov	r1, r5
 801445e:	4630      	mov	r0, r6
 8014460:	f7ff ffa1 	bl	80143a6 <__sfputs_r>
 8014464:	3001      	adds	r0, #1
 8014466:	f000 80a9 	beq.w	80145bc <_vfiprintf_r+0x1f0>
 801446a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801446c:	445a      	add	r2, fp
 801446e:	9209      	str	r2, [sp, #36]	; 0x24
 8014470:	f89a 3000 	ldrb.w	r3, [sl]
 8014474:	2b00      	cmp	r3, #0
 8014476:	f000 80a1 	beq.w	80145bc <_vfiprintf_r+0x1f0>
 801447a:	2300      	movs	r3, #0
 801447c:	f04f 32ff 	mov.w	r2, #4294967295
 8014480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014484:	f10a 0a01 	add.w	sl, sl, #1
 8014488:	9304      	str	r3, [sp, #16]
 801448a:	9307      	str	r3, [sp, #28]
 801448c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014490:	931a      	str	r3, [sp, #104]	; 0x68
 8014492:	4654      	mov	r4, sl
 8014494:	2205      	movs	r2, #5
 8014496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801449a:	4854      	ldr	r0, [pc, #336]	; (80145ec <_vfiprintf_r+0x220>)
 801449c:	f7eb ff30 	bl	8000300 <memchr>
 80144a0:	9a04      	ldr	r2, [sp, #16]
 80144a2:	b9d8      	cbnz	r0, 80144dc <_vfiprintf_r+0x110>
 80144a4:	06d1      	lsls	r1, r2, #27
 80144a6:	bf44      	itt	mi
 80144a8:	2320      	movmi	r3, #32
 80144aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144ae:	0713      	lsls	r3, r2, #28
 80144b0:	bf44      	itt	mi
 80144b2:	232b      	movmi	r3, #43	; 0x2b
 80144b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144b8:	f89a 3000 	ldrb.w	r3, [sl]
 80144bc:	2b2a      	cmp	r3, #42	; 0x2a
 80144be:	d015      	beq.n	80144ec <_vfiprintf_r+0x120>
 80144c0:	9a07      	ldr	r2, [sp, #28]
 80144c2:	4654      	mov	r4, sl
 80144c4:	2000      	movs	r0, #0
 80144c6:	f04f 0c0a 	mov.w	ip, #10
 80144ca:	4621      	mov	r1, r4
 80144cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144d0:	3b30      	subs	r3, #48	; 0x30
 80144d2:	2b09      	cmp	r3, #9
 80144d4:	d94d      	bls.n	8014572 <_vfiprintf_r+0x1a6>
 80144d6:	b1b0      	cbz	r0, 8014506 <_vfiprintf_r+0x13a>
 80144d8:	9207      	str	r2, [sp, #28]
 80144da:	e014      	b.n	8014506 <_vfiprintf_r+0x13a>
 80144dc:	eba0 0308 	sub.w	r3, r0, r8
 80144e0:	fa09 f303 	lsl.w	r3, r9, r3
 80144e4:	4313      	orrs	r3, r2
 80144e6:	9304      	str	r3, [sp, #16]
 80144e8:	46a2      	mov	sl, r4
 80144ea:	e7d2      	b.n	8014492 <_vfiprintf_r+0xc6>
 80144ec:	9b03      	ldr	r3, [sp, #12]
 80144ee:	1d19      	adds	r1, r3, #4
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	9103      	str	r1, [sp, #12]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	bfbb      	ittet	lt
 80144f8:	425b      	neglt	r3, r3
 80144fa:	f042 0202 	orrlt.w	r2, r2, #2
 80144fe:	9307      	strge	r3, [sp, #28]
 8014500:	9307      	strlt	r3, [sp, #28]
 8014502:	bfb8      	it	lt
 8014504:	9204      	strlt	r2, [sp, #16]
 8014506:	7823      	ldrb	r3, [r4, #0]
 8014508:	2b2e      	cmp	r3, #46	; 0x2e
 801450a:	d10c      	bne.n	8014526 <_vfiprintf_r+0x15a>
 801450c:	7863      	ldrb	r3, [r4, #1]
 801450e:	2b2a      	cmp	r3, #42	; 0x2a
 8014510:	d134      	bne.n	801457c <_vfiprintf_r+0x1b0>
 8014512:	9b03      	ldr	r3, [sp, #12]
 8014514:	1d1a      	adds	r2, r3, #4
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	9203      	str	r2, [sp, #12]
 801451a:	2b00      	cmp	r3, #0
 801451c:	bfb8      	it	lt
 801451e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014522:	3402      	adds	r4, #2
 8014524:	9305      	str	r3, [sp, #20]
 8014526:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80145fc <_vfiprintf_r+0x230>
 801452a:	7821      	ldrb	r1, [r4, #0]
 801452c:	2203      	movs	r2, #3
 801452e:	4650      	mov	r0, sl
 8014530:	f7eb fee6 	bl	8000300 <memchr>
 8014534:	b138      	cbz	r0, 8014546 <_vfiprintf_r+0x17a>
 8014536:	9b04      	ldr	r3, [sp, #16]
 8014538:	eba0 000a 	sub.w	r0, r0, sl
 801453c:	2240      	movs	r2, #64	; 0x40
 801453e:	4082      	lsls	r2, r0
 8014540:	4313      	orrs	r3, r2
 8014542:	3401      	adds	r4, #1
 8014544:	9304      	str	r3, [sp, #16]
 8014546:	f814 1b01 	ldrb.w	r1, [r4], #1
 801454a:	4829      	ldr	r0, [pc, #164]	; (80145f0 <_vfiprintf_r+0x224>)
 801454c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014550:	2206      	movs	r2, #6
 8014552:	f7eb fed5 	bl	8000300 <memchr>
 8014556:	2800      	cmp	r0, #0
 8014558:	d03f      	beq.n	80145da <_vfiprintf_r+0x20e>
 801455a:	4b26      	ldr	r3, [pc, #152]	; (80145f4 <_vfiprintf_r+0x228>)
 801455c:	bb1b      	cbnz	r3, 80145a6 <_vfiprintf_r+0x1da>
 801455e:	9b03      	ldr	r3, [sp, #12]
 8014560:	3307      	adds	r3, #7
 8014562:	f023 0307 	bic.w	r3, r3, #7
 8014566:	3308      	adds	r3, #8
 8014568:	9303      	str	r3, [sp, #12]
 801456a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801456c:	443b      	add	r3, r7
 801456e:	9309      	str	r3, [sp, #36]	; 0x24
 8014570:	e768      	b.n	8014444 <_vfiprintf_r+0x78>
 8014572:	fb0c 3202 	mla	r2, ip, r2, r3
 8014576:	460c      	mov	r4, r1
 8014578:	2001      	movs	r0, #1
 801457a:	e7a6      	b.n	80144ca <_vfiprintf_r+0xfe>
 801457c:	2300      	movs	r3, #0
 801457e:	3401      	adds	r4, #1
 8014580:	9305      	str	r3, [sp, #20]
 8014582:	4619      	mov	r1, r3
 8014584:	f04f 0c0a 	mov.w	ip, #10
 8014588:	4620      	mov	r0, r4
 801458a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801458e:	3a30      	subs	r2, #48	; 0x30
 8014590:	2a09      	cmp	r2, #9
 8014592:	d903      	bls.n	801459c <_vfiprintf_r+0x1d0>
 8014594:	2b00      	cmp	r3, #0
 8014596:	d0c6      	beq.n	8014526 <_vfiprintf_r+0x15a>
 8014598:	9105      	str	r1, [sp, #20]
 801459a:	e7c4      	b.n	8014526 <_vfiprintf_r+0x15a>
 801459c:	fb0c 2101 	mla	r1, ip, r1, r2
 80145a0:	4604      	mov	r4, r0
 80145a2:	2301      	movs	r3, #1
 80145a4:	e7f0      	b.n	8014588 <_vfiprintf_r+0x1bc>
 80145a6:	ab03      	add	r3, sp, #12
 80145a8:	9300      	str	r3, [sp, #0]
 80145aa:	462a      	mov	r2, r5
 80145ac:	4b12      	ldr	r3, [pc, #72]	; (80145f8 <_vfiprintf_r+0x22c>)
 80145ae:	a904      	add	r1, sp, #16
 80145b0:	4630      	mov	r0, r6
 80145b2:	f7fc fcad 	bl	8010f10 <_printf_float>
 80145b6:	4607      	mov	r7, r0
 80145b8:	1c78      	adds	r0, r7, #1
 80145ba:	d1d6      	bne.n	801456a <_vfiprintf_r+0x19e>
 80145bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145be:	07d9      	lsls	r1, r3, #31
 80145c0:	d405      	bmi.n	80145ce <_vfiprintf_r+0x202>
 80145c2:	89ab      	ldrh	r3, [r5, #12]
 80145c4:	059a      	lsls	r2, r3, #22
 80145c6:	d402      	bmi.n	80145ce <_vfiprintf_r+0x202>
 80145c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145ca:	f7fd fc55 	bl	8011e78 <__retarget_lock_release_recursive>
 80145ce:	89ab      	ldrh	r3, [r5, #12]
 80145d0:	065b      	lsls	r3, r3, #25
 80145d2:	f53f af1d 	bmi.w	8014410 <_vfiprintf_r+0x44>
 80145d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145d8:	e71c      	b.n	8014414 <_vfiprintf_r+0x48>
 80145da:	ab03      	add	r3, sp, #12
 80145dc:	9300      	str	r3, [sp, #0]
 80145de:	462a      	mov	r2, r5
 80145e0:	4b05      	ldr	r3, [pc, #20]	; (80145f8 <_vfiprintf_r+0x22c>)
 80145e2:	a904      	add	r1, sp, #16
 80145e4:	4630      	mov	r0, r6
 80145e6:	f7fc ff1b 	bl	8011420 <_printf_i>
 80145ea:	e7e4      	b.n	80145b6 <_vfiprintf_r+0x1ea>
 80145ec:	0801624c 	.word	0x0801624c
 80145f0:	08016256 	.word	0x08016256
 80145f4:	08010f11 	.word	0x08010f11
 80145f8:	080143a7 	.word	0x080143a7
 80145fc:	08016252 	.word	0x08016252

08014600 <_scanf_chars>:
 8014600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014604:	4615      	mov	r5, r2
 8014606:	688a      	ldr	r2, [r1, #8]
 8014608:	4680      	mov	r8, r0
 801460a:	460c      	mov	r4, r1
 801460c:	b932      	cbnz	r2, 801461c <_scanf_chars+0x1c>
 801460e:	698a      	ldr	r2, [r1, #24]
 8014610:	2a00      	cmp	r2, #0
 8014612:	bf0c      	ite	eq
 8014614:	2201      	moveq	r2, #1
 8014616:	f04f 32ff 	movne.w	r2, #4294967295
 801461a:	608a      	str	r2, [r1, #8]
 801461c:	6822      	ldr	r2, [r4, #0]
 801461e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80146b0 <_scanf_chars+0xb0>
 8014622:	06d1      	lsls	r1, r2, #27
 8014624:	bf5f      	itttt	pl
 8014626:	681a      	ldrpl	r2, [r3, #0]
 8014628:	1d11      	addpl	r1, r2, #4
 801462a:	6019      	strpl	r1, [r3, #0]
 801462c:	6816      	ldrpl	r6, [r2, #0]
 801462e:	2700      	movs	r7, #0
 8014630:	69a0      	ldr	r0, [r4, #24]
 8014632:	b188      	cbz	r0, 8014658 <_scanf_chars+0x58>
 8014634:	2801      	cmp	r0, #1
 8014636:	d107      	bne.n	8014648 <_scanf_chars+0x48>
 8014638:	682a      	ldr	r2, [r5, #0]
 801463a:	7811      	ldrb	r1, [r2, #0]
 801463c:	6962      	ldr	r2, [r4, #20]
 801463e:	5c52      	ldrb	r2, [r2, r1]
 8014640:	b952      	cbnz	r2, 8014658 <_scanf_chars+0x58>
 8014642:	2f00      	cmp	r7, #0
 8014644:	d031      	beq.n	80146aa <_scanf_chars+0xaa>
 8014646:	e022      	b.n	801468e <_scanf_chars+0x8e>
 8014648:	2802      	cmp	r0, #2
 801464a:	d120      	bne.n	801468e <_scanf_chars+0x8e>
 801464c:	682b      	ldr	r3, [r5, #0]
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014654:	071b      	lsls	r3, r3, #28
 8014656:	d41a      	bmi.n	801468e <_scanf_chars+0x8e>
 8014658:	6823      	ldr	r3, [r4, #0]
 801465a:	06da      	lsls	r2, r3, #27
 801465c:	bf5e      	ittt	pl
 801465e:	682b      	ldrpl	r3, [r5, #0]
 8014660:	781b      	ldrbpl	r3, [r3, #0]
 8014662:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014666:	682a      	ldr	r2, [r5, #0]
 8014668:	686b      	ldr	r3, [r5, #4]
 801466a:	3201      	adds	r2, #1
 801466c:	602a      	str	r2, [r5, #0]
 801466e:	68a2      	ldr	r2, [r4, #8]
 8014670:	3b01      	subs	r3, #1
 8014672:	3a01      	subs	r2, #1
 8014674:	606b      	str	r3, [r5, #4]
 8014676:	3701      	adds	r7, #1
 8014678:	60a2      	str	r2, [r4, #8]
 801467a:	b142      	cbz	r2, 801468e <_scanf_chars+0x8e>
 801467c:	2b00      	cmp	r3, #0
 801467e:	dcd7      	bgt.n	8014630 <_scanf_chars+0x30>
 8014680:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014684:	4629      	mov	r1, r5
 8014686:	4640      	mov	r0, r8
 8014688:	4798      	blx	r3
 801468a:	2800      	cmp	r0, #0
 801468c:	d0d0      	beq.n	8014630 <_scanf_chars+0x30>
 801468e:	6823      	ldr	r3, [r4, #0]
 8014690:	f013 0310 	ands.w	r3, r3, #16
 8014694:	d105      	bne.n	80146a2 <_scanf_chars+0xa2>
 8014696:	68e2      	ldr	r2, [r4, #12]
 8014698:	3201      	adds	r2, #1
 801469a:	60e2      	str	r2, [r4, #12]
 801469c:	69a2      	ldr	r2, [r4, #24]
 801469e:	b102      	cbz	r2, 80146a2 <_scanf_chars+0xa2>
 80146a0:	7033      	strb	r3, [r6, #0]
 80146a2:	6923      	ldr	r3, [r4, #16]
 80146a4:	443b      	add	r3, r7
 80146a6:	6123      	str	r3, [r4, #16]
 80146a8:	2000      	movs	r0, #0
 80146aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146ae:	bf00      	nop
 80146b0:	08015e39 	.word	0x08015e39

080146b4 <_scanf_i>:
 80146b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b8:	4698      	mov	r8, r3
 80146ba:	4b74      	ldr	r3, [pc, #464]	; (801488c <_scanf_i+0x1d8>)
 80146bc:	460c      	mov	r4, r1
 80146be:	4682      	mov	sl, r0
 80146c0:	4616      	mov	r6, r2
 80146c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80146c6:	b087      	sub	sp, #28
 80146c8:	ab03      	add	r3, sp, #12
 80146ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80146ce:	4b70      	ldr	r3, [pc, #448]	; (8014890 <_scanf_i+0x1dc>)
 80146d0:	69a1      	ldr	r1, [r4, #24]
 80146d2:	4a70      	ldr	r2, [pc, #448]	; (8014894 <_scanf_i+0x1e0>)
 80146d4:	2903      	cmp	r1, #3
 80146d6:	bf18      	it	ne
 80146d8:	461a      	movne	r2, r3
 80146da:	68a3      	ldr	r3, [r4, #8]
 80146dc:	9201      	str	r2, [sp, #4]
 80146de:	1e5a      	subs	r2, r3, #1
 80146e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80146e4:	bf88      	it	hi
 80146e6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80146ea:	4627      	mov	r7, r4
 80146ec:	bf82      	ittt	hi
 80146ee:	eb03 0905 	addhi.w	r9, r3, r5
 80146f2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80146f6:	60a3      	strhi	r3, [r4, #8]
 80146f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80146fc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014700:	bf98      	it	ls
 8014702:	f04f 0900 	movls.w	r9, #0
 8014706:	6023      	str	r3, [r4, #0]
 8014708:	463d      	mov	r5, r7
 801470a:	f04f 0b00 	mov.w	fp, #0
 801470e:	6831      	ldr	r1, [r6, #0]
 8014710:	ab03      	add	r3, sp, #12
 8014712:	7809      	ldrb	r1, [r1, #0]
 8014714:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014718:	2202      	movs	r2, #2
 801471a:	f7eb fdf1 	bl	8000300 <memchr>
 801471e:	b328      	cbz	r0, 801476c <_scanf_i+0xb8>
 8014720:	f1bb 0f01 	cmp.w	fp, #1
 8014724:	d159      	bne.n	80147da <_scanf_i+0x126>
 8014726:	6862      	ldr	r2, [r4, #4]
 8014728:	b92a      	cbnz	r2, 8014736 <_scanf_i+0x82>
 801472a:	6822      	ldr	r2, [r4, #0]
 801472c:	2308      	movs	r3, #8
 801472e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014732:	6063      	str	r3, [r4, #4]
 8014734:	6022      	str	r2, [r4, #0]
 8014736:	6822      	ldr	r2, [r4, #0]
 8014738:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801473c:	6022      	str	r2, [r4, #0]
 801473e:	68a2      	ldr	r2, [r4, #8]
 8014740:	1e51      	subs	r1, r2, #1
 8014742:	60a1      	str	r1, [r4, #8]
 8014744:	b192      	cbz	r2, 801476c <_scanf_i+0xb8>
 8014746:	6832      	ldr	r2, [r6, #0]
 8014748:	1c51      	adds	r1, r2, #1
 801474a:	6031      	str	r1, [r6, #0]
 801474c:	7812      	ldrb	r2, [r2, #0]
 801474e:	f805 2b01 	strb.w	r2, [r5], #1
 8014752:	6872      	ldr	r2, [r6, #4]
 8014754:	3a01      	subs	r2, #1
 8014756:	2a00      	cmp	r2, #0
 8014758:	6072      	str	r2, [r6, #4]
 801475a:	dc07      	bgt.n	801476c <_scanf_i+0xb8>
 801475c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014760:	4631      	mov	r1, r6
 8014762:	4650      	mov	r0, sl
 8014764:	4790      	blx	r2
 8014766:	2800      	cmp	r0, #0
 8014768:	f040 8085 	bne.w	8014876 <_scanf_i+0x1c2>
 801476c:	f10b 0b01 	add.w	fp, fp, #1
 8014770:	f1bb 0f03 	cmp.w	fp, #3
 8014774:	d1cb      	bne.n	801470e <_scanf_i+0x5a>
 8014776:	6863      	ldr	r3, [r4, #4]
 8014778:	b90b      	cbnz	r3, 801477e <_scanf_i+0xca>
 801477a:	230a      	movs	r3, #10
 801477c:	6063      	str	r3, [r4, #4]
 801477e:	6863      	ldr	r3, [r4, #4]
 8014780:	4945      	ldr	r1, [pc, #276]	; (8014898 <_scanf_i+0x1e4>)
 8014782:	6960      	ldr	r0, [r4, #20]
 8014784:	1ac9      	subs	r1, r1, r3
 8014786:	f000 f9df 	bl	8014b48 <__sccl>
 801478a:	f04f 0b00 	mov.w	fp, #0
 801478e:	68a3      	ldr	r3, [r4, #8]
 8014790:	6822      	ldr	r2, [r4, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d03d      	beq.n	8014812 <_scanf_i+0x15e>
 8014796:	6831      	ldr	r1, [r6, #0]
 8014798:	6960      	ldr	r0, [r4, #20]
 801479a:	f891 c000 	ldrb.w	ip, [r1]
 801479e:	f810 000c 	ldrb.w	r0, [r0, ip]
 80147a2:	2800      	cmp	r0, #0
 80147a4:	d035      	beq.n	8014812 <_scanf_i+0x15e>
 80147a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80147aa:	d124      	bne.n	80147f6 <_scanf_i+0x142>
 80147ac:	0510      	lsls	r0, r2, #20
 80147ae:	d522      	bpl.n	80147f6 <_scanf_i+0x142>
 80147b0:	f10b 0b01 	add.w	fp, fp, #1
 80147b4:	f1b9 0f00 	cmp.w	r9, #0
 80147b8:	d003      	beq.n	80147c2 <_scanf_i+0x10e>
 80147ba:	3301      	adds	r3, #1
 80147bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80147c0:	60a3      	str	r3, [r4, #8]
 80147c2:	6873      	ldr	r3, [r6, #4]
 80147c4:	3b01      	subs	r3, #1
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	6073      	str	r3, [r6, #4]
 80147ca:	dd1b      	ble.n	8014804 <_scanf_i+0x150>
 80147cc:	6833      	ldr	r3, [r6, #0]
 80147ce:	3301      	adds	r3, #1
 80147d0:	6033      	str	r3, [r6, #0]
 80147d2:	68a3      	ldr	r3, [r4, #8]
 80147d4:	3b01      	subs	r3, #1
 80147d6:	60a3      	str	r3, [r4, #8]
 80147d8:	e7d9      	b.n	801478e <_scanf_i+0xda>
 80147da:	f1bb 0f02 	cmp.w	fp, #2
 80147de:	d1ae      	bne.n	801473e <_scanf_i+0x8a>
 80147e0:	6822      	ldr	r2, [r4, #0]
 80147e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80147e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80147ea:	d1bf      	bne.n	801476c <_scanf_i+0xb8>
 80147ec:	2310      	movs	r3, #16
 80147ee:	6063      	str	r3, [r4, #4]
 80147f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80147f4:	e7a2      	b.n	801473c <_scanf_i+0x88>
 80147f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80147fa:	6022      	str	r2, [r4, #0]
 80147fc:	780b      	ldrb	r3, [r1, #0]
 80147fe:	f805 3b01 	strb.w	r3, [r5], #1
 8014802:	e7de      	b.n	80147c2 <_scanf_i+0x10e>
 8014804:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014808:	4631      	mov	r1, r6
 801480a:	4650      	mov	r0, sl
 801480c:	4798      	blx	r3
 801480e:	2800      	cmp	r0, #0
 8014810:	d0df      	beq.n	80147d2 <_scanf_i+0x11e>
 8014812:	6823      	ldr	r3, [r4, #0]
 8014814:	05d9      	lsls	r1, r3, #23
 8014816:	d50d      	bpl.n	8014834 <_scanf_i+0x180>
 8014818:	42bd      	cmp	r5, r7
 801481a:	d909      	bls.n	8014830 <_scanf_i+0x17c>
 801481c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014824:	4632      	mov	r2, r6
 8014826:	4650      	mov	r0, sl
 8014828:	4798      	blx	r3
 801482a:	f105 39ff 	add.w	r9, r5, #4294967295
 801482e:	464d      	mov	r5, r9
 8014830:	42bd      	cmp	r5, r7
 8014832:	d028      	beq.n	8014886 <_scanf_i+0x1d2>
 8014834:	6822      	ldr	r2, [r4, #0]
 8014836:	f012 0210 	ands.w	r2, r2, #16
 801483a:	d113      	bne.n	8014864 <_scanf_i+0x1b0>
 801483c:	702a      	strb	r2, [r5, #0]
 801483e:	6863      	ldr	r3, [r4, #4]
 8014840:	9e01      	ldr	r6, [sp, #4]
 8014842:	4639      	mov	r1, r7
 8014844:	4650      	mov	r0, sl
 8014846:	47b0      	blx	r6
 8014848:	f8d8 3000 	ldr.w	r3, [r8]
 801484c:	6821      	ldr	r1, [r4, #0]
 801484e:	1d1a      	adds	r2, r3, #4
 8014850:	f8c8 2000 	str.w	r2, [r8]
 8014854:	f011 0f20 	tst.w	r1, #32
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	d00f      	beq.n	801487c <_scanf_i+0x1c8>
 801485c:	6018      	str	r0, [r3, #0]
 801485e:	68e3      	ldr	r3, [r4, #12]
 8014860:	3301      	adds	r3, #1
 8014862:	60e3      	str	r3, [r4, #12]
 8014864:	6923      	ldr	r3, [r4, #16]
 8014866:	1bed      	subs	r5, r5, r7
 8014868:	445d      	add	r5, fp
 801486a:	442b      	add	r3, r5
 801486c:	6123      	str	r3, [r4, #16]
 801486e:	2000      	movs	r0, #0
 8014870:	b007      	add	sp, #28
 8014872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014876:	f04f 0b00 	mov.w	fp, #0
 801487a:	e7ca      	b.n	8014812 <_scanf_i+0x15e>
 801487c:	07ca      	lsls	r2, r1, #31
 801487e:	bf4c      	ite	mi
 8014880:	8018      	strhmi	r0, [r3, #0]
 8014882:	6018      	strpl	r0, [r3, #0]
 8014884:	e7eb      	b.n	801485e <_scanf_i+0x1aa>
 8014886:	2001      	movs	r0, #1
 8014888:	e7f2      	b.n	8014870 <_scanf_i+0x1bc>
 801488a:	bf00      	nop
 801488c:	08014f18 	.word	0x08014f18
 8014890:	08014e45 	.word	0x08014e45
 8014894:	08010dd9 	.word	0x08010dd9
 8014898:	0801626d 	.word	0x0801626d

0801489c <__sflush_r>:
 801489c:	898a      	ldrh	r2, [r1, #12]
 801489e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148a2:	4605      	mov	r5, r0
 80148a4:	0710      	lsls	r0, r2, #28
 80148a6:	460c      	mov	r4, r1
 80148a8:	d458      	bmi.n	801495c <__sflush_r+0xc0>
 80148aa:	684b      	ldr	r3, [r1, #4]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	dc05      	bgt.n	80148bc <__sflush_r+0x20>
 80148b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	dc02      	bgt.n	80148bc <__sflush_r+0x20>
 80148b6:	2000      	movs	r0, #0
 80148b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148be:	2e00      	cmp	r6, #0
 80148c0:	d0f9      	beq.n	80148b6 <__sflush_r+0x1a>
 80148c2:	2300      	movs	r3, #0
 80148c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80148c8:	682f      	ldr	r7, [r5, #0]
 80148ca:	6a21      	ldr	r1, [r4, #32]
 80148cc:	602b      	str	r3, [r5, #0]
 80148ce:	d032      	beq.n	8014936 <__sflush_r+0x9a>
 80148d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80148d2:	89a3      	ldrh	r3, [r4, #12]
 80148d4:	075a      	lsls	r2, r3, #29
 80148d6:	d505      	bpl.n	80148e4 <__sflush_r+0x48>
 80148d8:	6863      	ldr	r3, [r4, #4]
 80148da:	1ac0      	subs	r0, r0, r3
 80148dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80148de:	b10b      	cbz	r3, 80148e4 <__sflush_r+0x48>
 80148e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80148e2:	1ac0      	subs	r0, r0, r3
 80148e4:	2300      	movs	r3, #0
 80148e6:	4602      	mov	r2, r0
 80148e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148ea:	6a21      	ldr	r1, [r4, #32]
 80148ec:	4628      	mov	r0, r5
 80148ee:	47b0      	blx	r6
 80148f0:	1c43      	adds	r3, r0, #1
 80148f2:	89a3      	ldrh	r3, [r4, #12]
 80148f4:	d106      	bne.n	8014904 <__sflush_r+0x68>
 80148f6:	6829      	ldr	r1, [r5, #0]
 80148f8:	291d      	cmp	r1, #29
 80148fa:	d82b      	bhi.n	8014954 <__sflush_r+0xb8>
 80148fc:	4a29      	ldr	r2, [pc, #164]	; (80149a4 <__sflush_r+0x108>)
 80148fe:	410a      	asrs	r2, r1
 8014900:	07d6      	lsls	r6, r2, #31
 8014902:	d427      	bmi.n	8014954 <__sflush_r+0xb8>
 8014904:	2200      	movs	r2, #0
 8014906:	6062      	str	r2, [r4, #4]
 8014908:	04d9      	lsls	r1, r3, #19
 801490a:	6922      	ldr	r2, [r4, #16]
 801490c:	6022      	str	r2, [r4, #0]
 801490e:	d504      	bpl.n	801491a <__sflush_r+0x7e>
 8014910:	1c42      	adds	r2, r0, #1
 8014912:	d101      	bne.n	8014918 <__sflush_r+0x7c>
 8014914:	682b      	ldr	r3, [r5, #0]
 8014916:	b903      	cbnz	r3, 801491a <__sflush_r+0x7e>
 8014918:	6560      	str	r0, [r4, #84]	; 0x54
 801491a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801491c:	602f      	str	r7, [r5, #0]
 801491e:	2900      	cmp	r1, #0
 8014920:	d0c9      	beq.n	80148b6 <__sflush_r+0x1a>
 8014922:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014926:	4299      	cmp	r1, r3
 8014928:	d002      	beq.n	8014930 <__sflush_r+0x94>
 801492a:	4628      	mov	r0, r5
 801492c:	f7fe f8d8 	bl	8012ae0 <_free_r>
 8014930:	2000      	movs	r0, #0
 8014932:	6360      	str	r0, [r4, #52]	; 0x34
 8014934:	e7c0      	b.n	80148b8 <__sflush_r+0x1c>
 8014936:	2301      	movs	r3, #1
 8014938:	4628      	mov	r0, r5
 801493a:	47b0      	blx	r6
 801493c:	1c41      	adds	r1, r0, #1
 801493e:	d1c8      	bne.n	80148d2 <__sflush_r+0x36>
 8014940:	682b      	ldr	r3, [r5, #0]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d0c5      	beq.n	80148d2 <__sflush_r+0x36>
 8014946:	2b1d      	cmp	r3, #29
 8014948:	d001      	beq.n	801494e <__sflush_r+0xb2>
 801494a:	2b16      	cmp	r3, #22
 801494c:	d101      	bne.n	8014952 <__sflush_r+0xb6>
 801494e:	602f      	str	r7, [r5, #0]
 8014950:	e7b1      	b.n	80148b6 <__sflush_r+0x1a>
 8014952:	89a3      	ldrh	r3, [r4, #12]
 8014954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014958:	81a3      	strh	r3, [r4, #12]
 801495a:	e7ad      	b.n	80148b8 <__sflush_r+0x1c>
 801495c:	690f      	ldr	r7, [r1, #16]
 801495e:	2f00      	cmp	r7, #0
 8014960:	d0a9      	beq.n	80148b6 <__sflush_r+0x1a>
 8014962:	0793      	lsls	r3, r2, #30
 8014964:	680e      	ldr	r6, [r1, #0]
 8014966:	bf08      	it	eq
 8014968:	694b      	ldreq	r3, [r1, #20]
 801496a:	600f      	str	r7, [r1, #0]
 801496c:	bf18      	it	ne
 801496e:	2300      	movne	r3, #0
 8014970:	eba6 0807 	sub.w	r8, r6, r7
 8014974:	608b      	str	r3, [r1, #8]
 8014976:	f1b8 0f00 	cmp.w	r8, #0
 801497a:	dd9c      	ble.n	80148b6 <__sflush_r+0x1a>
 801497c:	6a21      	ldr	r1, [r4, #32]
 801497e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014980:	4643      	mov	r3, r8
 8014982:	463a      	mov	r2, r7
 8014984:	4628      	mov	r0, r5
 8014986:	47b0      	blx	r6
 8014988:	2800      	cmp	r0, #0
 801498a:	dc06      	bgt.n	801499a <__sflush_r+0xfe>
 801498c:	89a3      	ldrh	r3, [r4, #12]
 801498e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014992:	81a3      	strh	r3, [r4, #12]
 8014994:	f04f 30ff 	mov.w	r0, #4294967295
 8014998:	e78e      	b.n	80148b8 <__sflush_r+0x1c>
 801499a:	4407      	add	r7, r0
 801499c:	eba8 0800 	sub.w	r8, r8, r0
 80149a0:	e7e9      	b.n	8014976 <__sflush_r+0xda>
 80149a2:	bf00      	nop
 80149a4:	dfbffffe 	.word	0xdfbffffe

080149a8 <_fflush_r>:
 80149a8:	b538      	push	{r3, r4, r5, lr}
 80149aa:	690b      	ldr	r3, [r1, #16]
 80149ac:	4605      	mov	r5, r0
 80149ae:	460c      	mov	r4, r1
 80149b0:	b913      	cbnz	r3, 80149b8 <_fflush_r+0x10>
 80149b2:	2500      	movs	r5, #0
 80149b4:	4628      	mov	r0, r5
 80149b6:	bd38      	pop	{r3, r4, r5, pc}
 80149b8:	b118      	cbz	r0, 80149c2 <_fflush_r+0x1a>
 80149ba:	6a03      	ldr	r3, [r0, #32]
 80149bc:	b90b      	cbnz	r3, 80149c2 <_fflush_r+0x1a>
 80149be:	f7fc fedd 	bl	801177c <__sinit>
 80149c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d0f3      	beq.n	80149b2 <_fflush_r+0xa>
 80149ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80149cc:	07d0      	lsls	r0, r2, #31
 80149ce:	d404      	bmi.n	80149da <_fflush_r+0x32>
 80149d0:	0599      	lsls	r1, r3, #22
 80149d2:	d402      	bmi.n	80149da <_fflush_r+0x32>
 80149d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149d6:	f7fd fa4e 	bl	8011e76 <__retarget_lock_acquire_recursive>
 80149da:	4628      	mov	r0, r5
 80149dc:	4621      	mov	r1, r4
 80149de:	f7ff ff5d 	bl	801489c <__sflush_r>
 80149e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149e4:	07da      	lsls	r2, r3, #31
 80149e6:	4605      	mov	r5, r0
 80149e8:	d4e4      	bmi.n	80149b4 <_fflush_r+0xc>
 80149ea:	89a3      	ldrh	r3, [r4, #12]
 80149ec:	059b      	lsls	r3, r3, #22
 80149ee:	d4e1      	bmi.n	80149b4 <_fflush_r+0xc>
 80149f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149f2:	f7fd fa41 	bl	8011e78 <__retarget_lock_release_recursive>
 80149f6:	e7dd      	b.n	80149b4 <_fflush_r+0xc>

080149f8 <fiprintf>:
 80149f8:	b40e      	push	{r1, r2, r3}
 80149fa:	b503      	push	{r0, r1, lr}
 80149fc:	4601      	mov	r1, r0
 80149fe:	ab03      	add	r3, sp, #12
 8014a00:	4805      	ldr	r0, [pc, #20]	; (8014a18 <fiprintf+0x20>)
 8014a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a06:	6800      	ldr	r0, [r0, #0]
 8014a08:	9301      	str	r3, [sp, #4]
 8014a0a:	f7ff fcdf 	bl	80143cc <_vfiprintf_r>
 8014a0e:	b002      	add	sp, #8
 8014a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a14:	b003      	add	sp, #12
 8014a16:	4770      	bx	lr
 8014a18:	24000238 	.word	0x24000238

08014a1c <__swhatbuf_r>:
 8014a1c:	b570      	push	{r4, r5, r6, lr}
 8014a1e:	460c      	mov	r4, r1
 8014a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a24:	2900      	cmp	r1, #0
 8014a26:	b096      	sub	sp, #88	; 0x58
 8014a28:	4615      	mov	r5, r2
 8014a2a:	461e      	mov	r6, r3
 8014a2c:	da0d      	bge.n	8014a4a <__swhatbuf_r+0x2e>
 8014a2e:	89a3      	ldrh	r3, [r4, #12]
 8014a30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014a34:	f04f 0100 	mov.w	r1, #0
 8014a38:	bf0c      	ite	eq
 8014a3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014a3e:	2340      	movne	r3, #64	; 0x40
 8014a40:	2000      	movs	r0, #0
 8014a42:	6031      	str	r1, [r6, #0]
 8014a44:	602b      	str	r3, [r5, #0]
 8014a46:	b016      	add	sp, #88	; 0x58
 8014a48:	bd70      	pop	{r4, r5, r6, pc}
 8014a4a:	466a      	mov	r2, sp
 8014a4c:	f000 f90a 	bl	8014c64 <_fstat_r>
 8014a50:	2800      	cmp	r0, #0
 8014a52:	dbec      	blt.n	8014a2e <__swhatbuf_r+0x12>
 8014a54:	9901      	ldr	r1, [sp, #4]
 8014a56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014a5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014a5e:	4259      	negs	r1, r3
 8014a60:	4159      	adcs	r1, r3
 8014a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a66:	e7eb      	b.n	8014a40 <__swhatbuf_r+0x24>

08014a68 <__smakebuf_r>:
 8014a68:	898b      	ldrh	r3, [r1, #12]
 8014a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a6c:	079d      	lsls	r5, r3, #30
 8014a6e:	4606      	mov	r6, r0
 8014a70:	460c      	mov	r4, r1
 8014a72:	d507      	bpl.n	8014a84 <__smakebuf_r+0x1c>
 8014a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a78:	6023      	str	r3, [r4, #0]
 8014a7a:	6123      	str	r3, [r4, #16]
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	6163      	str	r3, [r4, #20]
 8014a80:	b002      	add	sp, #8
 8014a82:	bd70      	pop	{r4, r5, r6, pc}
 8014a84:	ab01      	add	r3, sp, #4
 8014a86:	466a      	mov	r2, sp
 8014a88:	f7ff ffc8 	bl	8014a1c <__swhatbuf_r>
 8014a8c:	9900      	ldr	r1, [sp, #0]
 8014a8e:	4605      	mov	r5, r0
 8014a90:	4630      	mov	r0, r6
 8014a92:	f7fe fbf1 	bl	8013278 <_malloc_r>
 8014a96:	b948      	cbnz	r0, 8014aac <__smakebuf_r+0x44>
 8014a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a9c:	059a      	lsls	r2, r3, #22
 8014a9e:	d4ef      	bmi.n	8014a80 <__smakebuf_r+0x18>
 8014aa0:	f023 0303 	bic.w	r3, r3, #3
 8014aa4:	f043 0302 	orr.w	r3, r3, #2
 8014aa8:	81a3      	strh	r3, [r4, #12]
 8014aaa:	e7e3      	b.n	8014a74 <__smakebuf_r+0xc>
 8014aac:	89a3      	ldrh	r3, [r4, #12]
 8014aae:	6020      	str	r0, [r4, #0]
 8014ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ab4:	81a3      	strh	r3, [r4, #12]
 8014ab6:	9b00      	ldr	r3, [sp, #0]
 8014ab8:	6163      	str	r3, [r4, #20]
 8014aba:	9b01      	ldr	r3, [sp, #4]
 8014abc:	6120      	str	r0, [r4, #16]
 8014abe:	b15b      	cbz	r3, 8014ad8 <__smakebuf_r+0x70>
 8014ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	f000 f8df 	bl	8014c88 <_isatty_r>
 8014aca:	b128      	cbz	r0, 8014ad8 <__smakebuf_r+0x70>
 8014acc:	89a3      	ldrh	r3, [r4, #12]
 8014ace:	f023 0303 	bic.w	r3, r3, #3
 8014ad2:	f043 0301 	orr.w	r3, r3, #1
 8014ad6:	81a3      	strh	r3, [r4, #12]
 8014ad8:	89a3      	ldrh	r3, [r4, #12]
 8014ada:	431d      	orrs	r5, r3
 8014adc:	81a5      	strh	r5, [r4, #12]
 8014ade:	e7cf      	b.n	8014a80 <__smakebuf_r+0x18>

08014ae0 <_putc_r>:
 8014ae0:	b570      	push	{r4, r5, r6, lr}
 8014ae2:	460d      	mov	r5, r1
 8014ae4:	4614      	mov	r4, r2
 8014ae6:	4606      	mov	r6, r0
 8014ae8:	b118      	cbz	r0, 8014af2 <_putc_r+0x12>
 8014aea:	6a03      	ldr	r3, [r0, #32]
 8014aec:	b90b      	cbnz	r3, 8014af2 <_putc_r+0x12>
 8014aee:	f7fc fe45 	bl	801177c <__sinit>
 8014af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014af4:	07d8      	lsls	r0, r3, #31
 8014af6:	d405      	bmi.n	8014b04 <_putc_r+0x24>
 8014af8:	89a3      	ldrh	r3, [r4, #12]
 8014afa:	0599      	lsls	r1, r3, #22
 8014afc:	d402      	bmi.n	8014b04 <_putc_r+0x24>
 8014afe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b00:	f7fd f9b9 	bl	8011e76 <__retarget_lock_acquire_recursive>
 8014b04:	68a3      	ldr	r3, [r4, #8]
 8014b06:	3b01      	subs	r3, #1
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	60a3      	str	r3, [r4, #8]
 8014b0c:	da05      	bge.n	8014b1a <_putc_r+0x3a>
 8014b0e:	69a2      	ldr	r2, [r4, #24]
 8014b10:	4293      	cmp	r3, r2
 8014b12:	db12      	blt.n	8014b3a <_putc_r+0x5a>
 8014b14:	b2eb      	uxtb	r3, r5
 8014b16:	2b0a      	cmp	r3, #10
 8014b18:	d00f      	beq.n	8014b3a <_putc_r+0x5a>
 8014b1a:	6823      	ldr	r3, [r4, #0]
 8014b1c:	1c5a      	adds	r2, r3, #1
 8014b1e:	6022      	str	r2, [r4, #0]
 8014b20:	701d      	strb	r5, [r3, #0]
 8014b22:	b2ed      	uxtb	r5, r5
 8014b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b26:	07da      	lsls	r2, r3, #31
 8014b28:	d405      	bmi.n	8014b36 <_putc_r+0x56>
 8014b2a:	89a3      	ldrh	r3, [r4, #12]
 8014b2c:	059b      	lsls	r3, r3, #22
 8014b2e:	d402      	bmi.n	8014b36 <_putc_r+0x56>
 8014b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b32:	f7fd f9a1 	bl	8011e78 <__retarget_lock_release_recursive>
 8014b36:	4628      	mov	r0, r5
 8014b38:	bd70      	pop	{r4, r5, r6, pc}
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	4622      	mov	r2, r4
 8014b3e:	4630      	mov	r0, r6
 8014b40:	f7fc ff8d 	bl	8011a5e <__swbuf_r>
 8014b44:	4605      	mov	r5, r0
 8014b46:	e7ed      	b.n	8014b24 <_putc_r+0x44>

08014b48 <__sccl>:
 8014b48:	b570      	push	{r4, r5, r6, lr}
 8014b4a:	780b      	ldrb	r3, [r1, #0]
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	2b5e      	cmp	r3, #94	; 0x5e
 8014b50:	bf0b      	itete	eq
 8014b52:	784b      	ldrbeq	r3, [r1, #1]
 8014b54:	1c4a      	addne	r2, r1, #1
 8014b56:	1c8a      	addeq	r2, r1, #2
 8014b58:	2100      	movne	r1, #0
 8014b5a:	bf08      	it	eq
 8014b5c:	2101      	moveq	r1, #1
 8014b5e:	3801      	subs	r0, #1
 8014b60:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014b64:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014b68:	42a8      	cmp	r0, r5
 8014b6a:	d1fb      	bne.n	8014b64 <__sccl+0x1c>
 8014b6c:	b90b      	cbnz	r3, 8014b72 <__sccl+0x2a>
 8014b6e:	1e50      	subs	r0, r2, #1
 8014b70:	bd70      	pop	{r4, r5, r6, pc}
 8014b72:	f081 0101 	eor.w	r1, r1, #1
 8014b76:	54e1      	strb	r1, [r4, r3]
 8014b78:	4610      	mov	r0, r2
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014b80:	2d2d      	cmp	r5, #45	; 0x2d
 8014b82:	d005      	beq.n	8014b90 <__sccl+0x48>
 8014b84:	2d5d      	cmp	r5, #93	; 0x5d
 8014b86:	d016      	beq.n	8014bb6 <__sccl+0x6e>
 8014b88:	2d00      	cmp	r5, #0
 8014b8a:	d0f1      	beq.n	8014b70 <__sccl+0x28>
 8014b8c:	462b      	mov	r3, r5
 8014b8e:	e7f2      	b.n	8014b76 <__sccl+0x2e>
 8014b90:	7846      	ldrb	r6, [r0, #1]
 8014b92:	2e5d      	cmp	r6, #93	; 0x5d
 8014b94:	d0fa      	beq.n	8014b8c <__sccl+0x44>
 8014b96:	42b3      	cmp	r3, r6
 8014b98:	dcf8      	bgt.n	8014b8c <__sccl+0x44>
 8014b9a:	3002      	adds	r0, #2
 8014b9c:	461a      	mov	r2, r3
 8014b9e:	3201      	adds	r2, #1
 8014ba0:	4296      	cmp	r6, r2
 8014ba2:	54a1      	strb	r1, [r4, r2]
 8014ba4:	dcfb      	bgt.n	8014b9e <__sccl+0x56>
 8014ba6:	1af2      	subs	r2, r6, r3
 8014ba8:	3a01      	subs	r2, #1
 8014baa:	1c5d      	adds	r5, r3, #1
 8014bac:	42b3      	cmp	r3, r6
 8014bae:	bfa8      	it	ge
 8014bb0:	2200      	movge	r2, #0
 8014bb2:	18ab      	adds	r3, r5, r2
 8014bb4:	e7e1      	b.n	8014b7a <__sccl+0x32>
 8014bb6:	4610      	mov	r0, r2
 8014bb8:	e7da      	b.n	8014b70 <__sccl+0x28>

08014bba <__submore>:
 8014bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bbe:	460c      	mov	r4, r1
 8014bc0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014bc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bc6:	4299      	cmp	r1, r3
 8014bc8:	d11d      	bne.n	8014c06 <__submore+0x4c>
 8014bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014bce:	f7fe fb53 	bl	8013278 <_malloc_r>
 8014bd2:	b918      	cbnz	r0, 8014bdc <__submore+0x22>
 8014bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014be0:	63a3      	str	r3, [r4, #56]	; 0x38
 8014be2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014be6:	6360      	str	r0, [r4, #52]	; 0x34
 8014be8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014bec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014bf0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014bf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014bf8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014bfc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014c00:	6020      	str	r0, [r4, #0]
 8014c02:	2000      	movs	r0, #0
 8014c04:	e7e8      	b.n	8014bd8 <__submore+0x1e>
 8014c06:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014c08:	0077      	lsls	r7, r6, #1
 8014c0a:	463a      	mov	r2, r7
 8014c0c:	f000 f879 	bl	8014d02 <_realloc_r>
 8014c10:	4605      	mov	r5, r0
 8014c12:	2800      	cmp	r0, #0
 8014c14:	d0de      	beq.n	8014bd4 <__submore+0x1a>
 8014c16:	eb00 0806 	add.w	r8, r0, r6
 8014c1a:	4601      	mov	r1, r0
 8014c1c:	4632      	mov	r2, r6
 8014c1e:	4640      	mov	r0, r8
 8014c20:	f7fd f933 	bl	8011e8a <memcpy>
 8014c24:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014c28:	f8c4 8000 	str.w	r8, [r4]
 8014c2c:	e7e9      	b.n	8014c02 <__submore+0x48>

08014c2e <memmove>:
 8014c2e:	4288      	cmp	r0, r1
 8014c30:	b510      	push	{r4, lr}
 8014c32:	eb01 0402 	add.w	r4, r1, r2
 8014c36:	d902      	bls.n	8014c3e <memmove+0x10>
 8014c38:	4284      	cmp	r4, r0
 8014c3a:	4623      	mov	r3, r4
 8014c3c:	d807      	bhi.n	8014c4e <memmove+0x20>
 8014c3e:	1e43      	subs	r3, r0, #1
 8014c40:	42a1      	cmp	r1, r4
 8014c42:	d008      	beq.n	8014c56 <memmove+0x28>
 8014c44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c4c:	e7f8      	b.n	8014c40 <memmove+0x12>
 8014c4e:	4402      	add	r2, r0
 8014c50:	4601      	mov	r1, r0
 8014c52:	428a      	cmp	r2, r1
 8014c54:	d100      	bne.n	8014c58 <memmove+0x2a>
 8014c56:	bd10      	pop	{r4, pc}
 8014c58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014c60:	e7f7      	b.n	8014c52 <memmove+0x24>
	...

08014c64 <_fstat_r>:
 8014c64:	b538      	push	{r3, r4, r5, lr}
 8014c66:	4d07      	ldr	r5, [pc, #28]	; (8014c84 <_fstat_r+0x20>)
 8014c68:	2300      	movs	r3, #0
 8014c6a:	4604      	mov	r4, r0
 8014c6c:	4608      	mov	r0, r1
 8014c6e:	4611      	mov	r1, r2
 8014c70:	602b      	str	r3, [r5, #0]
 8014c72:	f7f1 fb5f 	bl	8006334 <_fstat>
 8014c76:	1c43      	adds	r3, r0, #1
 8014c78:	d102      	bne.n	8014c80 <_fstat_r+0x1c>
 8014c7a:	682b      	ldr	r3, [r5, #0]
 8014c7c:	b103      	cbz	r3, 8014c80 <_fstat_r+0x1c>
 8014c7e:	6023      	str	r3, [r4, #0]
 8014c80:	bd38      	pop	{r3, r4, r5, pc}
 8014c82:	bf00      	nop
 8014c84:	2404542c 	.word	0x2404542c

08014c88 <_isatty_r>:
 8014c88:	b538      	push	{r3, r4, r5, lr}
 8014c8a:	4d06      	ldr	r5, [pc, #24]	; (8014ca4 <_isatty_r+0x1c>)
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	4604      	mov	r4, r0
 8014c90:	4608      	mov	r0, r1
 8014c92:	602b      	str	r3, [r5, #0]
 8014c94:	f7f1 fb53 	bl	800633e <_isatty>
 8014c98:	1c43      	adds	r3, r0, #1
 8014c9a:	d102      	bne.n	8014ca2 <_isatty_r+0x1a>
 8014c9c:	682b      	ldr	r3, [r5, #0]
 8014c9e:	b103      	cbz	r3, 8014ca2 <_isatty_r+0x1a>
 8014ca0:	6023      	str	r3, [r4, #0]
 8014ca2:	bd38      	pop	{r3, r4, r5, pc}
 8014ca4:	2404542c 	.word	0x2404542c

08014ca8 <_sbrk_r>:
 8014ca8:	b538      	push	{r3, r4, r5, lr}
 8014caa:	4d06      	ldr	r5, [pc, #24]	; (8014cc4 <_sbrk_r+0x1c>)
 8014cac:	2300      	movs	r3, #0
 8014cae:	4604      	mov	r4, r0
 8014cb0:	4608      	mov	r0, r1
 8014cb2:	602b      	str	r3, [r5, #0]
 8014cb4:	f7f1 fb48 	bl	8006348 <_sbrk>
 8014cb8:	1c43      	adds	r3, r0, #1
 8014cba:	d102      	bne.n	8014cc2 <_sbrk_r+0x1a>
 8014cbc:	682b      	ldr	r3, [r5, #0]
 8014cbe:	b103      	cbz	r3, 8014cc2 <_sbrk_r+0x1a>
 8014cc0:	6023      	str	r3, [r4, #0]
 8014cc2:	bd38      	pop	{r3, r4, r5, pc}
 8014cc4:	2404542c 	.word	0x2404542c

08014cc8 <abort>:
 8014cc8:	b508      	push	{r3, lr}
 8014cca:	2006      	movs	r0, #6
 8014ccc:	f000 f8e4 	bl	8014e98 <raise>
 8014cd0:	2001      	movs	r0, #1
 8014cd2:	f7f1 fb0b 	bl	80062ec <_exit>

08014cd6 <_calloc_r>:
 8014cd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014cd8:	fba1 2402 	umull	r2, r4, r1, r2
 8014cdc:	b94c      	cbnz	r4, 8014cf2 <_calloc_r+0x1c>
 8014cde:	4611      	mov	r1, r2
 8014ce0:	9201      	str	r2, [sp, #4]
 8014ce2:	f7fe fac9 	bl	8013278 <_malloc_r>
 8014ce6:	9a01      	ldr	r2, [sp, #4]
 8014ce8:	4605      	mov	r5, r0
 8014cea:	b930      	cbnz	r0, 8014cfa <_calloc_r+0x24>
 8014cec:	4628      	mov	r0, r5
 8014cee:	b003      	add	sp, #12
 8014cf0:	bd30      	pop	{r4, r5, pc}
 8014cf2:	220c      	movs	r2, #12
 8014cf4:	6002      	str	r2, [r0, #0]
 8014cf6:	2500      	movs	r5, #0
 8014cf8:	e7f8      	b.n	8014cec <_calloc_r+0x16>
 8014cfa:	4621      	mov	r1, r4
 8014cfc:	f7fc ff44 	bl	8011b88 <memset>
 8014d00:	e7f4      	b.n	8014cec <_calloc_r+0x16>

08014d02 <_realloc_r>:
 8014d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d06:	4680      	mov	r8, r0
 8014d08:	4614      	mov	r4, r2
 8014d0a:	460e      	mov	r6, r1
 8014d0c:	b921      	cbnz	r1, 8014d18 <_realloc_r+0x16>
 8014d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d12:	4611      	mov	r1, r2
 8014d14:	f7fe bab0 	b.w	8013278 <_malloc_r>
 8014d18:	b92a      	cbnz	r2, 8014d26 <_realloc_r+0x24>
 8014d1a:	f7fd fee1 	bl	8012ae0 <_free_r>
 8014d1e:	4625      	mov	r5, r4
 8014d20:	4628      	mov	r0, r5
 8014d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d26:	f000 f8d3 	bl	8014ed0 <_malloc_usable_size_r>
 8014d2a:	4284      	cmp	r4, r0
 8014d2c:	4607      	mov	r7, r0
 8014d2e:	d802      	bhi.n	8014d36 <_realloc_r+0x34>
 8014d30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014d34:	d812      	bhi.n	8014d5c <_realloc_r+0x5a>
 8014d36:	4621      	mov	r1, r4
 8014d38:	4640      	mov	r0, r8
 8014d3a:	f7fe fa9d 	bl	8013278 <_malloc_r>
 8014d3e:	4605      	mov	r5, r0
 8014d40:	2800      	cmp	r0, #0
 8014d42:	d0ed      	beq.n	8014d20 <_realloc_r+0x1e>
 8014d44:	42bc      	cmp	r4, r7
 8014d46:	4622      	mov	r2, r4
 8014d48:	4631      	mov	r1, r6
 8014d4a:	bf28      	it	cs
 8014d4c:	463a      	movcs	r2, r7
 8014d4e:	f7fd f89c 	bl	8011e8a <memcpy>
 8014d52:	4631      	mov	r1, r6
 8014d54:	4640      	mov	r0, r8
 8014d56:	f7fd fec3 	bl	8012ae0 <_free_r>
 8014d5a:	e7e1      	b.n	8014d20 <_realloc_r+0x1e>
 8014d5c:	4635      	mov	r5, r6
 8014d5e:	e7df      	b.n	8014d20 <_realloc_r+0x1e>

08014d60 <_strtoul_l.constprop.0>:
 8014d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d64:	4f36      	ldr	r7, [pc, #216]	; (8014e40 <_strtoul_l.constprop.0+0xe0>)
 8014d66:	4686      	mov	lr, r0
 8014d68:	460d      	mov	r5, r1
 8014d6a:	4628      	mov	r0, r5
 8014d6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d70:	5d3e      	ldrb	r6, [r7, r4]
 8014d72:	f016 0608 	ands.w	r6, r6, #8
 8014d76:	d1f8      	bne.n	8014d6a <_strtoul_l.constprop.0+0xa>
 8014d78:	2c2d      	cmp	r4, #45	; 0x2d
 8014d7a:	d130      	bne.n	8014dde <_strtoul_l.constprop.0+0x7e>
 8014d7c:	782c      	ldrb	r4, [r5, #0]
 8014d7e:	2601      	movs	r6, #1
 8014d80:	1c85      	adds	r5, r0, #2
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d057      	beq.n	8014e36 <_strtoul_l.constprop.0+0xd6>
 8014d86:	2b10      	cmp	r3, #16
 8014d88:	d109      	bne.n	8014d9e <_strtoul_l.constprop.0+0x3e>
 8014d8a:	2c30      	cmp	r4, #48	; 0x30
 8014d8c:	d107      	bne.n	8014d9e <_strtoul_l.constprop.0+0x3e>
 8014d8e:	7828      	ldrb	r0, [r5, #0]
 8014d90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014d94:	2858      	cmp	r0, #88	; 0x58
 8014d96:	d149      	bne.n	8014e2c <_strtoul_l.constprop.0+0xcc>
 8014d98:	786c      	ldrb	r4, [r5, #1]
 8014d9a:	2310      	movs	r3, #16
 8014d9c:	3502      	adds	r5, #2
 8014d9e:	f04f 38ff 	mov.w	r8, #4294967295
 8014da2:	2700      	movs	r7, #0
 8014da4:	fbb8 f8f3 	udiv	r8, r8, r3
 8014da8:	fb03 f908 	mul.w	r9, r3, r8
 8014dac:	ea6f 0909 	mvn.w	r9, r9
 8014db0:	4638      	mov	r0, r7
 8014db2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014db6:	f1bc 0f09 	cmp.w	ip, #9
 8014dba:	d815      	bhi.n	8014de8 <_strtoul_l.constprop.0+0x88>
 8014dbc:	4664      	mov	r4, ip
 8014dbe:	42a3      	cmp	r3, r4
 8014dc0:	dd23      	ble.n	8014e0a <_strtoul_l.constprop.0+0xaa>
 8014dc2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8014dc6:	d007      	beq.n	8014dd8 <_strtoul_l.constprop.0+0x78>
 8014dc8:	4580      	cmp	r8, r0
 8014dca:	d31b      	bcc.n	8014e04 <_strtoul_l.constprop.0+0xa4>
 8014dcc:	d101      	bne.n	8014dd2 <_strtoul_l.constprop.0+0x72>
 8014dce:	45a1      	cmp	r9, r4
 8014dd0:	db18      	blt.n	8014e04 <_strtoul_l.constprop.0+0xa4>
 8014dd2:	fb00 4003 	mla	r0, r0, r3, r4
 8014dd6:	2701      	movs	r7, #1
 8014dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ddc:	e7e9      	b.n	8014db2 <_strtoul_l.constprop.0+0x52>
 8014dde:	2c2b      	cmp	r4, #43	; 0x2b
 8014de0:	bf04      	itt	eq
 8014de2:	782c      	ldrbeq	r4, [r5, #0]
 8014de4:	1c85      	addeq	r5, r0, #2
 8014de6:	e7cc      	b.n	8014d82 <_strtoul_l.constprop.0+0x22>
 8014de8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014dec:	f1bc 0f19 	cmp.w	ip, #25
 8014df0:	d801      	bhi.n	8014df6 <_strtoul_l.constprop.0+0x96>
 8014df2:	3c37      	subs	r4, #55	; 0x37
 8014df4:	e7e3      	b.n	8014dbe <_strtoul_l.constprop.0+0x5e>
 8014df6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014dfa:	f1bc 0f19 	cmp.w	ip, #25
 8014dfe:	d804      	bhi.n	8014e0a <_strtoul_l.constprop.0+0xaa>
 8014e00:	3c57      	subs	r4, #87	; 0x57
 8014e02:	e7dc      	b.n	8014dbe <_strtoul_l.constprop.0+0x5e>
 8014e04:	f04f 37ff 	mov.w	r7, #4294967295
 8014e08:	e7e6      	b.n	8014dd8 <_strtoul_l.constprop.0+0x78>
 8014e0a:	1c7b      	adds	r3, r7, #1
 8014e0c:	d106      	bne.n	8014e1c <_strtoul_l.constprop.0+0xbc>
 8014e0e:	2322      	movs	r3, #34	; 0x22
 8014e10:	f8ce 3000 	str.w	r3, [lr]
 8014e14:	4638      	mov	r0, r7
 8014e16:	b932      	cbnz	r2, 8014e26 <_strtoul_l.constprop.0+0xc6>
 8014e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e1c:	b106      	cbz	r6, 8014e20 <_strtoul_l.constprop.0+0xc0>
 8014e1e:	4240      	negs	r0, r0
 8014e20:	2a00      	cmp	r2, #0
 8014e22:	d0f9      	beq.n	8014e18 <_strtoul_l.constprop.0+0xb8>
 8014e24:	b107      	cbz	r7, 8014e28 <_strtoul_l.constprop.0+0xc8>
 8014e26:	1e69      	subs	r1, r5, #1
 8014e28:	6011      	str	r1, [r2, #0]
 8014e2a:	e7f5      	b.n	8014e18 <_strtoul_l.constprop.0+0xb8>
 8014e2c:	2430      	movs	r4, #48	; 0x30
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d1b5      	bne.n	8014d9e <_strtoul_l.constprop.0+0x3e>
 8014e32:	2308      	movs	r3, #8
 8014e34:	e7b3      	b.n	8014d9e <_strtoul_l.constprop.0+0x3e>
 8014e36:	2c30      	cmp	r4, #48	; 0x30
 8014e38:	d0a9      	beq.n	8014d8e <_strtoul_l.constprop.0+0x2e>
 8014e3a:	230a      	movs	r3, #10
 8014e3c:	e7af      	b.n	8014d9e <_strtoul_l.constprop.0+0x3e>
 8014e3e:	bf00      	nop
 8014e40:	08015e39 	.word	0x08015e39

08014e44 <_strtoul_r>:
 8014e44:	f7ff bf8c 	b.w	8014d60 <_strtoul_l.constprop.0>

08014e48 <_raise_r>:
 8014e48:	291f      	cmp	r1, #31
 8014e4a:	b538      	push	{r3, r4, r5, lr}
 8014e4c:	4604      	mov	r4, r0
 8014e4e:	460d      	mov	r5, r1
 8014e50:	d904      	bls.n	8014e5c <_raise_r+0x14>
 8014e52:	2316      	movs	r3, #22
 8014e54:	6003      	str	r3, [r0, #0]
 8014e56:	f04f 30ff 	mov.w	r0, #4294967295
 8014e5a:	bd38      	pop	{r3, r4, r5, pc}
 8014e5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014e5e:	b112      	cbz	r2, 8014e66 <_raise_r+0x1e>
 8014e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e64:	b94b      	cbnz	r3, 8014e7a <_raise_r+0x32>
 8014e66:	4620      	mov	r0, r4
 8014e68:	f000 f830 	bl	8014ecc <_getpid_r>
 8014e6c:	462a      	mov	r2, r5
 8014e6e:	4601      	mov	r1, r0
 8014e70:	4620      	mov	r0, r4
 8014e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e76:	f000 b817 	b.w	8014ea8 <_kill_r>
 8014e7a:	2b01      	cmp	r3, #1
 8014e7c:	d00a      	beq.n	8014e94 <_raise_r+0x4c>
 8014e7e:	1c59      	adds	r1, r3, #1
 8014e80:	d103      	bne.n	8014e8a <_raise_r+0x42>
 8014e82:	2316      	movs	r3, #22
 8014e84:	6003      	str	r3, [r0, #0]
 8014e86:	2001      	movs	r0, #1
 8014e88:	e7e7      	b.n	8014e5a <_raise_r+0x12>
 8014e8a:	2400      	movs	r4, #0
 8014e8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014e90:	4628      	mov	r0, r5
 8014e92:	4798      	blx	r3
 8014e94:	2000      	movs	r0, #0
 8014e96:	e7e0      	b.n	8014e5a <_raise_r+0x12>

08014e98 <raise>:
 8014e98:	4b02      	ldr	r3, [pc, #8]	; (8014ea4 <raise+0xc>)
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	6818      	ldr	r0, [r3, #0]
 8014e9e:	f7ff bfd3 	b.w	8014e48 <_raise_r>
 8014ea2:	bf00      	nop
 8014ea4:	24000238 	.word	0x24000238

08014ea8 <_kill_r>:
 8014ea8:	b538      	push	{r3, r4, r5, lr}
 8014eaa:	4d07      	ldr	r5, [pc, #28]	; (8014ec8 <_kill_r+0x20>)
 8014eac:	2300      	movs	r3, #0
 8014eae:	4604      	mov	r4, r0
 8014eb0:	4608      	mov	r0, r1
 8014eb2:	4611      	mov	r1, r2
 8014eb4:	602b      	str	r3, [r5, #0]
 8014eb6:	f7f1 fa11 	bl	80062dc <_kill>
 8014eba:	1c43      	adds	r3, r0, #1
 8014ebc:	d102      	bne.n	8014ec4 <_kill_r+0x1c>
 8014ebe:	682b      	ldr	r3, [r5, #0]
 8014ec0:	b103      	cbz	r3, 8014ec4 <_kill_r+0x1c>
 8014ec2:	6023      	str	r3, [r4, #0]
 8014ec4:	bd38      	pop	{r3, r4, r5, pc}
 8014ec6:	bf00      	nop
 8014ec8:	2404542c 	.word	0x2404542c

08014ecc <_getpid_r>:
 8014ecc:	f7f1 ba04 	b.w	80062d8 <_getpid>

08014ed0 <_malloc_usable_size_r>:
 8014ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ed4:	1f18      	subs	r0, r3, #4
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	bfbc      	itt	lt
 8014eda:	580b      	ldrlt	r3, [r1, r0]
 8014edc:	18c0      	addlt	r0, r0, r3
 8014ede:	4770      	bx	lr

08014ee0 <_init>:
 8014ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ee2:	bf00      	nop
 8014ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ee6:	bc08      	pop	{r3}
 8014ee8:	469e      	mov	lr, r3
 8014eea:	4770      	bx	lr

08014eec <_fini>:
 8014eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eee:	bf00      	nop
 8014ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ef2:	bc08      	pop	{r3}
 8014ef4:	469e      	mov	lr, r3
 8014ef6:	4770      	bx	lr
